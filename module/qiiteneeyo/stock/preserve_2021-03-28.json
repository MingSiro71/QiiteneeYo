[{"url":"https://qiita.com/megukentarou/items/4709945e6e02bd4c097d","title":"AWSの構成図を作りながら主要な機能を学ぼう！その4","body":"#自己紹介\n現在AWS SAA合格を目標に学習中の駆け出しエンジニアです。\n2021年3月にAWS CLFに合格しました。\n次のステップとしてSAAの学習を始めましたが、ハンズオンでAWSに触れながら学習する事と並行して、構成図を作成して自分にも他の人にも解りやすく説明できるレベルになる事を目指していきます。\n\n前回の記事を見られる方はこちらをどうぞ\n[その３パブリックサブネットに必要な条件についてへ](https://qiita.com/megukentarou/items/29ed8318a7c09cd0d4ff)\n\n##記事の読み方\n学習中の内容に沿っていくので、具体的なアプリ（ポートフォリオなど）のデプロイ手順とは少し異なる内容になると思います。AWSの仕組みをもっとよく知りたい人や、自分でネットワーク設計を行っていきたい人向けの内容になるかと思います。\nもちろん私の様にSAA合格へ頑張る人に役立てれば最高です。\nまた構成図を見て各サービスの関係性を理解する事を重視してますので、実際のハンズオンの手順と異なる点があると思います。その点はご容赦ください。\n\n##その４EC2について・・・の前に少しおさらい\n今回はAWSサービスのメインともいえるEC2インスタンスについて一緒に考えていこうと思います。\n\n前回の時点での構成図\n![スクリーンショット 2021-03-28 213643.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/81626298-a199-b9dc-8107-aa1e54bee3a7.png)\n\nVPCを作って、対象のAZにパブリックサブネットとプライベートサブネットを作りました。\nVPCにインターネットゲートウェイをアタッチして、パブリックサブネットのルートテーブルでインターネットゲートウェイをルーティングすることで、インターネットと自身のVPCに通信が出来る道筋を作ったイメージですね。\n\n更に通信の際にはサブネットにネットワークACLを作成する事で、不審な通信をフィルタリング出来るようになりました。\n\n今回はまずこの続きから進めていきます。\n\n##プライベートサブネットと通信するには\nパブリックサブネットとインターネットゲートウェイ繋ぐイメージは持てましたが、残りのプライベートサブネットはどうなったのでしょうか。\n今回も懲りずにコンビニで例えて進めていこうと思います。\n\nプライベートサブネットはコンビニで言う所の「スタッフ専用スペース」です。ここに出入りする為にAWS上でどの様な物が必要なのかを一緒に覚えていきます。\n\n##NATゲートウェイ\n![スクリーンショット 2021-03-28 214931.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/2521241b-8637-c794-f036-3ae3864c7874.png)\n\nNATゲートウェイと言う**コンポーネント（部品）**をアタッチする事でプライベートサブネットへの通信が可能になります。\nそしてこのNATゲートウェイはアウトバウンド（通信を発信する）事は可能で、インバウンド（通信を受信する）事は出来ない特徴を持ちます。\nコンビニで言うならバックヤードの商品を陳列する（売りに出す）事は可能といった所でしょうか。\n\nそしてNATゲートウェイは**パブリックサブネットに設置する**んです。間違えやすいので注意しましょう。\n\n上手く説明できませんが、インターネットゲートウェイとパブリックサブネットは通信可能な状態になっているので、そのパブリックサブネットに設置する事で、プライベートサブネットに接続が可能になります。\n\nパブリックサブネットが通信の仲介を担っている様なイメージでしょうか。\n\nそして次にプライベートサブネット内のルートテーブルとNATゲートウェイをルーティングする必要があります。\n\nこれは前回のインターネットゲートウェイとパブリックサブネットの関係に似ているので解りやすいかなと思います。\n\n| 送信先 | ターゲット | \n|:-----------|------------:|\n| 0.0.0.0/0  | NAT Gateway |\n\n以上の結果、構成図はこんな感じになります。\n![スクリーンショット 2021-03-28 220902.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/d47ca9f0-e3d8-eb45-0141-2bf7667fc63f.png)\n\n\n##EC2とは\n![スクリーンショット 2021-03-28 221029.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/7ace1722-c9da-9f6f-83da-9f7b421acbbe.png)\nAWSのサービスの中核とも言えるEC2(Elastic Compute Cloud)を次は構成図に加えていきます。\nEC2についてはここではざっくり「AWS上で使える仮想のコンピュータ（サーバー）」と思ってください。\nコンビニで言うとレジやコピー機やATMなどでOKです。スタッフしか使わない機器などもサーバーです。\nサーバーはお客さんやスタッフの様々なニーズに応えてくれていると思います。\nそう言ったサービスを提供する側（物）をサーバーと言います。\n\nこれを構成図に加えるとこんな感じになります。\n![スクリーンショット 2021-03-28 222223.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/43231aa8-b18b-e6b4-627d-15dcacb15b47.png)\n\nここで線が加えられました。\nこれはインターネットゲートウェイを通じてどの様な流れで通信が行われるかを表したものです。\n\nパブリックサブネット（お客さんが行き来しても良いスペース）とプライベートサブネット（スタッフ専用スペース）の区分けも少しイメージ出来た様な気がします。\n\n今回はもう１つだけ一緒に覚えていきたい物があります。\n\n##セキュリティグループ\n![スクリーンショット 2021-03-28 222855.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/ac1d7796-b6e4-cf72-11c9-5140df06a71f.png)\n\n**セキュリティグループ**とはAWSの仮想ファイアウォールの事です。\nどんな通信をOKにするかなどをルールを決めて、これをEC2に適用します。サブネットではないので注意してください。\n**ネットワークACLはサブネット単位設定**\n**セキュリティグループはEC2単位設定**\n※セキュリティグループは正確にはENIに設定しますが、最初のうちはEC2だとイメージしてもらって関係性をつかむ事を重視します。\n\nそしてこのセキュリティグループは**ステートフル**です。\n\nステートフルはざっくり言うと、一度記憶した情報を保持しておくという意味です。\n\nコンビニでお客さんやスタッフの顔や名前を憶えるといった感じでしょうか。\n\nそしてこのステートフルの特徴として、一度許可した通信は2回目以降はチェックしなくなります。\n\n前回の際にネットワークACLは**ステートレス**だと言う話をしました。\n\nステートレスの場合は保持しないので、毎回チェックを入れます。\n\n最後にセキュリティグループとネットワークACLの違いと構成図を確認して終わりたいと思います。\n\n##構成図\n![スクリーンショット 2021-03-28 224441.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/629627/784a1ee4-8608-881f-6d5e-03b30915e494.png)\n\n\n###ネットワークACLとセキュリティグループの違い\n\n\n\n| ネットワークACL | セキュリティグループ | \n|-----------|------------|\n| ステートレス | ステートフル |\n| サブネットに適用 | EC2（ENI）に適用 |\n\nここまで読んでくださり有り難う御座いました。\n\n次回はさらに構成図を広げていくか、ここまで紹介したサービスのもう少し細かい内容にふれていくか、どちらかで予定してます。。\n\nAWSの構成図を作りながら主要な機能を学ぼう！その５へ（作成中）\n\n","user":"megukentarou","created_at":"2021-03-28T22:48:17+09:00","updated_at":"2021-03-28T22:48:17+09:00"},{"url":"https://qiita.com/ji-miya/items/6bac7f06fa17ff43cbe3","title":"Javaの開発環境　　~JDK(Java Development Kit)~","body":"#Java Development Kitとは？\n日本語でjava開発キットと呼ばれています。Javaの開発に必要な各種ツールが入ったアプリケーションです。このJDKにはJavaコンパイラとJava仮想マシンが入っています。\n\n-Javaコンパイラ  :Java用のファイルにプログラムを変換する。\n-Java仮想マシン :Java用のファイルを読み取り実行する。\n\n#Javaにおけるプログラミングとは？\n\nプログラムというのは一般的に、まず、人間語で元ネタ（ソースコード）を作ります。\n人間語で書かれたプログラムの元ネタファイルは「ソースファイル」です。\n#↓\n\n次にコンパイル(編集)という作業を通して、コンピュータが分かる形に変換します。\n#↓\nこれでコンピュータさんは、プログラムの内容を理解できるようになりました。\nあとは実際に動かします。\n#↓\nいろいろと端折りましたが、これが、プログラムができるまでの流れです。\n\nプログラムを作るときには、コンパイルしてくれるやつ（コンパイラ）が必要です。\n他にも、必要なものや、あると便利なものが、あれやこれやとあります。\n\n以上を踏まえてJavaのプログラムを作るときに必要な、あるいは、あると便利なあれやこれやを詰め合わせたものが「JDK（ジェイディーケー）」です。\n","user":"ji-miya","created_at":"2021-03-28T22:45:12+09:00","updated_at":"2021-03-28T22:45:12+09:00"},{"url":"https://qiita.com/shimadakenta/items/59e300f239c42fa6202f","title":"Chormeでクリックした要素に枠線が付く現象","body":"# 概要\nchromeである要素だけクリックした時に黒い枠線が表示されることがあった\n\n# 原因\n対象要素にtabindex属性が付いていて、クリックした時に強調としてoutlineプロパティが設定される\n\n### そもそもなぜtabindexが付いたのか？\nスライダーライブラリのslick.jsを使用しており、そこでtabindexが付与されるようになっていた\n\n# 対処2種\n- tabindexを削除\n- outline: none;を設定\n\n（そもそもスライダーの範囲の横に余白があり、その余白部分だけ枠線が表示されていた。なのでスライダーとそのコンテンツのサイズは合わせるようにすれば良い）\n\n\n# 参考\n[tabindex - HTML: HyperText Markup Language | MDN](https://developer.mozilla.org/ja/docs/Web/HTML/Global_attributes/tabindex)\n\n[outline - CSS: カスケーディングスタイルシート | MDN](https://developer.mozilla.org/ja/docs/Web/CSS/outline)\n\n[テキスト入力欄のフォーカス時にChromeなどが自動付加する枠線を消す方法 - スタイルシートTipsふぁくとりー](https://www.nishishi.com/css/chrome-textform-clear-border.html)\n","user":"shimadakenta","created_at":"2021-03-28T22:39:13+09:00","updated_at":"2021-03-28T22:39:13+09:00"},{"url":"https://qiita.com/english_muffin/items/4674269d06fd7f9d1b02","title":"defer内でのエラーを考慮する。","body":"# はじめに\n- `defer`句でエラーが起きたらどうするか\n\n# 結論\n- ※個人的に良いなと思ったものです。\n- `close`時に発生したエラーとオリジナルのエラーの両方をログなどで確認することができる。\n\n```golang\ndefer func() {\n    deferError := c.Close() //c.Closeはエラーを返す可能性があります。\n    if deferError == nil {\n      return\n    }\n    err = fmt.Errorf(\"close: %v,  original: %v\", deferError, err)\n}()\n\n//よくない例\ndefer c.Close()\n```\n\n# 参考\n[Go 言語(Golang) はまりどころと解決策](https://www.yunabe.jp/docs/golang_pitfall.html#defer-%E3%81%AE%E4%B8%AD%E3%81%A7%E7%99%BA%E7%94%9F%E3%81%97%E3%81%9F-error-%E3%82%92%E5%87%A6%E7%90%86%E3%81%97%E5%BF%98%E3%82%8C%E3%82%8B)\n\n\n\n\n","user":"english_muffin","created_at":"2021-03-28T22:38:04+09:00","updated_at":"2021-03-28T22:38:04+09:00"},{"url":"https://qiita.com/koseki/items/a2436b831afcdf73b946","title":"reCAPTCHA v2 と v3 の違い","body":"この記事では reCAPTCHA v2 と v3 の違いについて説明します。\n\nreCAPTCHA v2 には、Invisible、Checkbox、Android の3種類があります。この記事では v2 Invisible を主に扱います。Checkbox は「私はロボットではありません」のチェックボックスを見せるタイプ、Android はアプリに組み込むタイプで、これらを使いたい場合は、特に迷うことはないと思います。\n\nv3 は v2 を完全に置き換えるものではありません。v2 は、[今後も並行してセキュリティおよびユーザビリティの改善とサポートを行う](https://developers.google.com/recaptcha/docs/faq#should-i-use-recaptcha-v2-or-v3)と、FAQ にあります。\n\n## 見た目は一緒\n\nv2 Invisible と v3 の見た目は同じです。デフォルトでは、画面の横にバッジが表示されます。このバッジは[消すこともできます](https://developers.google.com/recaptcha/docs/faq#id-like-to-hide-the-recaptcha-badge.-what-is-allowed)。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2596/666cc432-f451-3f2b-a5ee-54b46536d13f.png)\n\n## 何が違うのか\n\nv2 と v3 の最も大きな違いは、怪しいリクエストを通すかどうかという点です。\n\nv2 は、人間かボットか怪しいリクエストが来たら、画像認証のクイズを出して、ボットをシャットアウトしようとします。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2596/51d9eb6b-b99a-9e67-860f-7bba2d11dba7.png)\n\n一方、v3 には、画像認証を出す機能はありません。人間だろうがボットだろうが、全てのリクエストを素通しにします。代わりに、リクエストに対して「人間らしさ」のスコアを設定します。\n\n![recaptcha.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2596/30cfdb11-6df0-8f57-9d2e-d32b0ef2bd8b.png)\n\n\n## v3 はパワーユーザー向け\n\n[FAQ の冒頭に書かれている通り](https://developers.google.com/recaptcha/docs/faq#should-i-use-recaptcha-v2-or-v3)、v3 はパワーユーザー向けです。スコアに応じた対処方法を、自前で実 装する必要があります。\n\n低いスコアが出た場合の対処方法は、例えば以下のようなものが考えられます。\n\n * [ログイン時に、二段階認証の入力を求める](https://developers.google.com/recaptcha/docs/v3#interpreting_the_score)\n * ブログコメントをすぐには掲載せず、モデレータが評価するまで保留にする\n * 問い合わせをスパムフォルダに保存する\n * **しきい値を設定して、足切りを行う**\n\n足切りというのは、スコアが悪かったら、ボットだろうが人間だろうが、リクエストを拒絶するという意味です。\n\n![recaptcha2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2596/64927f9a-dccd-3752-6fac-6ea8d151725e.png)\n\n\n\n## 本当に足切りしていいの？\n\n追加で開発を行うことなく v3 を採用しようとすると、大抵は「足切り」を行うことになると思います。その場合は、導入しようとしているサービスで本当に足切りが許されるのかどうか、よく検討する必要があります。\n\n例えば、お客様からの問い合わせやクレームを受け付けるフォームで「あなたは人間らしくないからエラーにします」と言って許されるのかどうか、ということです。何人のお客様がエラーで離脱したか、本当のところはわかりません。\n\nスパムフォルダのような機能があるなら、v3 は非常に良い選択肢です。ただし、その場合は、誤検知を定期的にチェックしなければなりません。\n\n\n## 導入先の違い\n\n### v3 の導入ページ\n\nv3 はユーザのインタラクションを邪魔しないので、できるだけ複数のページに導入することが推奨されています。\n\n * https://webmaster-ja.googleblog.com/2018/10/introducing-recaptcha-v3-new-way-to.html\n\n例えば、WordPress の人気プラグイン Contact Form 7 では[v3 を全ページに導入する](https://contactform7.com/ja/faq-about-recaptcha-v3/#stop-script-loading) 前提で足切りを行っているようでした。[v2 を捨てて v3 に移行した意図はわかりませんが](https://wordpress.org/search/recaptcha+v2+intext%3A%22Plugin%3A+Contact+Form+7%22)、全ページに入れれば十分な精度が出せるという判断なのかもしれません。\n\n### v2 の導入ページ\n\nv2 は、アクションが起きる特定のページにだけ導入すれば十分です。他に入れられる場所がありません。\n\nreCAPTCHA トークンは有効期限が 2 分と非常に短いので、確認画面がある場合は、確認画面に入れるのが適切です。トークンを、フォームから確認画面へと持ち回るべきではありません。\n\nv2 Invisible では、送信ボタンを押してからサーバで検証するまでの期間が 2 分です。v2 Checkbox は、チェックを入れた状態でしばらく放置すると、勝手にチェックが外れます。\n\n## まとめ\n\nv2 と v3 は守備範囲が違うので、使い分けが必要です。検索すると v3 が v2 の改良版・高機能版だという解説が山ほど見つかりますが、間違いです。\n\nv3 単体では、v2 のようにボットを排除することはできません。v2 の画像認証の代わりに、自力でなんとかする(できる)のが v3 です。\n\n単にお問い合わせフォームやコメント、ユーザ登録などでス パムを避けたい場合は、v2 Invisible を使う方が簡単です。\n\n","user":"koseki","created_at":"2021-03-28T22:34:32+09:00","updated_at":"2021-03-28T22:34:32+09:00"},{"url":"https://qiita.com/syumiwohossu/items/d086e8e7925a4ecbf5ee","title":"[Spring Batch] ItemWriter内でJPARepositoryを使用してデータの更新を行う","body":"# はじめに\nSpring BatchのChankモデルではDBからデータを一括で取得するReader, 取得したデータに対しビジネスロジックを追加するProcessor, DBへデータの更新を行うWriterの3層構造になっています。WriterにSQLを渡してデータの永続化を行う方法では、同時に2テーブルの更新ができないので、今回Writerで2つのテーブルの更新を同時に行う方法を記述したいと思います。\n\n# シナリオ\n実際の例題があった方が書きやすいので...\n例えば、とあるサービスの会員申請フォームから新規会員登録の申請情報を格納するテーブル`registration`と\n会員テーブル`user` を用意して、`registration`からビジネスロジックを加えて`user`へ一括INSERTをすることを考えます。\nめちゃめちゃシンプルにテーブルは\n\n`registration`テーブル(会員登録申請テーブル)\n\n```\nuser_name,　// ユーザの名前\nstatus　    // 処理ステータス(未処理0, 完了1, エラー9)\n```\n\n`user`テーブル(会員テーブル)\n\n```\nid,   // ID\nname // 名前\n```\n\n各層で行いたいことは、\n\n`reader`: registrationテーブルからstatus = 0(未処理)のレコードを全て取得する\n`processor`: それらのレコードからuserテーブルのカラムを作成\n`writer`: userテーブルのカラムをDBに永続化する&永続化できたらregistration.status = 1（完了）に、できなければ9(エラー)で更新する\n\nとします。\n\n# 実装\nコードはKotlinです。\nまずはBatchJob用のConfiguration\n\n```kotlin\n@Configuration\nclass JobConfiguration(\n        private val jobBuilderFactory: JobBuilderFactory,\n        private val stepBuilderFactory: StepBuilderFactory,\n        private val userRepository: UserRepository,\n        private val registrationRepsitory: RegistrationRepository\n) {\n    @Bean\n    fun Job(\n            reader: RepositoryItemReader<Registration>,\n            writer: ItemWriter<User>,\n    ): Job {\n        return jobBuilderFactory\n                .get(\"job\")\n                .start(step())\n                .build()\n    }\n\n    @Bean\n    fun step(\n            reader: RepositoryItemReader<Registration>,\n            writer: ItemWriter<User>\n    ): Step {\n        return stepBuilderFactory\n                .get(\"step\")\n                .chunk<Registration, User>(CHUNK_SIZE)\n                .reader(reader)\n                .processor(processor())\n                .writer(writer)\n                .build()\n    }\n\n    @Bean \n    fun reader(): RepositoryItemReader<Registration> {\n        // readerは以下のように適切に設定すれば自前で用意しなくても大丈夫です\n        return RepositoryItemReaderBuilder<Registration>()\n                .name(\"reader\")\n                // JPARepositoryを使用してstatusが未処理のデータを取得\n                .repository(registrationRepository)\n                .methodName(\"findAllByStatus\")\n                .arguments(listOf(NOT_COMPLETED))\n                .pageSize(CHUNK_SIZE)\n                .build()\n    }\n    \n    @Bean\n    fun processor(): ItemProcessor<Registration, Pair<User, Registration>> {\n        // processorは自作します\n        // registration から userと、それの元になったregistrationをPairにしてwriterに送ります\n        return MyProcessor()\n    }\n    \n    @Bean \n    fun writer(): ItemWriter<Pair<User, Registration>> {\n        // writerも自作します\n        // userとregistrationを更新します\n        return MyWriter(userRepository, registrationRepository)\n    }\n}\n```\n\nMyProcessor\n以下のようにProcessorを継承、処理本体の関数をoverrideすれば、柔軟にロジックを設計することができます。\n\n```kotlin\nclass MyProcessor() : ItemProcessor<Registration, Pair<User, Registration>> {\n    override fun process(registration: Registration) {\n        val returnUser = User(0, registration.user_name)\n        registration.status = COMPLETED\n        return Pair(returnUser, registration)\n}\n\n```\nMyWriter\nWriterも同様。データの永続化はJpaRepositoryの機能(.saveメソッド)を使用します。\nUserテーブルに正しくデータの更新を行えた場合のみ、対応するRegistrationテーブルの更新を行います。\n\n```kotlin \nclass MyWriter(\n    private val userRepository: UserRepository\n    private val registrationRepository: RegistrationRepository\n): ItemWriter<Pair<User, Registration>> {\n    override fun writer(items: MutableList<Pair<User, Registration>>) {\n        items.forEach {\n            try {\n                userRepository.save(it.first)?.apply {\n                    // userの更新が完了した場合のみregistrationも更新\n                    registrationRepository.save(it.second)\n                }\n            } catch(e: Exception) {\n                log.error(\"CANNOT SAVE!\")\n        }\n    }   \n}\n```\n# 実行\nこのまま実行しても以下のエラーが出る場合があります。\n\n```\n2021-03-28 14:30:25.553 ERROR 25908 --- [           main] MyWriter : Could not open JPA EntityManager for transaction; nested exception is java.lang.IllegalStateException: Already value [org.springframework.jdbc.datasource.ConnectionHolder@63814bbe] for key [HikariDataSource (HikariPool-1)] bound to thread [main]\n2021-03-28 14:30:25.553 ERROR 25908 --- [           main] MyWriter : Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.\n2021-03-28 14:30:25.553 ERROR 25908 --- [           main] MyWriter : Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.\n2021-03-28 14:30:25.553 ERROR 25908 --- [           main] MyWriter : Pre-bound JDBC Connection found! JpaTransactionManager does not support running within DataSourceTransactionManager if told to manage the DataSource itself. It is recommended to use a single JpaTransactionManager for all transactions on a single DataSource, no matter whether JPA or JDBC access.\n\n Upgrading JobExecution status: StepExecution: id=210, version=2, name=step, status=FAILED, exitStatus=FAILED, readCount=4, filterCount=0, writeCount=0 readSkipCount=0, writeSkipCount=0, processSkipCount=0, commitCount=0, rollbackCount=1, exitDescription=org.springframework.batch.core.step.FatalStepExecutionException: JobRepository failure forcing rollback\n        at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:464)\n        at org.springframework.batch.core.step.tasklet.TaskletStep$ChunkTransactionCallback.doInTransaction(TaskletStep.java:331)\n        at org.springframework.transaction.support.TransactionTemplate.execute(TransactionTemplate.java:140)\n        at org.springframework.batch.core.step.tasklet.TaskletStep$2.doInChunkContext(TaskletStep.java:273)\n        at org.springframework.batch.core.scope.context.StepContextRepeatCallback.doInIteration(StepContextRepeatCallback.java:82)\n        at org.springframework.batch.repeat.support.RepeatTemplate.getNextResult(RepeatTemplate.java:375)\n        at org.springframework.batch.repeat.support.RepeatTemplate.executeInternal(RepeatTemplate.java:215)\n        at org.springframework.batch.repeat.support.RepeatTemplate.iterate(RepeatTemplate.java:145)\n        at org.springframework.batch.core.step.tasklet.TaskletStep.doExecute(TaskletStep.java:258)\n        at org.springframework.batch.core.step.AbstractStep.execute(AbstractStep.java:208)\n        at org.springframework.batch.core.job.SimpleStepHandler.handleStep(SimpleStepHandler.java:148)\n        at org.springframework.batch.core.job.AbstractJob.handleStep(AbstractJob.java:410)\n        at org.springframework.batch.core.job.SimpleJob.doExecute(SimpleJob.java:136)\n        at org.springframework.batch.core.job.AbstractJob.execute(AbstractJob.java:319)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher$1.run(SimpleJobLauncher.java:147)\n        at org.springframework.core.task.SyncTaskExecutor.execute(SyncTaskExecutor.java:50)\n        at org.springframework.batch.core.launch.support.SimpleJobLauncher.run(SimpleJobLauncher.java:140)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n        at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n        at java.base/java.lang.reflect.Method.invoke(Method.java:566)\n...\nCaused by: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.lang.IllegalStateException: Session/EntityManager is closed\n...\nCaused by: java.lang.IllegalStateException: Session/EntityManager is closed\n```\n\n既にJpaRepositoryとDBとの接続が存在し、そちらで使用しているtransactionManagerとデフォルトのSpringBatchで使用されるtransactionManagerとで競合する場合があります。\nその場合には、Stepに対し、そのStep中で使用するtransactionManagerを指定してあげることで解消します。\n\n```kotlin\n@Configuration\nclass JobConfiguration(\n        private val jobBuilderFactory: JobBuilderFactory,\n        private val stepBuilderFactory: StepBuilderFactory,\n        private val userRepository: UserRepository,\n        private val registrationRepsitory: RegistrationRepository\n        private val jpaTransactionManager: JpaTransactionManager\n) {\n...\n   @Bean\n    fun step(\n            reader: RepositoryItemReader<Registration>,\n            writer: ItemWriter<User>\n    ): Step {\n        return stepBuilderFactory\n                .get(\"step\")\n                .chunk<Registration, User>(CHUNK_SIZE)\n                .reader(reader)\n                .processor(processor())\n                .writer(writer)\n                .transactionManager(jpaTransactionManager)\n                .build()\n    }\n```\n","user":"syumiwohossu","created_at":"2021-03-28T22:32:33+09:00","updated_at":"2021-03-28T22:32:33+09:00"},{"url":"https://qiita.com/ming_hentech/private/c8fed238ee11d3921a92","title":"Qiita トラブルシューティング・失敗集 【(半)自動更新: 2021年03月28日】","body":"## herokuで画像を正しく配置しているのにActionView::Template::Errorがでる場合の対処法\nURL: https://qiita.com/rei1129/items/dba6b00e75ae9019134d\n[@rei1129](https://qiita.com/rei1129)さん(Created at: 2021-03-28T21:59:19+09:00)\n\n## GPUは認識しているのにgeneratorを使うとcuDNN初期化エラーが出たけど解決した話\nURL: https://qiita.com/tsuhiro_kttn/items/490dcd4a12a8c240504a\n[@tsuhiro_kttn](https://qiita.com/tsuhiro_kttn)さん(Created at: 2021-03-28T21:48:58+09:00)\n\n## MAMP環境でtimezoneが反映されない問題の解決過去記事による罠\nURL: https://qiita.com/syota_19910612bscplog/items/c9789a9686733b3587c4\n[@syota_19910612bscplog](https://qiita.com/syota_19910612bscplog)さん(Created at: 2021-03-28T19:09:02+09:00)\n\n## M1 Mac、pod 'FirebaseUI/Storage'やpod 'SDWebImageSwiftUI'でエラーが出るときの対処法\nURL: https://qiita.com/ren_nomura/items/99dbf702fbaa73f4a8a9\n[@ren_nomura](https://qiita.com/ren_nomura)さん(Created at: 2021-03-28T18:05:31+09:00)\n\n## MacOS Big SurでHomesteadを立ち上げようとしたらエラー\nURL: https://qiita.com/kazuyaseo/items/355bf823022e1f661796\n[@kazuyaseo](https://qiita.com/kazuyaseo)さん(Created at: 2021-03-28T17:36:55+09:00)\n\n## ECSを使って3D弾幕シューティングを作ろうとした際に詰まったところと解決方法\nURL: https://qiita.com/Tomonorarari/items/84f4342ea3f07b37c018\n[@Tomonorarari](https://qiita.com/Tomonorarari)さん(Created at: 2021-03-28T16:46:31+09:00)\n\n## ERROR: Table has no partition for value from ...\nURL: https://qiita.com/Moo_Moo_Farm/items/9dcd950049ab5493c395\n[@Moo_Moo_Farm](https://qiita.com/Moo_Moo_Farm)さん(Created at: 2021-03-28T16:42:04+09:00)\n\n## rsync --delete でサーバを壊した時の原因\nURL: https://qiita.com/Moo_Moo_Farm/items/c9840db01b20c3a2abdb\n[@Moo_Moo_Farm](https://qiita.com/Moo_Moo_Farm)さん(Created at: 2021-03-28T16:40:39+09:00)\n\n## [Next.js]動的ルーティングページ間で外部データが更新されない問題\nURL: https://qiita.com/herishiro/items/60bb52fe93ff42ee3cb0\n[@herishiro](https://qiita.com/herishiro)さん(Created at: 2021-03-28T16:20:18+09:00)\n\n## Heroku push CSS 反映されない\nURL: https://qiita.com/Akiko3221/items/e2897a9713261e0bb792\n[@Akiko3221](https://qiita.com/Akiko3221)さん(Created at: 2021-03-28T15:59:03+09:00)\n\n","user":"ming_hentech","created_at":"2021-03-28T22:31:47+09:00","updated_at":"2021-03-28T22:31:47+09:00"},{"url":"https://qiita.com/qiuyin/items/a80ae53827ffb746a56f","title":"flutter webをgithub pagesでdeployする","body":"1.リリースためのファイルをbuild\n\n```\nflutter build web --release\n```\n\n2./build/web/index.htmlのheader→baseのhrefをrepository名前に修正\n\n```html\n  <base href=\"/repository-name/\">\n```\n3./build/webフォルダをgithubの新しいrepositoryへpush\n4.github repositoryのSettingsのGitHub Pagesでhostを設定する\n5.完了\n","user":"qiuyin","created_at":"2021-03-28T22:29:26+09:00","updated_at":"2021-03-28T22:29:26+09:00"},{"url":"https://qiita.com/hoshianaaa/items/f03405ea51510f60906d","title":"ROS launchファイルで環境変数を取得する","body":"roslaunchでは以下のように表記することでホームディレクトリのパスを取得できる.\n\n```\n$(end HOME)\n```\n\n![Screenshot from 2021-03-28 22-21-34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/589906/b92bcb97-a9b4-91d6-2ce1-f281efe0f4ec.png)\n\n参考\n\nhttps://myenigma.hatenablog.com/entry/2016/05/28/111714\n","user":"hoshianaaa","created_at":"2021-03-28T22:25:34+09:00","updated_at":"2021-03-28T22:25:34+09:00"},{"url":"https://qiita.com/yamaday0u/items/7461c3306721349f3586","title":"【Rails6】友達登録機能（ユーザーフォロー機能）の単体テストの実装例","body":"以前別の記事で実装方法を紹介した友達登録機能の単体テストの実装例を紹介します。\n\n[【Rails6】友達登録機能（ユーザーフォロー機能）の実装方法](https://qiita.com/yamaday0u/items/c4793b2b16ead7b2db76)\n\n**目次**\n- 前提条件\n- Modelの確認\n- 単体テストのコードの実装\n\n## 前提条件\n- RSpecをインストール済み。\n- [前回の記事](https://qiita.com/yamaday0u/items/c4793b2b16ead7b2db76)で紹介した通りに友達登録機能を実装していること。\n\n## Modelの確認\n[前回の記事](https://qiita.com/yamaday0u/items/c4793b2b16ead7b2db76)からの再掲です。\n\n```app/models/relationship.rb\n# アソシエーションの定義\nclass Relationship < ApplicationRecord\n  belongs_to :follower, class_name: \"User\"\n  belongs_to :followed, class_name: \"User\"\n\n  # バリデーションの定義\n  validates :follower_id, presence: true\n  validates :followed_id, presence: true\n  validates :follower_id, uniqueness: { scope: :followed_id }\nend\n```\n\n```app/models/user.rb\nclass User < ApplicationRecord\n  # メソッドの定義\n  # ユーザーをフォロー\n  def follow(other_user)\n    active_relationships.create(followed_id: other_user.id)\n  end\nend\n```\n\n## 単体テストのコードの実装\n\n```spec/models/relationship_spec.rb\nrequire 'rails_helper'\n\nRSpec.describe Relationship, type: :model do\n  before do\n    # ユーザー2名を事前に生成して登録\n    @user = FactoryBot.create(:user)\n    @another_user = FactoryBot.create(:user)\n    # app/models/user.rbで定義したfollowメソッド（友達申請）の実行結果を変数@relationshipに代入\n    @relationship = @user.follow(@another_user)\n  end\n\n  describe '#create' do\n    context 'successfully' do\n      it 'is valid with follower_id, followed_id' do\n        expect(@relationship).to be_valid\n      end\n    end\n\n    context 'unsuccessfully' do\n      # 友達申請する側の値（follower_id）がなければ保存できない。\n      it 'is invalid without follower_id(active relationship)' do\n        @relationship.follower_id = ''\n        @relationship.valid?\n        expect(@relationship.errors.full_messages).to include('Follower must exist')\n      end\n      # 友達申請される側の値（followed_id）がなければ保存できない。\n      it 'is invalid without followed_id(passive relationship' do\n        @relationship.followed_id = ''\n        @relationship.valid?\n        expect(@relationship.errors.full_messages).to include('Followed must exist')\n      end\n      # 同じ組み合わせの友達申請のデータがすでに保存されている場合は保存できない\n      it 'is invalid with duplicate relationship' do\n        @relationship.save\n        # @relationshipとは別のレコードとしてanother_relationshipを用意\n        another_relationship = @user.follow(@another_user)\n        # another_relationshipに@relationshipと同じ値を代入\n        another_relationship.follower_id = @relationship.follower_id\n        another_relationship.followed_id = @relationship.followed_id\n        another_relationship.valid?\n        expect(another_relationship.errors.full_messages).to include('Follower has already been taken')\n      end\n    end\n  end\nend\n```\n\nテストコードの最後の「同じ組み合わせの友達申請のデータがすでに保存されている場合は保存できない」は、`app/models/relationship.rb`で定義した以下のバリデーションが機能しているかを確認しています。\n\n```app/models/relationship.rb\n  validates :follower_id, uniqueness: { scope: :followed_id }\n```\n","user":"yamaday0u","created_at":"2021-03-28T22:24:29+09:00","updated_at":"2021-03-28T22:24:29+09:00"},{"url":"https://qiita.com/ReiSogawa/items/8d2706b23cbf77844169","title":"分かりづらいクロージャ入門","body":"鈴木さんには2回挨拶できるけど、田中さんには1回しか挨拶できない。\nそんな場面はなかなかないけど、ボタンを二回以上クリックされたくないときとかに応用できそう〜。\n\n``` js\nconst once = (fn, done = false) => (...args) =>\n  !done ? (done = true) && fn(...args) : undefined;\nconst greet = name => console.log('Hello', name);\nconst greetOnce = once(greet);\n\ngreet('Suzuki');\ngreet('Suzuki');\ngreetOnce('Tanaka');\ngreetOnce('Tanaka');\n```\n","user":"ReiSogawa","created_at":"2021-03-28T22:21:45+09:00","updated_at":"2021-03-28T22:21:45+09:00"},{"url":"https://qiita.com/Teru_3/items/fb7f16ce022b72bf7221","title":"\"Re:VIEW Starter\"で技術系同人誌を書こうと思い、初期設定でつまづいたので健忘録がてらにまとめました。","body":"# Re:VIEW Starterを使ってみる\n\n## \"Re:VIEW\"とは？\n”Re:VIEW”とは、Open Source Softwareで技術系の同人誌やプロが書くような書籍に使われているものです。\n簡単にいうと、素人でもプロが書いたような書籍や電子書籍を書くことができるソフトです。\n現在、ver. 5.0まで出ています。\n詳しくは下をご確認ください。\n[Re:VIEW knowledge](https://review-knowledge-ja.readthedocs.io/ja/latest/index.html)\n\n## \"Re:VIEW Starter\"とは？\nそしてRe:VIEW Starterとは、Re:VIEWでは少々面倒くさい書籍の体裁の設定を、初心者にはわかりやすいUIで設定できるようにしたものです。\n\n[Re:VIEW Starter](https://kauplan.org/reviewstarter/)のページから、体裁に必要は初期設定を行います。\nちなみに、Re:VIEW StarterはRe:VIEW ver. 2.5で動作します。\n\n##\"Re:VIEW Starter\"の使い方\n使い方の流れを簡単にまとめると以下の通りです。\n\n①　[Re:VIEW Starter](https://kauplan.org/reviewstarter/)のページから、体裁に必要は初期設定を行う.\n[![Image from Gyazo](https://i.gyazo.com/e09d2b5ce8643dc24106d7f607443c54.png)](https://gyazo.com/e09d2b5ce8643dc24106d7f607443c54)\n\n②　設定を終了し、設定ずみのfileをzip形式でダウンロードする。\n[![Image from Gyazo](https://i.gyazo.com/0d0a64ad7dc11fe5a9b87edaf1955184.png)](https://gyazo.com/0d0a64ad7dc11fe5a9b87edaf1955184)\n**正直、この以降の設定が正直初心者には厳しいです。**\n\n③ Dockerをインストールして、Re:VIEW 2.5をセットアップする\n\n④　Rudyをセットアップして、gem installが使えるようにする\n\n⑤　VS codeなどのエディターでUnzipしたファイル（＝ディレクトリ）内の.reファイルを修正し、書籍の内容を書く\n\n⑥　Unzipしたファイル（＝ディレクトリ）のターミナルコマンドでPDFファイルの作成\n③〜⑥について、下で詳述します。\n\n# 最初のつまずきポイント\"Docker\"\n[docker](https://www.docker.com/products/docker-desktop)のページからインストールを行なってください。\nその後ターミナルを立ち上げて、\n\n```:terminal\n$ docker pull kauplan/review2.5 \n```\n\nを行うと、review2.5がインストールされます。\n\n# 2番目のつまずきポイント\"gem install\"でエラー\nrudyのインストール周辺でつまずいている方が結構いらっしゃるので、様々な記事が参考になりました。\n特に下記の記事が参考になりました。\n\n[Re:VIEW Starterをインストールするときに少し手間取った話(gem installでpermissionエラー)と解決方法](https://qiita.com/minwinmin/items/070bd83d56ad473b6e73)\n[gem installでpermissionエラーになった時の対応方法](https://qiita.com/nishina555/items/63ebd4a508a09c481150)\n\n```:terminal\n$ gem install review --version=2.5\n```\n\nと入力すると、\n\n```:terminal\nERROR:  While executing gem ... (Gem::FilePermissionError)\n    You don't have write permissions for the /Library/Ruby/Gems/2.6.0 directory.\n```\n\nと表示され、心が折れそうになります。\n上記の記事を参考に、進みます。\n\n```:terminal\n$ brew update\n```\n\n```:terminal\n$ brew install rbenv ruby-build\n```\n\n```:terminal\n$ rbenv install 2.7.2\n```\n\n```:terminal\n$ rbenv versions\n```\n上記を入力すると、\n\n```:terminal\nsystem\n* 2.7.2 (set by /Users/takudooon/.rbenv/version)\n```\nと表示されます。\n\nrbenvにパスを通すため、シェルの設定ファイルに以下を追加します。\n\n```:terminal\n[[ -d ~/.rbenv  ]] && \\\n  export PATH=${HOME}/.rbenv/bin:${PATH} && \\\n  eval \"$(rbenv init -)\"\n```\n\nこの後に再度、\n\n```:terminal\n$ gem install review --version=2.5\n```\n\nと入力し、Re:VIEWのversionを確認して、\n\n```:terminal\n$ review version\n```\n\n```:terminal\n2.5.0\n```\nと出れば完璧です。\n\n# VS codeにて書籍の内容の作成\ncatalog.ymlの中身を確認し、\n\n```yaml:catalog.yml\n## まえがき\nPREDEF:\n  - 00-preface.re\n\n## 本文\nCHAPS:\n  - 01-install.re\n  - 02-tutorial.re\n  - 03-syntax.re\n  - 04-customize.re\n  - 05-faq.re\n  - 06-bestpractice.re\n\n## 付録\nAPPENDIX:\n  - 91-compare.re\n  - 92-filelist.re\n  - 93-background.re\n\n## あとがき\nPOSTDEF:\n  - 99-postface.re\n```\nここま目次となる部分です。対応する.reファイルを修正し、書籍を書いていきます。\n\n# PDFファイル化\n書籍の内容が完成したら、PDFにします。\nPDF化は、Dockerでもgemを利用しても、どちらでも構いません。\nDockerの場合は、\n\n```:terminal\n$ docker run --rm -v $PWD:/work -w /work kauplan/review2.5 rake pdf\n```\n\nDockerを使わない場合は、\n\n```:terminal\n$ rake pdf\n```\nでPDF化が可能です。\n参考に、再度下記の画像を貼っておきます。\n\n[![Image from Gyazo](https://i.gyazo.com/0d0a64ad7dc11fe5a9b87edaf1955184.png)](https://gyazo.com/0d0a64ad7dc11fe5a9b87edaf1955184)\n","user":"Teru_3","created_at":"2021-03-28T22:20:57+09:00","updated_at":"2021-03-28T22:20:57+09:00"},{"url":"https://qiita.com/ne_book/items/42844e487c5f39383bbf","title":"LinuxCommandReference","body":"## yumコマンド{パッケージ管理（CentOS）}\n### 基本的な使い方\n\n```\n yum [オプション] [コマンド] [パッケージ名称] \n ```\n### パッケージのインストール\nyumコマンドでパッケージのインストールを実行するには、installコマンドを利用してパッケージ名称を指定する。\n\n```\n yum install <パッケージ名称> \n ```\nインストール作業はroot権限が必要なので、このinstallコマンドもroot権限で実行する必要がある。\n\n```sql:command&#x20;example\n[root@ip-10-0-0-15 html]# sudo su\n[root@ip-10-0-0-15 html]# \n[root@ip-10-0-0-15 html]# yum install httpd\n```\n\n### パッケージの情報表示\nパッケージ名称だけではその内容がよくわからない場合、infoコマンドにより詳細情報を表示できる。\n\n```\nyum info <パッケージ名称> \n```\nhttpdパッケージの詳細情報は以下。\n\n ```sql:httpd&#x20;samaly\n[ec2-user@ip-10-0-0-15 ~]$ yum info httpd\n読み込んだプラグイン:extras_suggestions, langpacks, priorities, update-motd\nインストール済みパッケージ\n名前                : httpd\nアーキテクチャー    : x86_64\nバージョン          : 2.4.46\nリリース            : 1.amzn2\n容量                : 4.0 M\nリポジトリー        : installed\n提供元リポジトリー  : amzn2-core\n要約                : Apache HTTP Server\nURL                 : https://httpd.apache.org/\nライセンス          : ASL 2.0\n説明                : The Apache HTTP Server is a powerful, efficient, and extensible\n                    : web server.\n```\n","user":"ne_book","created_at":"2021-03-28T22:20:39+09:00","updated_at":"2021-03-28T22:20:39+09:00"},{"url":"https://qiita.com/rua_rua/items/3ee67d0ad8c7d5deb90d","title":"プログラミング超初心者がAWSクラウドプラクティショナーに合格した勉強法について","body":"#はじめに\n\n初めまして、るあと申します。\n\nこの記事ではプログラミング初学者の筆者がAWS資格に十日程度で合格することができた為、今後受験される方のお役に立てればと思い共有させていただきます。\n\n#AWSクラウドプラクティショナー資格について\nAWS資格は現在11種類あり、その中でも基礎・入門レベルの資格がこのクラウドプラクティショナー資格です。\nそのためAWSクラウドの特徴や料金プランなどの基本的な事を理解していれば、合格は可能だと思われます。\n試験時間は90分で問題は65問出題されます。試験料は11,000 円（税別）と若干高額のため一発合格を目指したいところですね！\n\n#具体的な勉強方法\n自分はAWSって何？って感じだったので最初はインターネットで調べたり本屋でパラパラ読んでみたりしてました汗\nプログラムやクラウドについてある程度知っている方だとかなり楽だと思います。\nその後、資格対策本を買って読みました！\n\n読んだ本:　 [AWSクラウドプラクティショナー](https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88-AWS%E8%AA%8D%E5%AE%9A-%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%BC-%E5%B1%B1%E4%B8%8B-%E5%85%89%E6%B4%8B/dp/4797397403/ref=sr_1_1?dchild=1&keywords=aws+%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%83%97%E3%83%A9%E3%82%AF%E3%83%86%E3%82%A3%E3%82%B7%E3%83%A7%E3%83%8A%E3%83%BC&qid=1616934654&sr=8-1 \" Home\")\n\n一週目は完全には理解できないものもありましたが、とりあえず無視して読み進め一週目終了\n気になったり理解して起きたいワードがあったらGoogle検索しておくと時間はかかるが理解は深まります。\n二週目は理解しているところは読み飛ばし不安なところを集中的に学習します。\n\nこれだけだと受かるか不安だったので、Udemyの模擬試験問題集を購入\n\n購入したもの: https://www.udemy.com/course/aws-4260/\n\nこれを繰り返し解いて少しずつ覚えていきます。\n勉強とはできない事を少しずつできるようにする作業なので、問題を解いて間違えを見直しもう一度解く。\n当たり前ですが、ある程度の理解があればこれが一番効率がいいと思います。\n自分は基本レベルが７~9割くらいの点数が取れるまでやりました。\n応用レベルの問題はあまり解きませんでしたがあまり本番でも出なかったのでまずは基本レベルを8割以上取れるようにし、余裕があれば応用レベルにもチャレンジしてみてください。\n\n自分が試験対策で行った勉強は以上です。\nまとめると、ある程度本やサイトで大まかに理解し、暗記はテストと見直しで覚えていくって流れですね！\n\n#試験当日\n\n自分はピアソンで受けました。PSIはわかりませんがピアソンの方が評判良かった気がします。\n\n時間がかなり余るので落ち着いて解けると思います。\n自分は４０分程度で見直しも終わり途中退室しました。\n合否はその場でわかりますが細かい点数については後日メールで届きます。\n問題の難易度はUdemyの基本レベルと同じくらいでたまにわからないものがありましたが\n1000点満点で700点以上で合格のため基礎レベルで落とさなければ大丈夫です。\nちなみに筆者は843点でした。\n\n#終わりに\nAWSはとても便利で様々な企業が導入しているサービスなので、今後も他のAWS資格や実務などで理解を深めていきたいと思いました。\n\n読んでいただきありがとうございます。受験される方々、心より応援しております！\n\n\n","user":"rua_rua","created_at":"2021-03-28T22:18:50+09:00","updated_at":"2021-03-28T22:25:20+09:00"},{"url":"https://qiita.com/matsxxx/items/f7c50b88f0b6d1c9e4d5","title":"[Python]investpyで株、為替、経済指標データを取得する","body":"# はじめに\n　株、為替、経済指標データを取得するため、[investpy](https://github.com/alvarobartt/investpy)の使い方のメモを残します。[API Reference](https://investpy.readthedocs.io/api.html)からの抜粋です。\n\n# 環境\nWindows 10 home\nPython(3.7.6)\nJupyterLab(3.0.6)\ninvestpy(1.0.3)\n\n# investpyとは\n　[Fusion Media Limited](https://en.wikipedia.org/wiki/Fusion_Media_Group)が所有するしている金融情報のポータルサイト[Investing.com](https://ja.wikipedia.org/wiki/Investing.com)をデータソースとし、株価データ等の金融情報を取得するPythonライブラリです。株価のほか、企業業績、為替、経済指標などpandas-datareaderでは、取れないようなデータも取得することができます。\n\n# investpyのインストール\n　pipでインストールします。documentには[condaも可能なようなこと](https://investpy.readthedocs.io/_info/installation.html)が書かれていましたが、pipでしかインストールできませんでした。(2021/03/28時点)\n\n```sh\npip install investpy\n```\n\n# 使い方\n## ある期間の株価を取得する\n　`investpy.get_stock_historical_data`に企業のシンボル（日本だと証券コード）、国、期間を指定して、取得します。シンボル、国を変更するとほかの国の株価を取得することができます。ニューヨーク証券市場やNASDAQだとティッカーシンボル、国、期間を指定します。日付の指定方法が、\"日/月/年\"とヨーロッパ式なのが注意点です。\n\n### 日本\n```Python\ncode = '7203' #トヨタ自動車\nstock_data = investpy.get_stock_historical_data(stock=code, country='japan', from_date='01/02/2021', to_date='28/03/2021')\nstock_data.tail(5)\n```\n![トヨタ自動車](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/b40468ae-a591-b55f-e32b-53191558cc32.png \"トヨタ自動車株価\")\n　上の例では、トヨタ自動車（証券コード:7203）の株価を表示しています。ヤフーファイナンス（日本）によると、2021/3/26のトヨタ自動車の株価は、始値:8277、高値:8376、安値:8235、終値:8359となっており、investpyで取得した2021/3/26の株価が微妙にずれているのが気になります。また、出来高が0となっています。\n　ソニー（証券コード:6758）だと以下のようになっており、出来高は表示されています。こちらは、investpyと、ヤフーファイナンスの株価や出来高に違いはありません。企業によって、データのとり方が異なるのでしょうか・・・。\n![sony_stock.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/b24bffc2-feb0-3fbe-4401-dc6a202543d3.png \"ソニー株価\")\n\n### アメリカ\n　NASDAQのアップルのデータも取ることができます。\n\n```Python\nsymbol = \"AAPL\" #アップル\nstock_data = investpy.get_stock_historical_data(stock=symbol, country='united states', from_date='01/02/2021', to_date='28/03/2021')\nstock_data.tail(5)\n```\n![apple_stock.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/74326c4b-b02e-82cc-2488-7f39c9c84035.png \"アップル株価\")\n\n## 業績を取得する\n　`investpy.get_stock_financial_summary`でバランスシートやキャッシュフローのデータを取得することができます。\n### 通年業績\n　`period='annual'`にします。\n\n```Python\ncode = '7203' #トヨタ自動車\nannual = investpy.get_stock_financial_summary(stock=code, country='japan', summary_type='income_statement', period='annual')\nannual\n```\n![annual.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/6007ffc8-daa6-3987-f7a7-050b41e843a9.png \"トヨタ通年業績\")\n### 四半期業績\n　`period='quarterly'`に変更します。最近の業績しか取得できないようです。\n\n```Python\ncode = '7203' #トヨタ自動車\nquarterly = investpy.get_stock_financial_summary(stock=code, country='japan', summary_type='income_statement', period='quarterly')\nquarterly\n```\n![quartly.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/3c1e0194-04a0-50b7-53d9-0e4ebc9cd2b3.png \"トヨタ四半期業績\")\n### キャッシュフロー\n　`summary_type='cash_flow_statement'`に変更します。\n\n```Python\ncode = '7203' #トヨタ自動車\ncash_flow = investpy.get_stock_financial_summary(stock=code, country='japan', summary_type='cash_flow_statement', period='annual')\ncash_flow\n```\n![cashflow.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/75ad125d-83ac-4224-41b0-0d670f993d4e.png \"トヨタキャッシュフロー\")\n\n### バランスシート\n　`summary_type='balance_sheet'`に変更します。資産の部、負債の部、純資産の部の大枠のデータしかないようです。\n\n```Python\ncode = '7203' #トヨタ自動車\nbalance_sheet = investpy.get_stock_financial_summary(stock=code, country='japan', summary_type='balance_sheet', period='annual')\nbalance_sheet\n```\n![balance_sheet.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/e4771841-07f7-adc9-1be0-ff065391b58b.png \"トヨタバランスシート\")\n\n## ある期間の為替を取得する\n　`investpy.get_currency_cross_historical_data`で為替を取得することができます。例として日ごとの日本円とUSドルの為替を表示します。\n\n```Python\nusd_jpy = investpy.get_currency_cross_historical_data(currency_cross='USD/JPY', from_date='01/02/2021', to_date='28/03/2021')\nusd_jpy.tail(5)\n```\n![jpy_usd.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/67e53009-84cf-2072-443a-480eeb65e539.png \"日本円-USドル為替\")\n\n## 経済指標を取得する\n　各国の経済指標を得ることができます。各国の経済指標の予測と実績を一覧で見ることができるので、便利そうです。例は、日本とアメリカの経済指標です。`countries=None`(default)だと、investpyで可能なすべての国の経済指標を取得します。\n\n```Python\neconomic_data = invest.econimic_calender(time_zone='GMP +9:00', contries=['japan', 'united states'], from_date='01/03/2021', to_date='28/03/2021')\neconomic_data.tail(5)\n```\n![economic_calender_tail.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/e69828cb-7397-8ed8-f096-18198d07a005.png \"経済指標　日本　アメリカ\")\n\n　`importance`columnを参照することで、重要な指標だけを見ることができます。\n\n```Python\neconomic_data[economic_data['importance']=='high']\n```\n![economic_calender_importance.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585573/d36ebd3c-f80d-7fde-20c5-07b7c96cb9f5.png \"重要経済指標　日本　アメリカ\")\n\n# 参考\nhttps://investpy.readthedocs.io/index.html\n","user":"matsxxx","created_at":"2021-03-28T22:17:11+09:00","updated_at":"2021-03-28T22:26:45+09:00"},{"url":"https://qiita.com/meznat/items/97917fbab8dd8a1a9ba1","title":"WSL2回線速度遅いよ問題","body":"#はじめに\n現行環境でCUDA on WSL2を導入後し，WSL2内でwgetやgit cloneなどを実行すると回線速度が大幅に減少してしまっている事象が指摘されています。\n[Very slow network speed on WSL2 (Microsoft/WSL/issues/4901)](https://github.com/microsoft/WSL/issues/4901)\n私も同じ事象になりましたので解決策を記載します。\n\n#何が起きている？\nWSLがネットワークを利用するのにHyper-Vの仮想スイッチを使用しており，これが悪さをしているようです。\n2017年にも同様の[issue](https://github.com/microsoft/WSL/issues/2477)が存在します。\n\n#どうすればよい？\nスレッドではデバイスマネージャーでHyper-V仮想LANの\"Large Send Offload v2\"を\"Disabled\"に変更すると直ると報告されておりますが私の環境ではそもそも上記仮想LANが認識されませんでしたのでこの解決策は使えませんでした。\n![](https://user-images.githubusercontent.com/582304/90357406-75368180-e085-11ea-88ff-12094db04acd.png)\n\nあれこれネットワーク設定を見直した所，物理LANのネットワーク構成でipv6をoffにすることでやっと回線速度が回復し，WSL2上でまともな開発環境を整えることができました。\n","user":"meznat","created_at":"2021-03-28T22:16:00+09:00","updated_at":"2021-03-28T22:16:00+09:00"},{"url":"https://qiita.com/shinkai_/items/e1350ec7438fa8db3eaa","title":"【Python】pandasで辞書型のリストをCSV出力する（備忘録）","body":"少し悩んだので自分用メモ\n\n# 辞書型（dictionary）のリスト\nPythonで辞書型のリストを扱うことがあると思います。\n（少なくとも私はよく使っています）\n\nこういうデータです。\n\n```json\n[\n    [\n        {'No': 1, 'Name': 'Yamada Taro',   'LastLoginTime': '2021-03-16 15:44:16'}, \n        {'No': 2, 'Name': 'Yamada Jiro',   'LastLoginTime': '2021-03-10 00:12:17'}, \n    ],\n    [\n        {'No': 3, 'Name': 'Yamada Saburo', 'LastLoginTime': '2021-03-20 12:01:02'}, \n    ],\n    [\n        {'No': 4, 'Name': 'Yamada Shiro',  'LastLoginTime': '2020-12-24 00:00:13'}, \n        {'No': 5, 'Name': 'Yamada Goro',   'LastLoginTime': '2021-03-17 11:01:55'}, \n    ]\n]\n```\n\nこういった形式のデータをCSV出力したくて色々と試行錯誤しました。\npythonの知識不足ですんなりとは出来なかったです。\n\n# itertools.chain.from_iterable()で辞書型のリストを整理\nまずはitertools.chain.from_iterable()を使って全iterableの要素を返すイテレータを作成し、list化します。\n\n```python\ndic_list = 辞書型のリストデータ\n\niterator_list = list(itertools.chain.from_iterable(dic_list))\n```\n\n```json\n[\n    {'No': 1, 'Name': 'Yamada Taro',   'LastLoginTime': '2021-03-16 15:44:16'}, \n    {'No': 2, 'Name': 'Yamada Jiro',   'LastLoginTime': '2021-03-10 00:12:17'}, \n    {'No': 3, 'Name': 'Yamada Saburo', 'LastLoginTime': '2021-03-20 12:01:02'}, \n    {'No': 4, 'Name': 'Yamada Shiro',  'LastLoginTime': '2020-12-24 00:00:13'}, \n    {'No': 5, 'Name': 'Yamada Goro',   'LastLoginTime': '2021-03-17 11:01:55'}, \n]\n```\n\nリストのリスト・・・となっていたデータが上記のように整理されます。\n\n# pandas.to_csv()でCSV出力\n\nあとはみなさんお馴染みの方法でCSV出力します。\nまずpandasのjson_normalizeで辞書のリストをDataFrameに変換します。\n\n```pyhthon\ndf = pandas.io.json.json_normalize(iterator_list)\n```\n\n```\n   No           Name        LastLoginTime\n0   1    Yamada Taro  2021-03-16 15:44:16\n1   2    Yamada Jiro  2021-03-10 00:12:17\n2   3  Yamada Saburo  2021-03-20 12:01:02\n3   4   Yamada Shiro  2020-12-24 00:00:13\n4   5    Yamada Goro  2021-03-17 11:01:55\n```\n\n次にpandasのto_csv()でDataFrameをCSV出力します。\n\n```pyhthon\ndf.to_csv('data.csv', index=False, encoding='utf-8', quoting=csv.QUOTE_ALL)\n```\n\n今回はindexオプションをFalseにしてindexを非表示に、quotingオプションにダブルクオーテーションを指定しています。\n下記がCSVの出力結果です。\n\n```\n\"No\",\"Name\",\"LastLoginTime\"\n\"1\",\"Yamada Taro\",\"2021-03-16 15:44:16\"\n\"2\",\"Yamada Jiro\",\"2021-03-10 00:12:17\"\n\"3\",\"Yamada Saburo\",\"2021-03-20 12:01:02\"\n\"4\",\"Yamada Shiro\",\"2020-12-24 00:00:13\"\n\"5\",\"Yamada Goro\",\"2021-03-17 11:01:55\"\n```\n\n# まとめ\n\nソース全文\n\n```python\nimport itertools\nimport pandas\nimport csv\n\ndic_list =  [\n                [\n                    {'No': 1, 'Name': 'Yamada Taro',   'LastLoginTime': '2021-03-16 15:44:16'}, \n                ],\n                [\n                    {'No': 2, 'Name': 'Yamada Jiro',   'LastLoginTime': '2021-03-10 00:12:17'}, \n                    {'No': 3, 'Name': 'Yamada Saburo', 'LastLoginTime': '2021-03-20 12:01:02'}, \n                ],\n                [\n                    {'No': 4, 'Name': 'Yamada Shiro',  'LastLoginTime': '2020-12-24 00:00:13'}, \n                    {'No': 5, 'Name': 'Yamada Goro',   'LastLoginTime': '2021-03-17 11:01:55'}, \n                ]\n            ]\n\niterator_list = list(itertools.chain.from_iterable(dic_list))\ndf = pandas.io.json.json_normalize(iterator_list)\ndf.to_csv('data.csv', index=False, encoding='utf-8', quoting=csv.QUOTE_ALL)\n```\n\n出力結果CSV\n\n```\n\"No\",\"Name\",\"LastLoginTime\"\n\"1\",\"Yamada Taro\",\"2021-03-16 15:44:16\"\n\"2\",\"Yamada Jiro\",\"2021-03-10 00:12:17\"\n\"3\",\"Yamada Saburo\",\"2021-03-20 12:01:02\"\n\"4\",\"Yamada Shiro\",\"2020-12-24 00:00:13\"\n\"5\",\"Yamada Goro\",\"2021-03-17 11:01:55\"\n```\n\n以上\n\n[docs.python.org itertools](https://docs.python.org/ja/3/library/itertools.html#itertools.chain.from_iterable)\n","user":"shinkai_","created_at":"2021-03-28T22:11:03+09:00","updated_at":"2021-03-28T22:12:01+09:00"},{"url":"https://qiita.com/licp/items/61dec138feff469c617c","title":"TranscendのMac初期設定","body":"自分用のメモ。\n\n-作業-\n①`Transcend`をUSB接続する\n\n②`Finder`を開き、`ディスクユーティリティ`を選択\n![スクリーンショット 2021-03-28 21.45.24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1002147/928221a0-4eb8-9c16-eb8c-7bd660b47429.png)\n\n③`Transcend`を選択し、`消去`を選択\n![スクリーンショット 2021-03-28 21.46.12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1002147/cc25504f-8620-d536-b5b7-3272643da031.png)\n\n④フォーマットは`Mac OS拡張（ジャーナリング）`を選択\n　これを選択することで、Mac用に設定が変更される\n　（初期設定はWindows用）\n![スクリーンショット 2021-03-28 21.46.52.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1002147/cfc025ad-f78a-fae3-9b44-714cee3eec6e.png)\n\n⑤処理完了後、完了ボタンをクリック\n![スクリーンショット 2021-03-28 21.47.19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1002147/c40b3caa-78b3-740a-cdfe-b6f53a545c2d.png)\n\n\n-作業結果-\nディスクユーティリティの｀Transcend｀に「USB 外部物理ボリューム・Mac OS拡張（ジャーナリング）」と表示されていることを確認\n![スクリーンショット 2021-03-28 21.47.44.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1002147/bb20010d-11a8-f19d-028c-7195c137a7d8.png)\n\n-FIN-\n","user":"licp","created_at":"2021-03-28T22:10:19+09:00","updated_at":"2021-03-28T22:11:35+09:00"},{"url":"https://qiita.com/toppakou7/items/1e7cc8d5003b28e3cd0e","title":"大学入学共通テスト「情報」の問題を全問解説してみた（元資格の予備校講師が徹底解説！）","body":"##大学入学共通テスト「情報」のサンプル問題を全問動画解説してみました。\n\n２０２１年３月２４日に大学入試センターが、２０２５年の大学入学共通テストから\n情報科目を新設すると発表しました。\n\n同時に、サンプル問題が提供されましたので、\n今までの、IT業界１５年　、資格の予備校講師などの経験を生かして全問動画解説しました。\n\n予備校なら結構なお金かかると思いますが、所得による教育格差をなくしたいので無料で公開します。\n\n##第１問　セキュリティ、ネットワーク、情報デザイン等\n\n取り急ぎ第１問解いてみたところ、満点でしたので\nどのように解けばいいのかの思考プロセスもあわせて解説できればと思っています。\n\n現時点で教科書はありませんが、情報科の先生が事前に勉強している、\n教員研修用教材の内容も紐づけながら解説したいと思います。\n\nhttps://note.com/toppakou/n/n073f5388861c\n\n\n##第２問　プログラミング、アルゴリズム\n\n練習すれば、解くことは出来るけど、これを書籍ベースで教えるのは\n教える方も、教わる方も結構大変だと感じています。\n\n今回の解説も、動画をメインにして、文字おこしも動画と突き合わせて確認頂けると幸いです。\n\nプログラミングのペーパーテストのコツは、変数（特にカウントアップ系、配列系）に\n実際に値を渡してシミュレーションをペーパー上で行うことです。\n\n\n穴埋めなので、自分自身ならこんなプログラムにしない！\nという突っ込み問題も今後出てくると思いますが、\n実際の開発現場でも他人のコードに突っ込み入れながら、\n\n退職者の作業を引き継ぐことは普通にあるので、\nヒントとなる処理の日本語説明と突き合わせながら\nソースコードの意図を読み取れるように頑張りましょう。\n\nプログラミング問題は、初めの問題で意図を読み取れないと、\n芋づる式に全問落とす可能性もあるので、あせらず初めの問題から丁寧にプログラム仕様を把握していきましょう。\n\nhttps://note.com/toppakou/n/n31b52dd22d6f\n\n##第３問　データ分析、データ活用\n\n複雑な複数の表を組み合わせて、意図を読み取れなければ何を言っているか分からない問題です。\n\nあと、数学Ⅰの四分位数の知識と第２四分位数（Q2）が中央値であることの\n知識が無いと答えられない問題もあります。\n\n逆にその知識があれば解けます。標準偏差関連では値が大きいほど\nばらつきが大きいということを知っているかどうかということも大切になってきます。\n\nhttps://note.com/toppakou/n/nc99bb50c2ccb\n\n##YouTubeチャンネル\nこれからも解説動画増やしていきます。\nhttps://www.youtube.com/channel/UC_0LOFMRg60xDBfkzMAmkfA\n\n\n##メモ\n\n\n\n\n","user":"toppakou7","created_at":"2021-03-28T22:09:12+09:00","updated_at":"2021-03-28T22:09:12+09:00"},{"url":"https://qiita.com/zuttti25/items/31ef3ebc6d0492a2d2aa","title":"RailsにおけるSeedファイルの作成","body":"##seedファイルって何？？\n\nseedファイルというのは簡単に言うと初期データのことです。　　\nコーディング中に何らかの理由でデータベースをリセットした場合、中に入っているデータももちろんですが消えてしまいます。\nしかし、Seedファイルを最初に作成してしまえばあとは反映させるだけで何回でも蘇ります。\n\n\n##基本的な書き方\n\n```\nUser.create!(\n   email: 'test@test.com',\n   name: 'テスト太郎',\n   image: File.open('./app/assets/images/test.jpg')\n)\n```\n\n\nUserモデルに対して[ email ][ name ][ image ]というカラムを指定し、それぞれの型に合わせて記述します。\n\nUserモデル以外にも、Postモデルなども同じ要領で作成します。\nモデル名とカラム名が変わるだけです。\n\n```\nPost.create!(\n  user_id: 2,\n  title: \"テスト\",\n  product: \"テストです\"\n)\n```\nPostモデルの場合、投稿はユーザーが存在しないと出来ないため、先にUserモデルを記述しておく必要があります。そういないとエラーが発生します。\n\n\n##大量生産することも可能\n\n```\n5.times do |n|\n    User.create!(\n      email: \"test#{n + 1}@test.com\",\n      name: \"テスト太郎#{n + 1}\",\n      image: File.open('./app/assets/images/test.jpg')\n    )\n  end\n```\n\nしかし、このやり方はあまりオススメはしません。\nポートフォリオとして企業に見せる場合、初期データは実際の運営を想定したデータを投影する方が見栄えがいいからです。\n面倒ですが手作業で一つずつ実際のユーザーを想定して作成することをオススメします。\n\n```\n[\n  ['test1@test.com', 'テスト太郎', image: File.open('./app/assets/images/test.jpg')],\n  ['test2@test.com', 'テスト徹子', image: File.open('./app/assets/images/test.jpg')]\n].each do |mail, name, img|\n  User.create!(\n    { email: mail, name: name, image: img}\n  )\n```\n無駄なく記述する場合なら、この記述方法が一番コードを少なくかけます。\n欠点はカラムが多くなるとどれがどのカラムを指しているかわかりずらくなることです。\n\n\n##中間テーブルの場合\n\nフォロー機能の場合\n\n```\nRelationship.create!(\n  user_id: 1,\n  follow_id: 5\n)\n```\n\nタグ機能の場合\n\n```\nTagmap.create!(\n  tag_id: 20,\n  post_id: 12\n)\n```\n\n中間テーブルの場合は、アソシエーションしているモデルのidそれぞれに、該当させたい番号を設定するだけで大丈夫です。\nまた、この時もモデルにデータが存在しないとエラーが起こるため、上の行に記述しておく必要があります。\n\n\n##仕上げ\n\nseedファイルを書いたあとは\n\n```\nrails db:seed\n```\n\nとしてあげることでseedに書かれた内容をデータベースに反映させることができます。\n実際にデータが投入されたかどうか、コンソールなどで確認して見てください。\n","user":"zuttti25","created_at":"2021-03-28T21:59:31+09:00","updated_at":"2021-03-28T21:59:31+09:00"},{"url":"https://qiita.com/rei1129/items/dba6b00e75ae9019134d","title":"herokuで画像を正しく配置しているのにActionView::Template::Errorがでる場合の対処法","body":"\n\n# 背景\n作成したアプロケーションをherokuにデプロイしたところ下記のエラー画面が表示された\n![スクリーンショット 2021-03-28 17.26.57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1248254/b2fb3aa4-8b18-519a-190d-a13668836c51.png)\n\nログを確認してみると以下のようなエラー文が表示されている。\n\n```ruby\nActionView::Template::Error (The asset \"slider-01.jpeg\" is not present in the asset pipeline.\n```\nトップページに使用しているslider-01.jpegがassetに配置されていないと言われているがローカルでは問題なく表示されている。\n画像のサイズの問題かと思い、画像サイズの変更も行ったが改善は見られなかった。\n\n# 環境\nruby 2.6.5\nRails 6.0.3.5\nheroku/7.51.0\n\n# 解決方法\n\n試行錯誤の結果、jpegファイルが問題ではないかと仮説を立て、試しにpngファイルに変更してみるとエラーは表示されなくなった。\n\nどうやらherokuではjpg、pngは問題なく使用できますがjpegになると不具合が起きるようです。\n\n# 最後に\n初投稿ですので見づらい箇所がございましたら申し訳ございません。\nどなたかの参考になりましたら幸いです。\n\n","user":"rei1129","created_at":"2021-03-28T21:59:19+09:00","updated_at":"2021-03-28T21:59:19+09:00"},{"url":"https://qiita.com/Delia/items/120b044dabf9035fc9d6","title":"EC2にDocker(Laravel + Mysql + phpmyadmin + nginx)を構築","body":"#【EC2】【Docker】Laravel + Mysql + phpmyadmin + nginx　環境構築#\n\n\n#目次\n[1.はじめに](#1-はじめに)\n[2.目的](#2-目的)\n[3.Dockerのインストール](#3-dockerのインストール)\n[4.Docker-composeのインストール](#4-docker-composeのインストール)\n[5.Dockerfilelを書く](#5-dockerfileを書く)\n[6.docker-compose.ymlを書く](#6-docker-composeymlを書く)\n[7.Laravelのインストール](#７-laravelのインストール)\n[8.まとめ](#8-まとめ)\n\n#1. はじめに\n初めまして、Deliaと申します。\n社会人2年目のネットワーク(サーバ)エンジニアです。\nかなり前からWeb開発に興味が有り、時間的に余裕ができたので勉強を始めました。\nそんな初心者がDockerを用いたLaravel環境構築の手順を備考録としてまとめました。\n手順抜けや意味のない設定等あるかもしれません。\nその際はご指摘いただけますと幸いです。\n\n\n実行環境\nPC：__Macbook Pro__\nOS：__Big Sur 11.2.2__\nEC2：__Amazon Linux 2__\nDocker：__Docker version 19.03.13-ce, build 4484c46__\ndocker-compose：__docker-compose version 1.16.1, build 6d1ac21__\n\n\n\n#2. 目的\nEC2のVPC上にDockerを用いて以下を構築する。\n ・Laravel\n ・Mysql\n ・phpMyadmin\n ・Nginx\n\n最終的な構造は以下のようになります。\n\n```shell\n Docker/\n　   ├ php/\n　   │　└ src/\n　   │　│  └ Laravel/\n　   │　└ php.ini\n　   │　└ Dockerfile\n　   ├ web/\n　   │　└ default.conf\n　   │　└ Dockerfile\n　   ├ db/\n　   │　└ init.d/\n　   │　│  └ 初期化に使うSQLとか\n　   │　└ data/\n　   │　│  └ データベースのデータ\n　   │　└ Dockerfile\n　   └ phpmyadmin/\n　    　└ sessions/\n　    　└ Dockerfile\n```\n\n#3. dockerのインストール\n公式を参考にインストールしていきます。\n\n\n```shell:EC2\nsudo yum update                                    # とりあえず\nsudo amazon-linux-extras install docker            # Dockerをインストールする\nsudo usermod -a -G docker ec2-user                 # ec2-userがコマンドを使えるように願いを込める\nsudo service docker start                          # 起動する\ndocker info                                        # 確認する\n```\n[Extras Libraryについてはこちら](https://aws.amazon.com/jp/premiumsupport/knowledge-center/ec2-install-extras-library-software/)\n[Dockerのインストールについてはこちら](https://docs.aws.amazon.com/ja_jp/AmazonECS/latest/developerguide/docker-basics.html)\n#4. docker-composeのインストール\n同様に、公式を参考にインストールする。\nバージョンが表示されれば成功です。\n\n```shell:EC2\nsudo curl -L https://github.com/docker/compose/releases/download/1.16.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\nsudo chmod +x /usr/local/bin/docker-compose        # 権限を付ける\ndocker-compose --version                           # 確認する\n```\n[Docker-composeドキュメントはこちら](https://docs.docker.jp/compose/install.html)\n\n#5. dockerfileを書く\n今回はイメージは使用せず構築します。\nまずはディレクトリを作成します。\nそれぞれのフォルダにDockerfileを作成します。\n\n```shell:EC2\nmkdir php db web phpmyadmin  \nmkdir php/src db/init.d db/data\n```\nWebサーバにNginxを使用する場合phpは「___fpm___」バージョン？を使用します。\nphp用はLaravelインストールの為パッケージを追加します。\n\n```dockerfile:Dockerfile　php用\nFROM php:8.0.3-fpm-buster\n\nRUN apt-get update \\\n && apt-get install -y --no-install-recommends \\\n  libzip-dev \\\n  unzip \\\n  git \\\n # phpがmysqlに接続するのに必要なドライバ\n && docker-php-ext-install pdo_mysql        \n# Composerのインストール   \nCOPY --from=composer:latest /usr/bin/composer /usr/bin/composer\n```\n```dockerfile:Nginx用\nFROM nginx:latest\n\nCOPY ./default.conf /etc/nginx/conf.d/default.conf\n```\n```dockerfile:Dockerfile　Mysql用\nFROM mysql:latest\n```\n```dockerfile:Dockerfile　phpmyadmin用\nFROM phpmyadmin:latest\n```\nついでにNginxで使用するdefault.confを作成します。\n\n```shell:EC2　/db/default.conf\nserver {\n    listen       80;\n    listen  [::]:80;\n    root /var/www/html/Laravel/public;\n    index index.php index.html index.htm;\n\n    access_log  /var/www/html/access.log;\n    error_log   /var/www/html/error.log;\n\n    location ~ \\.php$ {\n        fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n        fastcgi_pass   php:9000;\n        fastcgi_index  index.php;\n        fastcgi_param  SCRIPT_FILENAME $document_root$fastcgi_script_name;\n        include        fastcgi_params;\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n}\n```\n\n#6. docker-compose.ymlを書く\n\n```yaml:docker-compose.yml\nversion: \"3\"\nservices:\n  php:\n    build: ./php/\n    volumes:\n      - ./php/src:/var/www/html\n    container_name: php\n    tty: true\n  nginx:\n    build: ./web/\n    volumes:\n      - ./php:/var/www/html         # Laravelがあるディレクトリをマウント\n    container_name: nginx\n    ports:\n      - 8080:80                     # EC2のセキュリティグループで8080開放しておく\n    depends_on:\n      - php                         # phpが起動してから起動する\n  mysql:\n    build: ./db/\n    volumes:\n      - ./db/init.d:/docker-entrypoint-initdb.d   # イメージをbuildする際に実行される　初期データを作成するSQLファイル等を置いておく\n      - ./db/data:/var/lib/mysql                  # 作成したテーブル等を永続させる場合に必要　※１\n    container_name: mysql\n    environment: \n      MYSQL_USER: yourname\n      MYSQL_PASSWORD: password\n      MYSQL_ROOT_PASSWORD: root\n    ports:\n      - 3306:3306\n    depends_on:\n      - nginx\n  phpmyadmin:\n    build: ./phpmyadmin/\n    volumes:\n      - ./phpmyadmin/sessions:/sessions\n    container_name: phpmyadmin\n    environment:\n      - PMA_ARBITRARY=1\n      - PMA_HOST=mysql\n    ports:\n      - 10080:80\n    depends_on:\n      - mysql\n```\n\n※１・・・権限の問題だと思いますが、一度ビルドしてから、ダウンして、データがホストに残っている状態で再度ビルドしようとすると弾かれます。ファイルの所有者が「libstoragemgmt」になっている為？\nなので私はビルドする前にdocker-composeを実行するユーザをファイルの所有者に変更し、回避しています。\nそもそも頻繁にビルドするものなのか？と思っています。\nここらへんがよくわからないので知っている方いましたらご教示いただけますと幸いです。\n\n\n#7. laravelのインストール\n　__1.コンテナを起動する__\n\n```shell\ndocker-compose up -d --build\n```\n　__2.Laravelをインストールする__\n\n```shell:Laravelのコンテナ\ncomposer create-project laravel/laravel --prefer-dist YourProjectName\n```\n　__3.権限を変更する__\n↓をしないとNginxがLaravelにアクセスできずエラーになります。\nまた、Mysqlもデータを永続化させる場合には権限周りをうまくやらないといけないみたいです。（6-※1）\n\n\n```shell:Laravelのコンテナ\nchown www-data Laravel/storage\nchown www-data Laravel/vendor\n```\n  __4.ブラウザからアクセスして確認する__\n![Laravel.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1216302/b5d0d73b-af06-06d5-fa8b-b4148295aed5.png)\n\n  __5.データベースの作成__\nここで作成したデータベース名を覚えておいてください。\n\n```shell:EC2\ndocker-compose exec mysql bash\n```\n```shell:mysqlのコンテナ\nmysql -u root -p\nroot\n#Laravel_DB という名前のデータベースを作成します\nCREATE DATABASE Laravel_DB\n```\n\n  __6.LaravelとMysqlの接続__\n以下２ファイルを書き換えます。\ndatabase nameは先程のデータベース名を入力します。\n\n```Laravel/.env\nDB_CONNECTION=mysql\nDB_HOST=mysql\nDB_PORT=3306\nDB_DATABASE=[database name]\nDB_USERNAME=[user name]\nDB_PASSWORD=[password]\n\n```\n\n```Laravel/config/database.php\n'database' => env('DB_DATABASE', '[database name]'),\n'username' => env('DB_USERNAME', '[user name]'),\n'password' => env('DB_PASSWORD', '[password]d'),\n```\n __7.接続の確認__\nphpコンテナに入りファイルが正しく設定できているか、データベースと接続できるか確認します。\n\n```shell:EC2\ndocker-compose exec php bash\n```\n```shell:phpのコンテナ\ncd Laravel                # Laravelをインストールしたディレクトリに移動\nphp artisan tinker\nDB::connection()\nDB::select('SELECT * from users');\n#------あらかじめテーブルを作成しておき、作成したデータを取得できればOK-------\n=> [\n     {#3337\n       +\"id\": 1,\n       +\"name\": \"test\",\n       +\"created_at\": \"2021-03-28 21:18:58\",\n       +\"updated_at\": \"2021-03-28 21:18:58\",\n     },\n   ]\n\n```\n\n\n# 8.まとめ\n\nこれで目的は達成できたのではないでしょうか。\nまだまだ理解の足りない箇所がありますが、コンテナの作成、起動、コンテナ間の通信、連携ができました。\n今後はそれぞれをより実務的な環境で構築できるよう学びたいです。\n最後まで読んでいただきありがとうございました。\n","user":"Delia","created_at":"2021-03-28T21:55:37+09:00","updated_at":"2021-03-28T21:55:37+09:00"},{"url":"https://qiita.com/hiro-tech1192/items/8417334ebc37008e35c0","title":"AWS12冠を取得したので勉強方法など書いていきます","body":"# はじめに\n先日AWSの全12資格に合格し、いわゆる12冠を達成することができました。時間が経つと記憶も風化してしまうので、忘れないうちに受験の動機や勉強方法など記載しておきたいと思います。\n![12-badges.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/47c43fcd-3bf3-67b4-4ae2-4d91b560f2dd.png)\n\n\n\n# 資格取得までの経緯\n私の経歴ですが、元々はECサイトなどのシステムをオンプレまたはプライベートクラウド上に構築する仕事がメインで、どちらかというとインフラというよりはシステム開発寄り（Java系）のエンジニアでした。\n2018年くらいから担当システムをAWSへ移行するプロジェクトが増えてきて、それまで「AWSよく聞くけど実際どうなのかね？」という感じでしたが、いざ業務で扱ってみるとあまりの使いやすさとサービスの豊富さに「AWS最高！！」になりました。この時点でAWS使わなくて何使うの？オンプレ何それ？美味いの？という思考回路が定着しました。\n\nあまりにAWSが好きでAWS１本で食っていきたい、と思うまでになりましたが、実際はAWSに関係のない案件にアサインされることも多かったため、ともかく「AWSといえばあいつ」と思ってもらえる状態を作ろうと考え資格を取り進めることにしました。\n当初はソリューションアーキテクト - プロフェッショナル（SA-Pro）を取れれば御の字くらいの感覚でしたが、段々と取ること自体が楽しくなってしまい、次、次と取り進めていくうちに結局12冠全て取ってしまった次第です。\n\n\n# 受験履歴\n以下の通りです。１年くらいで一気に取得しました。\n\n|資格名|受験日|スコア|\n|:---|:---:|--:|\n|ソリューションアーキテクト - アソシエイト|2020/2/7|804|\n|ソリューションアーキテクト - プロフェッショナル|2020/6/19|819|\n|DevOpsエンジニア - プロフェッショナル|2020/8/28|872|\n|SysOps アドミニストレーター - アソシエイト|2020/9/2|763|\n|ディベロッパー - アソシエイト|2020/9/7|941|\n|クラウドプラクティショナー|2020/9/7|934|\n|データアナリティクス - 専門知識|2020/10/9|863|\n|データベース - 専門知識|2020/10/21|861|\n|高度なネットワーキング - 専門知識|2020/11/8|92%|\n|セキュリティ - 専門知識|2020/11/23|921|\n|機械学習 - 専門知識|2021/1/10|941|\n|Alexa スキルビルダー - 専門知識|2021/1/23|861|\n\n\n※高度なネットワーキング - 専門知識のみ、スコアが数字でなくパーセント表示でした\n\n\n# 各試験の難易度\n以下の通りです。完全に私個人の主観です。この辺りは受験者が元々持っている知識やバックグラウンドに左右されるかと思います。\n\n|順位|資格名|\n|:---:|:---|![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/a136ba71-be0c-861b-2c7b-e7b500c41706.png)\n|１位|ソリューションアーキテクト - プロフェッショナル|\n|２位|高度なネットワーキング - 専門知識|\n|３位|機械学習 - 専門知識|\n|４位|データアナリティクス - 専門知識|\n|５位|DevOpsエンジニア - プロフェッショナル|\n|６位|セキュリティ - 専門知識|\n|７位|データベース - 専門知識|\n|８位|Alexa スキルビルダー - 専門知識|\n|９位|ソリューションアーキテクト - アソシエイト|\n|１０位|SysOps アドミニストレーター - アソシエイト|\n|１１位|ディベロッパー - アソシエイト|\n|１２位|クラウドプラクティショナー|\n\n\n# 各試験の感想・勉強方法など\n受験した順番に書いていきたいと思います。\n\n## ①ソリューションアーキテクト - アソシエイト\n初めて受験したのはソリューションアーキテクトアソシエイトです。こちらは試験対策本がたくさん出ているので２冊ほど買って読み込みました。このうち１冊（リンクの上の方）は中身がよかったので３回繰り返して読んでいます。\n\nhttps://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88-AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%82%A4%E3%83%88-%E6%94%B9%E8%A8%82%E7%AC%AC2%E7%89%88-NRI%E3%83%8D%E3%83%83%E3%83%88%E3%82%B3%E3%83%A0%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE/dp/4815607389/ref=sr_1_1?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=2HNMQ3KQCCJHP&dchild=1&keywords=aws+%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%82%A4%E3%83%88+%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88&qid=1616922264&sprefix=AWS+%E3%81%82%E3%81%9D%2Caps%2C363&sr=8-1\n\nhttps://www.amazon.co.jp/%E6%A8%A1%E6%93%AC%E5%95%8F%E9%A1%8C%E4%BB%98%E3%81%8D-AWS%E8%AA%8D%E5%AE%9A-%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%82%A4%E3%83%88%E6%95%99%E7%A7%91%E6%9B%B8-SAA-C02/dp/4295010650/ref=sr_1_6?__mk_ja_JP=%E3%82%AB%E3%82%BF%E3%82%AB%E3%83%8A&crid=2HNMQ3KQCCJHP&dchild=1&keywords=aws+%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%82%A4%E3%83%88+%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88&qid=1616922264&sprefix=AWS+%E3%81%82%E3%81%9D%2Caps%2C363&sr=8-6\n\n勉強開始からおおよそ２週間くらいで受験し、無事合格しました。１週間は読書、残り３～４日で練習問題（対策本の付録として付いているもの）を繰り返し解いた感じです。アソシエイトはネットで検索すれば無料の練習問題がたくさんあるので、これらを９割正解できれば合格可能と思われます。\nとはいえ「練習問題はほぼ満点取れるようになってたので余裕っしょ」と思っていたら実際の問題の方が難しくて若干焦ったことを覚えています。\nアソシエイトはAWSサービスの知識を薄く広く問われますが、これを受けたことにより今まで使ったことのなかったサーバレスサービス（API Gateway、Lambda、DynamoDB、Kinesis等）についての知識を得ることができたので良かったなあと思っています。\n\n\n\n\n\n## ②ソリューションアーキテクト - プロフェッショナル（SA-Pro）\nAWS資格の中で最難関との呼び声も高い試験です。\n本当はアソシエイト合格後、１～２か月くらい勉強して取るつもりでしたが、2020年4月から緊急事態宣言が発令され外出し辛い状況に。いつ解除されるか読めなかったのでだんだんモチベーションは下がっていたものの、勉強はゆるゆる続けてたので、解除されてすぐの2020年6月1に受験したものの見事玉砕。\n受験前は「まあ長いこと勉強したし受かるだろ」くらいの気持ちでいましたが、実際受験してみてあまりの難しさに絶望したことを鮮明に覚えています。\n\n手ごたえとしては半分解けたかどうかぐらいだったので、自分には到底無理な試験だと諦めかけていましたが、後日送られてきたスコアでは728点。750点で合格だからギリギリやん。。というわけで２週間の対策期間を経て再受験し、約100点上乗せして無事合格できました。\n\n他の皆さんも仰っていますがこの試験はとにかく長文の問題が大量に出るので、いかにそれに対応できるかがポイントになります。単純な暗記だけでは合格できません。いかに問題と選択肢を早く読み、出題者の意図を予測できるかが勝負になります。問題文は機械翻訳なので、悪文にも慣れておく必要もあります。\nまた問題の選択肢は「ほぼ書かれていることが同じで、ごく一部だけ違う」ようなケースが非常に多いので、いかに目Diff力を高められるかもポイントです。ともかく練習問題を大量に解いて、早く読んで解くトレーニングをするのが重要と思われます。\n\nSA-Proはアソシエイトと比べて情報が少なく、当時は対策本なども存在しなかったので色々と調べましたが、最終的にUdemyに行きつき問題集を２つほど買って解きまくりました。\n\nhttps://www.udemy.com/course/aws-solutions-architect-professional-practice-exams-amazon/\n\nhttps://www.udemy.com/course/aws-53225/\n\n個人的には上の方がおすすめです。英語ですが、Chromeを使えばブラウザ内で翻訳できるのでさほど問題はないかと。機械翻訳の悪文にも慣れることができます。こちらの問題を90分で75問、正解率8～9割で解けるようになれば合格すると思います。私の場合は大体３周くらいやりました。\n\nちなみにPMPも含め資格はいくつか持ってますが、私が受けた中ではこの試験がダントツで難しかったです。SA-Proは勉強方法について書き始めるときりがないので、記事を分けて別途記載したいと思っています。\n\n\n## ③DevOpsエンジニア - プロフェッショナル（DevOps-Pro）\nSA-Proを取ったので次は６冠、ということでまずはDevOps-Proに目標を定めました。\n業務が忙しかったこともあり、少し間をあけて８月上旬～下旬にかけて勉強＆受験して無事合格。勉強期間は賞味３週間くらいだったはずです。SA-Proの基礎知識があれば＋αで合格可能と思います。\nこちらも対策本など存在しない試験なので、Udemyで問題集を買ってひたすら解きまくりました。購入したのは以下で、SA-Pro問題集作者と同じ人が作ったものです。こちらも３周くらい解きました。\n\nhttps://www.udemy.com/course/aws-certified-devops-engineer-professional-practice-exams-amazon/\n\n\n## ④SysOps アドミニストレーター - アソシエイト\n上記で取得したDevOps-Proの下位資格です。上位取ったからこんなの楽勝だろ、という思いのもと勉強なしで受けましたが、必要な知識が若干異なるようで意外に苦戦しました。一応合格できたものの、合格ラインギリギリの763点。。\n当時は効率重視で上位を取ってから下位をささっと取ってしまう計画でしたが、後から考えるとちゃんと下から受験していった方がスムーズかつ記憶にもよく残ると思います。\n\n\n## ⑤デベロッパー - アソシエイト、クラウドプラクティショナー\n６冠をさっさと取ってしまいたかったので、残り２試験を同じ日に予約しました。前回の反省を元に、デベロッパー - アソシエイトの方はちゃんと問題集を買って一通り解いたので難なく合格。プラクティショナーは無勉強でしたがまあ普通に合格しました。\nデベロッパー - アソシエイトで購入したのはこちら。上で紹介したものと同じく、笑顔がステキなJon Bonsoさんによる問題集です。\n\nhttps://www.udemy.com/course/aws-certified-developer-associate-practice-exams-amazon/\n\n\n## ⑥データアナリティクス - 専門知識\n上記の時点で６冠を達成したものの、実業務ではやはりAWSに絡むことはさほど多くありませんでした。というわけで仕方がないので１２冠を目指して専門知識の６資格合格を目指すことに。\n元々データ分析に興味があったこともあり、まずはデータアナリティクスをターゲットにし、大体１ヵ月間の勉強で無事合格しました。専門知識については概ね以下の勉強方法で合格できると思いますので、私が実際にやった内容を記載しておきます。\n\n#### AWSが提供しているEラーニングを受講する\nAWSが試験対策としてEラーニングを公開しています。各試験の出題範囲と利用サービスを把握できるため、まずはこれを受講するのがよいと思います。ただし、これを受けたとしても合格に必要な知識レベルに達することはできませんのでご注意ください。\nデータアナリティクスの場合はこちらのリンクとなります。英語教材ですが、Chormeの翻訳機能を使えば問題ないはずです。\n\nhttps://www.aws.training/Details/eLearning?id=46612\n\n\n#### BlackBeltの読み込み\n上記Eラーニングで出たサービスのBlackBeltを読み漁ります。BlackBeltはPDF版と動画版がありますが、１度は動画版を視聴することをお勧めします。理解度が全然違いますので。再生速度を1.25～1.5倍にすれば、時間もある程度節約できると思います。\n\nhttps://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/\n\n\n#### サンプル問題を解く\nAWSで公開されているサンプル問題を解きます。読んだ瞬間答えられるようになるくらい繰り返し説きます。データアナリティクスの場合はこちらのページにある「サンプル問題のダウンロード」からゲットできます。\n\nhttps://aws.amazon.com/jp/certification/certified-data-analytics-specialty/\n\n\n#### 問題集を購入＆解く\n他のPro試験と同じく試験対策本は存在しないので、Udemyなどで販売されている問題集を購入し、ひたすら解きます。３周もすれば楽に解けるようになるはずなので、そうなれば受験し頃です。Udemyならこちらが良いのではないでしょうか。安定のJon Bonsoさんによる問題集です。\n\nhttps://www.udemy.com/course/aws-certified-data-analytics-specialty-practice-exams-amazon/\n\n\n#### 模試を解く\nAWS資格に合格すると、特典としてAWSの模試を無料で受けられるチケットを入手できます。専門知識を受験するような人はたくさん貯まってると思いますので、遠慮なくじゃんじゃん使っちゃいましょう。\n上記の通り勉強していれば模試でも合格ラインに達している可能性が高いですが、ダメだった場合は再勉強しましょう。あと、模試のキャプチャを取っておいて繰り返し解くのも重要です。\n以上をこなせば大体の準備はできていると思いますので、問題なければ本番の試験を受験しましょう。\n\n\n## ⑦その他専門知識の試験（５つ）\nデータアナリティクス合格後、残りの専門知識資格を取り進めていきました。勉強方法は概ね上に書いている内容と同じです。\n専門知識は2020年10月～2021年1月の４カ月間で計６個を取得することができました。かなりハイペースだったので大変でしたが、そのぶん無事全て取得した時の喜びもひとしおでした。\n\n\n\n# 最後に\n頑張った甲斐あって、１２冠を取得した後はAWSの仕事が増えつつあるような気がします。とはいえ資格をとっただけで仕事がデキるようになるわけではなく、またスキルや技術は実務を通してのみ身に付けることができると考えているので、これからも継続して努力していきたいと思います。\nクラウド界隈は進化が著しく速いのでうかうかしてると乗り遅れてしまいがちですが、エキサイティングかつ刺激の多い分野でもあるので楽しみながら日々精進していければと考えています。\n\n今回の記事が誰かのお役に立てると幸いです。\n\n\n\n","user":"hiro-tech1192","created_at":"2021-03-28T21:55:28+09:00","updated_at":"2021-03-28T22:03:29+09:00"},{"url":"https://qiita.com/t_nana/items/1fa624e9c1232b00b2be","title":"【Android】ConstraintLayout Attribute まとめ","body":"# はじめに\nこの記事は[公式リファレンス](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout?hl=ja)の内容をまとめたものになります。\nConstraintLayoutのAttributeってどんなのあるの? という方向けのまとめです。\n自分の備忘録も兼任していたり...\n\n# [Relative positioning](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#RelativePositioning)\nViewを別Viewに対して相対的に設置する。\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/88ec4077-32f0-89a3-0152-e2318e10754c.png\">\n\n| Attribute | 効果 | 指定の仕方 |\n|:-:|:-:|:-:|\n|layout_constraintLeft_toLeftOf layout_constraintStart_toStartOf|自分の左端と指定したViewの左端を揃える|Viewのid名|\n|layout_constraintLeft_toRightOf  layout_constraintStart_toEndOf|自分の左端と指定したViewの右端を揃える  （自分を指定したViewの右側に配置する）|Viewのid名|\n|layout_constraintRight_toLeftOf  layout_constraintEnd_toStartOf|自分の右端と指定したViewの左端を揃える  （自分を指定したViewの左側に配置する）|Viewのid名|\n|layout_constraintRight_toRightOf  layout_constraintEnd_toEndOf|自分の右端と指定したViewの右端を揃える|Viewのid名|\n| layout_constraintTop_toTopOf |自分の上端と指定したViewの上端を揃える\t|Viewのid名|\n| layout_constraintTop_toBottomOf |自分の上端と指定したViewの下端を揃える  （自分を指定したViewの上側に配置する）|Viewのid名|\n| layout_constraintBottom_toTopOf |自分の下端と指定したViewの上端を揃える  （自分を指定したViewの下側に配置する）|Viewのid名|\n|layout_constraintBottom_toBottomOf|自分の下端と指定したViewの下端を揃える|Viewのid名|\n| layout_constraintBaseline_toBaselineOf |自分のテキストベースラインと指定したViewのテキストベースラインを揃える|Viewのid名|\n\n# [Margin](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#Margins)\nRelative positioningの__制約に対して__marginを設定する。\nmarginの値はマイナスの値にならない。\nAttributeの書き方は他のベースレイアウトと変わらないが、__制約に対してのmargin__というところが注意点。\n##一般的なMargin\n| Attribute | 効果 | 指定する値 |\n|:-:|:-:|:-:|\n|android:layout_marginStart|自分の左側にmarginを適用する|dp|\n|android:layout_marginEnd|自分の右側にmarginを適用する|dp|\n|android:layout_marginLeft|自分の左側にmarginを適用する（APIレベル17より低い場合にはこちらも追加）|dp|\n|android:layout_marginRight|自分の右側にmarginを適用する（APIレベル17より低い場合にはこちらも追加）|dp|\n|android:layout_marginTop|自分の上側にmarginを適用する|dp|\n|android:layout_marginBottom|自分の下側にmarginを適用する|dp|\n##対象のViewがGONEの時のMargin\n| Attribute | 効果 | 指定する値 |\n|:-:|:-:|:-:|\n|layout_goneMarginStart|自分の左側にmarginを適用する|dp|\n| layout_goneMarginEnd |自分の右側にmarginを適用する|dp|\n| layout_goneMarginLeft |自分の左側にmarginを適用する（APIレベル17より低い場合にはこちらも追加）|dp|\n| layout_goneMarginRight |自分の右側にmarginを適用する（APIレベル17より低い場合にはこちらも追加）|dp|\n| layout_goneMarginTop |自分の上側にmarginを適用する|dp|\n| layout_goneMarginTop |自分の下側にmarginを適用する|dp|\n\n# [Centering positioning](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#CenteringPositioning)\nRelative positioningの制約を自身の両端にかけることによって、Viewを中心に設置することができる。\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n        android:id=\"@+id/appCompatButton2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_a\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/e6cca141-cdf0-09b4-8bdd-96a4211432cb.png\">\n\n# [Bias](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#Bias)\nCenter positionを使用した際には、デフォルトでViewが中心に設置される。\nここにBias属性を0-1範囲で指定することで、位置の比率を変えることができる。\n\n| Attribute | 効果 | 値の範囲|\n|:-:|:-:|:-:|\n| layout_constraintHorizontal_bias |水平方向のBiasを指定|0 - 1|\n| layout_constraintVertical_bias |垂直方向のBiasを指定|0 - 1|\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n        android:id=\"@+id/appCompatButton2\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_a\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.3\"\n        app:layout_constraintVertical_bias=\"0.8\"/>\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/82bdeb45-d5db-4254-8f64-6bb77acec88c.png\">\n\n# [Circular positioning](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#CircularPositioning)\n別のViewの中心に対してViewの中心を角度、距離を指定して配置することができる。\n→ 別Viewを中心に極座標的に配置できる。\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/1f280a66-43fe-684b-67ca-720323969f37.png\">\n以下の3つのAttributeを設定する。\n\n| Attribute | 効果 |\n|:-:|:-:|\n| layout_constraintCircle |中心にするViewのid|\n| layout_constraintCircleRadius |角度（0 ~ 360）|\n| layout_constraintCircleAngle |距離（dp）|\n\n```xml:\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout\n        〜略〜 >\n \n    <androidx.appcompat.widget.AppCompatButton\n        android:id=\"@+id/appCompatButton\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_a\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n \n    <androidx.appcompat.widget.AppCompatButton\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:text=\"@string/button_b\"\n        app:layout_constraintCircle=\"@id/appCompatButton\"\n        app:layout_constraintCircleAngle=\"45\"\n        app:layout_constraintCircleRadius=\"100dp\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n \n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/5e29f876-75e8-d1f7-8b36-e7c85676aac6.png\">\n\n# [Dimensions constraints](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#DimensionConstraints)\n##Minimum dimensions on ConstraintLayout\nViewの最大サイズと最小サイズを制限することで、Viewの大きさを制御できる。\nlayout_widthとlayout_heightをwrap_contentにするかつ最大と最小を設定する必要ある。\n\n| Attribute | 効果 |\n|:-:|:-:|\n| android:minWidth|Viewの最小幅を設定する|\n| android:minHeihgt |Viewの最小の高さを設定する|\n| android:maxWidth |Viewの最大幅を設定する|\n| android:maxHeight |Viewの最大の高さを設定する|\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/appCompatButton\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_a\"\n    android:maxWidth=\"35dp\"\n    android:minWidth=\"1dp\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```\n\n##Widgets dimension constraints\nlayout_width, layout_heightに以下の値を設定することで、Viewの大きさを変えることができる。\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/7dd9ed51-45ba-cfec-fecf-0347e2709a70.png\">\n（a）layout_width or layout_heightに値を決め打ちする or wrap_contentを指定する\n（b）layout_width or layout_heightを0dpに指定する\n　　（ConstraintLayoutではmatch_parentを使うことは推奨されてない）\n（c）(b)を設定した上で、marginを設定する\n\n#[WRAP_CONTENT : enforcing constraints (Added in 1.1)](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#wrap_content-:-enforcing-constraints-added-in-1.1)\nwrap_contentを指定すると、Viewの大きさ通りの寸法になるため、画面外にViewがはみ出たり、他のViewに被ってしまうことがある。\nそこで、wrap_contentへの制限を設けることができる。\n\n| Attribute | 指定する値 |\n|:-:|:-:|\n|app:layout_constrainedWidth|true or false|\n| app:layout_constrainedHeight |true or false|\n\n例）app_layout_constrainedWidthを設定しない or falseを設定\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/583db2fb-5cd4-4509-444e-b4bb851561d7.png\">\n例）app_layout_constraintedWidthをtrueにする\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/5e3bdef3-ebc1-ed3c-08b9-533ef1eeaa6e.png\">\n\n# [Ratio](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#ratio)\nViewのlayout_width, layout_heightがmatch_constraintの時に比率を用いてViewの大きさを指定できる。\n\n| Attribute | 指定する値 |\n|:-:|:-:|\n|app:layout_constraintDimensionRatioh|W : H|\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"0dp\"\n    android:text=\"@string/button_a\"\n    app:layout_constraintDimensionRatio=\"1:1\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/b9adf2b9-e7d5-63ac-68ee-6492c803d5a8.png\">\nlayout_width, layout_heightの両方がmatch_constraintの時には、以下のようにw/hを指定することで、widthとheightのどちらを基準にするのかを選択することができる。\n`app:layout_constraintDimensionRatio=\"w, 1:2\"`\n\n# [Chain](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout#Chains)\n複数のViewが双方向に作用するように制約をかけている状態をChainと呼ぶ。\nChainは起点となる位置のView（Chain heads）に制約を指定することで設定することができる。\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/4b68fee9-1bce-60a7-769a-a051cca374f1.png\">\n\n| Attribute | 効果 | 指定する値 |\n|:-:|:-:|:-:|\n| layout_constraintHorizontal_chainStyle |水平方向にチェーンを設定|チェーンスタイル|\n| layout_constraintVertical_chainStyle |垂直方向にチェーンを設定|チェーンスタイル|\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_a\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button2\"\n    app:layout_constraintHorizontal_chainStyle=\"spread\"\n    app:layout_constraintStart_toStartOf=\"parent\" />\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button2\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_b\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button3\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button1\" />\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button3\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_c\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button2\" />\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/281d3bbb-42d8-a1c7-0217-a0d5aaeeb7fb.png\">\n\n##Chain Style\nチェーンのスタイルは3種類（画像の赤枠）\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/b48c712c-5604-bc9c-39a5-453d72939698.png\">\n\n| Style | 効果 |\n|:-:|:-:|\n|spread|View同士が均等になるようにmarginを設定して並べる|\n|spread_inside|スタートとエンドのViewのmarginは設定せず、中のViewにのみmarginを設定されspread|\n|package|Viewを一つの要素のようにくっつけた状態で均等にmarginを設定する|\n\n##Weighted Chain\nChain Styleがspread or spread_insideの時に、weightを設定してViewの幅を指定する。\nweightを指定したい方向をmatch_constraintに設定する必要がある。\n\n| Attribute | 効果 |\n|:-:|:-:|\n|layout_constraintHorizontal_weight|水平方向のweightを指定|\n| layout_constraintVertical_weight |垂直方向のweightを指定|\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button1\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_a\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button2\"\n    app:layout_constraintHorizontal_chainStyle=\"spread\"\n    app:layout_constraintHorizontal_weight=\"1\"\n    app:layout_constraintStart_toStartOf=\"parent\" />\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button2\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_b\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button3\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button1\"\n    app:layout_constraintHorizontal_weight=\"2\"/>\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button3\"\n    android:layout_width=\"0dp\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_c\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button2\"\n    app:layout_constraintHorizontal_weight=\"3\"/>\n```\n\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/11cba8a2-96da-cab9-2469-d2d09ab7359c.png\">\n\n##Packed Chain with Bias\nChain Styleがpackageの時に、biasを設定してViewのmarginを指定する。\n\n| Attribute | 効果 |\n|:-:|:-:|\n|layout_constraintHorizontal_bias|水平方向のbiasを指定|\n| layout_constraintVertical_bias |垂直方向のbiasを指定|\n\n```xml:\n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button1\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_a\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button2\"\n    app:layout_constraintHorizontal_chainStyle=\"packed\"\n    app:layout_constraintHorizontal_bias=\"0.2\"\n    app:layout_constraintStart_toStartOf=\"parent\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button2\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_b\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toStartOf=\"@+id/Button3\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button1\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n \n<androidx.appcompat.widget.AppCompatButton\n    android:id=\"@+id/Button3\"\n    android:layout_width=\"wrap_content\"\n    android:layout_height=\"wrap_content\"\n    android:text=\"@string/button_c\"\n    app:layout_constraintBottom_toBottomOf=\"parent\"\n    app:layout_constraintEnd_toEndOf=\"parent\"\n    app:layout_constraintStart_toEndOf=\"@+id/Button2\"\n    app:layout_constraintTop_toTopOf=\"parent\" />\n```\n<img width=\"500\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/645987/3fb228eb-4d79-c6cc-c77a-870ecc9cebf6.png\">\n\n#おわりに\n今回はConstraintLayoutのAttributeについて、公式リファレンスの画像やサンプルコードも用いてまとめました。xmlベースでの説明になってしまいましたが、ConstraintLayoutはAndroid StudioのLayout Editorでドラックアンドドロップで作ることもできます。\nこの記事が皆さんのレイアウト作りの手助けになれば幸いです。\n\n#参考文献\n- [Android developters - Reference](https://developer.android.com/reference/androidx/constraintlayout/widget/ConstraintLayout)\n","user":"t_nana","created_at":"2021-03-28T21:51:57+09:00","updated_at":"2021-03-28T22:31:45+09:00"},{"url":"https://qiita.com/tsuhiro_kttn/items/490dcd4a12a8c240504a","title":"GPUは認識しているのにgeneratorを使うとcuDNN初期化エラーが出たけど解決した話","body":"ドハマりしました。\n何とか解決できたので同じ悩みの方のお役に立てるよう解決策をメモします。\n\n#環境\n\n- Anaconnda\n- GPU : NVIDIA Geforce RTX 2060 with Max-Q\n- tensorflow-gpu : 2.1.0\n- cudatoolkit : 10.1\n- cudnn : 7.6.5\n\n#症状\n対応表を見てGPUに合ったTensorflow, CUDA, cuDNNをインストール、GPUが認識され自作CNNでGPUが使えていることまでは確認しました。\n\nしかし、量の多いデータを処理する時にImagegenerator を使ったところ、モデル学習のところで下記エラーが発生。\n\n`Unknown: Failed to get convolution algorithm. This is probably because cuDNN failed to initialize, so try looking to see if a warning log message was printed above.`\n\n調べてもGPUがそもそも認識していない場合の対処方法が多くあまり参考になりませんでした。\n\n#解決法\n下記の記事を参考にして解決。\n<https://note.com/axg28923/n/na41c975d212c>\n\nまずAnaconda promptでエラーが吐かれた場所を確認。\n`Successfully opened dynamic library cudnn64_7.dll`\nがありcudnn64_7.dllファイルをtennsorflowが読みに行けている。\n\n問題は、\n`Could not create cudnn handle: CUDNN_STATUS_ALLOC_FAILE`\nとあるのでGPUは動く気はある。問題はメモリ。\n\n環境変数を設定して対応。\nwindowsの検索窓から「システム環境変数の編集」を選択。\n詳細設定から環境変数を選択。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/690432/1d642ece-fa2c-a398-d5dd-426642099ba3.png)\n\nシステム環境変数を新規登録。\n変数名は「TF_FORCE_GPU_ALLOW_GROWTH」\n変数値は「true」と記入。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/690432/6c9f3d77-3c0d-4247-f84a-8461f3c199d1.png)\n\n再起動すれば完了。\n晴れてcudnnが使えるようになりました。\n","user":"tsuhiro_kttn","created_at":"2021-03-28T21:48:58+09:00","updated_at":"2021-03-28T21:48:58+09:00"},{"url":"https://qiita.com/alcchy/items/cfae24d72355cf2d61b2","title":"OBS Studioでの配信用レイアウト背景をHTMLで作ってjQueryで動的に変化させる（配信レイアウトをリアルタイムに変更してみる）","body":"OBS Studioで配信をする際、リアルタイムに編集したテキスト等を表示させたい。\nでもテキストエディタをそのままキャプチャするのは格好悪い。\nそんな人向け。\n\n配信画面レイアウトを作るだけなら、もっと簡単な方法やツールもあるのですが、\n\n+ 様々な分野で使われているので、応用が利く\n+ やろうと思えばツールの限界など無くいくらでも作り込める\n+ その為に参考になるドキュメントも豊富\n\n等の理由から、この記事では HTML + CSS + jQuery で作っていきます。\n環境はWindows 10を想定していますので、異なる場合は適当に読み替えてください。\n\n## サンプルの動かし方\n実際に動くサンプルが手元にあると分かりやすいと思うので、まずは最短でそれを用意する手順だけを書いていきます。中身の説明はまた後で。\n\n### 1.ファイルの置き場所になるフォルダを作る\nデスクトップでもマイドキュメントでも、どこでもいいので触りやすい場所にフォルダを作りましょう。\nフォルダ名は半角英数字で。\n\n### 2.ファイルを入れる\n以下の3つのファイルを先ほど作ったフォルダに入れます。文字コードはUTF-8にします。\nWindows 10のメモ帳を使って保存する場合は、下記のコードをコピペして、保存するファイル名・場所を決めるダイアログの最下部に文字コードの選択ボックスがあるので、そこを変更してください。\n\n```html:sample.html\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\" type=\"text/javascript\"></script>\n    <script src=\"sample.js\" type=\"text/javascript\"></script>\n  </head>\n  <body>\n    <div id=\"screen\">ゲーム画面などを表示する領域</div>\n    <div id=\"menu\">\n      <p id=\"line_0\">テキストを表示する部品 その1</p>\n      <p id=\"line_1\">テキストを表示する部品 その2</p>\n    </div>\n</body>\n</html>\n```\n大元となるHTMLファイルです。\n\n```JavaScript:sample.js\n$(document).on('ready', function() {\n  setInterval(function () {TextLoad();}, 1000);\n});\n\nfunction TextLoad() {\n  $.get(\"text.txt\", function (data) {\n    textArray = data.split(/\\r\\n|\\r|\\n/);\n    $(\"#line_0\").html(textArray[0]);\n    $(\"#line_1\").html(textArray[1]);\n  });\n}\n```\nファイルを読み込んで表示するJavaScriptです。\n\n```CSS:style.css\n* {\n\tmargin: 0;\n\tpadding: 0;\n}\nbody {\n\tbackground: #000;\n}\n#screen {\n\tposition: absolute;\n\ttop: 0; left: 0;\n\twidth: 960px;\n\theight: 720px;\n\tbackground-color: #ccccff;\n}\n#menu {\n\tposition: absolute;\n\ttop: 0; left: 960px;\n\twidth: 320px;\n\theight: 720px;\n\tbackground-color: #ccff00;\n}\n#line_0 {\n\tposition: absolute;\n\ttop: 40px; left: 16px;\n}\n#line_1 {\n\tposition: absolute;\n\ttop: 100px; left: 16px;\n}\n```\nHTML文書のデザイン装飾をする為のCSSです。\n\nまた、読み込むデータを保存するテキストファイル「text.txt」も同じ場所に、同じく文字コードUTF-8で作ってください。中身は何でもいいですが、今回のサンプルでは2行以上用意しておいてください。\n\n```text.txt\nああああああああ\nいいいいい\n```\n### 3.HTTPサーバーを立てる\nここまでの手順を正しくできていれば、保存した「sample.html」をブラウザで開くと、このようなページが見られると思います。\n![00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1201536/16080b8a-2faa-f907-0864-fcec8fa01e23.png)\nですがテキストファイルを読み込むスクリプトが動いていません。\nこれは、今時のブラウザでは、勝手にPC上のファイルを盗み見されないように、ローカルで開いたページからは他のファイルにアクセス出来ないように制限されている為です。\nなので、それを回避する為にサーバーを立てます。\n本格的なサーバーを立てるとなるととても大変ですが、今回はお手軽な下記のソフトを使います。\n\nhttps://www.vector.co.jp/soft/dl/winnt/net/se381431.html\n\nこちらはダウンロードしてきたファイルを解凍すればインストール無しで実行出来る、名前通り簡単なWEBサーバーです。\n![01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1201536/2c44c616-8839-b90a-7de3-e47009bc2d61.png)\n使い方は、\n1. 適当なポート番号を入力する。（何でもいいですが、他のソフトが使用済みの番号だと失敗するので、念のためにデフォルトの80や被りやすい2桁は避け、4桁の適当な数字がいいかもしれません）\n2. 追加ボタンから、サンプルのファイルを入れたフォルダを指定。\n3. 開始ボタンを押す\nだけです。初回の開始時にはファイアウォールの許可のダイアログが出ますので、許可してください。\n\n### 4.完成\nサーバーで公開したページをブラウザで開いてみましょう。\n上記の簡単WEBサーバーを使った場合は、下記のようなURLになっています。\n\n```\nhttp://localhost:ポート番号/フォルダ名/sample.html\n\n（:や/といった記号は消さずに残して、ポート番号＆フォルダ名を各自書き換えてください。\nフォルダ名はパスを含まない名前のみです。）\n\n例：ポート番号8088 & デスクトップ上のsample_folder(C:\\Users\\****\\Desktop\\sample_folder)\n⇒ http://localhost:8088/sample_folder/sample.html\n```\n全てが正常であれば、先ほどとは違って、「text.txt」の内容が読み込まれ、指定された箇所に表示されているはずです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1201536/ff3eeaa6-9071-87d5-9e09-b60dba09185f.png)\n\nこのブラウザ画面を表示したまま、「text.txt」の内容をメモ帳などで編集し保存すると、リアルタイムでページに反映されていれば成功です。\n\nあとは、これをOBS Studioで映像ソースの追加を選び、種類は「ブラウザ」、URLはlocalhostな簡単WEBサーバーの物を指定すれば完成です。\n\n## 中身の説明\n各ファイルの中身を見ていってみましょう\n\n```html:sample.html\n<html>\n  <head>\n    <link rel=\"stylesheet\" href=\"style.css\">\n    <script src=\"https://code.jquery.com/jquery-2.2.4.min.js\" type=\"text/javascript\"></script>\n    <script src=\"sample.js\" type=\"text/javascript\"></script>\n  </head>\n  <body>\n    <div id=\"screen\">ゲーム画面などを表示する領域</div>\n    <div id=\"menu\">\n      <p id=\"line_0\">テキストを表示する部品 その1</p>\n      <p id=\"line_1\">テキストを表示する部品 その2</p>\n    </div>\n</body>\n</html>\n```\n\n<head>の中の3行はそれぞれ\n\n+ デザイン用のstyle.cssを読み込む\n+ jQueryを読み込む\n+ sample.jsを読み込む\n\nとなっています。\n<body>の中には実際に表示する部品が配置されています。各部品にはIDが割り振られていて、デザインの適用やjQueryによる変更をする際、対象としてこのIDを指定していきます。\n\n```CSS:style.css抜粋\n#menu {\n\tposition: absolute;\n\ttop: 0; left: 960px;\n\twidth: 320px;\n\theight: 720px;\n\tbackground-color: #ccff00;\n}\n```\nstyle.cssは、デザイン装飾や部品の配置方法を記述しています。\n例えばこの部分は、ID=menuの部品の見た目について書かれていて、「画面の上から0・左から960ピクセルの場所に配置して、幅は320ピクセル 高さは720ピクセル、背景色は#ccff00」といった具合です。\n\n```JavaScript:sample.js\n$(document).on('ready', function() {\n  setInterval(function () {TextLoad();}, 1000);\n});\n\nfunction TextLoad() {\n  $.get(\"text.txt\", function (data) {\n    textArray = data.split(/\\r\\n|\\r|\\n/);\n    $(\"#line_0\").html(textArray[0]);\n    $(\"#line_1\").html(textArray[1]);\n  });\n}\n```\n\n今回のキモである動的表示の機能を作っている部分です。\n馴染みの無い人にはよくわからん英数字が一杯ある、みたいに思うかもしれません。\nこれを各行に対応するように翻訳？するとこんな感じです。\n\n```\n(ページの読み込みが完了したらカッコ内の処理をしていくよ {\n  「TextLoad()」という機能を1000ミリ秒＝1秒毎に実行するように登録\n});\n\n「TextLoad()」という機能について {\n  (\"text.txt\"というファイルを読み込んで、その内容にdataという名前を付けたら、カッコ内の処理をしていくよ {\n    dataを改行で区切って、それをtextArrayという配列に入れるよ\n    → textArrayの0番（=dataを行ごとにバラした1個目）を、ID「line_0」のHTML部品に表示\n    → textArrayの1番（=dataを行ごとにバラした2個目）を、ID「line_1」のHTML部品に表示\n  });\n}\n```\nどうでしょうか？\n書き方のルールもわからずいきなり書けというのはハードル高いですが、なんとなく読めませんかね？\n文法が分かってしまえば、そんなに難しい事は書いてなかったりします。\n\n\n## 最後に（勉強の仕方とか作り込みの方向とか）\nこのサンプルは、とりあえず機能が動くという程度で、とてもそのまま使えるモノではありません。\n見た目をもっとカッコよく、というのならHTML + CSS （+ jQueryスクリプト）を作り込んでいく必要があります。それについての解説はWEB上にいっぱいありますし、他の人の配信レイアウトだけでなく世に無数にあるWEBサイト自体も作り方の参考になるはずです。\n\nまた、このサンプルでは、読み込んだ内容を改行で区切って表示する、という簡単な処理しかしていませんが、例えば読み込んだ内容を使って計算し、それに応じた内容を表示するみたいに処理を積み上げていけば、点数や勝敗表みたいな物も作れます。データの編集に関しても、今回はメモ帳を使いましたが、これもHTML等々を使って高機能な管理画面を作ることだって出来ます。\nファイルの読み込み＆表示以外にも、タイマー表示とかアニメーションとかアイデア次第で（技術的には）何だって可能です。\n\nカッコよくて高機能な配信画面を作るのは大変ですが、そこへ至る一歩目は案外簡単かもしれませんよ？というお話でした。\n","user":"alcchy","created_at":"2021-03-28T21:43:07+09:00","updated_at":"2021-03-28T21:46:51+09:00"},{"url":"https://qiita.com/Nagatatz/items/b59ca7470ff18311dd88","title":"ReScript x Next.jsの環境にGraphQLのライブラリ\"Relay\"を導入した","body":"[Next.jsでReScript, tailwindを使う](https://qiita.com/Nagatatz/items/1596d86df337c06e3812)\nの環境を元に、`GraphQL`のkickを試みる\n\n# GraphQL\n\nFacebookにより開発されたクエリ言語。\nクライアント側でレスポンス形式を指定できる。\n\n`React`で`GraphQL`のクライアントを選択するとき、大きいのは`Apollo Client`, `Relay`の2つのようだ。\n[GraphQLのサイト](https://graphql.org/code/#javascript)にサーバ側や他のクライアントも載っている。\n\n## Apollo Client\n\n[Apollo Client](https://www.apollographql.com/docs/react/)\n[Rescript Apollo Client](https://reasonml-community.github.io/rescript-apollo-client/docs/)\n\n## Relay\n\n[Relay](https://relay.dev/)\n[RescriptRelay](https://rescript-relay-documentation.vercel.app/)\n\n# 実装\n\n基本的に[`RescriptRelay`の説明](https://rescript-relay-documentation.vercel.app/docs/getting-started)通りに進めていく。\n\n## relay追加\n\n[`Suspense`を利用](https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser)するため`react`ライブラリを`experimental`にする。\n\n```bash\nyarn add react@0.0.0-experimental-4e08fb10c react-dom@0.0.0-experimental-4e08fb10c\nyarn add relay-runtime@11.0.0 relay-compiler@11.0.0 react-relay@11.0.0 relay-config@11.0.0\nyarn add --dev rescript-relay graphql reason-promise bs-fetch\n```\n\n## relay設定\n\n### config\n\n```javascript:relay.config.js\nmodule.exports = {\n    src: \"./src\",\n    schema: \"./schema.graphql\",\n    artifactDirectory: \"./src/__generated__\",\n    customScalars: {\n        Datetime: \"string\",\n        Color: \"Color.t\",\n    },\n};\n```\n\n`RescriptRelay`の`config`の`src`ディレクトリ指定方法の影響で`Next.js`の`res`ファイルを一つのフォルダに統合するために`src`に移す\n\n```bash\nmv pages components bindings src/ \n```\n\n```diff_json:bsconfig.json\n  \"sources\": [\n-    {\n-      \"dir\": \"components\",\n-      \"subdirs\": true\n-    },\n-    {\n-      \"dir\": \"pages\",\n-      \"subdirs\": true\n-    },\n-    {\n-      \"dir\": \"bindings\",\n-      \"subdirs\": true\n-    }\n+    {\n+      \"dir\": \"src\",\n+      \"subdirs\": true\n+    }\n  ],\n+  \"ppx-flags\": [\n+    \"rescript-relay/ppx\"\n+  ],\n  \"bs-dependencies\": [\n-    \"@rescript/react\"\n+    \"@rescript/react\",\n+    \"rescript-relay\",\n+    \"reason-promise\",\n+    \"bs-fetch\"\n  ],\n```\n\n`tailwind`を利用している場合もディレクトリを変更する\n\n```diff_javascript:tailwind.config.js\nmodule.exports = {\n    purge: [\n-        './pages/**/*.res',\n-        './components/**/*.res',\n+        './src/pages/**/*.res',\n+        './src/components/**/*.res',\n    ],\n    darkMode: false, // or 'media' or 'class'\n    theme: {\n        extend: {},\n    },\n    variants: {\n        extend: {},\n    },\n    plugins: [],\n}\n```\n\n```diff_json:package.json\n  \"scripts\": {\n    \"dev\": \"concurrently \\\"bsb -clean-world -make-world -w\\\" \\\"next dev\\\"\",\n    \"dev:reason\": \"bsb -clean-world -make-world -w\",\n    \"dev:next\": \"next dev\",\n    \"build\": \"bsb -clean-world -make-world && next build\",\n-    \"start\": \"next start\"\n+    \"start\": \"next start\",\n+    \"relay\": \"rescript-relay-compiler\",\n+    \"relay:watch\": \"rescript-relay-compiler --watch\"\n  },\n```\n\n```diff_javascript:next.config.js\nconst withTM = require('next-transpile-modules')(['bs-platform'])\n\nmodule.exports = withTM({\n-    pageExtensions: ['jsx', 'js', 'bs.js']\n+    pageExtensions: ['jsx', 'js', 'bs.js'],\n+    experimental: {\n+        reactMode: 'concurrent'\n+    }\n})\n```\n\nexperimental設定を有効にする。\n忘れると`Cannot hydrate Suspense in legacy mode`エラーが出るので注意。\n\n### es6 -> commonjsに変更\n\n\nbs-fetchの関係で`bsconfig.json`の`package-specs`を`es6`から`commonjs`に変更する。\n\n[Next.jsをReasonMLで用いてページ遷移しWeb APIを叩きレスポンスを表示する - bs-fetch, bs-jsonの追加](https://qiita.com/Nagatatz/items/149b53caad9b33447637#bs-fetch-bs-json%E3%81%AE%E8%BF%BD%E5%8A%A0)を参考にする。\n\n```diff_json:bsconfig.json\n  \"package-specs\": {\n-    \"module\": \"es6\",\n+    \"module\": \"commonjs\",\n    \"in-source\": true\n  },\n```\n\n### config component書く\n\n```rescript:src/util/RelayEnv.res\n/* This is just a custom exception to indicate that something went wrong. */\nexception Graphql_error(string)\n\n/**\n * A standard fetch that sends our operation and variables to the\n * GraphQL server, and then decodes and returns the response.\n */\nlet fetchQuery: RescriptRelay.Network.fetchFunctionPromise = (\n  operation,\n  variables,\n  _cacheConfig,\n  _uploadables,\n) => {\n    open Fetch\n    fetchWithInit(\n        Env.graphQlUrl,\n        RequestInit.make(\n            ~method_=Post,\n            ~body=Js.Dict.fromList(list{\n                (\"query\", Js.Json.string(operation.text)),\n                (\"variables\", variables),\n            })\n            ->Js.Json.object_\n            ->Js.Json.stringify\n            ->BodyInit.make,\n            ~headers=HeadersInit.make({\n                \"content-type\": \"application/json\",\n                \"accept\": \"application/json\",\n//                \"authorization\": \"Bearer \" ++ Env.graphQlToken,  // 今回は認可（authorization）を要しないのでこの行は不要。graphCMS等用いる場合記述する。\n            }),\n            (),\n        ),\n    ) |> Js.Promise.then_(resp =>\n        if Response.ok(resp) {\n            Response.json(resp)\n        } else {\n            Js.Promise.reject(Graphql_error(\"Request failed: \" ++ Response.statusText(resp)))\n        }\n    )\n}\n\nlet network = RescriptRelay.Network.makePromiseBased(~fetchFunction=fetchQuery, ())\n\nlet environment = RescriptRelay.Environment.make(\n        ~network,\n        ~store=RescriptRelay.Store.make(\n        ~source=RescriptRelay.RecordSource.make(),\n        ~gcReleaseBufferSize=10, /* This sets the query cache size to 10 */\n        (),\n    ),\n    (),\n)\n```\n\n```rescript:src/util/Env.res\n// api\n@val external graphQlUrl:string = \"process.env.NEXT_PUBLIC_GRAPHQL_URL\"\n// @val external graphQlToken:string = \"process.env.NEXT_PUBLIC_GRAPHQL_TOKEN\"  // authorizationが必要な場合\n```\n\nNext.jsにてブラウザでも環境変数を用いる場合、[冒頭に`NEXT_PUBLIC_`を冠する必要がある](https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser)\n\n```:.env.local\nNEXT_PUBLIC_GRAPHQL_URL=\"<YOUR_GRAPHQL_API_URL>\"\n# NEXT_PUBLIC_GRAPHQL_TOKEN=\"<YOUR_GRAPHQL_API_TOKEN>\"  # authorizationが必要な場合\n```\n\n今回は[SpaceX API](https://api.spacex.land/graphql/)を用いる。\n以下のように書き換える。\n\n```:.env.local\nNEXT_PUBLIC_GRAPHQL_URL=https://api.spacex.land/graphql/\n```\n\n### schema download\n\nAPIからschemaをダウンロードする。\n\n```bash\nyarn add --dev get-graphql-schema\nyarn get-graphql-schema https://api.spacex.land/graphql/ > schema.graphql\n```\n\n## Provider\n\n```rescript:src/components/App.res\n@react.component\nlet make = (~children) => <RescriptRelay.Context.Provider environment=RelayEnv.environment>\n    <div>\n        children\n    </div>\n</RescriptRelay.Context.Provider>\n\nlet default = make\n```\n\n```javascript:src/pages/_app.js\nimport '../../styles/main.css'\nimport App from '../components/App.bs'\n\nconst MyApp = ({ Component, pageProps }) => (<App>\n        <Component {...pageProps} />\n</App>);\n\nexport default MyApp;\n```\n\n## GrapghQLたたくコンポーネント\n\n```rescript:src/components/FetchMissions.res\nmodule MyQuery = %relay(\n    `query FetchMissionsQuery {\n        missions {\n             name\n             id\n             description\n        }\n    }`\n)\n\n@react.component\nlet make = () => {\n    let response = MyQuery.use(~variables=(), ())\n\n    let missions = switch (response.missions) {\n       | Some(data) => data\n       | _ => []\n    }\n\n    <div>\n        <div><p className=\"font-black\">{React.string(\"missions\")}</p></div>\n        {\n            missions\n            ->Belt.Array.map(\n                mission => switch(mission) {\n                    | Some(data) =>  <div key={Belt.Option.getWithDefault(data.id, \"XXXXX\")}>\n                            <div><p className=\"font-medium\">{React.string(Belt.Option.getWithDefault(data.name, \"\"))}</p></div>\n                            <div>{React.string(Belt.Option.getWithDefault(data.description, \"\"))}</div>\n                            <hr/>\n                        </div>\n                    | _ => <></>\n                }\n            )->React.array\n        }\n    </div>\n}\n\nlet default = make\n```\n\n`query FetchMissionsQuery`の箇所は、ファイル名 + Queryの規則でつけなければいけないことに注意。Query以外もFetch等のパターンがある（が割愛）\nqueryの組立はGraphQLのURLをブラウザで開いた時にクエリを試してそのレスポンスを確認することができる。\n![ＧｒａｐｈＱＬ Page](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/68992/4fb34c62-41aa-528c-070d-59870f2fb53a.png)\n\nレスポンスの型については、ダウンロードした`schema.graphql`を元に`realy:watch`で作成される`.res`ファイルに記載される。\n\n```rescript:FetchMissionsQuery_graphql.res\n/* @generated */\n%%raw(\"/* @generated */\")\nmodule Types = {\n  @@ocaml.warning(\"-30\")\n  \n  type rec response_missions = {\n    name: option<string>,\n    id: option<string>,\n    description: option<string>,\n  }\n  type response = {\n    missions: option<array<option<response_missions>>>,\n  }\n  type rawResponse = response\n  type variables = unit\n}\n```\n\n`id`が`option`なのはなんでなんですかね。イテレーションを用いる場合、コンポーネントに固有の`key`を振ることになっているが、`id`ないやつ複数あると怒られるはず…\n`option`あると剥がすのめんどくさいので、なんかもうちょっとどうにかして欲しかった感\n\n\n```rescript:src/page/missions.res\n@react.component\nlet make = () => {\n    <div>\n        <Header />\n        <div className=\"py-6 md:py-12\">\n            <div className=\"container px-4 mx-auto\">\n                <React.Suspense fallback={<div>{React.string(`Loading...`)}</div>}>\n                    <FetchMissions />\n                </React.Suspense>\n            </div>\n        </div>\n    </div>\n}\n\nlet default = make\n```\n\nRelayを使ったコンポーネントの外側を`React.Suspense`でくるみ、`Suspense`のタグ内でfallbackした際(まだ読み込まれてない場合、読込に失敗した場合)に表示されるコンポーネントを指定する。\n外側であればよく、例えば`src/components/App.res`で`<div></div>`の外側を`Suspense`でくるんでも構わない。ただ全体が読込中扱いになるので、基本的にしないはず。\n\n# dev実行\n\n```bash\nyarn relay:watch\n```\n\n```bash\nyarn dev:rescript\n```\n\n`yarn dev:reason`から改名\n\n```bash\nyarn dev:next\n```\n\n`http://localhost:3000/missions`にアクセスする。\n\n読込時はLoading...の文字が表示され、読込が終わると下のように表示される。(一部だけトリミング)\n![アクセス結果](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/68992/31b3e3c1-76b0-c3e0-3d95-39d3e68fec58.png)\n\n\n# 感想\n\nクエリ名の指定に癖がある\n`src`のディレクトリが束縛される\n`GraphQL`、`fetch`で叩くのもありでは。\nエンドポイント複数あったときはどうしよう？（あまりないケースか？)\n\n# やったけどダメだったこと\n\n## rescript-apollo-client\n\n###　原因\n\n`dependency`が`reason-react`だった。無理矢理書き換えてビルドし直すのも試したが、上手くいかなかった。\n\n`invalid hook`のエラーが出て直せなかった\n\n## swapi\n\nSTAR WARSのキャラ名とか返してくれるAPI群。最初これ使おうと思ってた。\n\n[swapi-qlaphql(GitHub)](https://github.com/graphql/swapi-graphql)\n[swapi-graphql testpage](https://graphql.org/swapi-graphql)\n\n`get-graphql-schema`で`invalid-json`が返ってきた。なんでや\n\n# 実運用\n\n同様の構成で[graphCMS](https://graphcms.com/)を利用してます。\n\n# 参考文献\n\n[GraphQL](https://graphql.org/)\n[GraphQL Code Libraries, Tools and Services](https://graphql.org/code/#javascript)\n[Apollo](https://www.apollographql.com/)\n[Apollo Client](https://www.apollographql.com/docs/react/)\n[Rescript Apollo Client](https://reasonml-community.github.io/rescript-apollo-client/docs/)\n[Relay](https://relay.dev/)\n[RescriptRelay](https://rescript-relay-documentation.vercel.app/)\n[Getting Started with RescriptRelay | RescriptRelay](https://rescript-relay-documentation.vercel.app/docs/getting-started)\n[サスペンスを使ったデータ取得（実験的機能）](https://ja.reactjs.org/docs/concurrent-mode-suspense.html)\n[Next.jsをReasonMLで用いてページ遷移しWeb APIを叩きレスポンスを表示する - bs-fetch, bs-jsonの追加](https://qiita.com/Nagatatz/items/149b53caad9b33447637#bs-fetch-bs-json%E3%81%AE%E8%BF%BD%E5%8A%A0)\n[swapi-qlaphql(GitHub)](https://github.com/graphql/swapi-graphql)\n[swapi-graphql testpage](https://graphql.org/swapi-graphql)\n[SpaceX API](https://api.spacex.land/graphql/)\n[Next.js - Basic Features: Environment Variables - Exposing Environment Variables to the Browser](https://nextjs.org/docs/basic-features/environment-variables#exposing-environment-variables-to-the-browser)\n[graphCMS](https://graphcms.com/)\n","user":"Nagatatz","created_at":"2021-03-28T21:41:46+09:00","updated_at":"2021-03-28T21:44:00+09:00"},{"url":"https://qiita.com/Takda_/items/9164d1a74f0f21475462","title":"【2021/03】DockerでPHPのWebアプリ開発環境(スクラッチ)を構築する。","body":"執筆日：2021/03/27\n\nプログラミング歴半年の俗に言う駆け出しエンジニアです。\nこれまでRubyで個人開発をしてきましたが、先日就職が決まり、業務でPHPを触る事になりました。\n\nそんなわけで、Dockerを用いて開発環境を構築したのでメモを残します。\n\n##参考\n\nhttps://php-archive.net/php/docker-php-environment/\n\n上記記事では各設定の詳細な解説もされているので併せてご確認ください。\n\n##要件\n\n・Mac OS Catalina(10.15.7)\n・PHP 7.2\n・MySQL 5.7\n・NginX(latestイメージを使用)\n・phpMyAdmin(latestイメージを使用)\n・Docker,docker-compose\n・FWを使わずスクラッチでの開発を想定\n\n現実ではスクラッチで開発するケースは少ないと思うので、あくまでローカルでの練習用環境構築です。\nMacユーザーであれば、この記事通りの手順で（コピペでも）開発環境を構築できると思います。\n\n間違えている点やtypo等あればお手柔らかにご指摘いただけると幸いです。\n\n##最終的なフォルダ構成\n\n最終的なフォルダ構成はこんな感じになります。\n\n```\n├── docker-compose.yml\n├── mysql\n│   └── data\n├── nginx\n│   └── nginx.conf\n├── php\n│   ├── Dockerfile\n│   └── php.ini\n└── www\n    └── html\n        ├── index.php\n        └── views\n            ├── css\n            │   └── style.css\n            ├── index.php\n            └── layout.php\n```\n\n##実際に開発環境を作る\n\n開発環境を作っていきましょう。\ndocker-compose upを入力した際に、localhost:8080から接続できる状態を目指します。\nやる事は以下の通りです。\n\n1. 最初に必要なフォルダをファイルをコマンドで生成\n1. docker-compose.ymlを編集\n1. nginx.confを編集\n1. php/Dockerfile,php.iniを編集\n1. index.phpを編集\n1. docker-compose buildでビルドする。\n\nそれではやっていきましょう。\n\n### 適当な作業フォルダを作成\n\nビルドに必要なディレクトリやファイルを最初に全部作っていきます。\n以下のコマンドを上から入力。\n\n```terminal\n$mkdir php-sample\n$cd php-sample\n\n$touch docker-compose.yml\n\n$mkdir nginx\n$touch nginx/nginx.conf\n\n$mkdir php\n$touch php/Dockerfile\n$touch php/php.ini\n\n$mkdir mysql\n$touch mysql/data\n\n$mkdir www\n$mkdir www/html\n$touch www/html/index.php\n```\n\nこれで、ビルドに必要なディレクトリとファイルの作成が完了しました。\n後はそれぞれのファイルを編集していきます。\n\n### docker-compose.ymlを編集\n\n```docker-compose.yml\nversion: '3'\nservices:\n  nginx:\n    image: nginx:latest\n    ports:\n      - 8080:80\n    volumes:\n      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf\n      - ./www/html:/var/www/html\n    depends_on:\n      - php\n \n  php:\n    build: ./php\n    volumes:\n      - ./www/html:/var/www/html\n    depends_on:\n      - db\n \n  db:\n    image: mysql:5.7\n    ports:\n      - 13306:3306\n    volumes:\n      - ./mysql/data:/var/lib/mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: pass\n \n  phpmyadmin:\n    image: phpmyadmin/phpmyadmin:latest\n    ports:\n      - 8888:80\n    depends_on:\n      - db\n```\n\ndocker-composeを用いて、以下の4つのコンテナを起動させます。\n\n・nginx\n・php\n・db\n・phpmyadmin\n\nDockerfileを./phpの下に入れる構成のためbuild contextを変更しています。\n\n### php/Dockerfile,php.iniを作成\n\n```Dockerfile\nFROM php:7.2-fpm\nCOPY php.ini /usr/local/etc/php/\n```\n\nfpmは、ざっくり言うと「プログラムの処理速度を向上させるための実装」です。\n今回は本番環境への移行は意識していないため-fpmを付けなくても良いかもしれませんが、参考記事に習いつけています。\n\nphp.iniは、特に変更しなくても良いと思います。\n参考にさせていただいた記事では、以下の1行のみ記載されています。\n\n```php.ini\ndate.timezone = \"Asia/Tokyo\"\n```\n\n### nginx.confを作成\n\n```nginx.conf\nserver {\n    listen 80;\n    server_name _;\n \n    root  /var/www/html;\n    index index.php index.html;\n \n    access_log /var/log/nginx/access.log;\n    error_log  /var/log/nginx/error.log;\n \n    location / {\n        try_files $uri $uri/ /index.php$is_args$args;\n    }\n \n    location ~ \\.php$ {\n        fastcgi_pass php:9000;\n        fastcgi_index index.php;    \n        fastcgi_param SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n        include       fastcgi_params;\n    }\n}\n```\n\nnginx.confに関しては、勉強不足のため特に解説できる部分がありません。\n\nクライアントからリクエストを受け取った際の処理の流れ、アクセスログやエラーログの出力場所などについて記載しているようです。\n\n### index.phpを作成\n\n```index.php\n<?php\necho 'Hello World';\n```\n\n何でもOKです。\n今回はとりあえず'Hello World'にしておきます。\n\n### docker-compose buildでビルドする。\n\n必要なファイルが一通り揃いました。\n現時点で以下のような構成になっているはずです。\n\n```\n├── docker-compose.yml\n├── mysql\n│   └── data\n├── nginx\n│   └── nginx.conf\n├── php\n│   ├── Dockerfile\n│   └── php.ini\n└── www\n    └── html\n        └── index.php\n```\n\ndocker-composeを用いてコンテナをビルドします。\n次のコマンドをターミナルで入力します。\n\n```terminal\ndocker-compose build\n```\n\n私の場合は2分くらいでビルドが完了しました。\nコンテナを起動してみます。\n\n```terminal\ndocker-compose up\n```\n\n少し待って「 http://localhost:8080/ 」を開いてみてください。\nindex.phpで設定した内容が表示されていればOKです。\n\nとりあえず環境構築だけしたいという方はここまででOKです。\nここから先は、スクラッチで開発を進めていくためにちょっとした工夫をしていきます。\n\n## viewsディレクトリを追加する。\n\nビルドした段階では、./www/html/以下にindex.phpしかありませんでしたが、「最終的な構成」では、以下のような構成にしています。\n\n```\n└── www\n    └── html\n        ├── index.php\n        └── views\n            ├── css\n            │   └── style.css\n            ├── index.php\n            └── layout.php\n```\n\n同じような記述を繰り返さないために、このような構成にしています。\n解説は後ほどするとして、まずは各ファイルの中身を見ていきます。\n\n```./www/html/index.php\n<?php\n\n$title = 'sample-app';\n$content = __DIR__ . '/views/index.php';\ninclude __DIR__ . '/views/layout.php';\n```\n\n```./www/html/views/css/style.css\nbody {\n  background-color: #2392d8;\n  text-align: center;\n}\n```\n\n```./www/html/views/index.php\n<?php\necho 'Hello World';\n```\n\n```./www/html/views/layout.php\n<!DOCTYPE html>\n<html lang=\"ja\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <link rel=\"stylesheet\" href=\"views/css/style.css\" type='text/css'>\n  <title><?php echo $title; ?></title>\n</head>\n<body>\n  <?php include $content; ?>\n</body>\n</html>\n```\n\n上記の構成によって、/html直下のindex.phpは、/views以下のindex.phpとlayout.phpを読み込むようになっています。\n\n### layout.phpについて\n\nDOCTYPE~~などの記述は、新しいphpファイルを作成する度に一々記述したくないので、layout.phpで共通化してincludeによって呼び出す構成にする事で、記述を一度のみにしています。\n\n### index.phpについて\n\n/views以下のphpファイルに記述した内容を$contentという変数に代入し、それを/html以下の同名のphpファイルで呼び出しています。\n\nなので、例えば新しく「login.php」を追加したいとなった場合には、/html直下と/views直下にそれぞれ「login.php」を追加するイメージです。\n\nこれによって、記述をシンプルにしたりHTML部分とPHP部分を分離して記述できたりします。\n\n### CSSについて\n\nスタイルは、CSSがきちんと読み込まれているかを確認するためだけの簡単な記述です。\n背景が青色になり、テキストがセンターに寄っていればCSSがきちんと適応されています。\n\n複数CSSファイルの管理はまだしていませんが、おそらく/cssの下にCSSファイルを追加していく形で問題ないと思います。\n\n## 参考にしていただければ幸いです。\n\n以上、ざっくりですがスクラッチで開発する際のディレクトリ構成の一案として参考にしていただければ幸いです。\n\nLaravelなどのフレームワークを用いる場合、おそらくある程度決まったディレクトリ構成の型があると思うのですが、スクラッチで開発を進める場合は構成を自分で工夫する必要がありますね。\n\n私もまだまだ知識が浅いので、より良い環境を構築できるように精進したいと思います。\n\n参考にしていただければ幸いです。\n","user":"Takda_","created_at":"2021-03-28T21:41:16+09:00","updated_at":"2021-03-28T21:41:16+09:00"},{"url":"https://qiita.com/nao20010128nao/items/da474103962acaa4284e","title":"ffmpegでDiscordのVCに動画を音声と共に流す","body":"# はじめに\nお久しぶりです。初めての方は初めまして。\n\nffmpegを使って、DiscordのVCに動画を音声と共に流してみたいと思います。\n\nこの記事は、Ubuntu Desktop 20.04での方法を書いています。\nまた、各コマンドの意味は一番最後の`ffmpeg`以外ほとんど理解していないため、その点はご容赦下さい。\n\n加えて、この行為によってどうなっても知りません。何も保証しません。できません。よろしくお願いします。\n\n# 他との違い\n他のV4L2の記事では全て映像のみですが、この記事では**両方**扱います。\n\n# セットアップ\nまず、必要なものは以下の通りになります。\n\n- ffmpeg\n- ブラウザかDiscordのデスクトップクライアント\n    - 今回はGoogle Chromeを使用します\n    - FirefoxはVCとの相性が悪いのでおすすめしません\n- 次に挙げるもの\n\n## 物理カメラを無効化\n`ls /dev/video*`して出てきたビデオデバイスを、必要に応じて無効化します。\nこれをしないと、映像を止めた隙に顔バレします。ご注意下さい。\n\n## 仮想カメラ (映像のために必要)\n- http://www.nofuture.tv/diary/20200413.html\n- https://sounanda.jp/itskillup/?p=1601\n\n上記を参考に、\n\n```bash\n# インストール\nsudo apt install v4l2loopback-dkms v4l2loopback-utils\n\n# /dev/video10 を生成\nsudo /usr/sbin/modprobe v4l2loopback devices=1 video_nr=10 card_label=\"OBS Cam\" exclusive_caps=1\n```\nこのようにして、`OBS Cam`という名前で`/dev/video10`を生成します。\n\n## 仮想マイク (音声のために必要)\n- https://stackoverflow.com/questions/61990828/how-to-redirect-an-audio-stream-to-a-virtual-pulseaudio-microphone-with-ffmpeg\n\n上記を参考に、\n\n```bash\n# 仮想マイクを作成\npactl load-module module-null-sink sink_name=\"virtual_speaker\" sink_properties=device.description=\"virtual_speaker\"\npactl load-module module-remap-source master=\"virtual_speaker.monitor\" source_name=\"virtual_mic\" source_properties=device.description=\"virtual_mic\"\n```\n\n`virtual_mic`という名前でマイクを生成します。\n\n# 本番\n1倍速以上でデコードできる動画を使うことをおすすめします。\n\nまず、DiscordでVCに参加します。何をしても文句を言われない所にして下さい。\n\n次に、先に何らかの動画を次のコマンドで再生します。\n\n```\nPULSE_SINK=virtual_speaker ffmpeg -re -i \"video.mkv\" -f v4l2 /dev/video10 -f pulse \"stream name\"\n```\n\nその後、Discord側で配信の設定を行います。\n\n![カメラ設定](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/111609/14f10018-cc3e-4b45-7543-bdfc87f44c5e.png)\n\n![マイク設定](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/111609/5270cb81-845a-58f2-2ff8-a1e587f6b709.png)\n\n画像の通り、カメラを`OBS Cam`に、マイクを`virtual_mic`にします。\nまた、同時に映像が反転していないことを確認してください。\n音声に関しては、サブ垢を使うか同じチャンネルの別の人に確認してもらって下さい。\n\n反転している場合の対処法は、後述します。\n\nその後、`ffmpeg`を`Ctrl+C`で止めてから再度再生すれば、映像を音声つきでDiscordに流すことができます。\n\n# その他\n## コマンドの説明\n```\nPULSE_SINK=virtual_speaker ffmpeg -re -i \"video.mkv\" -f v4l2 /dev/video10 -f pulse \"stream name\"\n```\n主要な部分だけ説明します。\n\n- `PULSE_SINK=virtual_speaker` --- 出力先のマイクデバイスの指定\n- `-re` --- リアルタイム出力。これがないと速度が無制限になるので、一瞬で終わる\n- `-f v4l2 /dev/video10` --- 映像の出力先の指定\n- `-f pulse \"stream name\"` --- 音声の出力先の指定。`stream name`はよく分からない\n\nなお出力を同時に2つ指定していますが、これでも問題は無いようです。\n\n## 反転してしまう場合\n- https://duxyng.wordpress.com/2013/04/07/rotateflip-video-with-ffmpeg/\n\nffmpegが映像をV4L2に入力する際、場合によっては左右反転する場合があるので、そのときは`-vf hflip`をV4L2の出力に追加して下さい。\n他の反転は上記のURLを参照して下さい。\n\n# おわりに\n以上の方法で、DiscordのVCに動画と音声の両方を流すことができます。\n\n...というかこれってBotでやるべきだと思うんですけど\n","user":"nao20010128nao","created_at":"2021-03-28T21:41:04+09:00","updated_at":"2021-03-28T22:00:58+09:00"},{"url":"https://qiita.com/Kensuke-N/items/99234475af7971f549f0","title":"PHPerKaigi2021参加レポート","body":"# はじめに\n[PHPerKaigi2021](https://phperkaigi.jp/2021/)の参加レポートです。  \n前夜祭、1日目、2日目と全て参加した中で特に面白かったセッションとかとかを備忘録的な感じで。\n\n# セッションの感想\n## [PHPerでもわかる！実戦Webアクセシビリティ](https://fortee.jp/phperkaigi-2021/proposal/2ad09067-1c9f-41ce-8574-7abb06f65ce4)\nWEBアクセシビリティを向上させる事に対する基本的な知見を知れました。\n登壇者さんが言われていたゴールの\"Webアクセシビリティを完全に理解した\"という状態になれたと思います。\n普段コーディングする時に、マシンフレンドリーとかHTMLの標準のコーディングとかを意識していないので、これから意識していこうという気持ちになりました。\n\n## [某OSS blogのリファクタを進めつつ、コードについて話す](https://fortee.jp/phperkaigi-2021/unconference/view/cec104ba-f360-4000-8d3e-3aa9623aa36a)\n[オープンソースのブログ](https://github.com/fc2blog/blog)のコードをライブでリファクタするセッションでした。\nこれからOSSに参加していきたい身としては、参加する時のいいお手本になりました！\n\n## [静的型解析を用いた大規模レガシーコードのリファクタリング計画](https://fortee.jp/phperkaigi-2021/proposal/35177e2b-189c-43c2-ad29-e74caf5033e7)\nPHPstanを用いたリファクタリングについての話。\n静的型解析を入れる時は低レベルから、そしてPHPDocを充実させていくこと。\n参加しているチームにもレガシーコードがあったり、PHPDocが整備されていなかったりするので、これから導入したい！\n\n## [PHPで学ぶ、セッションの基本と応用](https://fortee.jp/phperkaigi-2021/proposal/9f8863cc-39b8-4bf7-aed7-f5be070c3bfb)\nセッションやCoockieの歴史的背景や基本的な動作について、普段何気なくつかっていて、且つ知った気になっている技術についての理解が深まりました。\n最近、参加している開発チームでもセキュリティに対して関心が高まってきているので、[安全なWebアプリケーションの作り方](https://www.amazon.co.jp/%E4%BD%93%E7%B3%BB%E7%9A%84%E3%81%AB%E5%AD%A6%E3%81%B6-%E5%AE%89%E5%85%A8%E3%81%AAWeb%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E4%BD%9C%E3%82%8A%E6%96%B9-%E7%AC%AC2%E7%89%88-%E8%84%86%E5%BC%B1%E6%80%A7%E3%81%8C%E7%94%9F%E3%81%BE%E3%82%8C%E3%82%8B%E5%8E%9F%E7%90%86%E3%81%A8%E5%AF%BE%E7%AD%96%E3%81%AE%E5%AE%9F%E8%B7%B5-%E5%BE%B3%E4%B8%B8/dp/4797393165)とかを読んで知識をつけたいと思います。\n\n## [PHPWebアプリケーションパフォーマンスチューニング](https://fortee.jp/phperkaigi-2021/proposal/1d6859e3-26e4-4918-8603-44ecc3c61666)\n\"推測するな、計測せよ\"\n最近の一番の課題の計測する所のやり方に関する内容でした。\n改善のステップを愚直に回すことを実戦するための知見を得られたと思います！\n\n## [そのコード、フレームワークの外でも動きますか？](https://fortee.jp/phperkaigi-2021/proposal/43f0d237-e254-4836-8275-9027d27a80ef)\n\"フレームワーク変えることなんてないでしょ\"って方はぜひ！って内容でした。\nフレームワークに依存しない書き方をすることでこんなに簡単にフレームワークを切り替えれるのかと驚きました。\n\n## [帰ってきたカンファレンスの廊下](https://fortee.jp/phperkaigi-2021/unconference/view/2dcb4a11-c4d0-46a8-bb6f-41182241c7ac)\n今回最後にLTをすることになった発端となったアンカンファレンスでした。\n楽しかった！！\n\n## [リアルカンファレンスのクロージングが始まるまでのダベる感じを再現する部屋](https://fortee.jp/phperkaigi-2021/unconference/view/42930d7f-7062-46a0-8c43-f111173ea97d)\n5分間のLTさせて頂きました！\n[一年経験した学生エンジニアが今思うこと](https://speakerdeck.com/kensukenakazawa/nian-jing-yan-sitaxue-sheng-enziniagajin-si-ukoto)\n[参加メモ PHPerKaigi 2021 day2](https://blog.sora-riku.com/e358a55ad8a331d525a1e9041db55702/)でも取り上げてもらいました。\n\n# さいごに\n初めてのPHPerKaigiでしたが、色々学べたし楽しかったです。\n開催してくださった、運営スタッフの方々、スポンサーの皆様、発表して頂いたスピーカーの方々ありがとうございました！\nLTしたことがきっかけで、「ドローン」を頂きました！\n\n今回知り合った参加者の方々とは今後もコミュニケーションを取っていきたいですね。\n\n\n\n","user":"Kensuke-N","created_at":"2021-03-28T21:38:51+09:00","updated_at":"2021-03-28T21:38:51+09:00"},{"url":"https://qiita.com/mn87/items/aa5ab542288d07bfb394","title":"EC2をADサーバーとしてWorkSpacesを使ってみた！","body":"前回、[EC2をADサーバーとして作成してみた！ - Qiita](https://qiita.com/mn87/items/916ed4670ac0130026a5)でEC2をADサーバーとして起動し、別のEC2からリモート接続するところまで試してみました。\n今回は引き続き以下の記事を参考に、WorkSpaces環境を構築していきたいと思います。\n[EC2からADサーバーを自分で作成し、WorkSpacesのディレクトリとして使ってみよう！ - サーバーワークスエンジニアブログ](https://blog.serverworks.co.jp/tech/2020/01/22/post-78281/)\n\n# 前回まで\n参考記事の\n1. ADサーバを立ち上げる\n2. ADサーバにユーザーを登録し、リモートPCに接続してみる\nまではできました。\n\n# 3. WorkSpaces環境を構築する\n\n## ！料金に関する注意\n参考記事の通り料金にご注意ください。\n>WorkSpacesは、１台でも立ち上げた段階で初期費用を取られます。立ち上げてすぐ削除しても、初期費用は取られ、かつ月単位で課金されますので注意してください。\n\n料金については以下の記事もわかりやすかったです。\n[AWS WorkSpacesの時間料金に基本でかかる月額料金分の計算について | ハックノート](https://hacknote.jp/archives/38687/)\n\n## ディレクトリの作成\nまずはWorkSpacesでディレクトリを作成します。\nマネジメントコンソールからWorkSpacesコンソールに移動します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/617e682d-5b60-a834-cc42-626da14c64b5.png)\n\n「今すぐ始める」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/2a53f83d-9e8d-4e75-b6cf-aeef68e20546.png)\n\n詳細設定の方の「起動」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/30c2b827-cc93-0954-1d3d-d1d3ca4b94fc.png)\n\n「AD Connector」を選択し、「次へ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/38a46fcd-1b02-e63b-e6ed-055b102f04a0.png)\n\nサイズは「スモール」を選択し、「次へ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/bc567d96-14a8-85af-8a2d-d257625d1169.png)\n\nVPCはADサーバ作成時と同じもの、サブネットはADサーバーとユーザーサーバーの両方のサブネットを指定し、「次へ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/a01cad16-b05d-96c7-5d02-121e1d447bb9.png)\n\n任意の組織名、ADサーバーで設定したDNS名、ADサーバーのプライベートIP、ADサーバーに登録したユーザー名とパスワードを入力し、「次へ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/dd680713-55d0-096c-e6d8-1be453bb412e.png)\n\n\n確認画面で「ディレクトリの作成」をクリックします。\nこの際、`AmazonWorkSpacesAdmin`の権限がないとエラーが発生します。`AdministratorAccess`を付けていても失敗したので、明示的に`AmazonWorkSpacesAdmin`の付与が必要なようです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/9fb0dab8-3e7a-1e78-9941-ad0b478fe989.png)\n\n\nしばらく待つとステータスが`Active`になりました。\n※実はこの前に1度`Falied`になったのですが、理由はDNSのIPアドレスにパブリックIPを指定していたことでした。プライベートIPに変更したら成功しました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/13a21ff5-8552-72ff-ece0-b5c6d8de9502.png)\n\nディレクトリ選択し、「アクション」から「登録」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/7fccda51-294f-37fd-c04a-9a93b5b68e60.png)\n\nサブネットを2つ選択し、「登録」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/afd42ac4-7285-09e7-6741-421d08166706.png)\n\n少し待つと登録済みが「はい」になりました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/945b885e-350e-11c5-1016-83a656020ee0.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/6dc7b8df-c963-9c39-0f61-e13a91688e47.png)\n\n## WorkSpacesを構築する\n続いて、ダッシュボードから「WordSpaces」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/fcddb367-2011-d916-4547-734dd69549f5.png)\n\n「WordSpacesの起動」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/1c1ef429-7537-d3d7-9d13-6f7cd7ea3669.png)\n\n登録したディレクトリを選択し、「次のステップ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/362513fc-f846-ca1c-a55e-33029d016f2f.png)\n\n「すべてのユーザーの表示」をクリックすると、ユーザー一覧が表示されるので、ユーザーを選択して「選択項目を追加」をクリックします。\n追加されたら「次のステップ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/378875b7-b1ad-0010-e1ce-c9b7551c19e8.png)\n\n今回は無料枠のWindows10を選択し、言語を日本語に変更しました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/7d42a98a-7aed-3522-a2e1-6e972225208e.png)\n\n画面下部の「次のステップ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/ae52bbeb-ccb9-65b9-3ca1-55b1a0ba1a20.png)\n\nここはデフォルトのままにし、画面下部の「次のステップ」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/7eae4cc0-882c-a2a9-0b34-c6e23c8045e1.png)\n\n確認画面で「WorkSpacesの起動」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/9c5c6123-64be-bcb1-2f42-03ff77494d7a.png)\n\n起動中\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/04d44935-c538-c94c-d11f-14f6c5eb67f1.png)\n\n20分ほどでステータスが`AVAILABLE`になりました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/1ac13607-75b8-ff38-e8e7-1c0534681484.png)\n\n\n## 接続してみる\n[Amazon WorkSpaces Client Download](https://clients.amazonworkspaces.com/)から専用ソフトをダウンロードして実行します。\nすべてデフォルトのまま「Next」をクリックし、最後に「Install」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/fa6f5726-e9b5-312e-3393-0c8b89a7a48d.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/0a7f7abe-3e97-5259-863d-c53caff192e8.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/efd42432-f63e-2a4f-067b-fca02af243c4.png)\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/82c94c70-f10c-e519-d50e-3a26f9d08f6e.png)\n\n完了したら「Finish」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/e7cc8c7a-66a2-4df0-dc9a-bd1057e1b6a6.png)\n\nデスクトップのショートカットをクリックすると以下の画面が表示されるので、登録コードを入力します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/ccd27fc5-5c09-fefc-7a0f-5d59117d27a3.png)\n\n登録コードはコンソールにあります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/03854ad0-7f78-3d10-c96b-e7ce16b5620d.png)\n\n続いてユーザー名とパスワードを求められるので、作成したユーザー名とパスワードを入力して「Sign In」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/05afb7cf-8e2f-ce81-5a99-81737b09864c.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/dfb56a38-250a-a9d8-ec54-e3ae65fe5e76.png)\n\n途中でアクセス許可の警告が出ますが、「アクセスを許可する」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/a77ac8c8-24bb-ea3b-8928-b9e6790d0fed.png)\n\n無事起動しました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/f3d5c8cb-caf2-d4bc-7725-2d8cf2767b90.png)\n\nユーザーは確かに作成したユーザーです。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/148a5e19-890c-fb34-e1bf-d2777b1877a7.png)\n\n# ちょっと試してみたい\nせっかくなので気になることを試します。\n\n## ADサーバーにリモート接続\nプライベートIPでちゃんと接続できました！\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/b6c672d3-e526-00b5-38ed-d0fb6899535a.png)\n\n## ファイルのコピー不可\nデスクトップに適当なテキストファイルを作成し、ローカルPCにコピーしようとしましたができませんでした。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/92c42952-e3cd-124e-d81a-8fbbb50760d0.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/a9b8e007-6208-5ffd-dcbb-139f5af5b338.png)\n\n## インターネット接続\n普通にできました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1162215/9e55ed3d-ae32-f1ba-8c4d-93a22375d67b.png)\n\n# まとめ\n前回、今回とADに関する理解のために実際にEC2にADを構築して、さらにWorkSpacesの構築までやってみました。\n一連の流れで少しだけADの役割について理解が増したと思います。ただ、WorkSpaces関連のところは知識不足でまだ理解できないところもあるので、今後勉強していきたいと思います。\n\n今回の一連の流れがどなたかの参考になれば幸いです。\nご覧頂きありがとうございました！\n\n# 参考資料\n[EC2からADサーバーを自分で作成し、WorkSpacesのディレクトリとして使ってみよう！ - サーバーワークスエンジニアブログ](https://blog.serverworks.co.jp/tech/2020/01/22/post-78281/)\n[AWS WorkSpacesの時間料金に基本でかかる月額料金分の計算について | ハックノート](https://hacknote.jp/archives/38687/)\n","user":"mn87","created_at":"2021-03-28T21:37:36+09:00","updated_at":"2021-03-28T21:44:40+09:00"},{"url":"https://qiita.com/tomotakasg/items/362ff4a738240bf98188","title":"What's 宣言的UI（Jetpack Compose)？と思ったので調べた話","body":"## 前ふり\nども、八流エンジニアです。\nここ数年、流行っている宣言的UI・・流行ってますよね\n耳にもするし、なんとなくは知っているけど、聞かれた時に恥ずかしくないように調べてみました。\n\n個人的には、`Flutter`で大変嫌な思いをしているので、\n宣言的UIに対するモチベーションが低いですが、やっていきます！\n\n## 宣言的UIとは？\n### そもそも\n`宣言的`という単語が、いかにもなIT用語な感じで、わかりにくいですよね（？）\n[そういう時はWikipedia](https://ja.wikipedia.org/wiki/%E5%AE%A3%E8%A8%80%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0)ですよね。\n\nwikiによると、\n>宣言型プログラミングでは対象の定義 =「何（What）を得たいか」を宣言してプログラムを構成し、逆にそれを得る過程・手続き・アルゴリズム =「どうやって（How）得るか」を記述しない[1][2]。すなわち、出力を得る方法ではなく、出力の性質・あるべき状態を記述することが「宣言型」である。\n\n概要だけでなんとなくわかった気がします！\n「何を得たいか」？ってことねー\n\nちょっと見えないっす。\n\n### 具体的に\n#### 昨今の宣言的UIと言われているモノタチ\n* [SwiftUI](https://developer.apple.com/jp/xcode/swiftui/)\n* [Jetpack Compose](https://developer.android.com/jetpack/compose?hl=ja)\n* [Flutter(2)](https://medium.com/flutter/whats-new-in-flutter-2-0-fe8e95ecc65)\n* [React](https://ja.reactjs.org/)\n\n他にもあるでしょうが、今回はここら辺。（Reactはやってないですw）\n\n\n#### 実際のコード\n\n##### SwiftUI\n```swift\nimport SwiftUI\n\nstruct ContentView: View {\n    var body: some View {\n        VStack {\n            MapView()\n                .ignoresSafeArea(edges: .top)\n                .frame(height: 300)\n\n            CircleImage()\n                .offset(y: -130)\n                .padding(.bottom, -130)\n\n            VStack(alignment: .leading) {\n                Text(\"Turtle Rock\")\n                    .font(.title)\n\n                HStack {\n                    Text(\"Joshua Tree National Park\")\n                    Spacer()\n                    Text(\"California\")\n                }\n                .font(.subheadline)\n                .foregroundColor(.secondary)\n\n                Divider()\n\n                Text(\"About Turtle Rock\")\n                    .font(.title2)\n                Text(\"Descriptive text goes here.\")\n            }\n            .padding()\n\n            Spacer()\n        }\n    }\n}\n\nstruct ContentView_Previews: PreviewProvider {\n    static var previews: some View {\n        ContentView()\n    }\n\n```\n##### SwiftUI、眺めてみて\n画面構成と内容を、コード上で全て書いている。\nレイアウトファイルに近いので可読性はかなりいい。\nxibファイルからしか手段がなかった（気がする）の時に比べると格段にいい気がする。\nswift自体はとても読みやすい言語なので\niOS開発者はandroiderのためにも、SwiftUIの採用お願いします。\n\n##### Flutter\n```dart\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Material Design',\n      home: Scaffold(\n        appBar: AppBar(\n          title: Text('Material Design Layout'),\n        ),\n        body: Center(\n          child: Text('Hello World'),\n        ),\n      ),\n    );\n  }\n}\n```\n\n##### Flutter、眺めてみて\n画面構成と内容を、コード上で全て書いている。。\n`()`が多すぎ、`;`がだるい\nやっぱ、`dart` はない\n\n\n##### JetPackCompose\n```kotlin\n@Composable\nfun Home(onSnackSelected: (Long) -> Unit) {\n    val (currentSection, setCurrentSection) = rememberSaveable {\n        mutableStateOf(HomeSections.Feed)\n    }\n    val navItems = HomeSections.values().toList()\n    JetsnackScaffold(\n        bottomBar = {\n            JetsnackBottomNav(\n                currentSection = currentSection,\n                onSectionSelected = setCurrentSection,\n                items = navItems\n            )\n        }\n    ) { innerPadding ->\n        val modifier = Modifier.padding(innerPadding)\n        Crossfade(currentSection) { section ->\n            when (section) {\n                HomeSections.Feed -> Feed(\n                    onSnackClick = onSnackSelected,\n                    modifier = modifier\n                )\n                HomeSections.Search -> Search(onSnackSelected, modifier)\n                HomeSections.Cart -> Cart(onSnackSelected, modifier)\n                HomeSections.Profile -> Profile(modifier)\n            }\n        }\n    }\n}\n\n```\n##### JetPackCompose、眺めてみて\n画面構成と内容を、コード上で全て書いている。\nボトムナベゲーションのパターンで、enumによって切り替わるように見える。\n\n### 一旦まとめ\n確かに、wikiの通り、を１コードに「何を得たいか」を書けば、画面が素直に構成できそう。\nただ、機能（リスナー関連）は、外に出さないと、見通しが悪くなると思うので、\nここまで素直に、定義していくことはない気がする。\n\n## 今までのコードをみる (android)\n### xml\n```xml\n<Button\nandroid:id=\"@+id/simpleButton\"\nandroid:layout_width=\"wrap_content\"\nandroid:layout_height=\"wrap_content\"\nandroid:text=\"test\"/>\n```\n### kotlin\n```kotlin\nsimpleButton.setOnClickListener {\n  textView.text = \"${it.text} is pushed\"\n}\n```\n\n#### 今までレイアウトを眺めてみて\nレイアウトリソースに動きをコードでつけているんだからこうなるよね。\n\n実装進めている中で、レイアウトはこうで、ここにこういう処理が入って、と考えるより\nここの画面は、こういうレイアウトでこういう機能でってのを一括で描きたい人には宣言的の方がいいのかも。\n\n個人的には、レイアウトが別ファイルになっているのはわかりやすいと思うんだけどなー\n\n## 比較して思ったこと\n宣言的UIは、機能が少ないシンプルな構造なアプリにだったらいいんじゃないかな。\n命令的であろうが、コードがfatになれば、自然と分離したくなるんだから、\n\nはなからレイアウトがファイルとして分離しているのは、そこまで悪いことではないと思う。\n\n## 重要そうな概念 （jetPackで調べる）\n### [Compose](https://developer.android.com/jetpack/compose/mental-model)\n>ビューを手動で操作すると、エラーが発生しやすくなります。データの一部が複数の場所でレンダリングされている場合、それを示すビューのうちいずれかの更新を忘れがちです。また、2 つの更新が予期せず競合すると、不正な状態が作成されやすくなります。たとえば、UI から削除されたばかりのノードの値を設定しようとすることがあります。一般に、更新を必要とするビューの数が多いほど、ソフトウェアのメンテナンスの複雑さは増します。\nここ数年、業界全体が宣言型 UI モデルに移行し始め、ユーザー インターフェースの構築や更新に関連するエンジニアリングは大幅に簡素化されています。この手法は、概念的に画面全体をゼロから再生成し、必要な変更のみを適用することで機能します。このアプローチでは、ステートフルなビュー階層を手動で更新する複雑さを回避できます。Compose は宣言型 UI フレームワークです。\n画面全体を再生成する際の課題は、時間、コンピューティング能力、電池使用量という点で、コストが高くなる可能性があることです。このコストを軽減するために、Compose は常に、UI のうち再描画する必要がある部分をインテリジェントに選択します。これは、再コンポーズで説明するように、UI コンポーネントの設計方法に影響する可能性があります。\n\n更新するは、デバイス開発のわかりやすい課題。\nただ、命令的でもMVVMとか通して、似たことはできるが、書いてあるように、漏れが発生しする可能性はあるため\nflutterでも出てくる、`ステート`が重要そうに思う\n\n### [ステート](https://developer.android.com/jetpack/compose/state)\n>アプリにおいて状態とは、時間とともに変化する可能性がある値すべてを意味します。これは非常に広範な定義であり、Room データベースにも、クラス内の変数一つにも当てはまります。\n\nつまりボタン押されたら、何かがはじまるを命令するのではなく、\nボタン押された後の姿を、状態として持っておく\nみたいなイメージなのかな・・たぶん。\n\n\n## まとめ\n宣言的UIが、\"あまりよくわかってない最近の流行りのUI\"から、命令的とは明確に違う、\n「こういう状態にしたい！」という思いを、そのままコードにぶつけて実装進められるというのが\n一番わかりやすい利点なのかなとは思いました！！\n\nこれで、宣言的UIという単語が来た時に、怖くなくなったと思います！以上！！\n\n\n### 長い、あとがき\n宣言的UIはあくまでUIの実装部分の話で、\nコードの可読性に当たる話とは別だと思いうなー\nアーキテクチャとか、どれだけFatにしないかは別で解決する必要があるはず。\n宣言的UI周りで流行っているアーキテクチャ（[Flux](https://qiita.com/knhr__/items/5fec7571dab80e2dcd92)とか）は、\n親和性が高いけど、宣言的UIと一緒に使わなければダメというわけでもなさそう。\n今回はアーキテクチャ剪定の話ではないので、深くは言いませんが・・・（言えないし）\n\n正直、androidでは流行らないで欲しい。\nあくまで、androidの話だけど、、\nめちゃくちゃ便利になるわけではないし・・・\nただ、最新のUIやレンダリングの最適化が宣言的の方がよくなっていくならば、移行するしかないとは思う。\n移行するハードルがめちゃくちゃ高いわけでもなさそうなのはよかった。\n\n自分の好みじゃないけど、より似たようなのってDataVindingだと思うんだけど、\nDataVindingするくらないなら宣言的な方がいい気がする。\nただ、命令的でも`ViewModel+Coroutine+ViewBinding`で、\nレイアウト一目ではわからないまでも、viewの繋がりがかなり見えやすいので、困らないと思うんだけどなー\n\n\nandroid初心者には壁となりやすそうな、`Fragment`や`savedInstanse`を無視できる可能性もありそうで\nこれからandroid始める人にはお勧めしたい気がしますね。\n\n宣言的UIの本当に最初は、「Html+Js or CSS」みたいに、domを操作言語で肉付けするのがわかりにくいところから来てて\n実態が見辛いのが問題だったんだと思うんすよね。\nandroid開発ってそんなに見辛くならないよ？？とは思ってしまう。\n\n正直、今までいろんな現場のレイアウトリソース見てきたけど、`tools`うまく使いこなせてなかったり\n`ViewGroup`の階層がカオスになってたりするのが多かったから可読性が悪いんじゃないの？\nとは思ってしまう。\n宣言的にしないでも可読性も上がるし、描きやすさは大きく変わらないとは思うんだけど、\n頭の整理のしやすさの選択肢として、宣言的である手法を選択できるのはいいんじゃないかとは思います。\n\n僕の中の宣言的UIに対してのイメージは、\nもともとFlutterやってて描きづらいし、読みづらいし、\nどうなっとんねん！！となってたけど、jetPackComposeなら多少マシにできるかも？\nとは思えたので、少し前向きになれました。\n\n\nそれと、\n公式のドキュメントの偉大さと、集合知のwikiがあれば大体問題解決できますねー:sunglasses:\n\nみなさん、wikiにちゃんとお布施しましょうね？\n僕は毎年元旦にお布施してるからセーフ（？）\nお粗末！！！！！\n\n## 参考資料（まとめ）\n### vue.jsとhtmlの比較だけど、`出したいものを、UIに載せておくイメージ`はわかりやすい\nhttps://qiita.com/Yametaro/items/3c27305072464e1d6230\n### 公式Jetpack Compose\nhttps://developer.android.com/jetpack/compose?hl=ja\n\n### 宣言プログラミング wiki\nhttps://ja.wikipedia.org/wiki/%E5%AE%A3%E8%A8%80%E5%9E%8B%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0\n\n### SwiftUIのコード探した\nhttps://github.com/ivanvorobei/SwiftUI\n\n### jetPackComposeのコード探した\nhttps://github.com/android/compose-samples\n\nhttps://github.com/DroidKaigi/conference-app-2021\n\n\n### flutterのコード探した\nhttps://flutter.ctrnost.com/basic/interactive/form/button/\n\n### Reactでの宣言的の意味\nhttps://www.fenet.jp/dotnet/column/language/3816/#Declarative\n\n### Fluxについて、わかりやすかった\nhttps://qiita.com/knhr__/items/5fec7571dab80e2dcd92\n\n\n\n\n","user":"tomotakasg","created_at":"2021-03-28T21:34:30+09:00","updated_at":"2021-03-28T21:50:01+09:00"},{"url":"https://qiita.com/centerfield/items/a7e4964d6c1963b70bbb","title":"Firebase HostingでNext.jsのISRっぽいことを実現する","body":"## はじめに\n\n先日このような記事を書きました。\n\nhttps://qiita.com/centerfield/items/349ae9094872168ae86f\n\nタイトルの通りISRはFIrebase Hosting (Cloud Function) では動きませんでした。\n理由は以下の説明がとてもわかりやすかったです。\n\n>ISR の本体は、 SSG された HTML をキャッシュし、ユーザのアクセス応じて適切に生成・配信・破棄を行う機能です。\n単に IaaS やコンテナにデプロイしただけでは、CDN の設定をすればキャッシュはされるものの、パージが ISR の想定通りには動きません。\nコンピューティングリソース内部にキャッシュする(ステートフルにする)場合はその限りではありませんが、 CDN を通さない分のパフォーマンス影響が発生しますし、これは ISR とは異なるものとなります。\nlambda や cloud functions ではもはやまともに動かないでしょう。\n>\n[Next.js のインフラ要件と選択肢](https://blog.euxn.me/xsymsnvwjbkaaaaaaacrug)\n\nということでISRの実現が難しいことは理解しましたが、諦めきれなかったので、\n今回はISRではなく、**ISRっぽい**動きの実現を目指します。\n\n\n## やっていく\n\nこの記事がとても参考になりました。\n\nhttps://zenn.dev/catnose99/articles/0b601c1f62019b\n\nアプローチとしてはざっくり書くとこんな感じです。\n**SSG + ISR　➡︎　SSR + Cache-Control**\n\nサーバーサイドレンダリングした内容をCDNにキャッシュし、\nそのキャッシュの保持期間をCache-Controlで指定します。\n\nstale-while-revalidateに対応しているCDNであればISRっぽい挙動を実現できます。\n\nそしてどうやらFirebase Hostingはstale-while-revalidateに対応していることがわかりました。\n\nhttps://twitter.com/isyumi_net/status/1374890880641892352\n\nおそらくですが、理由はFirebaseのCDNはstale-while-revalidateに対応している[Fastly](https://www.fastly.jp/)が担っているからだと思われます。\n\n>Fastly, Inc., headquartered in the United States, to deliver content and managed services on Firebase Hosting to end-users, via the Fastly content delivery network.\n>\"米国に本社を置くFastly, Inc.が、Firebaseホスティング上のコンテンツやマネージドサービスを、Fastlyコンテンツデリバリーネットワークを介してエンドユーザーに配信する。\"\n\n>[Firebase Subprocessors](https://firebase.google.com/terms/subprocessors)\n\n### さっそくコードを書き換えていく\n\n`getStaticPaths`は不要になるので消し、\n`getStaticProps` → `getServerSideProps`に書き換え、`revalidate`も消します。\n\n```index.jsx\n// export async function getStaticPaths() {\n//   return {\n//     paths: [],\n//     fallback: true,\n//   };\n// }\n\n//export async function getStaticProps({ params }) {\nexport async function getServerSideProps(context) {\n\n//省略\n\n rreturn {\n    props: {\n      data,\n    },\n    // revalidate: 600,\n  };\n}\n```\n\nそして`Cache-Control`を設定します。\n参考：[Cache-Control を設定する](https://firebase.google.com/docs/hosting/manage-cache?hl=ja#set_cache-control)\n参考：[getServerSideProps (Server-side Rendering)\n](https://nextjs.org/docs/basic-features/data-fetching#getserversideprops-server-side-rendering)\n\n```index.jsx\n\nexport async function getServerSideProps(context) {\n  context.res.setHeader(\"Cache-Control\", \"public, s-maxage=3600, stale-while-revalidate=7200\");\n\n//省略\n\nreturn {\n    props: {\n      data,\n    },\n  };\n}\n```\n\n`s-maxage`の設定で3600秒 (1時間) はキャッシュを表示し、その後のアクセスでは1度キャッシュを表示した上で裏側でキャッシュの更新をし、その次のアクセスでは新しいキャッシュを表示する。\nかつ`stale-while-revalidate`の設定で7200秒経過した時点でキャッシュが破棄され、その次のアクセスでは最新のデータが表示される。\n\nという設定をしました。\n細かいCache-controlの説明は[MDN](https://developer.mozilla.org/ja/docs/Web/HTTP/Headers/Cache-Control)のサイトがわかりやすいです。\n\n### デプロイ\n\nこれでCloud Functionsにデプロイすると、無事ISRっぽい動きになりました。\n\n## 注意点：プリフェッチの挙動について\n\n冒頭で示した記事内に記載されていますが、\ngetServerSidePropsに変更したことによってプリフェッチの挙動が変わります。\n\n>getStaticPropsを使ったときはページのデータまでプリフェッチが行われます。一方でgetServerSidePropsを使ったときはJSファイルのみがプリフェッチされ、データまではプリフェッチされません。\n[stale-while-revalidate対応のCDNでISRと同じような挙動を実現する](https://zenn.dev/catnose99/articles/0b601c1f62019b#%E6%B3%A8%E6%84%8F%E7%82%B9)\n\nVercelでISRをしていたときは中のデータまでプリフェッチしてくれましたが、\n今回の方法ではデータまでプリフェッチされません。\n\n一般的なコンテンツサイトであればあまり問題にならないかもしれませんが、\n設計によっては注意が必要です。\n\n例えばちょっと極端な例ですが、\nナビバーに４つの目次があり、クライアントサイドナビゲーションでページ遷移するとします。\nA, B, C それぞれ DB からデータをフェッチしており、\n\"すべての情報\" ページは A, B, C すべてのデータをフェッチしています。\n　\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRDDR-jsSwvB22s3ggJkEUJxw1GzfVHGUS-IdU3lFK-T_CHF7YOK920rEL6V5LaUZDdkveZ1CTxHk7h/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n　\nクライアントサイドナビゲーションとはいえ、ページが分かれているのでそれぞれのページがCDNにキャッシュされることになりますが、\n問題は**キャッシュの破棄されるタイミングがバラつくために、ページ間の情報に不整合が出る**ことです。\n\n例えば、 C の DB に情報が追加されました。\nその後キャッシュが破棄されたタイミングで \"Cの情報\" ページが更新されました。\nしかし、\"すべての情報\" ページが古いキャッシュのままだったとします。\n\nするとこのような動きになります。\n<iframe src=\"https://docs.google.com/presentation/d/e/2PACX-1vRfQuz5ydyr7tMT0ZD0vc88qhY2D7ULULiHF9Uqs5q1kezetc07Op5z_xNvuf2fVHl7R-svWr8p8PfB/embed?start=false&loop=false&delayms=3000\" frameborder=\"0\" width=\"960\" height=\"569\" allowfullscreen=\"true\" mozallowfullscreen=\"true\" webkitallowfullscreen=\"true\"></iframe>\n　\n今回の例はページの中にナビバーも含めていた極端な例でしたが、この例でもVercelのISRでは中のデータまでプリフェッチすることにより問題なく機能するため、\nVercelから別の場所に移動するときは、設計によってはこのプリフェッチの挙動に違いによって影響がありますよというお話でした。\n\n## さいごに\n\nVercelに上げる気満々で作ったNext.js製アプリが大人の事情でFirebaseを指定されることになり、戸惑いながら色々調べていましたが、\n・[Next.js のインフラ要件と選択肢](https://blog.euxn.me/xsymsnvwjbkaaaaaaacrug)\n・[stale-while-revalidate対応のCDNでISRと同じような挙動を実現する](https://zenn.dev/catnose99/articles/0b601c1f62019b#%E6%B3%A8%E6%84%8F%E7%82%B9)\nこれらの記事のおかげで何とか解決することができました。\n（本当はもっと他にもここには挙げきれないぐらいたくさんの記事を参考にしました）\n\n書いてくださった皆さんには本当に感謝しています。ありがとうございました。\n\n\n\n\n\n\n","user":"centerfield","created_at":"2021-03-28T21:33:53+09:00","updated_at":"2021-03-28T21:33:53+09:00"},{"url":"https://qiita.com/Atris0/items/0a92862a9245189e30a5","title":"初めてのPython学習-基礎②-","body":"#複数のデータをまとめて扱う\n\n```\nリスト[要素1,要素2,要素3,要素4,.....]\n```\n\n※要素の番号（インデックス番号）は0から始まる\n\n\n**▼文字列のリスト**\n\n```\n['yakiniku','yakimeshi','yakitori']\n```\n\n焼き肉・・・インデックス番号[0]\n焼き飯・・・インデックス番号[1]\n焼き鳥・・・インデックス番号[2]\n\n```\nfoods = ['yakiniku','yakimeshi','yakitori']\nprint('今日の晩御飯は' + foods[1] + 'です')\n\n※文字列のリストを作る際には、””を忘れない\n\nコンソール\n　→今日の晩御飯は焼き飯です\n```\n\n**▼数値のリスト**\n\n```\n[1,2,3,4,5]\n```\n\n**▼文字列と数字が混合したリスト**\n\n```\n['banana','orange',1,2]\n```\n\n**▼リストを変数に代入**\n\n```\ncars = ['toyota','matsuda','nissan','honda']\nprint(cars)\n```\n\n**▼リストの中身を変更**\nリスト[インデックス番号] = 値\n\n```\ncars = ['toyota','matsuda','nissan','honda']\ncars[1] = 'daihatsu'\nprint(cars)\n\nコンソール\n　→['toyota','daihatsu','nissan','honda']\n```\n\n**▼リストに要素を追加**\n\n```\nリスト.append(値)\n\ncars = ['toyota','matsuda','nissan','honda']\ncars.append('suzuki')\nprint(cars)\n\nコンソール\n　→ ['toyota','matsuda','nissan','honda','suzuki']\n```\n\n#リストの要素を全て取得\nfor文\n\n**▼for文を使うと出来ること**\nリストの要素の数だけ処理を繰り返すことが出来る\n\n**▼構文**\nfor 変数名 in リスト:\n\n**▼処理の流れ**\n\n```\ncars = ['toyota','matsuda','nissan','honda']\n\nfor car in cars:\n    print('私の愛車は' +car+ 'です')\n```\n\n①変数carにtoyotaが代入\n②for文の中身【print('私の愛車は' +car+ 'です')】が実行される【私の愛車はtoyotaです】\n③変数carにmatsudaが代入\n④for文の中身【print('私の愛車は' +car+ 'です')】が実行される【私の愛車はmatsudaです】\n⑤変数carにnissanが代入\n⑥for文の中身【print('私の愛車は' +car+ 'です')】が実行される【私の愛車はnissanです】\n⑦変数carにhondaが代入\n⑥for文の中身【print('私の愛車は' +car+ 'です')】が実行される【私の愛車はhondaです】\n\n#辞書を使う\nリストと同じく複数のデータをまとめて管理する\n\n**▼違い**\nリスト・・・要素を番号で管理\n辞書・・・名前（キー）を付けて管理\n\n```\n変数名 = {'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi'}\n※dragonballがキー、gokuuが値\n```\n\n①キーには文字列を使う\n②{}で囲む\n③キーと値の間は(:)、要素同士の間は（,）を使って区切る\n\n**▼要素を取り出す**\n辞書名[キー]\n\n```\ncomics = {'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi'}\nprint('好きな漫画の主人公は' + comics['dragonball'] + 'です')\n　→好きな漫画の主人公はgokuuです\n```\n\n**▼要素を変更する**\n\n```\ncomics = {'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi'}\ncomics['dragonball'] = 'gohan'\nprint('好きな漫画の主人公は' + comics['dragonball'] + 'です')\n　→好きな漫画の主人公はgohanです\n```\n\n**▼辞書に要素を追加する**\n\n```\ncomics = {'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi'}\ncomics['naruto'] = 'naruto'\nprint(comics)\n　→{'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi','naruto':'naruto'}\n```\n\n※リストではappendを用いたが、辞書では用いない\n\n**▼辞書の要素を全て取得する**\n※リストと同様にfor文を使う\n\n```\n構文\nfor 変数名 in 辞書:\n\n処理の流れ\ncomics = {'dragonball':'gokuu','onepiece':'luffy','slamdunk':'hanamichi'}\n\nfor comic_key in comics:\n    print(comic_key + 'の主人公は' +comics[comic_key] + 'です')\n\n①変数comic_keyにdragonballが代入\n②for文の中身【print(comic_key + 'の主人公は' +comics[comic_key] + 'です')】が実行される【dragonballの主人公はgokuuです】\n③変数comic_keyにonepieceが代入\n④for文の中身【print(comic_key + 'の主人公は' +comics[comic_key] + 'です')】が実行される【onepieceの主人公はluffyです】\n⑤変数comic_keyにslamdunkが代入\n⑥for文の中身【print(comic_key + 'の主人公は' +comics[comic_key] + 'です')】が実行される【slamdumkの主人公はhanamichiです】\n```\n","user":"Atris0","created_at":"2021-03-28T21:33:38+09:00","updated_at":"2021-03-28T21:33:38+09:00"},{"url":"https://qiita.com/orangeman1226/items/925112b38a6a8e50a68e","title":"ROS + VScode の設定　まとめメモ","body":"#ROS + VScode 設定\n--------------------------------------------------\n本記事は、自己の備忘録のためにVisual studio codeでROSのソースをデバッグするまでの設定方法をまとめる。かなりくどい感じでまとめているので、見ればでもわかると思われる。\n\n##1.VS CODE インストール\nVs codeをターミナルよりダウンロードとインストールする。\n\nhttps://code.visualstudio.com/download\n\n##２.ROS インストール\nROSのチュートリアルを見ればインストールできる。\n\nhttp://wiki.ros.org/melodic/Installation/Ubuntu\n\n##３.VS CODE　エクステンションインストール\n\nエクステンションのメニューから下記のモノをインストールする。\n\n1)ROS　Develop Robot Operating System(ROS) with Visual studio Code \n2)CMake\n3)CMakeTools\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/7c1fe27d-eabe-17c1-f132-a42a18cae3df.png)\n\n\n##４.catkinのワークスペースディレクトとビルド（初期）\n###ワークスペースの生成\nホームディレクトリでいいので、そこにワークスペース用のディレクトリを生成する。とくに名前は決まっていないが、\nROSのホームページや他の参考ページの殆どはcatkin_wsとなっている。オプションの-Pをつけて、ソースコードファイルを保管するデイレクトリであるsrcを一気に作成してしまう。\n\n```bash\ncd ~\nmkdir -p catkin_ws/src\ncd catkin_ws\n```\n\n###ビルド（初期）\ncatkinでビルドして、ビルド条件など自動構成されるディレクトリやファイルを生成する。\n\n```bash\ncd ~\ncd catkin_ws\ncatkin build\n```\n**ビルド成功時のターミナル**\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/f1671a13-6d26-8a62-e8fe-15ae56a0138b.png)\n\n\n##４.VS Codeのビルド条件の設定とソースコード（トピックのパブリッシュとサブスクライバ：ROSのチュートリアルにあるやつ）\n##VSCode起動\n\nワークスペースのディレクトリでVsCodeを起動する\n\n```bash\ncd ~\ncd catkin_ws\ncode .\n```\n##Catkinのパッケージをエクステンション機能で生成\nコマンドパレットより、>ROS -> Create Catkin Package で生成する。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/f4838baf-d922-fc5b-8196-c14cf26b17fe.png)\n\n例えば、パッケージ名：publishierとする。この時、依存関係も聞いてくるので、\n基本的には、`std_msgs roscpp`を使用すればよい。***Pythonの場合は、`rospy`*を追加する。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/748fdc4f-7cdd-cf9b-2954-c257aee0f930.png)\n\nパッケージ生成後の様子\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/33be79ee-c81c-315f-ab7f-8c5d05f33dbb.png)\n\n##パッケージ内のCMakeListsを設定する（シンプルな設定とする）\n関係のあるところ以外、全て省略としている。\n\n```CMake\n\n（省略）\n\n## Compile as C++11, supported in ROS Kinetic and newer\nadd_compile_options(-std=c++14)\n\n（省略）\n\n## Declare a C++ executable\n## With catkin_make all packages are built within a single CMake context\n## The recommended prefix ensures that target names across packages don't collide\n## ソースファイルを分割してコンパイルしたい場合は、\n#add_executable(${PROJECT_NAME}_node src/publisher_node1.cpp src/publisher_node2.cpp)となる\n\nadd_executable(${PROJECT_NAME}_node src/publisher_node.cpp)\n\n\n（省略）\n\n## Specify libraries to link a library or executable target against\ntarget_link_libraries(${PROJECT_NAME}_node\n   ${catkin_LIBRARIES}\n )\n\n```\n\n##srcディレクトリのソースファイルを生成\n\n***ディレクトリは、よく間違いやすいので、注意！！***\n\n  src/\n   |-source1.cpp\n   |-source2.cpp\n  CMakeLists.txt\n  package.xml\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/92b60cb2-661e-108e-144a-34fce7b9ab29.png)\n\nソースコードは、自分で組んでもいいし、動作確認やROSのPUB/SUBを体感する（めんどくさい）場合は、\n下記のソースをコピーして使うと良い。\n\n###Publisher_node.cpp\n```cpp\n#include <ros/ros.h>\n#include <std_msgs/String.h>\n\nint main(int argv,char** argc){\n\n   ros::init(argv,argc,\"publisher_node\");\n   ros::NodeHandle nh;\n   ros::Rate loop_rate(10);\n   ros::Publisher chatter_pub = nh.advertise<std_msgs::String>(\"chatter\", 10);\n   \n   while (ros::ok())\n   {\n     std_msgs::String msg;\n     std::stringstream ss;\n     ss << \"hello world \";\n     msg.data = ss.str();\n    ROS_INFO(\"%s\", msg.data.c_str());\n    \n    chatter_pub.publish(msg);\n    ros::spinOnce();\n    loop_rate.sleep();\n\n   }\n \n}\n```\n\n##c_cpp_properties.json の設定\n\n` \"/src/publisher/include/**\" `を追記する。\nパッケージを追加する時も同様に、そのパッケージのインクルードディレクトリのパスを設定する。\n\n###c_cpp_properties.json\n```json\n{\n  \"configurations\": [\n    {\n      \"browse\": {\n        \"databaseFilename\": \"\",\n        \"limitSymbolsToIncludedHeaders\": true\n      },\n      \"includePath\": [\n        \"/opt/ros/melodic/include/**\",\n        \"/src/publisher/include/**\",\n        \"/usr/include/**\"\n      ],\n      \"name\": \"ROS\"\n    }\n  ],\n  \"version\": 4\n}\n```\n\n##launchファイルの作成と設定\nsrcフォルダ直下にlaunchファイルを作成する。名前は何でもより、拡張子を``.launch``とする\n例：``nodes.launch``\n\n###launchファイルの作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/c9fdebbd-1658-c9a8-dc9d-762e42beb615.png)\n\nlaunchファイルの内容は下記である。\n<dl>\n  <dt>pkg</dt>\n  <dd>パッケージ名</dd>\n  <dt>name</dt>\n  <dd>ノードのエリアシス：ユニークな名前にすること。同じ名前は起動できない。アノニマスにすれば同じパッケージを起動できる。</dd>\n  <dt>type</dt>\n  <dd>Nodeのプログラム実行ファイル　Pythonの場合がスクリプトファイル名(.py)</dd>\n</dl>\n\n###launchファイル\n```xml\n<launch>\n    <node pkg=\"publisher\" name=\"publisher\" type=\"publisher_node\"/>\n</launch>\n```\n\n##VScodeのビルドタスクファイルの作成と設定\n下記の要領で、タスクファイル（テンプレート）を生成する。\n###タスクファイルの作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/5154a2f6-9bc5-9505-cf33-ffd22c0c1873.png)\n\nタスクファイルの内容は下記のように書き換える。\nなお、コマンド引数の``--cmake-args\"　\"-DCMAKE_BUILD_TYPE=Debug\"``　は、\nデバッカを動かく（デバッグ）際に必要で、**このオプションがないとブレークポイントが効かないので注意する。**\n\n###タスクファイル\n```json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"ROS: catkin_build\",\n            \"type\": \"shell\",\n            \"command\": \"catkin\",\n            \"args\": [\n\t\t\t\t\"build\",\n\t\t\t\t\"--cmake-args\",\n                \"-DCMAKE_BUILD_TYPE=Debug\",\n            ],\n            \"problemMatcher\": [],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true \n            }\n        }\n    ]\n}\n```\n\n###ビルド\n``Ctrl+Shift+B``でビルドができるようになっている。\n\nまた、下記のようにメニュからビルドタスクを実行しても良い。\n###メニュー＞ビルドタスク\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/1dd3ce49-8df9-9013-8af0-266dbbb3d12b.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/b986b7ba-0b4e-9e25-ac17-866d0aafc728.png)\n\n###ビルド成功時の様子\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/0a496048-2e5a-0245-cf45-956051711d55.png)\n\n\n##VScodeのlaunch.Jsonの設定\n\nlaunch.jsonファイルを作成し、``Debug　RUN``の実行条件に、ＲＯＳの``.launch``ファイルを実行するように紐付けを行う。\n\n\n###launch.jsonファイル作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/51aee9d7-4ebf-eb4f-b4fe-839b39281170.png)\n\n\nlaunch.jsonファイルを下記のように書き換える。\nなお、``target``は、、ＲＯＳの``.launch``ファイルの絶対パスを指定する。\n絶対パスは、下記のようなコマンド調べられる。\n\n###絶対パス\n```bash\ncd ~\ncd catkin_win\npwd\n```\n\n###launch.json\n```json\n{\n    \"configurations\": [\n    {\n        \"name\": \"ROS: Launch\",\n        \"type\": \"ros\",\n        \"request\": \"launch\",\n        \"target\": \"/home/rosdevloper/catkin_ws/src/nodes.launch\"\n    }\n    ]\n}\n```\n\n##5.VSCode　再度立ち上げ\nlauch.jsonの作成または変更後、デバックRUN実行しても、上手く起動しないため、一度、VScodeを再度立ち上げしたほうがよい（２０２１/０３／２７時点）※良い方法がわかれば記事内容更新します。\n\n\n\n##６.デバックRUN実行\n設定などの誤りがなければ``F5``で実行できる。\n\n\n###デバックRUN実行成功時のターミナルの様子\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/da8f6882-a662-b0f7-0d6a-2ae019bb92e0.png)\n\n###デバックRUN実行　失敗時のターミナルの様子\n例：ノードが見つからない場合：ROSのLAUNCHファイルの絶対パスが違う\n\"target\": \"/home/rosdevloper/catkin_temp＿ws/src/nodes.launch\"\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/e17c3798-17c3-e7fc-8246-ffb99e0cb474.png)\n\n\n##７.Subscriber.cppの追加\n\n同様にSubscriberのパッケージをエクステンション機能より生成し、Subscriberのソースコードを``src/``追加する。\n下記のソースをコピーして使うと良い。\n\n```cpp\n#include <ros/ros.h>\n#include <std_msgs/String.h>\n\nvoid chatterCallback(const std_msgs::String::ConstPtr& msg)\n{\n ROS_INFO(\"I heard: [%s]\", msg->data.c_str());\n}\n\nint main(int argc, char **argv)\n{\n    ros::init(argc, argv, \"listener\");\n    ros::NodeHandle n;\n    ros::Subscriber sub = n.subscribe(\"chatter\", 1000, chatterCallback);\n    ros::spin();\n\n    return 0;\n\n}\n```\n##８.　＃４−５で該当箇所をもう一度行う。\n\n###.launchの変更\n```xml\n<launch>\n    <node pkg=\"publisher\" name=\"publisher\" type=publisher_node\"/>\n    <node pkg=\"subscriber\" name=\"subscriber\" type=subscriber_node\"/>\n</launch>\n```\n\n###c_cpp_properties.json\n```json\n      \"includePath\": [\n        \"/opt/ros/melodic/include/**\",\n        \"/src/publisher/include/**\",\n        \"/src/subscriber/include/**\",\n        \"/usr/include/**\"\n}\n```\n\n\n###CMakeLists.txt\n\n```CMake\n（省略：内容は同じ）\n```\n\n\n##８.デバック　ブレークポイント\n任意の場所でブレークポイントを行い、デバックRUN実行で、ブレークポイントが有効になっている！！\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/e4236884-26d7-72ca-682b-81cd475daa4d.png)\n\n###値も参照できる！\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/7313559d-5d10-ddfa-aecb-cec5c2d4bb11.png)\n\n###パッケージも切り替えることがきる\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/397413/f9dafb8d-713c-0aea-cf29-23c18d8c9943.png)\n\n\n　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　以上\n","user":"orangeman1226","created_at":"2021-03-28T21:31:24+09:00","updated_at":"2021-03-28T21:35:26+09:00"},{"url":"https://qiita.com/quinaeng/items/909afa4cd35809c54d06","title":"SEP(Symantec Endpoint Protection) Linuxコマンド","body":"[root@localhost Work]# /opt/Symantec/symantec_antivirus/sav\nInvalid parameter or command.\nUsage: sav [OPTIONS] COMMAND\n\nOptions are:\n -q | --quiet\n -h | --help\n\nCommands are:\n  autoprotect\n    -e | --enable\n    -d | --disable\n  manualscan\n    -s | --scan <file list>\n    -c | --clscan <file list>\n    -t | --stop\n  scheduledscan\n    -c | --create <ID>\n      -f | --frequency <daily|weekly|monthly>\n      -i | --interval <HH:MM|SUN-SAT|1-31>\n      -t | --time <HH:MM>\n      -m | --missedevents <0|1>\n    -l | --list\n    -n | --info <ID>\n    -d | --delete <ID>\n    -e | --enable <ID>\n    -s | --disable <ID>\n    -p | --stop <ID>\n  liveupdate\n    -u | --update\n    -v | --view\n    -s | --schedule\n      -f | --frequency <continuously|hourly|daily|weekly>\n      -i | --interval <HH|HH:MM|SUN-SAT>\n      -t | --time <HH:MM>\n      -r | --retrywindow <DD|HH|MM>\n      -d | --randomizewindow <DD|HH>\n  quarantine\n    -l | --list\n    -d | --delete <ID>\n    -r | --restore <ID>\n    -p | --repair <ID>\n    -i | --info <ID>\n  definitions\n    -r | --rollback\n    -u | --usenewest\n  info\n    -d | --defs\n    -e | --engine\n    -p | --product\n    -s | --scanner\n    -a | --autoprotect\n    -t | --threats\n  manage\n    -g | --group\n    -h | --heartbeat\n    -i | --import <file>\n    -o | --location\n    -p | --profile\n    -s | --server\n    -t | --time\n    -l | --license\n  log\n    -e | --export [file]\n      -f | --from <start_id>\n      -t | --to <end_id>\n\nFor more information please refer to the man page or documentation.\n\n[root@localhost Work]#\n","user":"quinaeng","created_at":"2021-03-28T21:26:56+09:00","updated_at":"2021-03-28T21:33:08+09:00"},{"url":"https://qiita.com/hjmysmn/items/ab9e17857ae9b45f6af8","title":"progate","body":"#雑感\nログイン、ログアウト機能だけでも裏側でやっていることは色々あるんですね。\n","user":"hjmysmn","created_at":"2021-03-28T21:22:14+09:00","updated_at":"2021-03-28T21:22:14+09:00"},{"url":"https://qiita.com/emurin/items/9c1f2bb2193777f9ac03","title":"setup appium in windows for Android 2021 version","body":"# Outline\n\n以前、windows上でappium+androidのテストの環境構築に関してまとめた。\n<A HREF=\"https://qiita.com/emurin/items/fe640327f847c474f1e8\">setup appium in windows for Android</A>\nただ、かなり記事が古くなっており、一部異なる部分があるため、再度構築しながら、手順を取りまとめる\n\nCUIがパフォーマンス的に良いため、CUIに限ってまとめた。\n\n# Install Java SE Development Kit\n\n### download\nhttps://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html\n\nJDK <B>8u281</B> を利用した\n\n### Config\n\n| Parameter | Value Example | Note |\n|:-----------|:------------|:------------|\n| JAVA_HOME | C:\\Program Files\\Java\\jre1.8.0_271| JDK install Folder|\n| Path| %JAVA_HOME%\\bin | Java bin path |\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/caee5d0f-5ed4-d0a9-4b53-fb33ae9c69d5.png)\n\n### Confirm\n\nPathを確認する\n\n```\njava -version\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/b79c920b-2cf3-98cf-8dc2-6a007964bd72.png)\n\n\n# Android Studio\n\n### download\n\nhttps://developer.android.com/studio?hl=ja\n\n今回は<B> 4.1.3 for Windows 64-bit </B>を利用した\n\n### Config\n\n| Parameter | Value Example | Note |\n|:-----------|:------------|:------------|\n| ANDROID_HOME| C:\\Users\\ospdqa\\AppData\\Local\\Android\\Sdk | Android SDK location に該当 |\n| Path| %ANDROID_HOME%\\platform-tools | adbなどのコマンド |\n\nAndroid SDK locationの確認方法\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/cfb22d8f-8d97-f544-dbae-b9ea102df7ee.png)\n\n\n### Confirm\n\nadbが実行可能かを確認する\n\n```\nadb\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/e9fc2029-0782-030e-9fe5-b8a2cbbf9936.png)\n\nandroidを接続し、adb接続を確認\n\n```\nadb devices\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/8a14369e-cda3-1af7-c822-efa2f1dc3f49.png)\n\n\n\n# CUI appium\n\n## install npm (node.js)\n\n### download\nhttps://nodejs.org/en/\n\ndownloadしたとき、<B>15.12.0 Current Latest Features</B>でした\n\n### Confirm\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/09a0a03c-a6e7-2e38-72a3-aece821f997c.png)\n\n## install Python\n\n### download\nhttps://www.python.org/\n\ndownloadしたとき、<B>3.9.2</B>でした\n\n## install appium\n\nnpmでinstallする\n\n```\nnpm install -g appium\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/8580b094-5276-b34b-df21-efafa1a40b29.png)\n\ndoctorもinstallする\n\n```\nnpm install -g appium-doctor\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/a59bfb72-60a4-39d8-c4e5-7afca1b8a7c9.png)\n\n### Confirm\n\nappiumの必要なセットアップが十分であるかを確認する。\nERRORがでてなければ、おおむね問題ない。\nWARNも可能な限りゼロにしたほうが良い\n\n```\nappium-doctor\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/ebad0934-ddb2-5d8e-0215-feca0047b56c.png)\n\n\n### Start\n\nappiumを起動する\n\n```\nappium\n```\n\noption に関して\nhttp://appium.io/docs/en/writing-running-appium/server-args/\n\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/33da2712-1d77-4faf-b448-a07eba9e4657.png)\n\n\nなお、chromeに関して最近は、chromedriverを別途用意する必要がある。\n\nchromedriver download\nhttps://chromedriver.chromium.org/downloads\n\nversionは、SPのchrome versionに合わせる\n\n実行例\n\n```\nappium --chromedriver-executable \"C:\\appium\\chromedriver.exe\"\n```\n\n\n動作確認\n\nhttp://localhost:9501/wd/hub/status\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/267085/9d3b3836-85db-8131-6e9f-202c6a11e06c.png)\n\n\n\n\n\n","user":"emurin","created_at":"2021-03-28T21:18:58+09:00","updated_at":"2021-03-28T21:18:58+09:00"},{"url":"https://qiita.com/tosihr/items/3068ce10a635fc63aed2","title":"HiLetgo ESP32 ESP-32S NodeMCU開発ボード2.4GHz WiFi + Bluetoothデュアルモード","body":"「[HiLetgo ESP32 ESP-32S NodeMCU開発ボード2.4GHz WiFi + Bluetoothデュアルモード](https://www.amazon.co.jp/gp/product/B0718T232Z/)」を入手した。WifiとBluetoothが使えて、Arduino IDEでプログラムが書けるということでまずは使ってみた。\n#Arduinoのインストール  \n  1. [Arduino インストーラをダウンロード](https://www.arduino.cc/en/software)する。\n  2. Arduinoを起動して、**Preferences**ウィンドウを開く。\n  3. 追加のボードマネージャのURLに次のアドレスを追加する。\n    `https://dl.espressif.com/dl/package_esp32_index.json`\n  3. **ツール** > **ボード** > **ボードマネージャ** を選択する。\n  4. `esp32`を検索し、最新のバージョンをインストールする。  \n\n#シリアルドライバのインストール\nこのボードで使われているチップは CP2102。添付文書で確認できるのと、マイクロUSBコネクタの近くの黒いチップに細か〜い字でCP2102と書かれている。ドライバは、[Silabs CP210x VCP](https://www.silabs.com/developers/usb-to-uart-bridge-vcp-drivers) をインストールする。\n\n#LEDを点滅させるプログラムの作成\n  3. Arduino IDEを起動して、**ファイル** > **新規ファイル** で新しいスケッチを作成する。\n  4. 次のコードをペーストする(ボードの添付文書に記載があるが、2番ポートにLEDは接続されている)。\n\n```\n// Blinking LED\n\n// 2番ピンを指定\nconst int LED = 2;\n\nvoid setup() {\n  // ピンモードを出力に設定\n  pinMode(LED, OUTPUT);\n}\n\nvoid loop() {\n  // 点滅は、点灯を1秒、消灯を2秒の繰り返し\n  digitalWrite(LED, HIGH);\n  delay(1000);\n  digitalWrite(LED, LOW);\n  delay(2000);\n}\n```\n  - **ファイル** > **保存** を選んで、名前を入力して Save する。\n\n#ESP32に書き込む\n自動では書き込みができなかったため、手動でボード上のボタンを操作しながらスケッチをESP32に書き込む。\n\n1. ボードをArduino IDEを起動しているコンピュータのUSBポートに接続する。\n2. **ツール** > **ボード** から `NodeMCU-32S`を選択する。\n3. **ツール** > **シリアルポート**から、ボードを接続したシリアルポートを選択する。 \n4. ID0を押し続けながら、ENを押して放し**マイコンボードに書き込む**をクリックする。\n4. 転送が始まったら、ID0から手を放す。\n4. 書き込みが成功したら、`Hard resetting via RTS pin...` と出る。\n\n#青色LED点滅\nこの段階で、青色LEDが点滅しているはず。\n\n#参考\n- [Building an AWS IoT Core device using AWS Serverless and an ESP32](https://aws.amazon.com/jp/blogs/compute/building-an-aws-iot-core-device-using-aws-serverless-and-an-esp32/)\n- [ESP32-WROOM-32 - 手動書き込み](https://ht-deko.com/arduino/esp-wroom-32.html#04_02)\n","user":"tosihr","created_at":"2021-03-28T21:14:52+09:00","updated_at":"2021-03-28T21:29:12+09:00"},{"url":"https://qiita.com/nao-a/items/b021ca548fab266e7e32","title":".NET5で作成したサービスに対してプロセス間通信を実施する (gRPC)","body":"# はじめに\n\n## 注意\n\n今回の記事は[前回](https://qiita.com/nao-a/items/c9c3996a77a59776fcec)の記事の続きになります。\n用意しているコードはすべて前回の続きからとなりますのでご注意ください。\n\n## あらためて、はじめに\n\n[前回](https://qiita.com/nao-a/items/c9c3996a77a59776fcec)はWindowsServiceを.NET5で作成する方法を記載しました。\nところで、サービスに対して何かリクエストをしたいとき、プロセス間通信を使用したくなると思います。\nしかしながら、プロセス間通信を実施する[IpcServerChannelクラス](https://docs.microsoft.com/ja-jp/dotnet/api/system.runtime.remoting.channels.ipc.ipcserverchannel?view=netframework-4.8)は.NET5ではサポートされていません。\nそこで、別の方法を用いてプロセス間通信を実現する方法を記載します。\n\nhttps://github.com/cocoalix/WindowsServiceTestWithDotNet5\n\n## 実行環境\n\n- VisualStudio2019\n- Windows10Pro 20H2 (Build: 19042.867)\n- .NET5 SDK 5.0.1\n\n# 参考\n\n今回の記事の元ネタになった記事はこちらです。\n良記事というか、日本語で.NETCoreでのIPCについて記述されているページがここしかありませんでした。\nぜひチェックしてください。\nhttps://mseeeen.msen.jp/first-grpc-with-wpf-on-dotnet-core-3/\n\nhttps://blog.soushi.me/entry/2017/08/25/225809/\n\n# 実装\n\n## 事前準備\n\nまず、プロセス間通信を行うということは、プロセス間通信を行うクライアントのアプリの作成が必要となりますので、まず、こちらを作成します。\nそして、やはりそのままでは実装できませんので、事前準備としてNuGetパッケージのインストールを行います。\n今回必要なのは、以下の3パッケージです\n\n- Google.Protobuf\n- Grpc\n- Grpc.Tools\n\n順を追ってやっていきましょう\n\n### プロジェクトの作成\n\n#### プロセス間通信用のコンソールアプリの用意\n\nソリューションエクスプローラーから、新しいプロジェクトを追加します。\n\n1. `コンソールアプリ (.NET Core)`　を選択します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_09_31.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/9e539c2b-1a6c-e0a3-60f5-b142d4b88598.png)\n1. 任意の名前を決めて、そのまま作成します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_09_54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/e03aa198-dfa8-0f70-497e-70a21810a36c.png)\n1. 作成したプロジェクトのプロパティを開き、対象のフレームワークは `.NET 5.0` を選択します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_11_04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/cdd473c6-aa1f-df5a-8743-aa4b70ed899d.png)\n\n#### プロセス間通信で使用する、サービス/クライアント共有のライブラリの用意\n\n同様に、ソリューションエクスプローラーから、新しいプロジェクトを追加します。\n\n1. `クラス ライブラリ (.NET Core)` を選択します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_11_40.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/8d98a418-b8bb-8596-a283-697d8d82fe58.png)\n1. 任意の名前を決めて、そのまま作成します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_11_47.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/869ca099-5cef-371c-fb86-be81807f8582.png)\n1. 先ほどと同様に、作成したプロジェクトのプロパティを開き、対象のフレームワークは `.NET 5.0` を選択します。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_12_06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/e6ac97aa-ad5f-cb37-2ed9-f7917e03e279.png)\n\n### NuGetパッケージのインストール\n\nソリューションエクスプローラーからソリューションを右クリックし、`ソリューションのNuGetパッケージの管理` を選択します。\n\n1. `Google.Protobuf` を **すべてのプロジェクトに対して** インストールします。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_20_01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/ac472b06-b0d6-18d5-709f-3ea87daf684d.png)\n1. `Grpc` を **すべてのプロジェクトに対して** インストールします。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_20_24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/46d52a27-2eee-fc23-5f98-7f03608f2dbd.png)\n1. `Grpc.Tools` を **共通ライブラリ(今回はCommon)に** インストールします。\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_20_55.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/0eac7a00-95c9-c52d-a580-f92d87530b0d.png)\n\n### Commonプロジェクト (サービス/クライアント両方から参照する共通ライブラリプロジェクト) への参照の追加\n\n先ほど作成したCommonプロジェクトに対して、サービス/クライアント両方からプロジェクト参照を追加してあげてください。\n\n![WindowsServiceTest - Microsoft Visual Studio 2021_03_28 19_26_57.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/a68699ef-88d4-889e-7b13-61daf3ba6dac.png)\n\nこれで準備は完了です。\n\n## Grpcの `.proto` ファイルの作成\n\n`Common` プロジェクトを右クリックし、任意の名前の `.proto` ファイルを作成してあげてください。\n今回の例だと `commander.proto` という名前にしています。\n\n```proto\n// Common/commander.proto\nsyntax = \"proto3\";\n\n// 名前空間の定義\noption csharp_namespace = \"Common\";\n\n// google.protobuf.Empty を使用するためにインポート\nimport \"google/protobuf/empty.proto\";\n// google.protobuf.Timestamp を使用するためにインポート\nimport \"google/protobuf/timestamp.proto\";\n\n// プロセス間通信に使用するインターフェースの定義\nservice Commander {\n\t// インターフェース: 気象庁から取得していた1時間以内の気象予報情報\n\trpc FetchWeather (google.protobuf.Empty) returns (Response);\n\t// インターフェース: 気象庁から取得していた任意の前の時間の気象予報情報\n\trpc FindWeather (Request) returns (Response);\n}\n\n// リクエスト電文の定義\nmessage Request {\n\tint32 HourAgo = 1;\n}\n\n// レスポンス電文の定義\nmessage Response {\n\tgoogle.protobuf.Timestamp ReportedAt = 1;\n\tstring Weather = 2;\n}\n```\n\nまた、 **.csprojを修正し、以下の追加行を追加することを必ず忘れないでください。これが無いとコンパイルできません。(5敗くらい)**\n\n```diff\n// Common.csproj\n<Project Sdk=\"Microsoft.NET.Sdk\">\n\n  <PropertyGroup>\n    <TargetFramework>net5.0</TargetFramework>\n  </PropertyGroup>\n\n  <ItemGroup>\n    <PackageReference Include=\"Google.Protobuf\" Version=\"3.15.6\" />\n    <PackageReference Include=\"Grpc\" Version=\"2.36.4\" />\n    <PackageReference Include=\"Grpc.Tools\" Version=\"2.36.4\">\n      <PrivateAssets>all</PrivateAssets>\n      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>\n    </PackageReference>\n  </ItemGroup>\n+ <ItemGroup>\n+   <Protobuf Include=\"commander.proto\" />\n+ </ItemGroup>\n\n</Project>\n```\n\nこの状態でビルドすると、 `プロジェクトルート/obj/Debug/net5.0` 配下あたりに以下のファイルができていることが確認できると思います。\n\n- Commander.cs\n- CommanderGrpc.cs\n\nこれが確認できていればOKです。\n\n![net5.0 2021_03_28 19_52_06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/25e24358-1867-11ad-5a43-ccb2109b538d.png)\n\n### `.proto` の定義を利用するサービスクラスを作成する\n\n任意の名前のクラスを作成します。\nこの時、 `Commander.CommanderBase` を継承することを忘れないでください。\n事前に先ほどまでの状態でビルドしていたならば、 `Commander.CommanderBase` は IntelliSence によってサジェストされます。\n\n```csharp\n// Common/CommanderService.cs\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Common\n{\n    public class CommanderService : Commander.CommanderBase\n    {\n    }\n}\n```\n\noverrideキーワードをクラス内で使用すると、先ほど定義したインターフェースをこのクラスの中に生やすことができます。\n\n```diff_c_sharp\n// Common/CommanderService.cs\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Common\n{\n    public class CommanderService : Commander.CommanderBase\n    {\n+       public override Task<Response> FetchWeather(Empty request, ServerCallContext context)\n+       {\n+           return base.FetchWeather(request, context);\n+       }\n\n+       public override Task<Response> FindWeather(Request request, ServerCallContext context)\n+       {\n+           return base.FindWeather(request, context);\n+       }\n    }\n}\n```\n\nついでにdelegateあたりも定義しておいて、IPCでやってきたリクエストに対してサービスがレスポンスを返せるようにしておきましょう。\n\n```diff_c_sharp\n// Common/CommanderService.cs\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing System;\nusing System.Threading.Tasks;\n\nnamespace Common\n{\n+   public delegate Response FetchWeather(int hourAgo);\n\n    public class CommanderService : Commander.CommanderBase\n    {\n+       public FetchWeather commanderServiceDelegate;\n\n        public override Task<Response> FetchWeather(Empty request, ServerCallContext context)\n        {\n-           return base.FetchWeather(request, context);\n+           return Task.Run(() => commanderServiceDelegate.Invoke(0));\n        }\n\n        public override Task<Response> FindWeather(Request request, ServerCallContext context)\n        {\n-           return base.FindWeather(request, context);\n+           return Task.Run(() => commanderServiceDelegate.Invoke(request.HourAgo));\n        }\n    }\n}\n```\n\n### WindowsService側をCommanderServiceと連携させる\n\n連携させます\n\n```diff_c_sharp\n// WindowsServiceTest/Worker.cs\n+using Common;\n+using Grpc.Core;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace WindowsServiceTest\n{\n    public class Worker : BackgroundService\n    {\n        private readonly ILogger<Worker> _logger;\n\n+       /// <summary>\n+       /// GRPCのサービス\n+       /// </summary>\n+       private CommanderService _grpcService;\n\n+       /// <summary>\n+       /// GRPCのサーバ\n+       /// </summary>\n+       private Server _grpcServer;\n\n        public Worker(ILogger<Worker> logger)\n        {\n            _logger = logger;\n\n+           // grpcServerを立ち上げる\n+           _grpcService = new();\n+           _grpcService.commanderServiceDelegate = FetchWeather;\n\n+           _grpcServer = new()\n+           {\n+               Services = { Commander.BindService(_grpcService) },\n+               // 第一引数はローカルループバックアドレス、第二引数にはポート番号を入力すること / Commonで定義しておくとクライアント側でも使えるのでなお良し！\n+               Ports = { new(\"127.0.0.1\", 50000, ServerCredentials.Insecure) }\n+           };\n+           _grpcServer.Start();\n        }\n\n        public override Task StartAsync(CancellationToken cancellationToken)\n        {\n            return base.StartAsync(cancellationToken);\n        }\n\n        public override Task StopAsync(CancellationToken cancellationToken)\n        {\n            return base.StopAsync(cancellationToken);\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                var client = new HttpClient();\n                var response = await client.SendAsync(new(HttpMethod.Get, @\"https://www.jma.go.jp/bosai/forecast/data/forecast/130000.json\"));\n                var body = await response?.Content.ReadAsStringAsync() ?? \"\";\n                _logger.LogInformation(\"response content: \" + body);\n                _logger.LogInformation(\"Worker running at: {time}\", DateTimeOffset.Now);\n                await Task.Delay(360000, stoppingToken);\n            }\n        }\n\n+       public Response FetchWeather(int hourAgo)\n+       {\n+           return null;\n+       }\n    }\n}\n```\n\nついでに `FetchWeather()` の中身も実装しておきましょう\n\n```diff_c_sharp\n// WindowsServiceTest/Worker.cs\nusing Common;\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing Microsoft.Extensions.Hosting;\nusing Microsoft.Extensions.Logging;\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Net.Http;\nusing System.Threading;\nusing System.Threading.Tasks;\n\nnamespace WindowsServiceTest\n{\n    public class Worker : BackgroundService\n    {\n        private readonly ILogger<Worker> _logger;\n\n        /// <summary>\n        /// GRPCのサービス\n        /// </summary>\n        private CommanderService _grpcService;\n\n        /// <summary>\n        /// GRPCのサーバ\n        /// </summary>\n        private Server _grpcServer;\n\n+       private Dictionary<DateTime, string> _weathers;\n\n        public Worker(ILogger<Worker> logger)\n        {\n            _logger = logger;\n\n            // grpcServiceとgrpcServerを立ち上げる\n            _grpcService = new();\n            _grpcService.commanderServiceDelegate = FetchWeather;\n\n            _grpcServer = new()\n            {\n                Services = { Commander.BindService(_grpcService) },\n                Ports = { new(\"127.0.0.1\", 50000, ServerCredentials.Insecure) }\n            };\n            _grpcServer.Start();\n        }\n\n        public override Task StartAsync(CancellationToken cancellationToken)\n        {\n            return base.StartAsync(cancellationToken);\n        }\n\n        public override Task StopAsync(CancellationToken cancellationToken)\n        {\n            return base.StopAsync(cancellationToken);\n        }\n\n        protected override async Task ExecuteAsync(CancellationToken stoppingToken)\n        {\n            while (!stoppingToken.IsCancellationRequested)\n            {\n                var client = new HttpClient();\n                var response = await client.SendAsync(new(HttpMethod.Get, @\"https://www.jma.go.jp/bosai/forecast/data/forecast/130000.json\"));\n                var body = await response?.Content.ReadAsStringAsync() ?? \"\";\n+               _weathers.Add(DateTime.Now, body);\n                _logger.LogInformation(\"response content: \" + body);\n                _logger.LogInformation(\"Worker running at: {time}\", DateTimeOffset.Now);\n                await Task.Delay(360000, stoppingToken);\n            }\n        }\n\n        public Response FetchWeather(int hourAgo)\n        {\n-           return null;\n+           var orderedKeys = _weathers.Keys.OrderByDescending(x => x);\n+           if (orderedKeys.Count() < hourAgo)\n+           {\n+               return new()\n+               {\n+                   ReportedAt = new(),\n+                   Weather = string.Empty\n+               };\n+           }\n+\n+           var findKey = orderedKeys.ElementAt(hourAgo);\n+           return new()\n+           {\n+               ReportedAt = Timestamp.FromDateTime(findKey.ToUniversalTime()),\n+               Weather = _weathers[findKey]\n+           };\n        }\n    }\n}\n```\n\n### クライアント側の実装\n\nクライアント側で実施する実装は単純です。\nチャンネルを作成し、それを元にクライアントを作成してインターフェースを呼び出してやればそれでよいです。\n\n```csharp\n// WindowsServerTestClient/Program.cs\nusing Common;\nusing Google.Protobuf.WellKnownTypes;\nusing Grpc.Core;\nusing System;\n\nnamespace WindowsServiceTestClient\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            var channel = new Channel(\"127.0.0.1\", 50000, ChannelCredentials.Insecure);\n            var client = new Commander.CommanderClient(channel);\n\n            Console.WriteLine(\"plz input empty or number key\");\n            var read = Console.ReadLine();\n\n            if (string.IsNullOrWhiteSpace(read))\n            {\n                var fetchWeatherResponse = client.FetchWeather(new Empty());\n                Console.WriteLine(fetchWeatherResponse.ReportedAt);\n                Console.WriteLine(fetchWeatherResponse.Weather);\n                return;\n            }\n\n            int hour = 0;\n            if (!int.TryParse(read, out hour))\n            {\n                Console.WriteLine(\"invalid string\");\n                return;\n            }\n\n            var findWeatherResponse = client.FindWeather(new Request()\n            {\n                HourAgo = hour\n            });\n            Console.WriteLine(findWeatherResponse.ReportedAt);\n            Console.WriteLine(findWeatherResponse.Weather);\n        }\n    }\n}\n```\n\nこのように、通信した結果が返ってくるのを確認できればOKです。\n![Windows PowerShell 2021_03_28 21_05_12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/507143/e80ac523-1183-cb2e-7249-5c886053319a.png)\n\n# おわりに\n\n他の方の記事を参考には致しましたが、このように、.NET5で、WindowsServiceに対してプロセス間通信を実施するプログラムを作成することができました。\nまた、このプロセス間通信は、サーバ側が上位権限で動いている場合(Administratorなど)でも、適切にプロセス間通信ができることが確認ができています。\n(まぁ、ほぼServer/Clientの実装みたいなものなので、当然と言えば当然かもしれませんが。。。)\n\n次回こそ、インストーラーの作成を実施する記事を作成します。(この記事の続きとなります。)\n同じ開発者の助けになる記事になることを望みます。\n\nまた、何か誤っている個所がありましたらご指摘ください。\nここまで読んでくださり、ありがとうございました。\n","user":"nao-a","created_at":"2021-03-28T21:11:54+09:00","updated_at":"2021-03-28T21:11:54+09:00"},{"url":"https://qiita.com/Hamatus/items/b5f931df1ba78691b5fe","title":"【Railsチュートリアル】第3章  ほぼ静的なページの作成 演習と解答","body":"Ruby on Railsチュートリアル第3章の演習問題と解答をまとめました。\n[第3章 ほぼ静的なページの作成 - Railsチュートリアル](https://railstutorial.jp/chapters/static_pages?version=6.0#cha-static_pages)\n\n# 演習と解答\n\n## 3.1 セットアップ\n\n### 3.1 - 1\n\n> Markdown記法のREADME（リスト 3.3）がHTMLとして正しくGitHub上で描画されているか、確認してみてください。\n\n答え：__Github上で正しく描画されていた__\n\nQiitaの記事を書くときにMarkdown記法を使うので内容もすんなりと入ってきます。\n\n> 本番環境（Heroku）のルートURLにアクセスして、デプロイが成功したかどうか確かめてみてください。\n\n答え：__デプロイに成功している__\n\nhello,world!が表示されています\n\n## 3.2.1 静的なページの生成\n\n### 3.2.1 -1\n\n> Fooというコントローラを生成し、その中にbarとbazアクションを追加してみてください。\n\n```shell:ターミナル\n$ rails generate controller Foo bar baz\n```\n\n> コラム 3.1で紹介したテクニックを駆使して、Fooコントローラとそれに関連するアクションを削除してみてください。\n\n```shell:ターミナル\n$ rails destroy controller Foo bar baz\n```\n\n## 3.4.1 タイトルをテストする（Red）\n\n\n### 3.4.1 - 1\n> StaticPagesコントローラのテスト（リスト 3.25）には、いくつか繰り返しがあったことにお気づきでしょうか? 特に「Ruby on Rails Tutorial Sample App」という基本タイトルは、各テストで毎回同じ内容を書いてしまっています。そこで、setupという特別なメソッド（各テストが実行される直前で実行されるメソッド）を使って、この問題を解決したいと思います。まずは、リスト 3.31のテストが green になることを確認してみてください（リスト 3.31では、2.2.2で少し触れたインスタンス変数や文字列の式展開というテクニックを使っています。それぞれ4.4.5と4.2.1で詳しく解説するので、今はわからなくても問題ありません）。\n\n```Ruby:test/controlles/static_pages_controller_test.rb\nrequire 'test_helper'\n\nclass StaticPagesControllerTest < ActionDispatch::IntegrationTest\n  \n  # テスト実行前に実行するメソッド\n  def setup \n    @base_title = \"Ruby on Rails Tutorial Sample App\"　# @base_titleに書くテストケースで共通していた記述を保存\n  end\n\n  test \"should get home\" do\n    get static_pages_home_url\n    assert_response :success\n    assert_select \"title\", \"Home | #{@base_title}\" # 文字列の式展開 # {式}\n  end\n\n  test \"should get help\" do\n    get static_pages_help_url\n    assert_response :success\n    assert_select \"title\", \"Help | #{@base_title}\"\n  end\n\n  test \"should get about\" do\n    get static_pages_about_url\n    assert_response :success\n    assert_select \"title\", \"About | #{@base_title}\"\n  end\nend\n```\n\n## 3.4.3 レイアウトと埋め込みRuby（Refactor）\n\n### 3.4.3 - 1\n\n> サンプルアプリケーションにContact（問い合わせ先）ページを作成してください15 。（ヒント: まずはリスト 3.16を参考にして、/static_pages/contactというURLのページに「Contact | Ruby on Rails Tutorial Sample App」というタイトルが存在するかどうかを確認するテストを最初に作成しましょう。次に、3.3.3でAboutページを作ったときのと同じように、Contactページにもリスト 3.41のコンテンツを表示してみましょう。）\n\n```Ruby:test/controllers/static_pages_controller_test\nrequire 'test_helper'\n\nclass StaticPagesControllerTest < ActionDispatch::IntegrationTest\n\n  def setup\n    @base_title = \"Ruby on Rails Tutorial Sample App\"\n  end\n  \n  # 中略\n  \n  test \"should get contact\" do\n    get static_pages_contact_url\n    assert_response :success\n    assert_select \"title\", \"Contact | #{@base_title}\"\n  end\nend\n```\n\n\n```shell:ターミナル\n$ touch app/views/static_pages/contact.html.erb\n```\n\n```ruby:app/views/static_pages/contact.html.erb\n<% provide(:title, \"Contact\") %>\n<h1>Contact</h1>\n<p>\n  Contact the Ruby on Rails Tutorial about the sample app at the\n  <a href=\"https://railstutorial.jp/contact\">contact page</a>.\n</p>\n```\n```ruby:app/controllers/static_pages_controller.rb\nclass StaticPagesController < ApplicationController\n  \n  # 中略\n  \n  def contact\n  end\nend\n```\n```ruby:config/routes.rb\nRails.application.routes.draw do\n  get 'static_pages/home'\n  get 'static_pages/help'\n  get 'static_pages/about'\n  get 'static_pages/contact'\n  root 'application#hello'\nend\n```\n\nレイアウトファイルがHTML構造の基本的な構造を作ってくれているので、新しく作成したContactページは内部の必要なコンテンツだけを書けばいいということですね。\n\n## 3.4.4 ルーティングの設定\n\n### 3.4.4 - 1\n\n> リスト 3.42にrootルーティングを追加したことで、root_urlというRailsヘルパーが使えるようになりました（以前、static_pages_home_urlが使えるようになったときと同じです）。リスト 3.43のFILL_INと記された部分を置き換えて、rootルーティングのテストを書いてみてください。\n\n```ruby:test/controllers/static_pages_controller_test.rb\nrequire 'test_helper'\n\nclass StaticPagesControllerTest < ActionDispatch::IntegrationTest\n\n  def setup\n    @base_title = \"Ruby on Rails Tutorial Sample App\"\n  end\n  \n  # -----ここから-----\n  test \"should get root\" do\n    get root_url\n    assert_response :success\n  end\n  # -----ここまで-----\n  \n  test \"should get home\" do\n    get static_pages_home_url\n    assert_response :success\n  end\n\n  test \"should get help\" do\n    get static_pages_help_url\n    assert_response :success\n  end\n\n  test \"should get about\" do\n    get static_pages_about_url\n    assert_response :success\n  end\nend\n```\n\n\n### 3.4.4 - 2\n\n> 実はリスト 3.42のコードを書いていたので、先ほどの課題のテストは既に green になっているはずです。このような場合、テストを変更する前から成功していたのか、変更した後に成功するようになったのか、判断が難しいです。リスト 3.42のコードがテスト結果に影響を与えていることを確認するため、リスト 3.44のようにrootルーティングをコメントアウトして見て、 red になるかどうか確かめてみましょう（なおRubyのコメント機能については4.2で説明します）。最後に、コメントアウトした箇所を元に戻し（すなわちリスト 3.42に戻し）、テストが green になることを確認してみましょう。\n\n```ruby:config/routes.rb\nRails.application.routes.draw do\n#   root 'static_pages#home'\n  get  'static_pages/home'\n  get  'static_pages/help'\n  get  'static_pages/about'\nend\n```\n\n答え：__結果はREDになります。(コメントアウトを戻すとGREENに)__\n","user":"Hamatus","created_at":"2021-03-28T21:07:53+09:00","updated_at":"2021-03-28T21:09:04+09:00"},{"url":"https://qiita.com/text_owleyes_0214/items/699f5365c4ef0ad4ceb8","title":"R言語でワードクラウドを作る『呪術廻戦』編2。今回はggplot2棒グラフも作成","body":"##前回同様にツイートを取得します\n\nワード**「呪術廻戦」**を含むツイートを取得しました。\n2021年3月27日以降、最大10,000としました。\n[前回同様の手順](https://qiita.com/text_owleyes_0214/items/49d162aeebceada9f63f)で取り込みました。\n\n```r\n#TwitterAPI認証情報設定\nconsumerKey <- \"************\"\nconsumerSecret <- \"*****************\"\naccessToken <- \"*****************\"\naccessSecret <- \"*********************\"\n\n##TwitterAPIにログイン\nlibrary(\"twitteR\")\noptions(httr_oauth_cache = TRUE)\nsetup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)\n\n#「呪術廻戦」を含む日本語ツイートを10000件取得。2021年3月27日から\ntweets2 <- searchTwitter('呪術廻戦', n = 10000, since = \"2021-03-27\" , lang=\"ja\" , locale=\"ja\")#日本語とロケールを指定（日本なら\"ja\")# 目的に応じて\"popular\",\"recent\",\"mixed\"を指定 #◼️\n\n#データフレームに変換\ntweetsdf2 <- twListToDF(tweets2) \n#型を確認\nclass(tweets2)\n[1] \"data.frame\"\n\n#取得できたか確認\nlibrary(dplyr)\ntweetsdf2  %>% head()\n\n#リツイートされたもの（TRUE）、そうでないもの（FALSE）の数を確認\ntable(tweetsdf2$isRetweet)\nFALSE  TRUE \n 2539  7461 \n\n#今回リツイートのみ使ってみる\ntweetsdf3 <- tweetsdf2 %>% filter(isRetweet %in% c(\"TRUE\")) \nhead(tweetsdf3) #確認\nnrow(tweetsdf3) #確認\n\n#データフレームのテキスト列だけ抽出\ntexts <- tweetsdf3$text\n\n#後々使うのでテキスト処理のためのライブラリを呼び出す\nlibrary(stringr)\nlibrary(magrittr)\n\n#複数の（リスト型）テキストを結合。テキストとテキストの間にはブランクを入れる\ntexts3 <- paste(texts, collapse = \"\")\n\n#一時ファイルを作り、xfileという名前で保存\nxfile <- tempfile()\nwrite(texts3, xfile)\n\n##形態素解析のライブラリー\nlibrary(RMeCab)\n\n#形態素解析。頻度を集計\nfrq_Tw2 <- RMeCabFreq(xfile)\n#上位50を確認\nfrq_Tw2 %>% arrange(Freq) %>% tail(50)\n\n      Term  Info1                    Info2 Freq\n9256     0   名詞                       数  344\n9257  譲渡   名詞                 サ変接続  369\n9258  ない 助動詞                        *  382\n9259    ？   記号                     一般  383\n9260  五条   名詞                 固有名詞  407\n9261 https   名詞                     一般  409\n9262  伏黒   名詞                 固有名詞  414\n9263    と   助詞                   格助詞  416\n9264    か   助詞 副助詞／並立助詞／終助詞  427\n9265     (   名詞                 サ変接続  444\n9266    を   助詞                   格助詞  453\n9267  です 助動詞                        *  467\n9268  見る   動詞                     自立  480\n9269  てる   動詞                   非自立  480\n9270  虎杖   名詞                     一般  483\n9271     2   名詞                       数  515\n9272     )   名詞                 サ変接続  534\n9273  映画   名詞                     一般  538\n```\n\n前回「形容詞」と、「名詞」の中の「固有名詞」をピックアップしましたが、今回よく見ると、\n\n```r\n9270  虎杖   名詞                     一般  483\n```\n\nと「虎杖」という（外せない）キーワードが入っているので、今回は「名詞」をピックアップすることにしました。\n\n```r\nfrq3_Tw2 <- frq_Tw2 %>% filter(Info1 %in% c(\"名詞\")) \nfrq3_Tw2 %>% arrange(Freq) %>% tail(50) #確認\n\n7390 アニメ  名詞     一般  281\n7391     ん  名詞   非自立  282\n7392 バッジ  名詞     一般  287\n7393      @  名詞 サ変接続  294\n7394   送料  名詞     一般  309\n7395     崎  名詞     一般  326\n7396     釘  名詞     一般  336\n7397      #  名詞 サ変接続  343\n7398     缶  名詞     一般  344\n7399      0  名詞       数  344\n7400   譲渡  名詞 サ変接続  369\n7401   五条  名詞 固有名詞  407\n7402  https  名詞     一般  409\n7403   伏黒  名詞 固有名詞  414\n7404      (  名詞 サ変接続  444\n7405   虎杖  名詞     一般  483\n7406      2  名詞       数  515\n7407      )  名詞 サ変接続  534\n7408   映画  名詞     一般  538\n7409      1  名詞       数  566\n7410     譲  名詞 固有名詞  602\n7411     求  名詞 固有名詞  603\n7412  https  名詞 固有名詞  645\n7413   交換  名詞 サ変接続  679\n7414    ://  名詞 サ変接続 1054\n7415     co  名詞     一般 1054\n7416      t  名詞     一般 1060\n7417      .  名詞 サ変接続 1216\n7418      /  名詞 サ変接続 1351\n7419     戦  名詞     接尾 2745\n7420     廻  名詞 固有名詞 2766\n7421   呪術  名詞     一般 2782\n```\n##ノイズになりそうなワードを外します\n\n見やすいように整形するために、「記号」「アルファベット」を削除します。\n\n```r\nlibrary(\"stringr\") \n\n#termが英語を削除。noun列が作られ「<NA>」が表示。mutateは列を追加したり修正する\nfrq4_Tw2 <- frq3_Tw2 %>% mutate(noun=str_match((Term), '[^a-zA-Z]+')) #◼️\nfrq4_Tw2 %>% arrange(Freq) %>% tail(50)\n\n7410     譲  名詞 固有名詞  602     譲\n7411     求  名詞 固有名詞  603     求\n7412  https  名詞 固有名詞  645   <NA>\n7413   交換  名詞 サ変接続  679   交換\n7414    ://  名詞 サ変接続 1054    ://\n7415     co  名詞     一般 1054   <NA>\n7416      t  名詞     一般 1060   <NA>\n7417      .  名詞 サ変接続 1216      .\n7418      /  名詞 サ変接続 1351      /\n7419     戦  名詞     接尾 2745     戦\n7420     廻  名詞 固有名詞 2766     廻\n7421   呪術  名詞     一般 2782   呪術\n\n#削除。na.omitでNA含む行を削除。\nfrq5_Tw2 <- na.omit(frq4_Tw2) #◼️\nfrq5_Tw2 %>% arrange(Freq) %>% tail(50)\n\n4993     譲  名詞 固有名詞  602     譲\n4994     求  名詞 固有名詞  603     求\n4995   交換  名詞 サ変接続  679   交換\n4996    ://  名詞 サ変接続 1054    ://\n4997      .  名詞 サ変接続 1216      .\n4998      /  名詞 サ変接続 1351      /\n4999     戦  名詞     接尾 2745     戦\n5000     廻  名詞 固有名詞 2766     廻\n5001   呪術  名詞     一般 2782   呪術\n\n#termが記号を識別。noun列が作られ「<NA>」が表示。「\\\\W」は記号\nfrq6_Tw2 <- frq5_Tw2 %>% mutate(noun=str_match((Term), '[^\\\\W]+'))\nfrq6_Tw2 %>% arrange(Freq) %>% tail(50)\n\n4993     譲  名詞 固有名詞  602     譲\n4994     求  名詞 固有名詞  603     求\n4995   交換  名詞 サ変接続  679   交換\n4996    ://  名詞 サ変接続 1054   <NA>\n4997      .  名詞 サ変接続 1216   <NA>\n4998      /  名詞 サ変接続 1351   <NA>\n4999     戦  名詞     接尾 2745     戦\n5000     廻  名詞 固有名詞 2766     廻\n5001   呪術  名詞     一般 2782   呪術\n\n#削除。na.omitでNA含む行を削除。\nfrq7_Tw2 <- na.omit(frq6_Tw2) \nfrq7_Tw2 %>% arrange(Freq) %>% tail(50)\n\n4487     譲  名詞     固有名詞  602     譲\n4488     求  名詞     固有名詞  603     求\n4489   交換  名詞     サ変接続  679   交換\n4490     戦  名詞         接尾 2745     戦\n4491     廻  名詞     固有名詞 2766     廻\n4492   呪術  名詞         一般 2782   呪術\n```\n\nさらに見やすくするために1文字のワードを外すことにしました。\nただ、2文字の単単語とみなされませんでしたが、以下の1文字のワードは抜き出し、後で結合することにしました。\n\n```r\n4463     巻  名詞         一般  206     巻\n4464     狗  名詞         一般  219     狗\n4476     崎  名詞         一般  326     崎\n4477     釘  名詞         一般  336     釘\n```\n\n```r\n#「狗」「巻」「釘」「崎」を後で結合できるように取り出しておく\nfrq7_Tw2_2 <- frq7_Tw2 %>% filter(Term %in% c(\"狗\",\"巻\",\"釘\",\"崎\")) \nfrq7_Tw2_2\n  Term Info1    Info2 Freq noun\n1   崎  名詞     一般  326   崎\n2   巻  名詞     一般  206   巻\n3   狗  名詞     一般  219   狗\n4   釘  名詞     一般  336   釘\n5   巻  名詞 固有名詞    9   巻\n6   巻  名詞     接尾  193   巻\n\n#Termが1文字の行を削除。まず、1文字ワードの行番号を抽出\nindex <- grep('..', frq7_Tw2[,1])\nfrq7_Tw2[index,] %>% arrange(Freq) %>% tail(50) #確認\n\n3636         五条  名詞     固有名詞  407         五条\n3637         伏黒  名詞     固有名詞  414         伏黒\n3638         虎杖  名詞         一般  483         虎杖\n3639         映画  名詞         一般  538         映画\n3640         交換  名詞     サ変接続  679         交換\n3641         呪術  名詞         一般 2782         呪術\n\nfrq8_Tw2 <- frq7_Tw2[index,] \nfrq8_Tw2 %>% arrange(Freq) %>% tail(50)\n\n3636         五条  名詞     固有名詞  407         五条\n3637         伏黒  名詞     固有名詞  414         伏黒\n3638         虎杖  名詞         一般  483         虎杖\n3639         映画  名詞         一般  538         映画\n3640         交換  名詞     サ変接続  679         交換\n3641         呪術  名詞         一般 2782         呪術\n\n先ほど抜き出した「狗」「巻」「釘」「崎」の行（データフレーム ）を結合\n\nfrq9_Tw2 <- rbind(frq8_Tw2, frq7_Tw2_2)\nfrq9_Tw2 %>% arrange(Freq) %>% tail(50)\n\n3639           崎  名詞         一般  326           崎\n3640           釘  名詞         一般  336           釘\n3641         譲渡  名詞     サ変接続  369         譲渡\n3642         五条  名詞     固有名詞  407         五条\n3643         伏黒  名詞     固有名詞  414         伏黒\n3644         虎杖  名詞         一般  483         虎杖\n3645         映画  名詞         一般  538         映画\n3646         交換  名詞     サ変接続  679         交換\n3647         呪術  名詞         一般 2782         呪術\n```\n\n「呪術」はツイートに含まれていて当然なのと、数字（Freq：出現回数）が他と比べてかなり大きいので外すことにします。\n\n```r\nfrq10_Tw2 <- frq9_Tw2 %>% filter(Term != \"呪術\")\nfrq10_Tw2 %>% arrange(Freq) %>% tail(50)\n\n3641         譲渡  名詞     サ変接続  369         譲渡\n3642         五条  名詞     固有名詞  407         五条\n3643         伏黒  名詞     固有名詞  414         伏黒\n3644         虎杖  名詞         一般  483         虎杖\n3645         映画  名詞         一般  538         映画\n3646         交換  名詞     サ変接続  679         交換\n```\nwordcloud2での可視化に入ります\n\n```r\n#wordcloud2で描画準備\nfrq11_Tw2 <- frq10_Tw2 #下記の作業でミスをした場合元のデータフレームに戻せるようにする\n\n#Freqが100以上にする\nfrq12_Tw2 <-　frq11_Tw2$Freq >= 100\ntail(frq12_Tw2) #確認\n\n[1]  TRUE  TRUE  TRUE  TRUE FALSE  TRUE\n\nfrq13_Tw2 <- frq11_Tw2[frq12_Tw2,]\nfrq13_Tw2 %>% arrange(Freq) %>% tail(50)\n\n1  手渡し  名詞     サ変接続  103 手渡し\n2    東堂  名詞     固有名詞  108   東堂\n・・・\n30   五条  名詞     固有名詞  407   五条\n31   伏黒  名詞     固有名詞  414   伏黒\n32   虎杖  名詞         一般  483   虎杖\n33   映画  名詞         一般  538   映画\n34   交換  名詞     サ変接続  679   交換\n\n#wordcloud2で描画。frq13_Tw2の１列目（Term）と４列目（Freq）を使う\nlibrary(wordcloud2)\nfrq13_Tw2[,c(1,4)] %>% wordcloud2(size=2,minSize=1) #sise=2では全体が大きすぎるので下記利用\nfrq13_Tw2[,c(1,4)] %>% wordcloud2(size=1.3,minSize=1,gridSize=10)  #gridSizeは文字間隔\n```\nワードクラウドの可視化ができました。\n\n<img width=\"７00\" alt=\"ワードクラウド2呪術廻戦1\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1143963/7e6a67f8-8047-1984-a8e0-c69b52ed0086.png\">\n\n##残しておきたい1文字ワードをピックアップ\n\nなお、整形途中から気になった「交換」「譲渡」というワードですが、Twitterで検索すると、あるアイドルのつぶやきに「交換日記」「呪術廻戦」が含まれ、多くのリツイートがされたためのようです。\nさらに、呪術廻戦グッズの「交換」「譲渡」目的のツイートが数多く見られました。\nということで、放送されたアニメとは関係なさそうなので、外すことにします。\n「バッジ」というワードはそのグッズの1つのようですが、「交換」「譲渡」ほど目立たないのでそのままにしました。\n\n```r\nfrq14_Tw2 <- frq13_Tw2 %>% filter(Term != \"交換\") %>% filter(Term != \"譲渡\")\nfrq14_Tw2 %>% arrange(Freq) %>% tail(50)\n\n27     崎  名詞         一般  326     崎\n28     釘  名詞         一般  336     釘\n29   五条  名詞     固有名詞  407   五条\n30   伏黒  名詞     固有名詞  414   伏黒\n31   虎杖  名詞         一般  483   虎杖\n32   映画  名詞         一般  538   映画\n```\n再度wordcloud2で可視化します\n\n```r\nfrq14_Tw2[,c(1,4)] %>% wordcloud2(size=1.3,minSize=1,gridSize=10)  #gridSizeは文字間隔\n```\nワードクラウドの可視化ができました。\n\n<img width=\"７00\" alt=\"ワードクラウド2呪術廻戦2\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1143963/874379c1-2d6e-2cc6-51d0-d0dc5f265504.png\">\n\n##ggplot2で棒グラフ\n\n次に、ワードの出現回数順にの棒グラフを作ります。\nそのための準備をします。\n\n```r\n#扱いやすいようにTerm（ワード）とFreq（出現回数）の2列のデータフレームに\nfrq15_Tw2 <- data.frame(frq14_Tw2$Term, frq14_Tw2$Freq)\nfrq15_Tw2 #確認\n\n   frq14_Tw2.Term frq14_Tw2.Freq\n1          お願い            137\n2            優先            160\n3            希望            119\n・・・\n23           東堂            108\n24           真希            199\n25           好き            112\n26           気軽            169\n27           さん            132\n28             崎            326\n29             巻            206\n30             狗            219\n31             釘            336\n32             巻            193\n```\nFreq（frq14_Tw2.Freq）の降順に並び替えます。\n\n```r\nfrq16_Tw2 <- frq15_Tw2[order(frq15_Tw2$frq14_Tw2.Freq, decreasing=T), ] #◼️\nfrq16_Tw2 #確認\n```\n列名も元のデータフレームから変わっているので、わかりやすい名称に変更します。\n\n```r\n#列名を変更\ncolnames(frq16_Tw2) <- c(\"Word\",\"Freq\")\nhead(frq16_Tw2)\n\n   Word Freq\n12 映画  538\n16 虎杖  483\n22 伏黒  414\n21 五条  407\n31   釘  336\n28   崎  326\n```\nggplot2で棒グラフを描きます。\n\n```r\n#reorderは並び順指定\n#stat=\"identity\"はデータラベルつけるときに必要\n#fill=ｰFreqにすると値が大きいほど色が濃くなる\n#coord_flip()を追加すると、x軸とy軸が入れ替わる\n#geom_textとlabelで棒グラフにラベル（Freq）を追加\nlibrary(ggplot2)\npar(family = \"HiraKakuProN-W3\") \nggplot(frq16_Tw2, aes(x=reorder(Word, Freq), y=Freq))+\n   geom_bar(aes(y=Freq,fill=-Freq),stat=\"identity\") +\n   xlab(\"\")+\n   theme_gray (base_family = \"HiraKakuPro-W3\") +\n　　geom_text(aes(x=reorder(Word,Freq),y=Freq,label = Freq), hjust=1.3,colour = \" white\") +\n   coord_flip()\n```\n<img width=\"７00\" alt=\"ワードクラウド2呪術廻戦3\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1143963/ba9c91de-359c-ed94-b50f-ca8bde844379.png\">\n\n狗巻くんの「巻」が「名詞・一般」と「名詞・接尾」と2回出てくるからか、他より長いグラフになりました。\nどちらかの「巻」を外せばよいのですが、外さないでうまく処理する方法がわからなかったので、「ラベル+Word」という表記に変えることにしました。\n行ラベルの番号が順番通り並んでいないので、ラベルを貼り直します\n\n```r\n#1から行数（nrow）までの連番を行番号に差し替えます。\nrownames(frq16_Tw2) <- 1:nrow(frq16_Tw2)\nhead(frq16_Tw2)\n\n  Word Freq\n1 映画  538\n2 虎杖  483\n3 伏黒  414\n4 五条  407\n5   釘  336\n6   崎  326\n```\n「連番ラベル+Word」の列を追加します。\n\n```r\n#結局使わなかったが、cbindで連番とWordを結合しようとすると、Factor型のレベルの数字が並ぶ\n#このためを文字型にする必要がある\ncbind(rownames(frq16_Tw2), as.character(frq16_Tw2$Word))\n\n#「連番ラベル+Word」列の「Word2」を追加\nfrq17_Tw2 <- frq16_Tw2 #元に戻しやすいようにするための処理\nfrq17_Tw2$Word2 <- paste(rownames(frq16_Tw2), frq16_Tw2$Word)\nhead(frq17_Tw2)\n\n  Word Freq  Word2\n1 映画  538 1 映画\n2 虎杖  483 2 虎杖\n3 伏黒  414 3 伏黒\n4 五条  407 4 五条\n5   釘  336   5 釘\n6   崎  326   6 崎\n\n#念のため型を確認\nstr(frq17_Tw2)\n\n'data.frame':\t32 obs. of  3 variables:\n $ Word : Factor w/ 31 levels \"アカ\",\"アニメ\",..: 9 16 28 17 26 20 24 5 2 25 ...\n $ Freq : int  538 483 414 407 336 326 309 287 281 271 ...\n $ Word2: chr  \"1 映画\" \"2 虎杖\" \"3 伏黒\" \"4 五条\" ...\n```\n再度棒グラフを描画します\n\n```r\npar(family = \"HiraKakuProN-W3\") \nggplot(frq17_Tw2, aes(x=reorder(Word2, Freq), y=Freq))+\n   geom_bar(aes(y=Freq,fill=-Freq),stat=\"identity\") +\n   xlab(\"\")+\n   theme_gray (base_family = \"HiraKakuPro-W3\") +\n　　geom_text(aes(x=reorder(Word2,Freq),y=Freq,label = Freq), hjust=1.3,colour = \" white\") \n   coord_flip()\n\n#（確認）Word2はchrでもfactorでもどちらでも描画可能\npar(family = \"HiraKakuProN-W3\") \nggplot(frq17_Tw2, aes(x=reorder(as.factor(Word2), Freq), y=Freq))+\n   geom_bar(aes(y=Freq,fill=-Freq),stat=\"identity\") +\n   xlab(\"\")+\n   theme_gray (base_family = \"HiraKakuPro-W3\") +\n　　geom_text(aes(x=reorder(as.factor(Word2),Freq),y=Freq,label = Freq), hjust=1.3,colour = \" white\") +\n   coord_flip()\n```\n<img width=\"７00\" alt=\"ワードクラウド2呪術廻戦4\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1143963/3a4b8076-475e-c5cc-f601-2f86c4328802.png\">\n\n**了**\n","user":"text_owleyes_0214","created_at":"2021-03-28T21:06:19+09:00","updated_at":"2021-03-28T21:06:19+09:00"},{"url":"https://qiita.com/hinako_n/items/6b7c531a6d294632edd0","title":"【Vue.js/firebase】ToDoリストを作る","body":"Vue.jsとfirebaseを使い、ToDoリストを作ってみました。\n\n学習の記録として作成手順を残しておきたいと思います。\n\n##プロジェクトを作成する\nプロジェクトを作成したいディレクトリに移動し、下記コマンドを実行する。\nここではvue-todoというプロジェクト名をつけました。\n\n```\n¥ vue create vue-todo\n```\n\n質問形式で設定を聞かれるので、スペースキーで選択し Enter で進めます。\n\nプロジェクト作成が完了したら、VSccodeでvue-todoフォルダを開きます。\n続いて下記コマンドを実行し、firebaseライブラリをインストール、サーバーを起動します。\n\n\n```\n¥ npm add firebase\n¥ npm run serve\n```\n\nlocalhost:8080にアクセスすると、Vue.jsのデフォルトの画面が表示されます。\n\n\n\n##firebaseでプロジェクトの準備をする\n\n「firebase　コンソール」とブラウザで検索し、firebaseにGoogleアカウントでログインします。\n\n・firebaseのプロジェクトの準備をしていきます。\nプロジェクトを追加　→　プロジェクト名を入力　→　Googleアナリティクスを使うか選択（今回は使わないのでチェックを外します）して作成するをクリック\n\n\n・データベースの準備をしていきます。\nFirestore　→　作成する　→　テストモードを選択して次へ　→　ロケーションを選択（今回はasia-east2）　\n\n\n・ウェブアプリにFirebaseを追加します。\nプロジェクトの概要　→　</>ウェブ　→　アプリの登録でアプリ名を指定（今回はvue-todo）→　アプリの登録をクリック\n\n「Firebase SDKの追加」とスクリプトが出てくるので、scriptタグ内の行をコピーしておきます。\n\nコピーした部分を、main.jsファイルの\n\n```\nVue.config.productionTip = false\n```\nの直後にペーストします。\n\nVue.config.productionTip = falseの上に、firebaseをインポートします。\n\n```js:main.js\n\nimport firebase from 'firebase'\n```\n\n\n##ToDoリストをつくる\n\nまずApp.vueのデフォルト部分を削除します。（templateタグ内、HelloWorldのコンポーネント）\n\n・templateタグ内に、ToDoリストのテンプレートを記述します。\n\n```vue:App.vue\b\n\n<template>\n  <div id=\"app\">\n    <h1>TODOリスト</h1>\n    <div>\n      <input />\n      <button>追加</button>\n    </div>\n    <ul>\n      <li>\n        <input type=\"checkbox\" />\n        タスク名\n        <button>×</button>\n      </li>\n    </ul>\n  </div>\n</template>\n```\n\n・トップページが表示された時、つまりAppコンポーネントが作成されたときにfirestoreの初期設定を行うよう設定します。\n\n```vue:App.vue\n\n<script>\nimport firebase from 'firebase'\nexport default {\n  name: 'App',\n  data() {\n    return {\n      db: null,\n      todosRef: null\n        //以下のcreated()でdb,todosRefを記述しているので、初期値を設定しておく。\n    }\n  },\n  created() {\n    this.db = firebase.firestore()\n        //おまじないのようなものと覚えておく。\n    this.todosRef = this.db.collection('todos')\n        //今回データベースにtodosというコレクションをつくる。この参照先を指定。\n  }\n}\n</script>\n```\n\n\n・ToDoリストにタスクを追加します。\n\n```vue:App.vue\n\n<h1>TODOリスト</h1>\n    <div>\n      <input v-model=\"newTodoName\" />\n      <button @click=\"addTodo()\">追加</button>\n          //追加ボタンを押すとaddTodoメソッドが呼ばれる。\n    </div>\n```\n\n\n```Vue:App.vue\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      db: null,\n      todosRef: null,\n      newTodoName: ''\n    }\n  },\n  created() {\n    this.db = firebase.firestore()\n    this.todosRef = this.db.collection('todos')\n  }\n  methods: {\n    addTodo(){\n      if(this.newTodoName === ''){ return }\n          //何も入力されていなければ、このメソッドを抜ける。\n          //以下は入力されていた時のみ実行される。\n      this.todosRef.add({\n          //firestoreにデータを追加する際はadd()を使う\n        name: this.newTodoName,\n        isComplete: false,\n          //タスクが完了しているかどうかのフラグ。初期値は未完了。\n      })\n    }\n  }\n}\n</script>\n```\n\n\n動作確認をしてみます。\nブラウザからタスクを入力して追加ボタンを押します。\nfirebaseコンソール のFirestoreをみると、現在のデータベースの中身を確認することができ、入力したタスクが追加されています。\n\n\n・ToDo一覧を表示します。\n\nv-forでtodoのnameを表示します。\n完了した際にチェックを入れるチェックボックスも実装します。\n\n```vue:App.vue\n<ul>\n   <li v-for=\"(todo, key) in todos\" :key=\"key\"\n      <input type=\"checkbox\" v-model=\"todo.isComplete\" @click=\"updateTodo(todo, key)\" />\n     　  {{ todo.name }}\n      <button>×</button>\n   </li>\n</ul>\n```\n\n```vue:App.vue\n<script>\nimport firebase from 'firebase'\nexport default {\n  name: 'App',\n  data() {\n    return {\n      db: null,\n      todosRef: null,\n      newTodoName: '',\n      todos: {}\n          //オブジェクト形式で返ってくるので、空のオブジェクトを定義する。\n    }\n  },\n  created() {\n    this.db = firebase.firestore()\n    this.todosRef = this.db.collection('todos')\n    this.todosRef.onSnapshot(querySnapshot => {\n        //querySnapshotが現在の全体のデータ\n      const obj = {}\n        //空のオブジェクトを作成\n      querySnapshot.forEach(doc => {\n        obj[doc.id] = doc.data()\n          //作成した空のオブジェクトにデータを入れていく\n      })\n      this.todos = obj\n        //todosにobjをあてる\n    })\n      //onSnapshotは何かしらの変更があると処理を実行するリスナー\n      //データが変わった時に行う処理を記述している\n  },\n  methods: {\n    addTodo(){\n      if(this.newTodoName === ''){ return }\n      this.todosRef.add({\n        name: this.newTodoName,\n        isComplete: false,\n      })\n    },\n    updateTodo(todo, key){\n      todo.isComplete = !todo.isComplete\n　　　　　//isCompleteを反転させる\n      this.todosRef.doc(key).update(todo)\n    }\n  }\n}\n</script>\n```\n\n\n・削除機能をつけます\n\n削除ボタンをクリックすると、removeTodoメソッドを実行するようにします。\n引数にはkeyを指定し、そのデータを削除します。\n\n```vue:App.vue\n<button @click=\"removeTodo(key)\">×</button>\n```\n\nremoveTodoメソッドを定義します。\n\n```vue:App.vue\nmethods: {\n    addTodo(){\n      if(this.newTodoName === ''){ return }\n      this.todosRef.add({\n        name: this.newTodoName,\n        isComplete: false,\n      })\n    },\n    updateTodo(todo, key){\n      todo.isComplete = !todo.isComplete\n      this.todosRef.doc(key).update(todo)\n    },\n    removeTodo(key){\n      this.todosRef.doc(key).delete();\n    }\n  }\n```\n\n\nこれで、タスクを作成・完了したらチェックをつける・タスクを削除する機能を実装することができました。\n\n\n##Firebase Hostingでデプロイする\n\nここまでで作成したToDoリストのアプリケーションを、Firebase Hostingを使って一般に公開します。\n\nまずはターミナルでプロジェクトのディレクトリに移動し、下記のコマンドでfirebase CLIをインストールします。\n\n```\n$ npm install -g firebase-tools\n```\n\nfirebaseにログインします。\n\n```\n$ firebase login\n```\n\n下記のコマンド実行後、選択肢を選んで進んでいきます。\n\n```\n$ firebase init\n```\nYを押してEnter　→　Hostingをスペースキーで選んでEnter　→　Hostingする対象のプロジェクトを選んでEnter　→　public directoryについてはdistと入力してEnter\n\nこれでプロジェクトの初期化が完了しました。\n\n続いてVueCLIのプロジェクトのビルドを行ます。\n\n\n```\n$ npm run build\n```\n\n実行するとdistというフォルダが作成されます。これがサーバーにアップされるファイルとなります。\n\nfirebaseにデプロイします。\n\n```\n$ firebase deploy\n```\n\n実行すると、Hosting URLが表示されます。\n\n","user":"hinako_n","created_at":"2021-03-28T21:02:39+09:00","updated_at":"2021-03-28T21:02:39+09:00"},{"url":"https://qiita.com/yosnak20/items/2b37f13ff45489b0fdba","title":"【備忘録】Rails6でrails db:create実行時にPostgreSQLに接続できなかった時の対処の話","body":"#なんの話か\nRails6を使って新しいアプリ開発をやろうとして、ローカルのPostgreSQLを使おうとしたら発生したエラーの解決までの話しです。正直ポスグレを今回初めて使用したため、エラーに対して根本的な原因や、仕様などを理解しながら解決できるのかわかりませんでした。エラー文を読みながら進めていくと、なんとなくどういう状態に陥っているのかがわかるエラーでしたが、どうしてもつまづいてしまった部分をSEの知り合いに助けていただきました。\n\n#起こったこと\n`rails _6.0.3.2_ new memo-app --database=postgresql`コマンドで、DBにポスグレを指定してアプリ作成し、\n`rails db:create`でデータベースを作ろうとしたとき、下記のエラーに遭遇。\n\n\n```terminal\n$ rails db:create\ncould not connect to server: No such file or directory\n        Is the server running locally and accepting\n        connections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?\nCouldn't create 'APP_NAME_development' database. Please check your configuration.\nrails aborted!\nPG::ConnectionBad: could not connect to server: No such file or directory\n        Is the server running locally and accepting\n        connections on Unix domain socket \"/tmp/.s.PGSQL.5432\"?\n***\n```\n\n要約すると、postgreSQLに接続できず、DBの作成に失敗しています。\n\n#やったこと① postgreSQLの再起動してstatusnの確認\n\n```\n$ brew services restart postgresql\nStopping `postgresql`... (might take a while)\n==> Successfully stopped `postgresql` (label: homebrew.mxcl.postgresql)\n==> Successfully started `postgresql` (label: homebrew.mxcl.postgresql)\n```\n\nを実行して、postgreSQLを再起動をかけて、\n\n\n```\n$ brew services list\n```\nで状態を確認したが、\n\n```terminal\nName       Status  User  Plist\npostgresql error   yoshi /Users/yoshi/Library/LaunchAgents/homebrew.mxcl.postgresql.plist\n```\n\nstatusがエラーのまま。もちろんこのまま実行しても、最初のエラーが再び吐き出されるだけ。\nlocal環境にはpostgreSQLがあって起動できるけど接続できる状況にないことがここでわかります。\n\n#やったこと②\nここでつまづいてどうしようもなかったので、SEの先輩に一言アドバイスをもらいました。\nデータディレクトリがどういう状態か確認してみよ、とアドバイスをいただき、\n\n```\n$ postgres -D /usr/local/var/postgres\n```\n\nで確認したところ、\n\n```\nFATAL:  database files are incompatible with server\n***\nDETAIL:  The data directory was initialized by PostgreSQL version 12, \nwhich is not compatible with this version 13.1.\n\n```\nという文章がでてくれました。DBファイルの互換性に問題があります。\nVer12で初期化された現在のデータディレクトリは、Ver13.1では互換性がないので使えません。\nということです。\n\n#最終的には\nそうなると、アップデートすればいいのでは？という仮定に至り、\n\n`brew postgresql-upgrade-database`でアップデートをかけて、\n`brew services restart postgresql`で再起動した上で、\n\n再度DB作成してみたところ、\n\n```\n$ rails db:create\nCreated database 'memo_app_development'\nCreated database 'memo_app_test'\n```\n無事DBの作成に成功したので、解決しました。\n根本的な原因は、いつのまにかVer12で作成されたDBに問題があったところです。\nおそらく何が何だかわからず変なコマンド打ったりしていたのでこうなったのでは、と...。\n\n#参考文献\nhttps://qiita.com/sf213471118/items/0e843af332ea0210c810\n","user":"yosnak20","created_at":"2021-03-28T21:01:47+09:00","updated_at":"2021-03-28T21:01:47+09:00"},{"url":"https://qiita.com/matsunao722/items/41d8c32dc233e70f421e","title":"Vue.jsをAWSのS3に自動デプロイする","body":"こんにちは！\n\n前回の記事では、LaravelのプロジェクトをEC2に立てましたが、今回はフロント側をAWSに移行させたいと思います。\n\nバックエンド側については下記記事を参照ください。\n\nhttps://qiita.com/matsunao722/items/d9480d0042da4ed07937\n\nVue.jsを移行させるために考えることは、Githubにpushした際に、AWSのS3に自動デプロイするようなことを考えています。\n\nS3は、静的ウェブサイトホスティングサービスも提供しているため、S3にデプロイします。\n\n## 事前知識\n\n### Codepipelineとは？\n\nawsのcodeシリーズの一つ。\n\nコードソフトウェアの構築、テスト、デプロイまでの過程を自動化し、短時間でアップデートできるようci／cdをサポートするマネージメント型の継続的デリバリーサービスである。\n\nCodepipelineを使えば、Codecommitに保持されているコードをEC2インスタンスにデプロイといったことも可能になる。\n\nソースコードの変更を検知するが、そのソースコードはCodeCommit、Amazon ECR、Amazon S3から取得が可能。\n\nビルドやテストはCodebuildで実行される。\n\n### Codebuildとは？\n\nその名の通り、ビルドが実行される。\n\nソースコードをコンパイルし、テストを実行し、デプロイ可能なソフトウェアパッケージを作成できる完全マネージド型のビルドサービス。\n\nCodeBuild は連続的にスケールされ、複数のビルドが同時に処理されるので、\n\nビルドが待機状態でキュー内に残されることがありません。\n\nGithubとの連携もできるため、push時にビルドを走らせることが可能。\n\n### CloudFront とは？\n\n「高速コンテンツ配信ネットワーク機能」のことで、データ、動画、アプリケーションなど、静的・動的なさまざまなWebコンテンツをスムーズに配信できるコンテンツデリバリネットワーク（CDN）。\n\nさらにCDNとは、コンテンツデリバリネットワークの略で、ウェブコンテンツを効率的かつスピーディーに配信できるように工夫されたネットワークのことを指す。CDNが高速配信できるのはキャッシュサーバーを利用しているから。\n\n参考記事：https://www.kagoya.jp/howto/network/cdn/\n\n\nCloudfrontの導入事例として、Amazon Prime VideoやHuluなどの動画配信サービスで使われており、その高速性や安定性に定評がありそうです。\n\n## 実際にやった流れ\n\n1. Vueプロジェクトの作成\n1. Githubにリポジトリをpushしておく\n1. buildspec.ymlの作成\n1. S3のIAMユーザの作成\n1. S3のバケット準備\n1. バケットのホスティング設定\n1. バケットポリシー変更(アクセスできるようにする)\n1. CodePipelineの設定\n1. CloudFrontの設定\n1. Route 53の設定\n1. 動作確認\n\n1と2に関しては省略。\nVueプロジェクトのビルドに関しては、yarnで実施する。\n\n\n### buildspec.ymlの設定\n\nプロジェクトルートに設置するファイル。このファイルをもとにCodebuildを使用する。これもGithub管理させる。\n\n```\nversion: 0.2\n\nphases:\n  install:\n    commands:\n      - if [ -e /tmp/node_modules.tar ]; then tar xf /tmp/node_modules.tar; fi\n      - echo update npm...\n      - npm install -g\n      - npm update -g npm\n      - echo node -v\n      - node -v\n      - echo npm -v\n      - npm -v\n      - echo install yarn...\n      - npm install -g yarn\n      - echo yarn -v\n      - yarn -v\n  pre_build:\n    commands:\n      - echo Installing source NPM dependencies...\n      - yarn install\n  build:\n    commands:\n      - echo Build started on `date`\n      - echo Compiling the Node.js code\n      - yarn run build\n  post_build:\n    commands:\n      - tar cf /tmp/node_modules.tar node_modules\n      # - echo Delete S3 Bucket object...\n      # - aws s3 rm s3://バケット名 --recursive\n      # - echo create invalidation\n      # - aws cloudfront create-invalidation --distribution-id ${CLOUDFRONT_DISTRIBUTION_ID} --paths '/*'\nartifacts:\n  files:\n    - '**/*'\n  base-directory: dist\ncache:\n  paths:\n    - /tmp/node_modules.tar\n```\n\nコメントアウトしている箇所はうまく行っていない・・・\n環境変数をCodebuildに登録する必要がある。(下記記事参照)\n\nhttps://dev.classmethod.jp/articles/codebuild-env/\n\nしかし、buildでエラーを起こすため、うまくいかなかったため、コメントアウトした・・・\n\n```\n      # - echo Delete S3 Bucket object...\n      # - aws s3 rm s3://バケット名 --recursive\n```\n\n上記コードは、過去にビルドし配置されたファイルの削除を行うが、使用しているロールへポリシーの追加が必要。\n\nIAMよりS3のDeleteObject権限を追加する必要あり。\n\n```\n      # - echo create invalidation\n      # - aws cloudfront create-invalidation --distribution-id\n```\n\nS3 + CloudFrontの構成であるため配置された資産がキャッシュされている。\nアップロードした資産を即時反映するためには都度キャッシュの削除が必要である。\nそのためInvalidationを作成してキャッシュを削除し即時反映させる。\nこちらもロールへのポリシーの追加が必要。IAMより該当ロールにCloudFrontのCreateInvalidation権限を追加すること。\n\nこちらの記事も参考にアレンジするといい\n\nhttps://www.lanches.co.jp/blog/10249\n\nhttps://kitigai.hatenablog.com/entry/2019/02/19/200000\n\n\n補足だが、artifactsのbase-directoryはS3にデプロイするディレクトリを指定している。\nこれせんと、プロジェクト全部がデプロイされるし、node_moduleはクソ時間かかる・・・\n\n\n### S3のパブリックアクセスについて\n\n直接S3にインターネットからアクセスする際にはパブリックアクセスを許可しないといけないが、今回は直接アクセスする必要ないため、全面拒否のままにしておくといいということだったが、、、、\n\n結局アクセス許可する設定を実施した。\n\n### Codepipelineの設定について\n\nパイプラインで自動ビルドとデプロイの設定をする。\n\n### CloudFrontの設定\n\nS3を公開するにあたり、そのCDNとなるのが、CloudFrontである。\nもちろんCloudfrontがなくてもS3でホスティングサービスがあるのでできる。その際は、パプリックアクセスを許可する必要あり。\n\n## 実際のインフラ構成図\n\n今回はフロントアプリだけの構成となるため、バックエンドのサーバーを立てるよりは簡単である。\n\n![スクリーンショット 2021-03-27 5.54.33.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/255267/6b6615c5-5860-664d-c5f0-091d8db42d16.png)\n\n流れとしては、開発者がgithubのdevelopやfeatureブランチにpush。pushしたブランチからmasterへプルリクを作成し、マージされることで、masterブランチの変更を検知する。\n\nそうするとCodepipelineによってCodebuildによってビルドが開始される。\n\nビルドについては、先ほど作成した「buildspec.yml」に基づいて実施される。\n\nビルド後、ファイルについてはS3ストレージにデプロイされて格納され、CloudfrontをCDNとしてサイトにアクセスすることができるようになる。\n\nアクセスについては独自ドメインを使用するため、Route 53を経由してアクセスする。\n\n## 手こずったこと\n\n### Cloudfrontでの独自ドメイン使用\n\ncloudfrontが用意したドメインではアクセスできるのだが、独自ドメインではうまくいかず、四苦八苦\n\nhttps://qiita.com/NaokiIshimura/items/46994e67b712831c3016\n\nこちらの「Altername Domain Name」に独自ドメイン(今回はtest.one-pre.com)と入れたができなかった。\nSSL照明が必要とのこと。\n(※この記事ではS3アクセス許可をしているが、今回はインターネットからS3にアクセスすることはないため不要)\n\nそのため、下記記事を参照に証明書を作成し、その後独自ドメイン登録をした。\n\nhttps://dev.classmethod.jp/articles/cloudfront-s3-customdomain/\n\nhttps://qiita.com/Yuki_BB3/items/c98354417e449616ad04\n\n\n\n1. 証明書発行(Certificate Managerにて)\n1. Cloudfrontで独自ドメイン登録\n1. Route 53で登録した独自ドメインのレコードを作成\n\n**S3バケットで注意なのが、バケット名は想定しているドメイン名で作成しましょう。**\n\n証明書発行で注意なのが、**バージニア北部リージョン**で発行しましょう。\n\nCloudfrontが用意したドメインではHTTPSアクセスができたのですが、独自ドメインではできないという事象も発生したので注意です。。。\n\n### アクセス制限\n\nS3バケットアクセスを全面拒否したままにしており、CloudfrontからS3にアクセスすると\n\n**This XML file does not appear to have any style information associated with it. The document tree is shown below.**\n\nというのが出た。\n\nS3のホスティング設定もできていなかったので、ここで設定を実施。\n\nIndex Document (インデックスドキュメント)に「index.html」を設定。\n\nまた、バケットポリシーアクセス制限を解除。バケットポリシーの一部を下記に変更した。\n\n```\n\"Principal\": \"*\",\n```\n\n\n## 今後の検討・課題\n現状、テストコードがないため、テストを通過したらビルドという設定ができない。フロント側のコードであるのでテストコードを作成することはあまりないが、要検討としたい。\n","user":"matsunao722","created_at":"2021-03-28T20:59:54+09:00","updated_at":"2021-03-28T21:02:08+09:00"},{"url":"https://qiita.com/T_keigo_wwk/items/c323c178c89629993824","title":"iosにおけるDash.jsが動かない問題についてのメモ","body":"HTML5環境上でDash.jsがiosの各種ブラウザーで動かない現象があって調べたのでメモとして残す\n# 概要\nDash.jsのios対応は公式としてはどう扱っているのか確認したかったので確認した\nhttps://github.com/Dash-Industry-Forum/dash.js/issues/3303\n\n>Hi, iOS does not support the MediaSourceExtensions which are required to use dash.js. On iOS devices you have to use HLS.\n\n\n`MediaSourceExtensions` (通称MSE）なるものがiosでは対応できてないらしいからHLSを使ってくれてとのことらしい\n\n# そもそもMSEとはなんなのか\nhttps://en.wikipedia.org/wiki/Media_Source_Extensionshttps://en.wikipedia.org/wiki/Media_Source_Extensions\n\nなるほど、W3C側で規格制定しているメディアスストリーミング規格らしい\n\nhttps://caniuse.com/mediasource\nこれをみた感じ記事投稿時点ではなぜかios(ipad os)13以降でのみのサポートらしい、ようはiphoneではサポートしてないということになりそう\n\n# 背景\nそもそもAppleはMpegDashではなくてHLSを推してるところがありあまりMpegDashとApple製品の関連の話においていい話をあまり聞かない\n\n# 対応策\nそもそもMpegDashは一つのストリーミング配信方式であって目的ではないのでios相手の実装はHLSで配信するようにする\n\n# 感想\nなんかいかがでしたかブログみたいな記事で恐縮だけどあまり話題にもなってないのでもし同様の問題を引っかかってる同志の問題解決に貢献できたらうれしい\n","user":"T_keigo_wwk","created_at":"2021-03-28T20:58:24+09:00","updated_at":"2021-03-28T20:58:24+09:00"},{"url":"https://qiita.com/ysys_Ba/items/6f5b288f657608186de8","title":"～ 配列 ～ チートシート","body":"#目次\n[1-配列の作成](#1-配列の作成)　`mat = [[0] * W for i in range(H)]`\n[2-ソート](#2-ソート)　`.sort(reverse=False)`　`sorted()`\n[3-要素の削除](#3-要素の削除)\n[4-](#4-)\n\n#0-はじめに\n\nチートシートの扱いついては[ここ](https://qiita.com/ysys_Ba/items/d27282b888abbd1f43e7#%E3%83%81%E3%83%BC%E3%83%88%E3%82%B7%E3%83%BC%E3%83%88%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6)を読んでください\n\n#1-配列の作成\n\n```python:string_1.1.py\nmat = [0] * N\n```\n\n1次元の場合は簡単\n\n```python:string_1.2.py\nmat = [[0] * W for i in range(H)]\n#     [[0] * 横 for i in range(縦)]\n```\n\n２次元の場合はちょっと面倒\n`mat = [[0]*W]*H` だと２次元配列自体は作れても個別での要素の変更ができないのでアウト\n\n#2-ソート\n\n```python:string_2.1.py\nmat.sort(reverse=False)\n```\n\n`.sort()`の前につけた配列を降順でソート（破壊的）\n`(reverse=True)`にすると降順になる\n\n```python:string_2.1.py\nnew_mat = sorted(mat)\n```\n\n`()`内に入れた配列を降順でソートし渡す\n`sorted()`は`.sort()`と違い非破壊的なので、元の配列が保持される\n\n","user":"ysys_Ba","created_at":"2021-03-28T20:57:01+09:00","updated_at":"2021-03-28T20:57:01+09:00"},{"url":"https://qiita.com/geek_777/items/a71d3cda3427ee8f8caf","title":"raspi 4で組み込み！ ~Lチカ~　","body":"# raspi 4で組み込み！ ~Lチカ~\n\nraspi3とかいろいろLチカプログラムが出回ってましたがraspi4のLチカがあまり見当たらなかったのでRustで書く前にCで書いてみました。Rustで書いたものもそのうち投稿します。今回はOSなしのベアメタルでやっていきます。\n\n## 環境\n\nHost: macOS Big Sur 11.2.2\nコンパイラ: clang version 11.1.0\nリンカ: LLD 11.1.0 (compatible with GNU linkers)\n\nllvmでコンパイルしてます。ターミナルで\n\n```shell-session\n$ brew install llvm\n```\n\nでインストールできます。インストールしてもパスが通ってないので、パス通しを。多分、 /usr/local/Cellar/llvm にあります。GCCでコンパイルしたい方はオプションとコマンドを適宜置き換えてください。\n\n\n\n## メモリマップ\n\n現時点での最新の Peripheral の取説は[ここ](https://datasheets.raspberrypi.org/bcm2711/bcm2711-peripherals.pdf)にあります。古いバージョンだとGPIOのベース番地がずれてるので参考になりません。\n\n>The  peripheral  addresses  specified  in  this  document  are  legacy  master  addresses.  Software  accessing  peripheralsusing the DMA engines must use 32-bit legacy master addresses. The Main peripherals are available from 0x7C00_0000to 0x7FFF_FFFF. Behind the scenes, the VideoCore transparently translates these addresses to the 35-bit 0x4_7nnn_nnnn addresses.\n>\n>So  a  peripheral  described  in  this  document  as  being  at  legacy  address  0x7Enn_nnnn  is  available  in  the  35-bit  addressspace at 0x4_7Enn_nnnn, and visible to the ARM at 0x0_FEnn_nnnn if Low Peripheral mode is enabled.\n\nとあるように、RaspberryPi4（BCM）のPeripheralのベース番地は0x7E00_0000です。ただ、プロセッサからは、**0xFE00_0000**とみえてるので注意しましょう。。。ここ読み飛ばしててハマりました。\n\n(もちろん、最後の一文にあるようにPeripheralのモードで変わりますが、デフォでLow Peripheral modeみたいなので割愛します。)\n\nGPIOのベースが0xFE20_0000となっています。それ以外の挙動についてはデータシートの64ページ以降を参照してください。\n\n## コード\n\nまず、適当にディレクトリをつくって下のようなMakefileを書きます。\n\n```Makefile:Makefile\n##--PROJECT INFO--######################################\nPROJECT      =kernel8\nIMG          =$(PROJECT).img\nELF          =$(PROJECT).elf\nTARGET       =aarch64\nOBJDIR       =tmp\nSRCDIR       =src\nINCLUDE      =headers\nSTARTUP      =$(SRCDIR)/boot.S\nSTARTUP_OBJ  =$(OBJDIR)/boot.o\nLINK         =link.ld\nSRCS         =$(wildcard $(SRCDIR)/*.c)\nOBJS         =$(SRCS:src/%.c=tmp/%.o)\nDUMP         =$(PROJECT).dump\nSD_CARD      = #マウントされたSDカードへのパス\n########################################################\n\n##--OPTIONS and FLAGS--#################################\nCFLAGS   = -Wall -O2 -ffreestanding -nostdinc -nostdlib -mcpu=cortex-a72+nosimd -I $(INCLUDE)\nLD       = ld.lld\nOBJCOPY  = llvm-objcopy\nOBJDUMP  = llvm-objdump\n########################################################\n\n##--comands depend on dev system--######################\nEJECT = diskutil eject #SDカードの取り出し用のコマンド\n########################################################\n\nall: dump\nbuild: $(IMG) \ndump: $(DUMP)\n\n$(OBJDIR):;@mkdir $@\n\n$(STARTUP_OBJ): $(STARTUP)\n        clang --target=$(TARGET)-elf $(CFLAGS) -c $< -o $@\n\n$(OBJDIR)/%.o: $(SRCDIR)/%.c\n        clang --target=$(TARGET)-elf $(CFLAGS) -c $< -o $@\n\n$(ELF): $(OBJDIR) $(STARTUP_OBJ) $(OBJS) \n        $(LD) -m $(TARGET)elf -nostdlib $(STARTUP_OBJ) $(OBJS) -T $(LINK) -o $@\n$(IMG): $(ELF)\n        $(OBJCOPY) -O binary $< $@\n\nclean:; rm -rf $(ELF) $(OBJDIR) *~ */*~ $(DUMP) src/*.o\ndistclean: clean\n        rm -rf $(IMG) \n\n$(DUMP): $(ELF)\n        @rm -rf $(DUMP)\n        @echo `date` > $(DUMP)\n        @$(OBJDUMP) -d $(ELF) | tee -a $(PROJECT).dump | less\n\ncp: $(IMG)\n        cp $(IMG) $(SD_CARD)/$(IMG)\n        $(EJECT) $(SD_CARD)\n```\n\nコピペのときは tabがスペースに変わると動かなくなるので気をつけてください。`SD_CARD`はマウントしたSDカードへのパスを入れてください。`make cp`でsdカードへのコピーまでできます。ejectされるので、そのまま取り出していいです。次にスタートアップのためのアセンブリです。\n\n```assembly:src/boot.S\n.section \".text.boot\"  // Make sure the linker puts this at the start of the kernel image\n\n.global _start  // Execution starts here\n\n_start:\n    // Check processor ID is zero (executing on main core), else hang\n    mrs     x1, mpidr_el1\n    and     x1, x1, #3\n    cbz     x1, 2f\n    // We're not on the main core, so hang in an infinite wait loop\n1: \n\t\twfe\n    b       1b\n2:  // We're on the main core!\n    // Set stack to start below our code\n    ldr     x1, =_start\n    mov     sp, x1\n\n    // Clean the BSS section\n    ldr     x1, =__bss_start     // Start address\n    ldr     w2, =__bss_size      // Size of the section\n3:  \n\t\tcbz     w2, 4f               // Quit loop if zero\n    str     xzr, [x1], #8\n    sub     w2, w2, #1\n    cbnz    w2, 3b               // Loop if non-zero\n\n    // Jump to our main() routine in C (make sure it doesn't return)\n4:  \n\t\tbl      main\n    // In case it does return, halt the master core too\n    b       1b\n\n```\n\nArmv8の命令セットを読んでみると意外と何してるかわかりました。コード自体は、[ここ](https://isometimes.github.io/rpi4-osdev/part1-bootstrapping/)からお借りしてます。このコードはbss領域の初期化を、アセンブリで行っていますがこの部分はCで書いてもいいみたいです。ただ、書いてみてdumpしてみた感じだとアセンブリのままのほうが命令数が少なそうです。\n\n次にmainのコードです。\n\n```c:src/main.c\n#define MMIO_BASE 0xFE000000\n#define GPIO_BASE (MMIO_BASE + 0x200000)\n#define GPFSEL0 (GPIO_BASE + 0x00)\n#define GPSET0 (GPIO_BASE + 0x1C)\n#define GPCLR0 (GPIO_BASE + 0x28)\n\ntypedef unsigned long uint64_t;\ntypedef unsigned int uint32_t;\n\n#define LED 16 // LED pin num\n#define OUTPUT 1 // regster value for output\n\nvoid set_high(uint64_t pin);\nvoid set_low(uint64_t pin);\nvoid set_function(uint64_t pin,uint32_t func);\nvoid mmio_write(uint64_t reg, volatile uint32_t val);\nvoid wait(uint64_t dur);\n\nvoid main(){\n  // setting for pin\n  uint64_t dur;\n  dur = 1000000;\n  set_function(LED, OUTPUT);\n  while(1){\n    set_low(LED);\n    wait(dur);\n    set_high(LED);\n    wait(dur);\n  }\n}\n\nvoid set_high(uint64_t pin)\n{\n  if(pin <= 57)\n    mmio_write(GPSET0 + (pin / 32) * 4,1 << (pin % 32));\n}\n\nvoid set_low(uint64_t pin)\n{\n  if(pin <= 57) \n    mmio_write(GPCLR0 + (pin / 32) * 4,1 << (pin % 32));\n}\n\nvoid set_function(uint64_t pin, uint32_t func)\n{\n  if(pin <= 57)\n    mmio_write(GPFSEL0 + (pin / 10) * 4, OUTPUT << ((pin % 10) * 3));\n}\n\nvoid wait(uint64_t dur){\n  while(dur-- > 0)\n     asm(\"\"); //ここを入れないと、コンパイル時に最適化されてちかちかしません。\n}\n\nvoid mmio_write(uint64_t reg, volatile uint32_t val)\n{                                                   \n  *(volatile uint32_t*)reg = val;                   \n}                                                   \n\n```\n\n最後にリンカスクリプトの紹介です。\n\n```:link.ld\nSECTIONS\n{\n    . = 0x80000;     /* Kernel load address for AArch64 */\n    .text : { KEEP(*(.text.boot)) *(.text .text.* .gnu.linkonce.t*) }\n    .rodata : { *(.rodata .rodata.* .gnu.linkonce.r*) }\n    PROVIDE(_data = .);\n    .data : { *(.data .data.* .gnu.linkonce.d*) }\n    .bss (NOLOAD) : {\n        . = ALIGN(16);\n        __bss_start = .;\n        *(.bss .bss.*)\n        *(COMMON)\n        __bss_end = .;\n    }\n    _end = .;\n\n   /DISCARD/ : { *(.comment) *(.gnu*) *(.note*) *(.eh_frame*) }\n}\n__bss_size = (__bss_end - __bss_start) >> 3;\n```\n\nこれも、[ここ](https://isometimes.github.io/rpi4-osdev/part1-bootstrapping/)からお借りしてます。必要なファイルはこれで以上です。この時点でのファイルは以下のようになってます。\n\n```shell-session\n.\n├── Makefile\n├── link.ld\n└── src\n    ├── boot.S\n    └── main.c\n```\n\n`make build`でimgファイルが生成されます。SD_CARDを正しく指定しておけば、`make cp`でSDカードへのコピーまでできます。また、SDカードへのコピーについてですが、 ファームウェア関連はもともとあるものを使っていくので、SDカードを入れて、ディレクトリ移動してから作成したもの以外のkernel*.imgファイルは削除してください。間違えた場合は[ここ](https://github.com/raspberrypi/firmware/tree/master/boot)からとってきたり、Raspbianのイメージを書き込んだりして修正してください。\n\n完成したイメージと、ソースをgithubで[公開](https://github.com/KKatsuaki/blink)しています。\n","user":"geek_777","created_at":"2021-03-28T20:52:38+09:00","updated_at":"2021-03-28T20:52:38+09:00"},{"url":"https://qiita.com/RubyLrving/items/7719196a2db9bc8ec068","title":"AtCoder Beginner Contest 197","body":"##[A - Rotate](https://atcoder.jp/contests/abc197/tasks/abc197_a)\n\nO(1)\n\n```C++:C++\n#include <bits/stdc++.h>\n \n#define rep(i,n) for(int i=0; i<(n); ++i)\n#define fixed_setprecision(n) fixed << setprecision((n))\n#define execution_time(ti) printf(\"Execution Time: %.4lf sec\\n\", 1.0 * (clock() - ti) / CLOCKS_PER_SEC);\n#define pai 3.1415926535897932384\n#define NUM_MAX 2e18\n#define NUM_MIN -1e9\n \nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\ntemplate<class T> inline bool chmax(T& a, T b){ if(a<b){ a=b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b){ if(a>b){ a=b; return 1; } return 0; }\n \nint main() {\n    string s;\n    cin >> s;\n \n    cout << s[1] << s[2] << s[0] << endl;\n \n    return 0;\n}\n```\n\n##[B - Visibility](https://atcoder.jp/contests/abc197/tasks/abc197_b)\n\nO(HW)\n久しぶりに幅優先探索をしたくてqueueを使いました。\n下記コードは謝った回答方法です。\n\nAtCoderの解説を参考にした方が良いです。\n分かりやすのはループ４つほど用意し全方向をチェックするのが良いです。\n\n```C++:C++\n#include <bits/stdc++.h>\n \n#define rep(i,n) for(int i=0; i<(n); ++i)\n#define fixed_setprecision(n) fixed << setprecision((n))\n#define execution_time(ti) printf(\"Execution Time: %.4lf sec\\n\", 1.0 * (clock() - ti) / CLOCKS_PER_SEC);\n#define pai 3.1415926535897932384\n#define NUM_MAX 2e18\n#define NUM_MIN -1e9\n \nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\ntemplate<class T> inline bool chmax(T& a, T b){ if(a<b){ a=b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b){ if(a>b){ a=b; return 1; } return 0; }\n \nchar field[100][100];\nint done[100][100];\nint dx[2] = {1, -1};\nint dy[2] = {1, -1};\n \nint main() {\n    int H, W, X, Y;\n    cin >> H >> W >> X >> Y;\n \n    for(int x=0; x<H; x++){\n        string s;\n        cin >> s;\n \n        for(int y=0; y<W; y++){\n            field[x][y] = s[y];\n        }\n    }\n \n    queue<P> que;\n    que.push(P(Y-1, X-1));\n \n    int res=0;\n    if(field[X-1][Y-1] == '.'){\n        done[X-1][Y-1] = 1;\n        res++;\n    }\n    \n    while(que.size()>0){\n        P p = que.front();\n        que.pop();\n \n        for(int i=0; i<2; i++){\n            int dxx = p.first + dx[i];\n            int dyy = p.second;\n \n            if(dxx < 0 || dxx >= W) continue;\n \n            if(field[dyy][dxx] == '.' && done[dyy][dxx] == 0){\n                res++;\n                done[dyy][dxx] = 1;\n                que.push(P(dxx, dyy));\n            }\n        }\n    }\n \n    que.push(P(Y-1, X-1));\n    while(que.size()>0){\n        P p = que.front();\n        que.pop();\n \n        for(int i=0; i<2; i++){\n            int dxx = p.first;\n            int dyy = p.second + dy[i];\n \n            if(dyy < 0 || dyy >= W) continue;\n \n            if(field[dyy][dxx] == '.' && done[dyy][dxx] == 0){\n                res++;\n                done[dyy][dxx] = 1;\n                que.push(P(dxx, dyy));\n            }\n        }\n    }\n \n    cout << res << endl;\n \n    return 0;\n}\n```\n\n##[C - ORXOR](https://atcoder.jp/contests/abc197/tasks/abc197_c)\n\nO(2^N)\n\nOR演算とは別名、論理和と呼ばれる論理演算です。\n高校数学では数学Aの分野になります。\nまた基本情報、応用情報では必須知識になる為、エンジニアを目指す、エンジニアの方にとって必須知識となります。\n\n```txt:論理和\nC = A | B\n0111 = 0011 | 0101\n```\n\n```txt:排他的論理和\nC = A ^ B\n0110 = 0011 | 0101\n```\n\n2^Nの問題を回答する際、bit全探索かdfsと呼ばれる深さ優先探索を使用します。\nとちらでも回答できますが、今回はdfsを使います。\n分岐の条件は、\n・任意の区間として現在の区間に追加する。\n・任意の区間に追加せず、新しい区間として扱う。\n要素数がNになった際、２次元配列の全ての要素に対して論理和、排他的論理和の処理を行います。\n\n```C++:C++\n#include <bits/stdc++.h>\n \n#define rep(i,n) for(int i=0; i<(n); ++i)\n#define fixed_setprecision(n) fixed << setprecision((n))\n#define execution_time(ti) printf(\"Execution Time: %.4lf sec\\n\", 1.0 * (clock() - ti) / CLOCKS_PER_SEC);\n#define pai 3.1415926535897932384\n#define NUM_MAX 2e18\n#define NUM_MIN -1e9\n \nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\ntemplate<class T> inline bool chmax(T& a, T b){ if(a<b){ a=b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b){ if(a>b){ a=b; return 1; } return 0; }\n \nll N;\nll A[20];\n \nll dfs(int n, vector<vector<ll>> v){\n    if(n == N){\n        ll res = 0;\n        for(int i=0; i<v.size(); i++){\n            ll sum=0;\n            for(int j=0; j<v[i].size(); j++){\n                sum = sum | v[i][j];\n            }\n            res = res ^ sum;\n        }\n        return res;\n    }\n \n    vector<vector<ll>> c;\n    copy(v.begin(), v.end(), back_inserter(c));\n    vector<ll> t;\n    t.push_back(A[n]);\n    c.push_back(t);\n    ll res = dfs(n+1, c);\n \n    if(v.size()>0){\n        int l = v.size()-1;\n        v[l].push_back(A[n]);\n        res = min(res, dfs(n+1, v));\n    }\n \n    return res;\n}\n \nint main() {\n    \n    cin >> N;\n    rep(i, N) cin >> A[i]; \n    ll res = dfs(0, vector<vector<ll>>());\n    cout << res << endl;\n \n    return 0;\n}\n```\n\n##[D - Opposite](https://atcoder.jp/contests/abc197/tasks/abc197_d)\n\nO(1)\n回転行列の問題です。\n数学２B、数学3Cの分野になります。\n\n```txt:2点の中間の点P\npx = (x0 + xn) / 2\npy = (y0 + yn) / 2\n```\n\n```txt:正N角形の中心角が表す角度をラジアンへ変換\ndegree = 360.0 / N;\nradian = degree * pai / 180.0;\n```\n\nx0, y0をそのままdegreeほど回転行列にて計算すると、P点を基準にしないといけないのに原点Oを基準に回転するので計算結果が会わなくなります。\n点Pを原点へ移動させます。\n\n```txt:x0,y0を原点基準の座標へ移動\nx = x0 - px;\ny = y0 - py;\n```\n\nこれで回転行列にて計算できます。\n\n```txt:回転行列にてdegreeだけ回転させる\nx1 = x * cos(radian) - y * sin(radian);\ny1 = x * sin(radian) + y * cos(radian);\n```\n\nx1, y1は原点を基準にするように移動しています。\n点Pが基準になるように再度移動させます。\n\n```txt:x1,y1を原点基準の座標へ変換\nx1 = x1 + px\ny1 = y1 + py\n```\n\n答えが出せました！\nプログラムをしましょう！！\nただ実際のコンテストでは残り8分でACする事態で大変焦っていました。\n頭では上記のように考察しましたがコードは雑です。\n\n```C++:C++\n#include <bits/stdc++.h>\n \n#define rep(i,n) for(int i=0; i<(n); ++i)\n#define fixed_setprecision(n) fixed << setprecision((n))\n#define execution_time(ti) printf(\"Execution Time: %.4lf sec\\n\", 1.0 * (clock() - ti) / CLOCKS_PER_SEC);\n#define pai 3.1415926535897932384\n#define NUM_MAX 2e18\n#define NUM_MIN -1e9\n \nusing namespace std;\nusing ll = long long;\nusing P = pair<int,int>;\ntemplate<class T> inline bool chmax(T& a, T b){ if(a<b){ a=b; return 1; } return 0; }\ntemplate<class T> inline bool chmin(T& a, T b){ if(a>b){ a=b; return 1; } return 0; }\n\nint main() {\n    double N, x0, y0, xN2, yN2;\n    cin >> N;\n    cin >> x0 >> y0;\n    cin >> xN2 >> yN2;\n\n    double px = (xN2 - x0) / 2.0 + x0;\n    double py = (yN2 - y0) / 2.0 + y0;\n    double degree = 360.0 / N;\n    double radian = degree * pai / 180.0;\n\n    double x = x0 - px;\n    double y = y0 - py;\n\n    double xx = x * cos(radian) - y * sin(radian);\n    double yy = x * sin(radian) + y * cos(radian);\n\n    double dxx = (double)(int)( ceil( xx * pow(10.0,5) ) ) * pow(10.0, -5);\n    double dyy = (double)(int)( ceil( yy * pow(10.0,5) ) ) * pow(10.0, -5);\n    cout << fixed_setprecision(5) << dxx + px << \" \" << dyy + py << endl;\n\n    return 0;\n}\n```\n\n##感想\n1120パフォーマンスで最高記録です。\n半年間かけて数学１A、数学２B、数学３Cを勉強してきた成果が出ました。\nありがとう、AtCoder。\n4月から大学生になる為、今まで通りコンテストに出れる分かりません。\n時間があえば参加して緑コーダーを目指していきます。\n","user":"RubyLrving","created_at":"2021-03-28T20:45:19+09:00","updated_at":"2021-03-28T20:47:32+09:00"},{"url":"https://qiita.com/grouse324/items/9f49dafc97b78869476f","title":"【人類最難関の挑戦】サイゼリヤの間違い探しを現代技術を駆使し片面だけで解く（深層学習）","body":"## プロローグ\n**※この章は読み飛ばしても構いません**\n\n多くの人が挑むも解くことが叶わなかった人類史上の難問といわれるものがいくつかある．\n\n数学界で最も有名な難問といえばおそらく「フェルマーの最終定理」であろう．弁護士であり数学者であったフェルマーが「解答を書くにはこの余白は狭すぎる」と書き残してこの世を去って以来，天才ワイルズが現代数学の成果を結集して証明を完成させるまで300年以上も数学者たちの挑戦を退け続けた．その他にも，京都大学の望月教授が宇宙際タイヒミュラー理論を用いて証明したといわれるABC予想や，7つのうち6つが現在も未解決であるミレニアム懸賞問題などはあまりにも有名である．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/9b133eab-14d0-8f81-9e5d-5ab9606499d4.jpeg width=200>\n\n一方数学以外でも，例えば宇宙の始まりを巡る議論は多くの人を惹きつけてきた難問であり，アインシュタインやホーキングら天才たちの研究によって徐々にその姿が明らかになってきた．「我々はどこから来たのか，我々は何者か，我々はどこへ行くのか」というゴーギャンの絵が示す問いは，人類にとって答えのない永遠の疑問だ．我々の起源や生きる意味に関する問いは物理学以外にも，考古学，生物学，哲学などから様々なアプローチが可能な，まさに普遍的な命題と言える．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/c7ef5124-872d-f3b6-5569-11f45efc87ea.jpeg width=400>\n\nそして，「史上最大の難問とは何か」と問われた時に，我々が真っ先に思い浮かべるであろう，人類史に燦然と輝く挑戦がある．そう，**サイゼリヤの間違い探し**である．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/2a061fd4-98a5-814c-6d6c-bb3fd7aa558b.jpeg width=500>\n\nイタリアンレストランチェーンのサイゼリヤに置かれている間違い探しは，見た目はポップで親しみやすい絵柄にも関わらず，その難易度は非常に高く，10個全ての間違いを発見することは不可能に近い．軽い気持ちで挑めば，食事や会話そっちのけで間違い探しに熱中してしまう上に，大抵は7,8個しか見つけることができずモヤモヤしたまま退店を強いられる．その有様は，フェルマーの最終定理に魅せられて数学者人生を棒に振ったかつての研究者たちを彷彿とさせる．\n\nただ私は無謀にもこのようなことを考えた．**「人類の英知を結集すれば，サイゼリヤの間違い探しを片面だけで解くことができるのではないか？」**　両面を使っても難しいものを片面だけで解くとなれば，人類最難関の挑戦と銘打っても大げさではないはずだ．もちろん間違い探しは両面があって初めて成立するものであり，片面だけでは異なる箇所を知るすべがない．しかし，これまでの傾向や違和感のあるイラストなどに着目すれば，間違いがありそうな場所を推定することは可能ではないだろうか．\n\nそのようなことは不可能だと考える読者もいるかもしれない．この大きすぎる壁を前にしてそう感じる読者の気持ちは十分に理解できる．しかし我々人類には知恵という最大の武器がある．私はこの難問を解くために，現代科学の大きな成果である機械学習を利用する．機械学習技術はまさにフェルマーの最終定理における谷山志村予想のように，解決のための大きな武器となるであろう．\n\n## やること\n前置きが長くなったが，要するにこの記事の目標は，**サイゼリヤの間違い探しにおいて，片面だけ見て間違いの場所を特定すること**である．そのために，過去の間違い探しのデータを用いて，深層学習を用いた物体検出モデルを学習する．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/15c1da94-f021-937a-2446-8d7e609a3c60.png width=700>\n\n## データセット作り\nまず，間違い探しの元画像を手に入れる必要がある．ありがたいことに，サイゼリヤの公式サイトで過去の間違い探しの画像が全て公開されている．\n\n[エンターテイメント - サイゼリヤ](https://www.saizeriya.co.jp/entertainment/)\n\nさらに親切なことに，ここには解答も公開されているので，自分でせっせと間違い探しをする必要はない．2006年から開始された間違い探しは，現在で32回分の解答が公開されている．\n\n問題は，どのようなデータセットを準備するかということである．機械学習においては基本的に画像と正解データのペアが不可欠だ．画像において検出したい物体の位置を示す方法はいくつかある．始めは左右の画像を比較して間違いの場所を自動的に検出し塗り潰そうと試みた（[参考記事](https://qiita.com/ika_kk/items/32c4986825c86ad92f36)）．下の画像は両面の画素値の差から計算された間違いの箇所である（右の画像の明るくなっている部分が間違い）．様々な前処理，後処理を加えたおかげである程度は正しく検出できているものの，小さな間違いはどうしても検出が難しい．また細かなノイズも見られ，綺麗なマスクが作られていないことがわかる．\n次に公式の解答画像を使って間違いの場所を自動的に取得しようとしたが，こちらも処理が煩雑で正確なデータを得るのは困難だった．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/a143ae8f-5134-713e-cf48-1cf26efee630.png width=600>\n\nどうやら自動で正解データを作るのは難しい．結局，たかだか30枚程度の画像なら自分で全部正解ラベルを与えようという結論になった．ピクセルレベルで間違いの場所を記録するのは労力が大きいため，代わりにBounding box（バウンディングボックス，物体の位置を示す長方形）を与えることにした．Bounding boxを使って学習する方法には**物体検出（Object Detection）**というタスクがある．その手法を活用すれば，用意した画像と正解データを使って学習を回すことが可能なはずだ．\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/33685354-9db8-d0a3-f098-098655318dda.jpeg\" width=500>\n\n方針は決まった．よってここからは実際に教師データを作成していく．まず公式サイトからダウンロードした画像を左右2つに分けて保存した．その後各画像に対し正解ラベルとなるBounding boxを与えていく．世の中は便利なもので，Bounding boxを与えるための便利なツールは既に世の中にたくさんある．ここでは　Microsoftが開発した無料アノテーションツールである[VoTT](https://github.com/microsoft/VoTT)を使った．\n\nVoTTの詳しい使い方の説明は他の記事（例えば[こちら](https://sleepless-se.net/2019/06/21/how-to-use-vott/)）に譲るが，画像の入ったフォルダを用意しておけば，各画像の任意の場所にBounding Boxとクラス情報を与えることができる．今回検出したいのは間違い部分だけなので，\"Item\"というカテゴリを一つ作って全てそのクラスとして登録した．アノテーションの結果はPASCAL VOCの形式でxmlファイルに保存した．下の画像は，VoTTを使って右半分のイラストにある間違い箇所を四角く囲っている様子である．\n\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/dde4e2df-abc3-ef9f-d178-4b1d9e4aa9f1.png width=500>\n\n（画像に1枚ずつラベルを与えていると，どこかで見たような間違い探しに出会った．そう，これは大学2年生の時，ふらっと入ったサイゼリヤで友人と一緒に解いた間違い探しであった．そこから次々と大学生活のたわいも無い思い出が蘇る...　昔を思い出して感傷的な気分に浸りたい人は，ぜひサイゼリヤの間違い探しに取り組んでみることをお薦めする．）\n\n左右の画像はペアとしてではなく別のデータとして扱うため，32回分のイラストから64データが得られた．最後の1枚である2020年12月分の画像をテストデータとし，それ以外の31組62枚でモデルを学習する．これだけでは深層モデルの学習にはやや心許ないが，一枚にラベルを与えるだけでもかなりの時間を消費してしまったので，今回はこれ以上データを増やすのは諦めた．ネットには似たようなイラストの間違い探しがたくさんあるので，将来的にはそれらを使ってデータを増やすことも可能だと思われる．\n\n### Bounding Boxの与え方\n正解データを作る際，どの範囲にBounding Boxを与えるかという難しさがあった．例えば以下のような場合では，Bounding Boxを与える領域が明らかで，スコップ全体を囲えばいいだろう．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/cb11abf5-662b-61c0-da2e-55f6be5bc59e.png width=400>\n\nしかし以下のような画像では，大根の欠けた部分のみを囲うのか，１本の大根全体を囲うのか，それとも大根4本全てを囲うのかは自明ではない．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/caf70671-d23e-8f01-c922-32ee0b435f3e.png width=400>\n\nさらに以下のような場合，左の画像にある光が右の画像に無い．無いものに印をつけるのはなかなかに難しい．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/e440e283-8e6f-1e1a-e638-1dfc41d7d2e1.png width=400>\n\n囲み方には厳密な正解はないが，今回は迷ったら広めの領域全体を囲うことにした．例えば人の顔の目や口が違っていたら顔全体を囲う，などである．それ以外に困った箇所はかなり主観的にラベル付けを行なっているが，どうか許していただきたい．\n\n### 間違いの傾向\n正解データを作る過程で私は自分で間違い探しを31問解いた（正確には答えを見た）．これほど一度にサイゼリヤの間違い探しを解いた人間はあまりいないのではないかと思う．その結果，間違いが含まれやすい場所の傾向が見えてきた．ここではサイゼリヤ間違い探し界の権威として，間違いを含みやすい箇所の一部を紹介する．\n\n#### 1. タイトル\nイラストには必ず「Kids Menu」と書いたタイトルが含まれる．タイトル部分の文字に間違いが含まれる回数を数えたところ，なんと31回中15回だった．さらに2006年11月分のように，タイトル部分に連結するイラストが異なる場合も含めると19回にも上る．すなわち2回に1回はタイトル付近に間違いがあると見ていい．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/494dffc1-1df4-be36-83df-7280f69a025a.png width=600>\n\n#### 2. 規則性が崩れている場所\n一般に，規則的に並んでいるものを1箇所変えるのは間違い探しの常套手段であり，サイゼリヤにもそれは通用する．左のイラストでは，下に並んだ丸い飾りのうち一つだけ四角くなっている．右のイラストでは，音楽隊の中で一人だけ麦わら帽子をかぶっている．このような変化はたとえ片面しかなくても間違いを見抜ける可能性が高い．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/aaedf28c-e08c-afb4-f307-5d56ae972706.png width=600>\n\n#### 3. 羊\n通称「サイゼリヤの羊」は2018年4月から本格的に出現し，それ以降合わせて9回描かれているが，この羊は**片面にしか登場しない**場合が非常に多い．なんと9回中8回で片面のみに現れるという間違いを担当しており，残りの1回（2020年3月）もリュックを背負っているかいないかという間違いがあった．つまり，羊を見たらそこに間違いがある確率が非常に高いのである．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/ab826534-a3f4-5d38-4cd8-bb8cb6bbc27a.png width=600>\n\n#### 4. コップ\n特に近年の間違い探しでは食卓の様子が描かれることが増えた．食卓を含むイラスト8回のうち，コップに間違いがあったのはなんと5回であった．例えば以下の画像では，中身のジュースの色が違っていたり，ストローの長さが違ったりしている．コップ以外でもフォークやナイフなどの食器類には注意が必要である．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/22426a87-8acf-ef84-12ee-7e3623548330.png width=600>\n\nなお，これらの特徴は深層学習モデルでも学習できることが期待される．このような傾向を過去のデータから自動で学習することで，未知の間違い探しイラストに対しても片面だけで予測できるようになるのである．\n\n## 物体検出モデルの学習\n画像とBounding Boxのデータが集まれば，これを使って物体検出のモデルを学習する．ここでは物体検出に広く用いられている[Faster-RCNN](https://arxiv.org/abs/1506.01497)を使った．Faster-RCNNは2015年にMicrosoftが発表した物体検出のモデルで，深層学習を用いたEnd-to-endなパイプラインを実現した画期的な手法である．発表から5年経った今でも，「物体検出ならとりあえずFaster-RCNN」と真っ先に候補に上がるモデルとなっている（詳細は[こちら](https://medium.com/lsc-psd/faster-r-cnn%E3%81%AB%E3%81%8A%E3%81%91%E3%82%8Brpn%E3%81%AE%E4%B8%96%E7%95%8C%E4%B8%80%E5%88%86%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E8%A7%A3%E8%AA%AC-dfc0c293cb69)等を参照）．\n\nFaster-RCNNはあまりにも有名なため，Pytorchなどの深層学習フレームワークでは既に一般画像でPre-trainされたモデルをインポートすることができる．今回は[こちら](https://qiita.com/ImR0305/items/c2674dfe9f5ec1301304)の記事などを参考にしながらモデルを構築した．\n\nコードは[Github](https://github.com/shutakahama/Saizeriya_detection)にあげているので興味があれば参照していただきたい．\n\n### Dataloader\n$xml2list()$関数はPASCAL VOC形式のファイルを読み込む関数であり，画像とアノテーションの情報を返す$MyDataset$クラスを定義する．\n\n```python:dataloader.py\ndef xml2list(xml_path, classes):\n    xml = ET.parse(xml_path).getroot()\n    boxes, labels = [], []\n\n    for obj in xml.iter('object'):\n        label = obj.find('name').text\n\n        if label in classes:\n            # 各Bounding Boxの座標とラベルを取得\n            bndbox = obj.find('bndbox')\n            xmin = int(bndbox.find('xmin').text.split(\".\")[0])\n            ymin = int(bndbox.find('ymin').text.split(\".\")[0])\n            xmax = int(bndbox.find('xmax').text.split(\".\")[0])\n            ymax = int(bndbox.find('ymax').text.split(\".\")[0])\n            boxes.append([xmin, ymin, xmax, ymax])\n            labels.append(classes.index(label))\n\n    anno = {'bboxes': boxes, 'labels': labels}\n    return anno, len(boxes)\n\n\nclass MyDataset(torch.utils.data.Dataset):\n    def __init__(self, image_dir, xml_paths, classes):\n        super().__init__()\n        self.image_dir = image_dir\n        self.xml_paths = xml_paths\n        self.image_ids = sorted(glob('{}/*'.format(xml_paths)))\n        self.classes = classes\n        self.transform = transforms.Compose([\n                                 transforms.ToTensor()\n                                 ])\n\n    def __getitem__(self, index):\n        image_id = self.image_ids[index].split(\"/\")[-1].split(\".\")[0]\n        # 画像の読み込み\n        image = Image.open(f\"{self.image_dir}/{image_id}.png\")\n        image = self.transform(image)\n        image = image[:3, :, :]\n        \n        # 正解データの読み込み\n        path_xml = f'{self.xml_paths}/{image_id}.xml'\n        annotations, obje_num = xml2list(path_xml, self.classes)\n        boxes = torch.as_tensor(annotations['bboxes'], dtype=torch.int64)\n        labels = torch.as_tensor(annotations['labels'], dtype=torch.int64)\n        area = (boxes[:, 3] - boxes[:, 1]) * (boxes[:, 2] - boxes[:, 0])\n        area = torch.as_tensor(area, dtype=torch.float32)\n        iscrowd = torch.zeros((obje_num,), dtype=torch.int64)\n\n        target = dict()\n        target[\"boxes\"] = boxes\n        target[\"labels\"] = labels + 1\n        target[\"image_id\"] = torch.tensor([index])\n        target[\"area\"] = area\n        target[\"iscrowd\"] = iscrowd\n        \n        return image, target, image_id\n\n    def __len__(self):\n        return len(self.image_ids)\n```\n\n### モデル\nモデルはPyTorch事前訓練されたFasterRCNNをでインポートした．モデルの中身をあれこれと変更する必要はないが，出力クラスの数だけ調整する必要がある．\n\n```python:main_detection.py\ndef FasterRCNN(num_classes):\n    model = torchvision.models.detection.fasterrcnn_resnet50_fpn(pretrained=True)\n    in_features = model.roi_heads.box_predictor.cls_score.in_features\n    model.roi_heads.box_predictor = FastRCNNPredictor(in_features, num_classes)\n    return model\n```\n\n### 訓練\nデータセットとモデルを作成して訓練する．画像データと正解xmlファイルを入れるフォルダをあらかじめ作成しておく必要がある．ここでは20epoch学習し，毎回テストを行なっている．\n\n```python:main_detection.py\ndef train():\n    # パラメータ\n    num_epochs = 20\n    batch_size = 1\n    base_path = '****************'  # rootフォルダを入れてください\n    xml_dir = base_path + \"data/label\"  # 正解データのパス\n    img_dir = base_path + \"data/img\"  # 学習画像のパス\n    test_dir = base_path + \"data/test\"  # テスト画像のパス\n    save_path = base_path + \"result\"  # 結果保存フォルダのパス\n    dataset_class = ['Item']  # カテゴリ（ここでは一種類のみ）\n    colors = ((0, 0, 0), (255, 0, 0))\n\n    device = torch.device('cuda') if torch.cuda.is_available() else torch.device('cpu')\n\n    dataset = MyDataset(img_dir, xml_dir, dataset_class)\n    train_dataloader = torch.utils.data.DataLoader(dataset,\n                                                   batch_size=batch_size,\n                                                   shuffle=True,\n                                                   collate_fn=collate_fn)\n\n    model = FasterRCNN(num_classes=len(dataset_class)+1).to(device)\n    params = [p for p in model.parameters() if p.requires_grad]\n    optimizer = torch.optim.SGD(params, lr=0.005, momentum=0.9, weight_decay=0.0005)\n\n    for epoch in range(num_epochs):\n        # 訓練\n        model.train()\n        train_loss = 0\n\n        for i, batch in enumerate(train_dataloader):\n            images, targets, image_ids = batch\n            images = list(image.to(device) for image in images)\n            targets = [{k: v.to(device) for k, v in t.items()} for t in targets]\n\n            loss_dict = model(images, targets)\n            losses = sum(loss for loss in loss_dict.values())\n            train_loss += losses.item()*len(images)\n\n            optimizer.zero_grad()\n            losses.backward()\n            optimizer.step()\n            \n        print(f\"epoch {epoch+1} loss: {train_loss / len(train_dataloader.dataset)}\")\n        torch.save(model, 'model.pt')\n        test(model, dataset_class, colors, test_dir, save_path, device)\n```\n\n### テスト\nテスト用の画像を入れたディレクトリから各画像を読み取り，確信度の高い上位10個のBounding boxを出力する．\n\n```python:main_detection.py\ndef test(model, dataset_class, colors, test_dir, save_path, device):\n    model.eval()\n    test_classes = ['__background__'] + dataset_class\n    for imgfile in sorted(glob(test_dir + '/*')):\n        # テスト\n        img = cv2.imread(imgfile)\n        img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n        image_tensor = torchvision.transforms.functional.to_tensor(img)\n\n        with torch.no_grad():\n            prediction = model([image_tensor.to(device)])\n\n        # 結果の描画\n        for i, box in enumerate(prediction[0]['boxes'][:10]):\n            score = prediction[0]['scores'][i].cpu().numpy()\n            score = round(float(score), 2)\n            cat = prediction[0]['labels'][i].cpu().numpy()\n            \n            txt = '{} {}'.format(test_classes[int(cat)], str(score))\n            font = cv2.FONT_HERSHEY_SIMPLEX\n            cat_size = cv2.getTextSize(txt, font, 0.5, 2)[0]\n            c = colors[int(cat)]\n            box = box.cpu().numpy().astype('int')\n            cv2.rectangle(img, (box[0], box[1]), (box[2], box[3]), c, 2)\n            cv2.rectangle(img, (box[0], box[1] - cat_size[1] - 2), (box[0] + cat_size[0], box[1] - 2), c, -1)\n            cv2.putText(img, txt, (box[0], box[1] - 2), font, 0.5, (0, 0, 0), thickness=1, lineType=cv2.LINE_AA)\n\n        # 結果の保存\n        file_name = imgfile.split(\"/\")[-1].split(\".\")[0]\n        pil_img = Image.fromarray(img)\n        pil_img.save(save_path + f\"/{file_name}_result.png\")\n```\n\n実際の学習は，誰でも手軽に機械学習を動かせることで有名な[Google Colab](https://colab.research.google.com/?hl=ja)で行なった．画像の枚数がそこまで多くなかったので，学習は数分で完了した．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/327833b3-fd28-3f2f-893e-3761ecda7fdf.png width=600>\n\n## 実際に間違い探しを解かせてみる\n\nいよいよ学習後のモデルを使って，片面の画像のみから間違いの位置を予測してみる．予測するのは2020年12月分のイラストである．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/b41dccc2-3cad-e80f-d1a3-9a57a2c8516b.png width=500>\n\nモデルから計算された複数のBounding Boxのうち，予測の確信度が高い上位10個を選んで表示する．学習は20epoch回したが，Bounding boxの予測スコアのうち上から10番目の値（つまり検出のボーダーライン）が最も高くなったのが3epoch目だったのでその出力を結果として使う．\n\nついに人類の夢に挑む時．その心持ちはまさに最後の審判を迎えた時のようであろうか．\n\nまず，右側の画像を入力した時の結果がこちらだ．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/479ea4ca-f698-8092-818f-c331314bd5d9.png width=400>\n\n間違いと疑われる上位10個の領域が赤枠で囲まれている．添えられている数字は予測の確信度（0が最小，1が最大）である．\n当然これだけでは我々も正誤を判定できない．よって，公式ページにある正解と照らし合わせてみる．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/b2f1938a-86ab-0b6e-b661-f057a08891ab.png width=600>\n\nお？\n\n流石に全部綺麗に当たっているというわけにはいかない．しかし，\n\n- 左側中央にいる「サイゼリヤの羊」の服\n- 中央やや左下で肉を食っている少年\n- 右上の窓枠（正確には中央の棒の位置）\n\nの3つは当たっている．どうやら「サイゼリヤの羊がいるところに間違いあり」という経験則を，モデルがきちんと学習していたようだ．\n\nさて，左側の画像はどうか？\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/85edb004-d7b3-1223-ce7a-73a417d06b1c.png width=600>\n\n先ほどとは少し違う結果になっている．よく見ると，\n\n- 右上隅の木の高さ\n- 右下の男の子のサンタ帽\n- 左下の男性の顔（正確には口元）\n\nが当たっているではないか！また，場所は多少ずれているものの，サイゼリヤの羊もきちんと認識している．結果として，右と左両面合わせると10個中6つの間違いを発見することができた．正直私は「全然検出できませんでした〜」というオチを予想していたのだが，半分以上当たっているならばこの挑戦は十分成功したと言えるだろう．\n\nなお，さらなる改善点として以下のようなものが挙げられる．\n\n- データを増やす．サイゼリヤのイラストと似たスタイルの画像をデータセットに加えることで性能を向上させる．\n- データに重み付けをする．間違い探しの特徴は時期によって変化しているため，最近のデータの方がより予測に役立つ情報を持っている．よって損失関数を重み付けし，最近の画像を重視するように学習させる．\n- モデルを変更する．現在はFaster-RCNNより性能が良いと報告されているモデルや，少ないデータ量でも高い性能を示すモデルが提案されているので，それらを使ってみる．\n- 常識を考慮する．1箇所だけ規則性が崩れている場所や常識的におかしい箇所は間違いとなる可能性が高い．よってそういった場所を発見できるような学習の損失を加える．\n\nこれらの手法を駆使すれば正解できる確率は上がっていくかもしれない．しかしサイゼリヤ側も我々の挑戦を手をこまねいて見ているわけではなく，前例に無い新たな間違いを生み出していくだろう．人類の挑戦はまだ終わらない．\n\n## 終わりに\n\n最後に，まだ正解が明らかになっていない2021年3月分の間違い探しの予測結果を載せておく．\n<img src=https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/470270/3df1a3b6-45aa-e855-0a1e-3c3dd6c77cbd.png width=400>\n\n私はまだ自分で解いて確認をしていないので，ぜひ皆さんの目で結果を確かめていただきたい （[公式サイト](https://www.saizeriya.co.jp/entertainment/)）．\n\nしかし，たとえこれが全問正解していようが，全く正解していなかろうが，変わらないことが一つある．それは，どれだけ科学が発展したとしても，次に我々がまたサイゼリヤに行った時には，今までと変わらず童心に帰って間違い探しを楽しむに違いないということである．\n\n\n","user":"grouse324","created_at":"2021-03-28T20:40:56+09:00","updated_at":"2021-03-28T20:40:56+09:00"},{"url":"https://qiita.com/nasubiee/items/3f6b2e86ffa99c4441b5","title":"プログラミング未経験だったぼくのエンジニア転職日記【面接編_後編】","body":"#はじめに\n昨年9月からプログラミングスクールに通って、プログラミングを勉強し始めてから早半年、この度、自社開発企業複数社様から内定をいただくことができました。そこで、スクールのカリキュラム終了後から転職活動までの経験をこれから複数回に分けて投稿していこうと思います。こんな人もいるんだなあという感じで見てください。\n今回は、正真正銘のラスト、面接編の後編です。実際の選考過程について振り返ってみました。前回の前編についてまだ見ていない方は、ぜひそちらををご覧になってから戻って来ていただけると嬉しいです。\n\nhttps://qiita.com/nasubiee/items/861b4e93979415920e3b\n\nまた、第一回はポートフォリオの作り方、第二回はWantedlyの活用方法について書いていているので、そちらも見ていただけると嬉しいです。\n\nhttps://qiita.com/nasubiee/items/bc297d11eac734c126bd\n\nhttps://qiita.com/nasubiee/items/78c094890d52163909d3　\n\n\n### 面接編・前編の振り返り\n前編では、ぼくの転職活動の概要について書かせていただきました。前編を見ていただいた方にとっては、再度の掲載になりますが、ぼくの転職活動戦績は、以下の通りです。\n\n||選考フェーズ|企業数|備考|\n|:---:|:---:|:---:|:---:|\n|①|書類応募|17|応募経路内訳<br>（Wantedly経由5社、スクール経由11社、その他1社）|\n|②|書類通過|13|内1社はその後自主辞退|\n|③|一次+二次面接通過|4||\n|④|最終面接通過<br>（内定）|4|自社開発企業3社、SES企業1社|\n\nこの各選考フェーズについて、この後、詳しく話していこうと思います。\n\n\n# 書類選考について\n上の表にもある通り、ぼくの書類通過率は13/17だったので結構いい戦績だったと思ってます。この要因としては、主に以下の2点だと思います。\n\n* 一定のレベル以上で自己PR、エンジニアの志望理由を書くことができた\n* ポートフォリオサイトのREADMEをしっかり書いた\n\nこのうち、1点目に関しては、正直そんなにすごいことはしていないと思います。もちろん、自分なりにしっかり考えて作りましたが、それ以上にスクールのキャリアアドバイザーの方の助力が大きかったですし、他の候補者も作り込んで来る部分なので、正直、差別化できたかは不透明です。普段慣れない作業なので、最初は戸惑ったり、添削を多くくらうことはあると思いますが、その中でも__自分の大事にしたい部分を明確にさせて、いい指導者に巡り合い、その方のやり方を愚直に信じて書けば__、高い再現性で一定以上のレベルのものはできるかなと思います。\n\n次に2点目ですが、ここは他の候補者との差別化になったんじゃないかと思っています。理由は、肌感覚ですが、READMEまでこだわって作る候補者はそこまで多くないと思うからです。自分がREADMEを書く上で、こだわったポイントは主に以下の2点です。\n\n* 説明を読まなくても、画像を見て、大体のアプリの使い方がわかる\n* 制作背景や工夫点など制作の熱意が伝わる情報を加える\n\n実際に、ぼくがどんなREADMEを書いたかについては、以前の記事でまとめているので、もしよければご参照ください。\n\nhttps://qiita.com/nasubiee/items/09288d26b22459eba0a1\n\n個人的に、READMEの位置付けとしては、__エンジニアへの熱意を伝える裏付け資料__だと思っています。なので、まずは、そこそこしっかりした自己PRやエンジニアの志望理由を作成した上で、プラスアルファの要素として、自分の制作物をどう企業に見せるか、という点にまで気を配ることができれば、高評価を得られるのではないかと思います。\n\n# 面接について\n### 一次面接について\nぼくの一次面接の戦績は、上の表から分かるように4勝8敗でした。MLBで全盛時代のイチローと比べてもまあまあいい勝負できる数字かなと思います（こういう数字を見るとどうしても野球に例えたくなってしまってすいません笑）。自分の中では、勝ちも負けもある程度経験したからこそ感じた、勝敗を分けるポイントは主に以下の2点だと思います。\n\n* 最低限、押さえるポイントは押さえる（大前提）\n* __自分の実体験なども交えて、志望動機を熱く語れる__（ここめっちゃ大事）\n\n1点目は、結論ファーストや笑顔で話すなど、みなさんが思い描く一般的な面接対策だと思ってください。ここは、回数がモノを言う部分はあるので、ぼくの面接を受けまくる戦法がハマったと思います。対策方法については、世の中にごまんと情報が溢れていますし、転職アドバイザーの人に聞くのが一番早いと思うので、ここでは割愛します。\n\nぼくが、ここで強調したいのは、2点目についてです。結局、__内定をもらえるかどうかを分けたのは志望動機__だと思います。具体的な志望動機の作成方法は、これも転職アドバイザーに聞く方がいいと思うので割愛しますが、特に重要なのは、ある程度型どおりに作成した志望動機に、__前職の経験やエンジニアの志望動機などその人特有のエピソードを交えて、面接本番で熱く語れること__だと思います。\n面接対策となると、うまく話せるかなど上記の1点目のようなことに頭がいっぱいになりがちかと思います。ですが、落ち着いて考えてみると、付け焼き刃で身に付けた面接テクニックなんて入社後は使わないですが、その企業の志望動機は、その後会社にいる期間、自分の中にずっと残るものだと思います。となると、ちゃんと想いのある志望動機は、ただの転職活動のためだけのものではなく、実務に入った時の自身の推進力にもなるし、困難に遭遇した時も立ち返ることができる場所だと思います。それだけ大事な志望動機を、その場限りの面接テクニックの習得等に追われて疎かにするのは愚の骨頂だと思うので、ここだけはしっかり自分と向き合うのは必須だと思います。\n志望動機は、何も、誰もが絶賛するようなすごいものを作る必要なんてないと思います。__ある程度、型通りの志望動機で骨格を固めて、そこに自分にしか話せない情報を1つ2つ取り入れて、面接本番でそこに込めた想いを熱く語る__だけだと思います。実際ぼくの4勝8敗という勝敗結果は、これができたかどうかで綺麗に結果が分かれました。\n\n### 最終面接について\n最終面接に関しては、ありがたいことに4戦4勝だったので、悪い点との比較ができないというのが、正直な思いです。個人的には、最終面接特有の対策とかは無い気がしていて、一次面接と基本的に押さえるポイントは同じかなと思います。\n1つ最終面接で実践よかったなと思える事は、面接相手はCEOやCTOの方の場合が多いと思うので、逆質問で、__会社の創業話などその方からしか聞けない話を聞く__ということです。そもそも、会社のトップの方のお話を聞く機会自体が貴重なので、その機会をフル活用できたのは、個人的にすごくよかったと思います。また、相手の視点から見ても、自分自身に向けた独自の質問をして来る奴がいるという点で、高評価をいただけたこともありました。\n\n# 終わりに\nぼくにとって転職活動は簡単なことではなかったですが、自分自身の価値観を広げる本当にいい機会になったと思います。巷では、様々な面接テクニック等の情報が飛び交っていますし、そういう情報を否定する気持ちは全くなく、ある一定レベルまでは必要なのかなと思います。ただ、あまりそういう情報に右往左往してしまうと、自分の色が出せなくなるデメリットもあると思いますし、やはり最も大切なのは、__自分自身が今後の人生で叶えたいことを明確にする__ことだと思います。\n今回のシリーズも、自分のやり方が他の人にとって正しいなんていうつもりはなく、自分自身がこの期間で自問自答する中で得た気付きが、誰かにとってのヒントになればいいなと思って書いたので、気楽に読んでいただけると嬉しいです。\n","user":"nasubiee","created_at":"2021-03-28T20:35:07+09:00","updated_at":"2021-03-28T20:35:07+09:00"},{"url":"https://qiita.com/Jumtra/items/3bceb5e6949bc42b8b0e","title":"【週刊】ボルツマンマシンを理解する①~連想記憶モデル~","body":"##目次\n[1.自己紹介](#1-自己紹介)\n[2.はじめに](#2-はじめに)\n[3.連想記憶モデル](#3-連想記憶モデル)\n[4.最後に](#4-最後に)\n\n##1. 自己紹介\n　おはようございます・こんにちは・こんばんは、**Jumtra**です。\n2022年4月からデータサイエンティストとして働くことが決まり、勉強記録としてQiitaを活用出来ればと考え、今回から投稿させていただきます。\n　コンセプトとして、某週間おまけ付き雑誌(**~~ディアゴスティーニ~~**)のようにアルゴリズムの理解に必要な前提知識を毎週発信し、最終的には1つのアルゴリズムを理解できればと考えています。\nこの記事では、初学者を対象にして分かりやすい説明を心掛けるつもりです。\n\n4月は、記念すべき第1弾として**ボルツマンマシン**を取り扱います。\n\n##2. はじめに\n4月号では、以下の流れで記事の投稿を行っていく予定です。(4月中に終わるか微妙)\n**1-連想記憶モデル**←今回の記事\n**2-ホップフィールドネットワーク**\n**3-ボルツマンマシン**\n**4-制限付きボルツマンマシン**\n**5-深層信念ネットワーク**\n**6-深層ボルツマンマシン**\n**7-動的ボルツマンマシン**\n\n##3. 連想記憶モデル\n####連想記憶モデルとは?\nニューラルネットワークの1種であり、ネットワーク上に記憶パターンを保持する事で記憶パターンと少し違うパターンが入力されても正しい記憶パターンを出力できるモデルです。\n![図2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/831005c4-f401-e239-4dcb-2eebd68c9c08.png)\n![図3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/bc350324-bbb0-f558-d299-9e9c92db0b47.png)\nこのように、ある物の一部を見ることで全体を思い出す。あるいは、別の何かを思い出すといった想起のシミュレーションとも考えることができます。\n\n####連想記憶モデルの仕組み\n#####結合係数の行列表現\n連想記憶モデルは、全ての細胞同士が結合している相互結合型ネットワークです。従って、全ての細胞同士の結合係数を考慮する必要があります。ここで、結合係数とは、細胞間の刺激の伝わりやすさを表すもので、$w_{ij}$と表される。\n<img width=\"450\" src = \"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/a71e4792-9b74-efd8-645c-25f5a9cffef6.png\">\nここで、連想記憶モデルの結合係数の行列は**記憶行列（重み行列）**と呼ばれます。\nまた、連想記憶モデルでは自分に対する入力は考慮していないため$w_{11}$のような自分に対する結合係数は0となる。つまり記憶行列の対角成分の値は0になります。\n#####記憶の方法\n記憶パターンは、記憶行列に埋め込まれます。\n図のような4つの細胞（数字は細胞の番号）に、記憶パターン（白:-1, 黒:1）を埋め込む式を以下に示します。\n$$[記憶行列]+[記憶パターン][記憶パターン]^T-単位行列$$\n\nまず、1つ目のパターンを記憶するときを考えます。\nこの時、記憶行列には何も入っていないので零行列とします。\n<img width = \"200\" src = \"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/934bdbf9-dead-6d53-0620-31a52215edce.png\">\n\n式に従って記憶行列を計算すると以下のようになります。\n\n```math\n\\begin{bmatrix}\n0&0&0&0\\\\\n0&0&0&0\\\\\n0&0&0&0\\\\\n0&0&0&0\\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n-1\\\\\n1\\\\\n1\\\\\n-1\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n-1&1&1&-1\n\\end{bmatrix}\n-\n\\begin{bmatrix}\n1&0&0&0\\\\\n0&1&0&0\\\\\n0&0&1&0\\\\\n0&0&0&1\\\\\n\\end{bmatrix}\\\\\n=\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\\\\\n```\n\n続けて2つ目のパターンを記憶するとき\n1つ目のパターンを記憶した記憶行列を用いて2つ目のパターンを記憶します。\n![図7.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/3227866b-6dc3-a5de-f543-9829ec978e07.png)\n1つ目のパターンを反転させたものを覚えます。\n\n式に従って記憶行列を計算すると以下のようになります。\n\n\n```math\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n1\\\\\n-1\\\\\n-1\\\\\n1\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n1&-1&-1&1\n\\end{bmatrix}\n-\n\\begin{bmatrix}\n1&0&0&0\\\\\n0&1&0&0\\\\\n0&0&1&0\\\\\n0&0&0&1\\\\\n\\end{bmatrix}\\\\\n=\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\n+\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\n\\\\\n=\n\\begin{bmatrix}\n0&-2&-2&2\\\\\n-2&0&2&-2\\\\\n-2&2&0&-2\\\\\n2&-2&-2&0\\\\\n\\end{bmatrix}\n\n```\n\n#####連想記憶モデルの出力関数\n```math\ny=f(x) = \\left\\{\n\\begin{array}{ll}\n1 & (x \\geq 0) \\\\\n-1 & (x \\lt 0)\n\\end{array}\n\\right.\n```\nこれを用いて想起を行います。\n#####入力パターンに基づく想起の仕組み\n![図8.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/909180/88f9a9c5-21ac-959b-756b-3ae59510fe18.png)\n**記憶行列**\n\n```math\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\n\\\\\n```\n次式で入力パターンと記憶行列の想起を行う\n($w_{ij}$は記憶行列, $x_j$は入力パターン)\n\n```math\nf(x) = \\sum_{j=1}^{4}w_{ij}x_j\n```\nここで、$f(x)$は記憶行列と入力パターンの積和を表しているので行列で以下のように表すことができます。\n\n```math\n\\begin{bmatrix}\n0&-1&-1&1\\\\\n-1&0&1&-1\\\\\n-1&1&0&-1\\\\\n1&-1&-1&0\\\\\n\\end{bmatrix}\n\\begin{bmatrix}\n-1\\\\\n1\\\\\n-1\\\\\n-1\\\\\n\\end{bmatrix}\n=\\begin{bmatrix}\n-1\\\\\n1\\\\\n3\\\\\n-1\\\\\n\\end{bmatrix}\n\\\\\nf(\\begin{bmatrix}\n-1\\\\\n1\\\\\n3\\\\\n-1\\\\\n\\end{bmatrix})\n=\n\\begin{bmatrix}\n-1\\\\\n1\\\\\n1\\\\\n-1\\\\\n\\end{bmatrix}\n```\nとなり、覚えたパターンを想起できていることが確認できます。\n\n\n##4. 最後に\n\n今回、連想記憶モデルについて取り扱いました。これは、ネットワーク上の全ノードを同期して状態の更新を行っているため同期型ネットワークと言われています。これに対して、細胞一つ一つに対して状態の更新を行う非同期型ネットワークがあります。この非同期型ネットワークこそが次回扱うホップフィールドネットワークです。\nホップフィールドネットワークは、ボルツマンマシンのもとになったアルゴリズムであるためお楽しみにしてください。\n\n連想記憶モデルとホップフィールドネットワークの性能比較は次回行いたいと思います。\n\nもし良かったら、**LGTM**お願いします。\n","user":"Jumtra","created_at":"2021-03-28T20:28:40+09:00","updated_at":"2021-03-28T20:28:40+09:00"},{"url":"https://qiita.com/rihu-do/items/568aca4f7b943e181e1c","title":"【Python】セルのnumber_format属性を使ってセルの表示形式を変更する。","body":"pythonを使用してExcelファイルの操作を勉強しています。\n本日の気づき(復習)は、セルの表示形式に関してです。\npythonでExcelを操作するため、openpyxlというパッケージを使用しています。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927441/769a2764-9789-ef12-dad1-ce941189d53f.png)\n\n上記のようなブック「商品リストを」\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927441/5c5e8bce-f924-d4ab-adf9-21bf0345c7b6.png)\n\nこの様な表に変更したいです。\n\n# number_format属性\n\n```python\ncell.number_format = 'セルの表示形式'\n```\n\nnumber_format属性には表示したい形式を代入します。\n代入する値はExcelの画面上で設定する時と同じようです。\n\n- yyyy\"年\"mm\"月\"dd\"日\"：年月日を表示\n- hh\"時\"mm\"分\"ss\"秒\"：時間を表示\n- 0.00：小数点以下二桁で表示\n- #,##0：三桁のカンマ区切り\n- 0%：パーセント表示\n\n代表的なものはこれくらいでしょうか。\n\n# 最終的なコード\n\n今回はセルの横幅も変更しています。\n\n```python\nfrom openpyxl import load_workbook\n\nwb = load_workbook('商品リスト.xlsx')\nws = wb.active\n\ncolumn_width = {'B': 3.5, 'C': 15, 'D': 20, 'E': 10, 'F': 10, 'G': 10}\n\nfor col, width in column_width.items():\n    ws.column_dimensions[col].width = width\n\nfor row in ws.iter_rows(min_col=3, max_col=7, min_row=3):\n    row[0].number_format = 'yyyy-mm-dd'\n    row[2].number_format = '#,##0'\n    row[3].number_format = '#,##0'\n    row[4].number_format = '0.0%'\n\nwb.save('商品リスト_表示形式変更.xlsx')\n```\n\n入荷日の列幅を変更しないとちゃんと表示してくれなかったので\nついでに他の列幅も変更しちゃいました。\n\n表示形式を変えるときは注意しないといけないですね。\n","user":"rihu-do","created_at":"2021-03-28T20:25:33+09:00","updated_at":"2021-03-28T20:25:33+09:00"},{"url":"https://qiita.com/dai_engineer/items/53b767969313f7a57cf4","title":"MySQLユーザー作成〜権限付与まで","body":"# はじめに\n\nMySQLインストール後、ユーザー作成から権限付与までをよく忘れるので記載します。\n\n# 実行環境\nOS:CentOS7\nMySQLバージョン:5.6・5.7\n\n#ユーザー作成\n`mysql -u root`でrootでMySQLコマンドラインに入る。\n※パスワード設定済みであれば「-p」オプションを追加。\n\n```MySQL:\nmysql> CREATE USER 'username'@'hostname' IDENTIFIED BY 'password';\n```\n`username`や`hostname`は、必ずしも引用符で囲む必要はないよう。\nただ、特殊文字やワイルドカード文字 (「%」など) を含む場合には引用符が必要なため、`password`含めて3点セットで囲んでおくのが無難な気はします。\n\n# 権限付与\n作成したユーザーに権限を付与する。付与する権限とそのレベルによって構文が変わります。\n\n1.グローバル権限\n\n特定のサーバー上の全てのデータベースに適用される。`GRANT ○○ ON *.* TO`構文を利用。\nサンプルの`ALL`、`SELECT`や`INSERT`の部分は付与したい権限に応じて変更します。\n\n```Mysql:サンプル\nmysql> GRANT ALL ON *.* TO 'username'@'hostname';\nmysql> GRANT SELECT, INSERT ON *.* TO 'username'@'hostname';\n```\n\n2.データベース権限\n\n特定のデータベース内のすべてのオブジェクトに適用。`GRANT ○○ ON db_name.* TO`構文を利用。\n\n```Mysql:サンプル\nmysql> GRANT ALL ON db_name.* TO 'username'@'hostname';\nmysql> GRANT SELECT, INSERT ON db_name.* TO 'username'@'hostname';\n```\n\n3.テーブル権限\n\nDB内の特定のテーブルのカラム全てに適用。`GRANT ○○ ON db_name.tbl_name TO`構文を利用。\n\n```Mysql:サンプル\nmysql> GRANT ALL ON db_name.tbl_name TO 'username'@'hostname';\nmysql> GRANT SELECT, INSERT ON db_name.tbl_name TO 'username'@'hostname';\n```\n\n4.カラム権限\n特定テーブル内の単一カラムに適用。各権限のあとに、括弧で囲まれた1つ以上のカラムを指定する。\n構文は`GRANT ○○ (col1), ○○ (col1, col2) ON db_name.tbl_name TO`のようになる。\n\n```Mysql:サンプル\nmysql> GRANT SELECT (col1), INSERT (col1,col2) ON db_name.tbl_name TO 'username'@'hostname';\n```\n\n\n# 権限付与結果の確認\n以下で登録されたユーザーおよび権限設定を確認する\n\n```mysql:ユーザー確認\nmysql> select user, host from mysql.user;\n```\n\n```mysql:権限確認\nmysql> show grants for 'username'@'hostname'\n```\n\n# 最後に\nいまいちな理解の部分もあったのですが公式を参照したらちゃんと書いてありました。\nやはり公式をしっかりと見るのが大事なようです。\n\n# 参考ページ\nhttps://dev.mysql.com/doc/refman/5.6/ja/grant.html#grant-global-privileges\nhttps://qiita.com/shuntaro_tamura/items/2fb114b8c5d1384648aa\n","user":"dai_engineer","created_at":"2021-03-28T20:21:40+09:00","updated_at":"2021-03-28T20:21:40+09:00"},{"url":"https://qiita.com/Atris0/items/4bb701194ec0793cf508","title":"初めてのPython学習-基礎①-","body":"#はじめに\nProgateを用いて、初めてPythonの学習をしてみました。\nProgateやり終えたあとのゴールは店舗売上の要因分析自動的に行うオリジナルアプリの開発です。\n\n\n#この記事でアウトプットする内容\nProgate Python1\n\n#目次\n1.データ出力の仕方\n2.変数\n3.条件分岐\n4.入力を受け取る\n\n\n##データ出力の仕方\n###**▼データ出力とは**\nコンソールにコーディングした内容で画面に表示させたい情報を表示させる\n\n###**▼方法**\n\n```\nprint(\"文字列\")\n```\n\n\"\"で囲むと文字列として判別\n\"\"がなければ数値（演算ができる）\n\n###**▼演算子**\n+足し算\n-割り算\n*掛け算\n/割り算\n%割り算のあまり\n\n計算ができる\n\n#変数\n###**▼変数**\nデータを入れておく箱\n\n###**▼変数名**\n箱に付ける名前\n\n###**▼変数の定義**\n変数名 = 値\n※「=」は、等しいではなく「右辺を左辺に代入する」という意味\n\n```\nname = 'john'\nprint(name)・・・johnが出力\nprint('name')・・・「name」という文字列が出力`\n```\n\n\n###**▼変数名を決める際のルール**\n◎英単語を用いる\n◎2語以上の場合はアンダーバーで区切る\n\n×変数名が数字開始\n×ローマ字\n×日本語\n\n###**▼変数の値の更新**\n変数名に新しい値を定義することで変数の値を上書きできる（出力結果を変えられる）\n\n省略した書き方（予め定義した変数を後で変更する場合）\nx = x + 10  ->   x += 10\nx = x - 10  ->   x -= 10\nx = x * 10  ->   x *= 10\nx = x / 10  ->   x /= 10\nx = x % 10  ->   x %= 10\n\n\n###**▼文字列の連携**\n演算子は文字列の連携を行うことも出来るが\n\n```\nmy_name = 'john'\nprint('My name is' + my_name + '.')\n```\n\nデータ型の異なる文字列型と数値方との連結はできない\n\n```\nage = 25\nprint('私の年齢は' + age + '歳です。')　→異なる型同士のため連結不可\n```\n\n型変換をする必要がある\n\n```\nage = 25\nprint('私の年齢は' + str(age) + '歳です。')　→文字列に変換したため、文字列型同士で同じとなり連結が可能となる\n```\n\n###**▼型の変換**\n\n```\n数値型→文字列型：str(変数名)\n文字列型→数値型：int(変数名)\n```\n\n\n#条件分岐\n**想定する結果によって動かすプログラム（処理）を変えることが出来る**\n\nif\n「もし〜〜ならば◯◯を行う」\n\nelif\n「if文が成り立たなかった場合■■を行う」\n\nelse\n「ifにもelifにも当てはまらない場合は××を行う」\n\n\n```\n（例）\nscore = 70\nif score == 100: <-条件式が成り立つ\n    print('よくできました！')  -> インデントを下げないと判別されない\n\nelif score >= 60:\n    print('まずまずです')\n\nelse:\n    print('頑張りましょう')\n```\n\n\n->この場合「まずまずです」が出力される。\n**※条件式が成立したら、それ以降の処理は実行されない**\n\n\n###**▼比較演算子**\nx == y  →左右の値が等しいとき成り立つ\nx != y　→左右の値が等しくないとき成り立つ\nx < y　→右辺のほうが大きい場合に成り立つ\nx <= y　→右辺が左辺以上の場合に成り立つ\nx > y　→左辺のほうが大きい場合に成り立つ\ny >= y　→右辺が左辺以下の場合に成り立つ\n\n###**▼真偽値**\nTrue→条件式が成り立つとき\nFalse→条件式が成り立たないとき\n\n###**▼条件式の組み合わせ**\n「条件1も条件2も成り立つ」のような場合は「and」を用いる\n※全ての条件式がTrueの場合に全体がTrueとなる\n※比較を連結すればandを記載せずとも書くことができる\n\n```\n（例）\nif time > 10 and time < 18:\nif 10 < time < 18:\n```\n\n\n「条件1もしくは条件2が成り立つ」のような場合は「**or**」を用いる\n※複数の条件式のうち1つでもTrueの場合に全体がTrueとなる\n\n「条件の否定をしたい」場合は「**not**」を用いる\n※条件式が「True」であれば全体が「False」に。「False」であれば「True」となる\n\n組み合わせると・・・\n\n```\nbook = 10\nbook_price = 2000\ntotal_price = book * book_price\n\nif book == 10\n    print(\"本を\" + str(book) + \"冊買いました\")\n    print(\"価格は\" + str(total_price) + \"円です\")\n```\n\n#入力を受け取る\n**input**\n\ninputを用いるとコードを実行した際にコンソールに文字を入力出来るようになる。\n\n```\n変数名 = input('コンソールに表示させる文字列')\n```\n\n※inputで受け取った段階では文字列型で受け取っている→数値として扱いたいなら、型変換を用いてint型に変更する\n\n```\n（例）\nunit_price = 10000\ninput_count = input('客数を入れてください：')\nclient = int(input_count)\n\ntotal_price = unit_price * client\n\nprint('今日の売上は' + total_price + '円です')\n```\n","user":"Atris0","created_at":"2021-03-28T20:21:38+09:00","updated_at":"2021-03-28T21:36:17+09:00"},{"url":"https://qiita.com/MH35JP/items/11a856ecce85ab92352c","title":"PHPerKaigi2021で学んだセッション管理について","body":"PHPにおいて、セッションを使うには、このように使うのが一番簡単。\n\n```php:index.php\n<?php\nsession_start();\n// セッションにはSerialize可能なものなら文字列に限らず入れられる\n$_SESSION['SESSION_DATA_KEY'] = 'SESSION_DATA_VALUE';\n```\n\nデフォルトでは、セッションはファイルに保存される。だが、それは何を意味するかというと、複数サーバをロードバランサでバランシングしている場合、振り分け先のサーバによっては、セッション管理に失敗する、ということだ。であるから、それに対しての対策が必要となる。\n\n## ロードバランサのSticky Sessionを利用する\n\n姑息的な対応として、ロードバランサのSticky Sessionを用いるという手段がある。例えば、Amazon AWSでALBを使う場合、それを有効にすれば良い。だが、ルーティングアルゴリズムを上書きしてしまうため、振り分けしか行わない場合に実質的に限られる。他にも様々な問題が発生する。\n\n## Cookieにセッションをもたせる\n\n結構邪道であるが、このような手段で回避することも可能である。ただしこれを行う場合、セッションデータが極めて小さいこと、セッションデータに機密情報が含まれていないことを担保する必要がある。\n\n## データベースを用いてセッションを管理する\n\nデータベースでセッションを管理すると、新たにサーバを借りることなく、セッションを管理することが可能になる。では、どのように管理するか見ていくことにしよう。\n\n今回は話を簡単にするために、mysqliを用いることにする。また、MySQLのバージョンは5.6以降とする。\n\n```php:session_manager.php\n<?php\n/* 参考URL\nhttps://www.keicode.com/cgi/save-session-in-mysql.php\n*/\nclass DbSessionHandler implements SessionHandlerInterface {\n    public function __construct($db, $table_name = 'sessions') {\n        $this->db = $db;\n        $this->table_name = $table_name;\n        $this->db->query('CREATE TABLE IF NOT EXISTS `' .\n            $table_name . '` (' .\n            '`session_id` VARCHAR(255) NOT NULL PRIMARY KEY, ' .\n            '`session_data` LONGTEXT, ' .\n            '`session_updated` BIGINT NOT NULL DEFAULT 0' .\n            ') CHARACTER SET utf8mb4 Engine=InnoDB');\n    }\n    public function open($path, $name) {\n        return true;\n    }\n    public function close() {\n        return true;\n    }\n    public function read($id) {\n        $result = '';\n        $stmt = $this->db->prepare('SELECT `session_data` FROM `' .\n            $this->table_name . '` WHERE `session_id` = ?');\n        if (!$stmt) {\n            return '';\n        }\n        $stmt->bind_param('s', $id);\n        $stmt->bind_result($result);\n        $stmt->execute();\n        $stmt->fetch();\n        $stmt->close();\n        return $result;\n    }\n    public function write($id, $data) {\n        $stmt = $this->db->prepare('INSERT INTO `' .\n            $this->table_name . '` (`session_id`, ' .\n            '`session_data`, `session_updated`) ' .\n            'VALUES (?, ?, ?) ' .\n            'ON DUPLICATE KEY UPDATE `session_data` = ?, ' .\n            '`session_updated` = ?');\n        if (!$stmt) {\n            return false;\n        }\n        // timeはUNIXタイムスタンプを返すのでタイムゾーン非依存\n        $cur_time = time();\n        $stmt->bind_param('ssisi', $id, $data, $cur_time, $data,\n            $cur_time);\n        $stmt->execute();\n        $ret = ($stmt->affected_rows > 0);\n        $stmt->close();\n        return $ret;\n    }\n    public function destroy($id) {\n        $stmt = $this->db->prepare('DELETE FROM `' .\n            $this->table_name . '` WHERE `session_id` = ?');\n        if (!$stmt) {\n            return true;\n        }\n        $stmt->bind_param('s', $id);\n        $stmt->execute();\n        $stmt->close();\n        return true;\n    }\n    public function gc($max_lifetime) {\n        $th_time = time() - $max_lifetime;\n        $stmt = $this->db->prepare('DELETE FROM `' .\n            $this->table_name . '` WHERE `session_updated` < ?');\n        if (!$stmt) {\n            return 0;\n        }\n        $stmt->bind_param('i', $th_time);\n        $stmt->execute();\n        $ret = $stmt->affected_rows;\n        $stmt->close();\n        return $ret;\n    }\n}\n// 接続パラメータを適宜調整する\n$db = new mysqli();\n$handler = new DbSessionHandler($db);\nsession_set_save_handler($handler);\nsession_start();\n// 以下、セッションを実際に操作する\n```\n\n(動作は記事投稿後に確認済み。2021年3月28日21時ごろ修正)\n\nだいたいこんな感じである。これにより、そこそこ大きな規模まで耐えられるようになるのだが、必ず初期化するときにハンドラセットを呼び出すことを担保する必要がある。それを怠るとうまく動作しない。また、専用に作られたセッション管理ではないのでその点が弱かったりする。\n\n## memcachedを用いる\n\npeclでmemcachedを入れた上で、\n\n```ini:php.ini\nsession.save_handler = memcached\nsession.save_path = host:port\n```\n\nと指定してあげるだけでセッションの設定は完了である。あとは通常の呼び出しと同じフローで実行可能である。\n\nなんと言ってもキャッシュに特化したエンジンを使うので非常に強い。大規模であれば間違いなくこれを採用すべきだろう。ただし、お値段も相応にする。Amazon AWSで本番環境用にm系インスタンスを借りる場合、cache.m6g.largeというインスタンスで1時間あたり0.191ドルという目玉が飛び出るほどの価格になる(1ヶ月744時間稼働させると税抜き142.104ドルほどかかり、2021年3月28日時点の相場を適用すると1ヶ月税込みで17000円ほどになってしまう)。\n\nなので、多くのアクセスが見込まれるサイト以外では導入するのは難しいだろう。\n\n## セッションCookieの取り扱いにあたっての注意事項\n\nセッションのCookieは、デフォルトでは`PHPSESSID`という名前のCookieで格納される。また、ほとんどのパラメータはデフォルトで最低限動くようにしか入らないため、このように設定することできちんと動くようになるはずである。\n\n```php:index.php\n// Cookie名を変更する場合\nsession_name('COOKIENAME');\n// Cookieのパラメータを変更する場合(PHP7.3以降用)\nsession_set_cookie_params(array(\n    'lifetime' => 0,\n    'path' => '/',\n    'domain' => 'domain.tld',\n    'secure' => true,\n    'httponly' => true,\n    'samesite' => 'Strict' \n));\n// Cookieのパラメータを変更する場合(PHP7.2以前用)\nsession_set_cookie_params(0, '/', 'domain.tld', true, true);\nsession_start();\n```\n\n## 結論\n\nロードバランサを導入することを念頭に置くなら、セッション管理はきちんと考えよう。\n","user":"MH35JP","created_at":"2021-03-28T20:20:33+09:00","updated_at":"2021-03-28T22:09:54+09:00"},{"url":"https://qiita.com/kk-icare/items/b3aca446c24e89e018c4","title":"Rails APIモード + devise_token_auth + Vue.js 3 で認証機能付きのSPAを作る(Vue.js編 その2)","body":"# はじめに\n本記事はAPIをRailsのAPIモードで開発し、フロント側をVue.js 3で開発して、認証基盤にdevise_token_authを用いてトークンベースの認証機能付きのSPAを作るチュートリアルのVue.js編の記事(その2)になります。\n\nRails側のチュートリアルを終わらせてからこちらのチュートリアルに取り組まれることを推奨します。\n\nRails編はこちら\nhttps://qiita.com/kk-icare/items/c4cd040824c7d6b434d6\n\nVue.js編その1はこちら\nhttps://qiita.com/drafts/401114a1284f8e9ca135\n\n# 環境\nVue.js 3.0.5\nVue CLI 4.5.9\nnpm 6.14.8\nnode 14.15.0\nTypeScript 3.9.7\nTailwindCSS\n\n# TailwindCSSの導入\n\nスタイルが全く当たらないのは味気ないので、今流行りのTailwindCSSを導入したいと思います。\n\n下記公式ドキュメントに沿って導入を進めます。\n\nhttps://tailwindcss.com/docs/guides/vue-3-vite\n\nただ2021年３月27日の時点だと、Doc通り導入を進めても、npn run serveした時に以下のエラーが出て\n正しく起動できないようです。\n\n```\nSyntax Error: Error: PostCSS plugin tailwindcss requires PostCSS 8.\nMigration guide for end-users:\nhttps://github.com/postcss/postcss/wiki/PostCSS-8-for-end-users\n```\n\nなので、npm installは以下のコマンドを実行してください。\n\n```terminal\nnpm install -D tailwindcss@npm:@tailwindcss/postcss7-compat@2.0.3 postcss@7.0.35 autoprefixer@9.8.6\n```\n\n[サンプルのプロジェクトに導入した際のコミットはこちら](https://github.com/keisuke-koshikawa/sample-front/commit/c829eb8601a6f9213ad3d040ab296140c4969e90)ですので、導入に詰まったらご参考ください。\n\n\n\n# 新規投稿画面の作成\n\nまずは新規投稿画面から作成します。\n\n## src/views/NewPost.vueの作成\n\n以下コマンドを実行して下さい。\n\n```\n$ touch src/views/NewPost.vue\n```\n\n出来上がったファイルを以下のように編集します。\n\n```vue\n<template>\n  <div class=\"flex items-center h-screen w-full bg-teal-lighter\">\n    <div class=\"w-full bg-white rounded shadow-lg p-8 m-4\">\n      <h1 class=\"block w-full text-center text-grey-darkest mb-6\">New Post</h1>\n      <div class=\"flex flex-col mb-4\">\n        <label class=\"mb-2 font-bold text-lg text-grey-darkest\" for=\"title\">Title</label>\n        <input v-model='title' class=\"border py-2 px-3 text-grey-darkest\" type=\"text\" name=\"first_name\" id=\"first_name\">\n      </div>\n      <div class=\"flex flex-col mb-4\">\n        <label class=\"mb-2  font-bold text-lg text-grey-darkest\" for=\"body\">Body</label>\n        <textarea v-model='body' class=\"border py-2 px-3 text-grey-darkest\" name=\"body\" id=\"body\"></textarea>\n      </div>\n      <button @click='handleCreatePost()' class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 uppercase text-lg mx-auto rounded\" type=\"submit\">Create Post</button>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { createPost } from '@/api/post'\nimport router from '@/router'\nimport { defineComponent, reactive, toRefs } from 'vue'\n\nexport default defineComponent({\n  name: 'NewPost',\n  setup () {\n    const postData = reactive({\n      title: '',\n      body: ''\n    })\n\n    const handleCreatePost = async () => {\n      await createPost(postData)\n        .then(() => {\n          router.push('/')\n        })\n    }\n\n    return {\n      ...toRefs(postData),\n      handleCreatePost\n    }\n  }\n})\n</script>\n\n<style scoped></style>\n```\n\n解説を入れていきます。\n\n```vue\n<template>\n  <div class=\"flex items-center h-screen w-full bg-teal-lighter\">\n    <div class=\"w-full bg-white rounded shadow-lg p-8 m-4\">\n      <h1 class=\"block w-full text-center text-grey-darkest mb-6\">New Post</h1>\n      <div class=\"flex flex-col mb-4\">\n        <label class=\"mb-2 font-bold text-lg text-grey-darkest\" for=\"title\">Title</label>\n        <input v-model='title' class=\"border py-2 px-3 text-grey-darkest\" type=\"text\" name=\"first_name\" id=\"first_name\">\n      </div>\n      <div class=\"flex flex-col mb-4\">\n        <label class=\"mb-2  font-bold text-lg text-grey-darkest\" for=\"body\">Body</label>\n        <textarea v-model='body' class=\"border py-2 px-3 text-grey-darkest\" name=\"body\" id=\"body\"></textarea>\n      </div>\n      <button @click='handleCreatePost()' class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 uppercase text-lg mx-auto rounded\" type=\"submit\">Create Post</button>\n    </div>\n  </div>\n</template>\n```\n\ntemplate部分はTailwindCSSを当てて、最低限の見た目を整えています。\ninputタグにはv-modelディレクティブにtitleとbodyを指定し、templateとscript側で双方向データバインディングを行っています。\nbuttonタグには@clickにhandleCreatePost関数を指定し、ボタンがクリックされたら関数が呼ばれるようにしています。\n\n```vue\n<script lang=\"ts\">\nimport { createPost } from '@/api/post'\nimport router from '@/router'\nimport { defineComponent, reactive, toRefs } from 'vue'\n\nexport default defineComponent({\n  name: 'NewPost',\n  setup () {\n    const postData = reactive({\n      title: '',\n      body: ''\n    })\n\n    const handleCreatePost = async () => {\n      await createPost(postData)\n        .then((data) => {\n          console.log(data)\n        })\n    }\n\n    return {\n      ...toRefs(postData),\n      handleCreatePost\n    }\n  }\n})\n</script>\n```\n\ncreatePost関数は後ほど定義しますが、引数としてフォームの値を受け取って、POSTリクエストを送る関数になっています。\nrouterは新規作成の成功した後にページ遷移をしたいのでimportしています。\nあとはCompositionAPIを使うために各種関数をimportしています。\n\ntitleとbodyはreactive関数でリアクティブな値にし、toRefs関数で分割して定義するようにしています。\n\nhandleCreatePost関数はcreatePost関数をコールする関数として定義し、template内で使えるようにreturn節に記載しています。\n\nsrc/router/index.tsも編集します。\n\n```javascript\nimport Login from '@/views/Login.vue'\nimport NewPost from '@/views/NewPost.vue' // 追加\n\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  // 以下を追加\n  {\n    path: '/posts/new',\n    name: 'NewPost',\n    component: NewPost\n  },\n```\n\n## src/api/post.tsの作成\n\nPOSTリクエストをAPIに投げる関数を定義していきます。\n\n以下コマンドを実行してください。\n\n```terminal\n$ touch src/api/post.ts\n```\n\n作成したファイルを以下のように編集します。\n\n```typescript\nimport Client from '@/api/client'\nimport {\n  getAuthDataFromStorage\n} from '@/utils/auth-data'\n\nexport const createPost = async (formData: any) => {\n  return await Client.post(\n    '/posts', formData,\n    {\n      headers: getAuthDataFromStorage()\n    }\n  )\n    .then((response) => {\n      return response.data\n    })\n    .catch((e) => {\n      return e\n    })\n}\n\n```\n\nClient.postでAPIに対してformData付きでリクエストを送信できるようにしています。\n通信に成功した場合はレスポンスからdataを抜き出して返却し、失敗した場合はエラーを返すようにしています。\n\nこの状態でAPI側のサーバーを起動して動作確認を行ってみます。\n\n![スクリーンショット 2021-03-28 19.44.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/92e8d217-ead4-16b8-109d-0a2abbbc761b.png)\n\nlocalhost:8080/posts/newにアクセスし、フォームに値を入力した状態でCREATE POST ボタンを押すと、\n\n通信に成功すればコンソールにAPIから返却されたデータが表示されます。\n\n![スクリーンショット 2021-03-28 19.44.38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/7c7ee15c-1156-5dda-7b87-fd49a14fe6c6.png)\n\nこのデータを次の項で作成する投稿一覧画面に表示したいと思います。\n\n# 投稿一覧画面の作成\n\n## Post.vueの作成\n\n以下のコマンドを実行してください。\n\n```terminal\n$ touch src/views/Post.vue\n```\n\n作成されたファイルを以下のように編集してください。\n\n```vue\n<template>\n  <div class=\"grid grid-cols-3 gap-1\">\n    <AppPost :post=\"post\" v-for=\"(post, index) in posts\" :key=\"index\" />\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, onMounted, ref } from 'vue'\nimport AppPost from '@/components/AppPost.vue'\nimport { getPosts } from '@/api/post'\n\nexport default defineComponent({\n  name: 'Post',\n  components: {\n    AppPost\n  },\n\n  setup () {\n    const posts = ref([] as any[])\n    const onGetPosts = async () => {\n      await getPosts()\n        .then((data) => {\n          posts.value = data\n        })\n        .catch((error: Error) => {\n          console.info(error.message)\n          alert('原因不明のエラーが発生しました。リロードすることで解決することがあります。')\n        })\n    }\n\n    onMounted(() => {\n      onGetPosts()\n    })\n\n    return {\n      posts\n    }\n  }\n})\n</script>\n\n```\n\nAppPostは後に定義するコンポーネントです。\n\nPost.vueの仕事は、\n\n1. APIと通信してデータを取ってくる\n2. 取ってきたデータを子コンポーネントに渡す\n\nの2つの仕事を担います。\n\n実際にAPIを叩く処理は、post.tsに定義し、\n\n```javascript\nimport { getPosts } from '@/api/post'\n```\n\nという形でimportして用います。\n\nPostの表示も子コンポーネントに委任しています。\n\nコンポーネントがマウントされたタイミングでAPIと通信したいので、onMountedでAPIを叩く関数(onGetPosts)をコールするようにしています。\n\nonGetPostsは、post.tsに定義されたgetPosts関数をコールして、レスポンスのデータをRef型で定義されたposts変数に格納するようにしています。\n\n## post.tsの拡張\n\n次にgetPosts関数をsrc/api/post.tsに定義します。\n\n```typescript\nimport Client from '@/api/client'\nimport {\n  getAuthDataFromStorage\n} from '@/utils/auth-data'\n\n// 以下を追加\nexport const getPosts = async () => {\n  return await Client.get('/posts', { headers: getAuthDataFromStorage() })\n    .then((response) => {\n      return response.data\n    })\n}\n\n// ここまで\n\nexport const createPost = async (formData: any) => {\n  return await Client.post(\n    '/posts', formData,\n    {\n      headers: getAuthDataFromStorage()\n    }\n  )\n    .then((response) => {\n      return response.data\n    })\n    .catch((e) => {\n      return e\n    })\n}\n```\n\nClient.getでAPIに対してGETリクエストを送るようにしています。\n通信に成功した場合、レスポンスのデータを取り出して返却するようにしています。\n\n## src/components/AppPost.vueの作成\n\n次に、AppPost.vueを作成します。\n\n以下のコマンドを実行してください。\n\n```\n$ touch src/components/AppPost.vue\n```\n\n作成されたファイルを以下のように編集します。\n\n```vue\n<template>\n  <div class=\"rounded overflow-hidden shadow-lg mt-8 pt-8 mr-8\">\n    <div class=\"font-bold text-xl mb-2\">{{post.title}}</div>\n    <p class=\"text-grey-darker text-base\">\n      {{ post.body }}\n    </p>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent } from 'vue'\n\nexport default defineComponent({\n  name: 'AppPost',\n  props: {\n    post: {\n      type: Object,\n      required: true\n    }\n  }\n})\n</script>\n\n<style scoped>\n\n</style>\n\n```\n\npropsで渡ってきたpostをdefineComponent内で定義します。\nこの辺りはOptionsAPIと大きな変化はないのかなと思います。\n\nあとは渡ってきたpropsをtemplate内で表示するだけです。\n\n## src/router/index.tsの編集\n\n一覧画面のルーティングを追加します。\n\n```javascript\nimport NewPost from '@/views/NewPost.vue'\nimport Post from '@/views/Post.vue' // 追加\n\n省略\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login\n  },\n  // ここから追加\n  {\n    path: '/posts',\n    name: 'Post',\n    component: Post\n  },\n  // ここまで\n```\n\nここまでできたら、一通り動作の確認をしてみましょう。\n\nlocalhost:8080/postsにアクセスしてみます。\n\n![スクリーンショット 2021-03-28 20.13.03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/b04d89ce-c2ac-fc42-c3bb-4b7b22a596e4.png)\n\n先ほど投稿したPostが表示されていれば成功です。\n\nあとは、NewPost.vueでconsole.logとしていた部分を修正します。\n\n```javascript\n    const handleCreatePost = async () => {\n      await createPost(postData)\n        .then((data) => {\n          router.push('/posts')\n        })\n    }\n```\n\n# まとめ\n\nこれで、ログイン & 投稿機能が出来上がったかと思います。\n\n次回は更に機能の拡張を行っていきたいと思います。\n","user":"kk-icare","created_at":"2021-03-28T20:16:22+09:00","updated_at":"2021-03-28T20:25:46+09:00"},{"url":"https://qiita.com/House-lovers7/items/71b11785d784fbccd70f","title":"cancancanの権限設定方法と使い方","body":"Railsのポートフォリを作成する時にcancancanというgemを使いましたが、参考になる記事が少なかったので備忘録をかねて記録を残します。\n\n##初期設定(Gemのインストールとモデル作成)\n\n```Ruby:初期設定(Gemのインストールとモデル作成)\ngem 'cancancan' #Gemfileに設定する。\n\nbundle install  #Gemをインストールする。\n\nrails g cancan:ability #ターミナルに打ち込んでモデルを作成する。\n```\nすると\napp/modelsability.rbが作成されます。\n\n##権限の定義方法\n\n本家のサイトにサンプル例が載っています。\n\nhttps://github.com/CanCanCommunity/cancancan/blob/develop/docs/Defining-Abilities.md\n\n\n権限は下記の5つがあり、主にCRUD関係の権限です。\n\n```Ruby:基本の権限の理解\n\nread: フロントのビュー画面表示\n\ncreate: データの作成\n\nuodate: データの更新\n\ndestroy: データの削除\n\nmanage: 全ての権限\n\n```\n\n\n```Ruby:書き方のイメージ\n\ncan 権限, モデル名\n\n#または\n\ncannnot 権限, モデル名\n\n```\n\nでモデルに権限を与えていきます。詳しくは下記を参考にしてください。\n\n\n```Ruby:権限の定義の方法サンプル例\n\nclass Ability\n  include CanCan::Ability\n  def initialize(user)\n    can :read, :all # ログインしていないユーザーも含め全てのユーザーへの権限を与える    \n    if user.present?  # ログインしているユーザーに対して権限を与えるための条件分岐\n      can :manage, Post, user_id: user.id \n      if user.admin?  # adminに対して権限を与えるための条件分岐\n        can :manage, :all\n      end\n    end\n  end\nend\n```\n\n***できる権利***\n***できない権利***\nそれぞれを上に重ねていって権限を与えていくイメージです。\n**下の階層に行けば行くほど、多くの権限が与えられる書き方になります。**\nとなると、adminを全ての権限を持つので1番下にくる流れになることがわかります。\n基本は、canで権限を与える。\n**managae**権限や全ての権限対象**all**で与えすぎてしまって分はcannnotでマイナスするイメージです。\n最後に適応された権限が有効になるようです。\n\n\nTBDです。\n","user":"House-lovers7","created_at":"2021-03-28T20:15:50+09:00","updated_at":"2021-03-28T20:23:03+09:00"},{"url":"https://qiita.com/oktaSI/items/ec23f1057cf056114465","title":"【GAS】年間行事予定表を1年間分まとめてカレンダーに書き込む","body":"学校の年間行事予定表を１年間分まとめてカレンダーへ書き込むGASです。\n\nGoogleが指定するcsv形式で予め作成した予定一覧をカレンダーのインポート機能を使って読み込めば、カレンダーに予定をまとめて書き込むことはできるのですが、それも億劫になってきたので今回GASで一気に書き込めるようにしました。\n\nごく初歩的な機能だけで十分なため、GASプログラミング未経験者にも理解しやすいコードだと思います。\n\n## 特徴\n\n- １年間分まとめてカレンダーへ書き込める。\n- 特定の日に複数の行事がある場合には行事1と行事2に分けて入力することにより、同日最大2つまで行事を書き込むことができる。\n- 行事は全て全日扱いで書き込む。\n- 各学校毎に行事予定表のレイアウトが違っても、ダウンロードしたシートに適切にマッピングさせれば幅広く対応可能。\n\n## 簡単な使い方\n1. [年間行事予定表toカレンダー（公開用）](https://bit.ly/2PcR8e6)をクリックし、コピーをドライブ上へ作成\n2. シートの中で変更して良いのは背景が灰色の部分（年度、行事）のみ。行事の入力が済んだら、メニューバーの「ツール」->「スクリプトエディタ」を開く。※ ここで別シートに各学校毎のカレンダーを貼り付けておき、対応するデータをマッピングさせておけば毎年の更新作業が楽です。\n3. 13行目のカレンダーIDを年間行事予定表を書き込みたいカレンダーのカレンダーIDへ変更して保存。カレンダーIDの場所は例えば、[カレンダーの種類やアドレスを確認する方法](https://support.gluegent.com/hc/ja/articles/206261502-カレンダーの種類やアドレスを確認する方法について教えてください-)\nを参照のこと。\n\n4. 実行ボタンを押すと、GASが各種アプリケーションに対する追加の権限を求めてくるので承認する。左下の「詳細を表示」を押すと、以下の画面になるので「YearScheduleForStudents(public)（安全ではないページ）に移動」をクリックして先に進めば良い。\n\n![承認画面.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/558740/680bc2be-a1ff-7ddf-8ccc-063c5796bdd4.png)\n5. スプレッドシートに戻り、新たに出来たメニューバーの「toCalendar」->「カレンダーへ出力」を実行。\n6. 確認ウィンドウが表示されるので問題なければ「OK」で指定したカレンダーへ行事予定表が書き込まれる。\n7. 実行中にエラーが発生した場合、ウィンドウにエラーの詳細が表示され実行が止まる。\n\n```javascript:コード.gs\nfunction onOpen() {\n const ui = SpreadsheetApp.getUi();\n const menu = ui.createMenu(\"toCalendar\");\n menu.addItem(\"カレンダーへ出力\", \"myFunction\");\n menu.addToUi();\n}\n\nfunction myFunction() {\n  const ss = SpreadsheetApp.getActiveSpreadsheet();\n  const sheet = ss.getSheetByName('年間行事予定表');\n  const range = sheet.getDataRange().getValues();\n\n  const id = 'カレンダーID'\n  const calendar = CalendarApp.getCalendarById(id);\n  const days = [];\n\n  // イベント作成時にアイドル時間を作らないとGASが止まる。アイドル時間の200に根拠はない\n  const THROTTLE_SLEEP_TIME = 200;\n\n  // 日付を作成\n  for(let i = 1; i < 276; i++){\n    days.push(`${range[0][0]}/${range[i][0]}/${range[i][1]}`);\n  }\n  for(let i = 276; i < 367; i++){\n    days.push(`${parseInt(range[0][0])+1}/${range[i][0]}/${range[i][1]}`);\n  }\n\n  range.shift();\n  let result = Browser.msgBox(\"行事予定表をカレンダーに書き込みます。\\\\n 【注意】 この操作は取り消せません！\",Browser.Buttons.OK_CANCEL);\n  if(result == \"ok\"){\n    try{\n      for(let i = 0; i < days.length; i++){\n        if(range[i][2] !== ''){\n          const date = new Date(days[i]);\n          calendar.createAllDayEvent(range[i][2], date);\n          Utilities.sleep(THROTTLE_SLEEP_TIME);\n        }\n        if(range[i][3] !== ''){\n          const date = new Date(days[i]);\n          calendar.createAllDayEvent(range[i][3], date);\n          Utilities.sleep(THROTTLE_SLEEP_TIME);\n        }\n      }\n    }catch(e){\n      Browser.msgBox(e);\n    }\n  }\n}\n```\n## 補足（THROTTLE_SLEEP_TIMEについて）\n\nどうもGAS実行時に意図的にアイドル時間(THROTTLE_SLEEP_TIME)を作らないと1日あたりの割り当て（カレンダーイベント作成数：無料アカウント5000個、G Suite Basic以上10000個）以内であるにも関わらずエラーで止まってしまいます。勤務校の行事予定表はTHROTTLE_SLEEP_TIME=200(ミリ秒）で問題なく動きましたが、この数値はイベント数次第です。新たに作成するイベントが少なければ0ミリ秒でもエラーが起こらないこともあります。実行時に\n>You have been creating or deleting too many calendars or calendar events in a short time. Please try again later.\n\nあるいはこの日本語訳が表示されたら、スクリプトエディタで18行目のTHROTTLE_SLEEP_TIMEの値を調整してみて下さい。\n\nこれに関しては現状、スクリプト実行時間の6分制限を意識しながら調整するしかなさそうです。\n","user":"oktaSI","created_at":"2021-03-28T20:13:49+09:00","updated_at":"2021-03-28T20:18:52+09:00"},{"url":"https://qiita.com/bmb/items/8f844cdb357239e0307e","title":"Androidで\"storage/emulated/0/\"直下にアクセスしてファイルを保存","body":"#はじめに\nandroidでファイルを保存したいとき、ユーザーがアクセス可能なルートディレクトリ（\"storage/emulated/0/\"）に保存すると何かと便利。\nそこでファイルアクセス方法を調べてみた。\n\n#現在は非推奨\n以前（Android10以前）ではEnvironment.getExternalStorageDirectory()を使用して外部パブリックストレージへのパスを取得できた。\nしかし現在では非推奨となり使用できない。\n\nhttps://nagare-it.com/115/\nhttps://nagare-it.com/121/\nhttp://blog.lciel.jp/blog/2014/02/08/android-about-storage/\n\n#推奨方法\n1. Context#getExternalFilesDir(String)\n1. MediaStore\n1. Intent#ACTION_OPEN_DOCUMENT.\n","user":"bmb","created_at":"2021-03-28T20:12:39+09:00","updated_at":"2021-03-28T20:12:39+09:00"},{"url":"https://qiita.com/DS27/items/58f05766945c63453506","title":"グラフをxkcd風に作成する","body":"* 製造業出身のデータサイエンティストがお送りする記事\n* 今回はmatplotlibでxkcd風（コミック風）にグラフを作成する機能を試してみました。\n\n##はじめに\n基本的な可視化は別の記事できちっと整理しておりますので、そちらを参照してください。\n\n* [基本的な可視化手法を整理してみた](https://qiita.com/DS27/items/59b6676e734c3d7dd604)\n\n##xkcdとは\nxkcdとは、簡単に言うとコミック風の出力する機能らしいです。詳しいことはこちらを参照してください（[xkcdとは](https://xkcd.com/)）。\n\n##xkcdを試してみる\n実装は凄い簡単です。1行だけスクリプトを追加するだけで全てのグラフがxkcd風になります。\n\n__*注意*__\n一度、jupyter notebookで実行するとずっとxkcd風になってしまいますので、戻す場合はカーネルをリセットする必要があります。\n\n追加するコードは下記です。\n\n```php\nplt.xkcd()\n```\n\n####ヒストグラム\nまずはヒストグラムを描画してみようと思います。\n\n```php\n# ライブラリーのインストール\nimport numpy as np \nimport pandas as pd\nfrom sklearn.preprocessing import StandardScaler\n\nfrom pandas.plotting import *\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nplt.xkcd()\n\nimport os\n\nfile_path = 'https://archive.ics.uci.edu/ml/machine-learning-databases/auto-mpg/auto-mpg.data'\nfile_name = os.path.splitext(os.path.basename(file_path))[0]\ncolumn_names = ['MPG','Cylinders', 'Displacement', 'Horsepower', 'Weight',\n                  'Acceleration', 'Model Year', 'Origin'] \n\ndf = pd.read_csv(\n    file_path, # ファイルパス\n    names = column_names, # 列名を指定\n    na_values ='?', # ?は欠損値として読み込む\n    comment = '\\t', # TAB以降右はスキップ \n    sep = ' ', # 空白行を区切りとする\n    skipinitialspace = True, # カンマの後の空白をスキップ\n    encoding = 'utf-8'\n) \n\n# ヒストグラム\ndf['MPG'].plot(kind='hist', bins=12)\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/743453/3db5b6a2-f749-66fa-c721-81cfa3d5db06.png)\n\n####箱ひげ図\n次は箱ひげ図を描画してみようかと思います。\n\n```php\n箱ひげ図(boxplot)\nsns.boxplot(x='Model Year', y='MPG', data=df.sort_values('Model Year'), color='cornflowerblue')\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/743453/5b672fef-6735-272a-76aa-2081f10c0222.png)\n\n####バイオリン図\n最後にバイオリン図を作成してみようと思います。\n\n```php\n# violin plot \nsns.violinplot(x='Model Year', y='MPG', data=df.sort_values('Model Year'), color='cornflowerblue')\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/743453/49a1c3f1-1aa7-1e9c-a576-c86bac89df54.png)\n\n##さいごに\n最後まで読んで頂き、ありがとうございました。\n今回は、xkcd風でグラフを作成してみました。\n少し遊び心を持った資料を作成する際には面白いですね。\n\n訂正要望がありましたら、ご連絡頂けますと幸いです。\n","user":"DS27","created_at":"2021-03-28T20:10:48+09:00","updated_at":"2021-03-28T20:10:48+09:00"},{"url":"https://qiita.com/say8/items/afef2f3ceff19231b2ae","title":"CentOS8 OpenSSL1.1.1をインストールする","body":"#0. 前提\nCentOS8でPython3.9と一緒にインストールしたpipコマンドを実行するにあたり、OpenSSL1.0.2以上のインストールが必要とのことだったので、OpenSSL1.1.1を入れた。\n\n#1. 依存関係のインストール\n事前に以下インストールを実施すること。\n\nコンパイルに必要\n\n```\n$ sudo yum install -y make gcc\n```\n\nopensslのビルドに必要\n\n```\n$ sudo yum install -y zlib-devel perl-core\n```\n\n#2.ソースコードを取得 \n以下ページからソースコードを取得\nhttps://www.openssl.org/source/\n※今回はopenssl-1.1.1h.tar.gz\n\n```\n$ sudo curl https://www.openssl.org/source/openssl-1.1.1h.tar.gz -o /usr/local/src/openssl-1.1.1h.tar.gz\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 9580k  100 9580k    0     0  6751k      0  0:00:01  0:00:01 --:--:-- 6746k\n```\n\n#3.データの解凍\n\n以下コマンドを実施しtar.gzファイルを解凍。\n\n```\n$ ls -ltr\n合計 9584\n-rw-r--r--. 1 root root 9810045 12月 5 11:15 openssl-1.1.1h.tar.gz\n$ sudo tar xvzf openssl-1.1.1.tar.gz\n```\n\n#4.opensslをソースからビルドしてインストール\n以下コマンドでopensslをソースからビルドしてインストール\n\n```\n$ sudo ./config --prefix=/usr/local/openssl-1.1.1h shared zlib\nOperating system: x86_64-whatever-linux2\nConfiguring OpenSSL version 1.1.1h (0x1010108fL) for linux-x86_64\nUsing os-specific seed configuration\nCreating configdata.pm\nCreating Makefile\n\n**********************************************************************\n***                                                                ***\n***   OpenSSL has been successfully configured                     ***\n***                                                                ***\n***   If you encounter a problem while building, please open an    ***\n***   issue on GitHub <https://github.com/openssl/openssl/issues>  ***\n***   and include the output from the following command:           ***\n***                                                                ***\n***       perl configdata.pm --dump                                ***\n***                                                                ***\n***   (If you are new to OpenSSL, you might want to consult the    ***\n***   'Troubleshooting' section in the INSTALL file first)         ***\n***                                                                ***\n**********************************************************************\n```\n\n続けて以下実行。\n\n```\n$ sudo make depend\n$ sudo make\n$ sudo make test\n$ sudo make install\n```\n\n#6.インストールされたことを確認\n\n```\n$ ls -l /usr/local/openssl-1.1.1h/\n合計 0\ndrwxr-xr-x. 2 root root  37 12月 5 11:38 bin\ndrwxr-xr-x. 3 root root  21 12月 5 11:38 include\ndrwxr-xr-x. 4 root root 159 12月 5 11:38 lib\ndrwxr-xr-x. 4 root root  28 12月 5 11:40 share\ndrwxr-xr-x. 5 root root 140 12月 5 11:38 ssl\n```\n\n#7.OpenSSLを共有ライブラリを追加する\nld.so.confを確認。ld.so.conf.d配下のファイルがincludeされていることを確認。\n\n```\n$ sudo cat /etc/ld.so.conf\ninclude ld.so.conf.d/*.conf\n```\n\nopenssl-1.1.1h.confを作成。\n\n```\n$ cat /etc/ld.so.conf.d/openssl-1.1.1h.conf\n/usr/local/openssl-1.1.1h/lib/\n```\n\nキャッシュファイルを更新。\n\n```\n$ ldconfig\n$ ldconfig -p | grep libssl\n        libssl3.so (libc6,x86-64) => /lib64/libssl3.so\n        libssl.so.1.1 (libc6,x86-64) => /usr/local/openssl-1.1.1h/lib64/libssl.so.1.1\n        libssl.so.1.1 (libc6,x86-64) => /lib64/libssl.so.1.1\n        libssl.so (libc6,x86-64) => /usr/local/openssl-1.1.1h/lib64/libssl.so\n```\n\n以下コマンドで動作確認をする。TLSv1.3に対応していることがわかる。\n\n```\n$ /usr/local/openssl-1.1.1h/bin/openssl ciphers -v | grep TLSv1.3\nTLS_AES_256_GCM_SHA384  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(256) Mac=AEAD\nTLS_CHACHA20_POLY1305_SHA256 TLSv1.3 Kx=any      Au=any  Enc=CHACHA20/POLY1305(256) Mac=AEAD\nTLS_AES_128_GCM_SHA256  TLSv1.3 Kx=any      Au=any  Enc=AESGCM(128) Mac=AEAD\n```\n\n###Python に読み込ませたいとき\nPythonにインストールしたOpensslを読み込ませる場合。\nすでに実機にPython3.9がインストールされていたため、インストールに使ったファイルを削除\n\n```\nrm -rf /usr/local/python390\n```\n\nPythonをインストール。\n\n```\n./configure --prefix=/usr/local/python390 --with-openssl=/usr/local/openssl-1.1.1h --with-ensurepip\n```\n","user":"say8","created_at":"2021-03-28T20:04:05+09:00","updated_at":"2021-03-28T22:22:42+09:00"},{"url":"https://qiita.com/tmasuyama/items/0d8b59522a0bd1859a59","title":"AWS SAM を用いて Hello World アプリケーションをデプロイしてみる","body":"AWS SAM を使ってみたいので、API Gateway 経由で Hello World メッセージを表示する Lambda を呼び出すアプリケーションを SAM でデプロイしてみます。\n\n# 前提条件\n\n- AWS アカウントの作成\n- Docker のインストール\n- AWS SAM CLI のインストール\n    - \"sam --version\" と叩いてバージョンが表示されれば OK\n\n\n# サンプルアプリケーションのダウンロード\n\nsam コマンド経由でサンプルとしてダウンロードできるアプリケーションがあるので、ダウンロードしていきます。  \nまずは下記のコマンドを入力します。\n\n```\n$ sam init\n```\n\n途中でテンプレートソース、パッケージタイム、ランタイムを選択していきます。  \nプロジェクト名は任意の名前で問題ありません。  \nここでは「hello-sam」としています。\n\n```\n$ sam init\nWhich template source would you like to use?\n        1 - AWS Quick Start Templates\n        2 - Custom Template Location\nChoice: 1\nWhat package type would you like to use?\n        1 - Zip (artifact is a zip uploaded to S3)\n        2 - Image (artifact is an image uploaded to an ECR image repository)\nPackage type: 1\n\nWhich runtime would you like to use?\n        1 - nodejs14.x\n        2 - python3.8\n        3 - ruby2.7\n        4 - go1.x\n        5 - java11\n        6 - dotnetcore3.1\n        7 - nodejs12.x\n        8 - nodejs10.x\n        9 - python3.7\n        10 - python3.6\n        11 - python2.7\n        12 - ruby2.5\n        13 - java8.al2\n        14 - java8\n        15 - dotnetcore2.1\nRuntime: 9\n\nProject name [sam-app]: hello-sam\n```\n\nここまで入力したら、自動で GitHub からテンプレートがローカルにダウンロードされてきます。  \n最後にテンプレートを選択します。\n\n```\nCloning app templates from https://github.com/aws/aws-sam-cli-app-templates\n\nAWS quick start application templates:\n        1 - Hello World Example\n        2 - EventBridge Hello World\n        3 - EventBridge App from scratch (100+ Event Schemas)\n        4 - Step Functions Sample App (Stock Trader)\nTemplate selection: 1\n\n    -----------------------\n    Generating application:\n    -----------------------\n    Name: hello-sam\n    Runtime: python3.7\n    Dependency Manager: pip\n    Application Template: hello-world\n    Output Directory: .\n    \n    Next steps can be found in the README file at ./hello-sam/README.md\n```\n\nここまで表示されれば最初の準備は OK です。\n\n\n# アプリケーションの構築\n\nプロジェクトディレクトリに移動して中身を確認してみましょう。\n\n```\n$ cd hello-sam\n$ tree\n.\n├── README.md\n├── __init__.py\n├── events\n│   └── event.json\n├── hello_world\n│   ├── __init__.py\n│   ├── app.py\n│   └── requirements.txt\n├── template.yaml\n└── tests\n    ├── __init__.py\n    └── unit\n        ├── __init__.py\n        └── test_handler.py\n```\n\nこの中の **template.yaml＊＊ というファイルが重要です。  \nAWS SAM では **template.yaml** という設定ファイルを作成し、AWS SAM リソースを定義します。\n\ntemplate.yaml の中身はこんな感じです。\n\n```template.yaml\nAWSTemplateFormatVersion: '2010-09-09'\nTransform: AWS::Serverless-2016-10-31\nDescription: >\n  hello-sam\n\n  Sample SAM Template for hello-sam\n\n# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst\nGlobals:\n  Function:\n    Timeout: 3\n\nResources:\n  HelloWorldFunction:\n    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction\n    Properties:\n      CodeUri: hello_world/\n      Handler: app.lambda_handler\n      Runtime: python3.7\n      Events:\n        HelloWorld:\n          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api\n          Properties:\n            Path: /hello\n            Method: get\n\nOutputs:\n  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function\n  # Find out more about other implicit resources you can reference within SAM\n  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api\n  HelloWorldApi:\n    Description: \"API Gateway endpoint URL for Prod stage for Hello World function\"\n    Value: !Sub \"https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/hello/\"\n  HelloWorldFunction:\n    Description: \"Hello World Lambda Function ARN\"\n    Value: !GetAtt HelloWorldFunction.Arn\n  HelloWorldFunctionIamRole:\n    Description: \"Implicit IAM Role created for Hello World function\"\n    Value: !GetAtt HelloWorldFunctionRole.Arn\n\n```\n\nAWS SAM は中で CloudFormation が動作して、コードとして書いた設定ファイルをもとに AWS リソースを作成してくれます。  \ntemplate.yaml 内の **Resources** の欄で今回つくる Lambda、そして API Gateway を定義しています。\n\nではこの template.yaml をもとにビルドしましょう。\n\n```\n$ sam build\n...\nRunning PythonPipBuilder:ResolveDependencies\nRunning PythonPipBuilder:CopySource\n\nBuild Succeeded\n\nBuilt Artifacts  : .aws-sam/build\nBuilt Template   : .aws-sam/build/template.yaml\n\nCommands you can use next\n=========================\n[*] Invoke Function: sam local invoke\n[*] Deploy: sam deploy --guided\n```\n\nBuild Succeeded と表示されればビルドは完了です。\n\n\n# ローカルでテスト\n\nこのままデプロイすることもできますが、デプロイする前に事前にローカルで実行し、ローカルで API を叩いてテストすることもできます。\nDocker をインストールしておく必要はありますが、コマンド一つでローカル環境で実行できるので便利かつ楽です。\n\n通常はクラウドにデプロイしてはじめて確認できる API Gateway ですが、ローカルでテストするためには **sam local start-api** コマンドを実行します。\n\n```\n$ sam local start-api\nMounting HelloWorldFunction at http://127.0.0.1:3000/hello [GET]\n```\n\nstart-api コマンドによってローカルでテストするためのエンドポイントを起動することができます（中身としては Docker コンテナが動いています）。\n\nさて、ローカルでテストするための URL が表示されているので、curl コマンドでアクセスしてみます。\n※別なターミナルを立ち上げて実行します。\n\n```\n$ curl http://127.0.0.1:3000/hello\n{\"message\": \"hello world\"}~ $ \n```\n\nJSON 形式で Hello World のレスポンスが返ってきました。\nこの結果は API Gateway としてクラウドでデプロイした結果と同じ結果となります。\n\n\n# AWSへデプロイ\n\n無事にローカルでテストすることができましたので、実際にデプロイしてみましょう。\n基本的には **sam deploy --guided** と実行し、画面に表示される指示に従っていけば問題ありません。\n今回の設定は下記の通りに指定していきます。\n\n```\n$ sam deploy --guided\n\nConfiguring SAM deploy\n======================\n\n\tLooking for config file [samconfig.toml] :  Not found\n\n\tSetting default arguments for 'sam deploy'\n\t=========================================\n\tStack Name [sam-app]: \n\tAWS Region [ap-northeast-1]: \n\t#Shows you resources changes to be deployed and require a 'Y' to initiate deploy\n\tConfirm changes before deploy [y/N]: N\n\t#SAM needs permission to be able to create roles to connect to the resources in your template\n\tAllow SAM CLI IAM role creation [Y/n]: Y\n\tHelloWorldFunction may not have authorization defined, Is this okay? [y/N]: y\n\tSave arguments to configuration file [Y/n]: n\n```\n\n内部で CloudFormation が動き、デプロイが完了すると次のように出力されます。\n（一部情報はマスクしています）\n\n```\nCloudFormation outputs from deployed stack\n--------------------------------------------------------------------------------------------------\nOutputs                                                                                          \n--------------------------------------------------------------------------------------------------\nKey                 HelloWorldFunctionIamRole                                                    \nDescription         Implicit IAM Role created for Hello World function                           \nValue               arn:aws:iam::xxxxxxxxxxx:role/sam-app-HelloWorldFunctionRole-XXXXXXXXXX\n\nKey                 HelloWorldApi                                                                \nDescription         API Gateway endpoint URL for Prod stage for Hello World function             \nValue               https://xxxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/      \n\nKey                 HelloWorldFunction                                                           \nDescription         Hello World Lambda Function ARN                                              \nValue               arn:aws:lambda:ap-northeast-1:xxxxxxxxxxxx:function:sam-app-                 \nHelloWorldFunction-DL88K6                                                                \n--------------------------------------------------------------------------------------------------\n\nSuccessfully created/updated stack - sam-app in ap-northeast-1\n```\n\ncurl コマンドで API を叩いて試すには、Key が **HelloWorldApi** の欄に表示されている Value の URL にアクセスします。\n\n```\n$ curl https://xxxxxxxx.execute-api.ap-northeast-1.amazonaws.com/Prod/hello/ \n{\"message\": \"hello world\"}\n```\n\nローカルでテストした時と同じレスポンスが返ってきていることが分かります。\n","user":"tmasuyama","created_at":"2021-03-28T20:03:35+09:00","updated_at":"2021-03-28T20:03:35+09:00"},{"url":"https://qiita.com/Koshka/items/a255415a785869fd1067","title":"『カラマーゾフの兄弟』で学ぶ自然言語処理（第3回: 可視化編）","body":"\n前回，文を「形態素」なる単位に分割する方法を学んだ．今回の可視化編では，形態素解析の結果をベースに，「分析対象の文書がどのような特徴を持つか」を直観的に理解する方法を学ぶ．（初心者向けの記事ですが，ガチ勢からのマサカリも待ってます......）\n\n登場する用語\n- **ワードクラウド**: 文書中にどの語が多く含まれるかを可視化する手法\n- **Word2Vec**: 文字列である語を，その語が登場する\"文脈\"を手掛かりに，特徴ベクトル(ゆるふわに言えば，その語を数で表したもの)に変換する手法．\n- **UMAP**: 次元削減手法．多次元(3次元以上)のベクトルを可視化するために用いることが多いが，クラスタリング等の前処理にも使える汎用的な手法．\n\n以下，Google Colabでの実行を想定している．\n\n## テキストのダウンロードと確認\n前々回，前処理したテキストをダウンロードする．\n\n``` py\n!wget https://github.com/koshka-tsu/kara_nlp/raw/master/data/cleansed_kara.txt\n```\n\nダウンロードしたテキストを読み込み，確認する．\n\n``` py\nwith open('cleansed_kara.txt', 'r', encoding='utf-8') as f:\n    text = f.read()\nprint(text)\n```\n\n## ワードクラウド\n### 準備: 分かち書き\nまず，前回と同様の手順で分かち書きを行う．\n\n``` py\n# janomeのインストール\n!pip install janome\n```\n\n次に，**ストップワードの除去**の準備を行う．ストップワードとは，一般的な使用頻度の多い語であるために，文書の特徴を表さないものを指す．ストップワード取得のためには，前回紹介したGiNZAを使うこともできるが，今回は[SlothLib](http://svn.sourceforge.jp/svnroot/slothlib/CSharp/Version1/SlothLib/NLP/Filter/StopWord/word/Japanese.txt)が公開しているものを使用する．\n\nダウンロード:\n\n``` py\n!wget 'http://svn.sourceforge.jp/svnroot/slothlib/CSharp/Version1/SlothLib/NLP/Filter/StopWord/word/Japanese.txt'\n```\n\n集合として格納（計算効率のため）\n\n``` py\n# ストップワード辞書をリストに格納\nwith open('./Japanese.txt', 'r', encoding='utf-8') as f:\n    stopword_ls = f.read().splitlines()\n# 後で頻繁に検索するので集合にしておく\nstopword_set = set(stopword_ls)  \n```\n\n名詞の形態素を抽出し，ストップワードであるものを除外する．\n\n``` py\nfrom janome.tokenizer import Tokenizer\n\nnoun_ls = []  # 名詞の形態素を格納\ntokenizer = Tokenizer(wakati=False)\nfor t in tokenizer.tokenize(text):\n    word_class = t.part_of_speech.split(',')[0]  # 品詞\n    if word_class == '名詞':\n        noun_ls.append(t.surface)\n\n# ストップワードの除去\nnoun_ls = [n for n in noun_ls if n not in stopword_set]\nnoun_concat_str = ' '.join(noun_ls)\nprint(noun_concat_str)\n```\n\n### ワードクラウドの描画\nインストール:\n\n``` py\n!pip install wordcloud\n```\n\n次に，日本語フォントを利用可能にするための準備を行う．\n\nフォントのインストール:\n\n``` py\n!apt install fonts-takao-gothic\n```\n\nフォントのファイル（.ttfファイル）のパスを取得:\n\n``` py\nimport matplotlib.font_manager as fm\nfont_ls = fm.findSystemFonts(fontext='ttf')\njp_font_path = [f for f in font_ls if 'takao' in f][0]\nprint(jp_font_path)\n```\n\n準備が整ったので，ワードクラウドを作成する．\n\n``` py\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom wordcloud import WordCloud\n\n# ここで，WordCloud()の引数として，stopwordを指定することもできる（stopwords=<ストップワードの辞書>）\nwc = WordCloud(width=600, height=400, background_color='white', \n               colormap='ocean', font_path=jp_font_path)  \n\nplt.imshow(wc.generate(noun_concat_str))\nplt.axis('off')\nplt.show()\n```\n\n結果:\n![wordcloud.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300536/efa5eb00-437e-173e-86c3-f99aa15b3932.png)\n\n\n主要な登場人物の名前が見られる．\n\n## Word2Vec & UMAPでの可視化\nワードクラウドでは，文書中に多く登場する語を一目で確認することができるが，出力結果における語の近接関係に意味はない．つまり，ワードクラウド上で近くにあっても\"意味的に近い\"とは言えない（「意味とは何か」というのは難しい話だが）．\n\nということで，次は語同士の関係も含めて可視化したい．共起関係などを用いて可視化するほうが一般的かと思うが，今回はWord2Vecと汎用的な次元削減手法であるUMAPを用いる．\n\n### Word2Vec\nまず，語を特徴ベクトルに変換するために，gensimをインストールする．\n\n``` py\n!pip install gensim\n```\n\n次に，連続した文字列を文に分割する．GiNZAでも可能だが，計算時間の削減のために以下のように雑に行う．\n\n``` py\nimport re\n\ndef split_to_sents(text):\n    \"\"\"\n    文単位に分割（シンプルなルールベース）\n    \"\"\"\n    sents_ls = re.split(r'\\n|。', text)  # 本当は，\"！\"や\"？\"でも区切りたいところ\n    sents_ls = [s.strip() for s in sents_ls if len(s) != 0]\n    return sents_ls\n\nsents_ls = split_to_sents(text)\n\nfrom pprint import pprint\npprint(sents_ls)\n```\n\n出力:\n\n```\n[..., 'おれがこの令嬢のそばへ近寄ったのは、それからかなり後のある夜会の席だったが、話しかけてみたんだけれど、ろくにこちらを見向きもしないで、軽蔑したように口をきっと結んでいるじゃないか',\n 'ようし、と、おれは肚の中で思ったんだ、今に仇を討ってやるから！ おれはそのころ、たいていの場合、おそろしく無作法者だった',\n 'それは自分でも気がついていた',\n 'だがそれより、もっと感じたことは、この『カーチェンカ』が無邪気な女学生というよりは、気性のしっかりした、自尊心の強い、真から徳の高い、それに第一、知恵と教育のある淑女だのに、おれにはそいつが両方ともないってことなんだ',\n 'おまえはおれが結婚の申しこみでもしようとしたと思うかい？ '\n 'どうしてどうして、ただ仇が討ちたかったばかりだ、おれはこんな好漢なのに、あの女はそれに気づきおらん、といった肚なのさ',\n 'が、当分は遊興と乱暴で日を送った',\n 'とうとうしまいに中佐はおれを三日間の拘禁に処したくらいだ',\n 'ちょうどその時分、親爺がおれに六千ルーブル送ってよこした',\n 'それはおれが正式の絶縁状をたたきつけて、この後二度と再び無心をしない、『総勘定』を済ましたことにするからと言ってやった結果なんだ',\n '当時おれにはなんにもわからなかったんだ',\n 'こちらへ来るまで、いや、つい、この四五日前まで、というより恐らく今日まで、親爺との金銭関係がどうなっているか、さっぱりわからなかったんだ',\n 'だがそんなことはどうだってかまやしない、あとまわしだ',\n 'ところがその六千ルーブルを受け取ったころ、おれは突然、ある友だちがよこした手紙から、自分にとってとても興味のある事実を知ったのだ',\n 'それはほかでもない、おれたちの中佐が秩序紊乱の嫌疑で当局の不興を買っているということなんだ',\n 'つまり、反対派の陥穽にひっかかったんだよ',\n 'で、直接師団長がやって来て、小っぴどく油を絞ったのだ',\n 'それからしばらくして、退職願いを出せという命令があったのだ', ...]\n```\n\n完全ではないが，この結果でとりあえず妥協する．\n\n次は，分割した文ごとに分かち書きを行う．\n\n``` py\n# 形態素解析\ndef wakati(tokenizer, text):\n    token_ls = list(tokenizer.tokenize(text))\n    return token_ls\n\ntoken_ls = []\ntokenizer = Tokenizer(wakati=True)  # Tokenizerのインスタンス化はforループの外で行う\nfor sents in sents_ls:\n    token_ls.append(wakati(tokenizer, sents))\n```\n\n分かち書きの結果を用いて，Word2Vecを適用する．\n\n``` py\nfrom gensim.models import word2vec\nmodel = word2vec.Word2Vec(token_ls, size=100, min_count=1, window=5, iter=200)\n```\n\nモデルが学習出来たら，試しに類似語の取得をしてみる．\n\n``` py\nmodel.wv.most_similar('アリョーシャ', topn=10)\n```\n\n出力:\n\n```\n[('彼', 0.4988832473754883),\n ('リーズ', 0.4983484148979187),\n ('ミウーソフ', 0.4935529828071594),\n ('イワン', 0.4455975592136383),\n ('彼女', 0.4432331621646881),\n ('ラキーチン', 0.42547866702079773),\n ('僧', 0.42096030712127686),\n ('イワン・フョードロヴィッチ', 0.4118502736091614),\n ('フョードル・パーヴロヴィッチ', 0.40699303150177),\n ('スメルジャコフ', 0.40468165278434753)]\n```\n\n人物名が多く見られる．\n\n### UMAP\nUMAPとは，次元削減手法のt-SNEの代替手法で，近年ではデータサイエンス領域のみならず，single-cell analysisにおける可視化などにも使われている．\n\nインストール:\n\n``` py\n!pip install umap-learn\n```\n\n全ベクトルを可視化するとごちゃつくので，登場回数の多い名詞に限ってplotする．\n\n名詞の登場回数を数え，上位100語を抽出．\n\n``` py\nfrom collections import Counter\n\ncount = Counter(noun_ls)  # noun_lsはワードクラウドのところで登場\nmost_common_noun, n_appearances = zip(*count.most_common(100))\n```\n\n上位100語のwordvecを抽出する．\n\n``` py\ndata = []  # 特徴ベクトル\nlabels = []  # 単語の文字列\nfor s in most_common_noun[2:]:  # 0, 1番目はゴミなので捨てる\n    data.append(model.wv[s])\n    labels.append(s)\nn_appearances = n_appearances[2:]  # 点の描画サイズを決めるために使う\n```\n\nUMAPで各特徴ベクトルを2次元に落とし，matplotlib.pyplotで散布図をかく．この際，日本語表示に対応させるためにフォントの設定が必要である点に注意．\n\n次元削減:\n\n``` py\nimport umap\n%matplotlib inline\nimport matplotlib.pyplot as plt\nfrom matplotlib.font_manager import FontProperties\nfp = FontProperties(fname=jp_font_path, size=16)\n\nreducer = umap.UMAP(random_state=42)\nembedding = reducer.fit_transform(data)\n```\n\n散布図の描画:\n\n``` py\nfig, ax = plt.subplots(figsize=(12, 10))\nplt.scatter(embedding[:, 0], embedding[:, 1], c='c', s=n_appearances)\nfor i in range(len(embedding)):\n    plt.annotate(labels[i], (embedding[i, 0], embedding[i, 1]), \n                 fontsize=12, fontproperties=fp)\nplt.show()\n```\n\n結果:\n![umap.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/300536/790898c8-ce0d-a2f7-eb94-f0874e38dd66.png)\n\n\n\nたとえば，信仰に関する語が右下に集まっていることがわかる．\n\nおわり．Colab Notebookは[こちら](https://github.com/koshka-tsu/kara_nlp/tree/master/colab_notes)\n","user":"Koshka","created_at":"2021-03-28T19:59:06+09:00","updated_at":"2021-03-28T20:13:32+09:00"},{"url":"https://qiita.com/ryojihimeno/items/73c3a201375aaa419492","title":"スポーツコーチがチームで使える検温アプリをDjangoで作ってみた","body":"#はじめに\n初めまして。姫野と申します。\nアメリカンフットボールのチーム、[ノジマ相模原ライズ](http://www.sagamihara-rise.com/)でコーチをしています。\n非エンジニアですが昨今のスポーツ業界でのデータ利用の盛り上がりに乗じてPythonを勉強中です。\nスポーツ界のデータ利用といえばラグビーの日本代表がGPSデータを活用して[話題](https://www.asahi.com/articles/ASM7C66QRM7CUTQP01M.html)になりましたね。\n\nアメフト界でもデータ活用を進めたい！ラグビーと間違われたくない！__チヤホヤされたい！__という想いで本来のコーチ業とは別にプログラミングの勉強を進めています。\nアウトプットの一つとして、Djangoで検温アプリを作ったので、せっかくならオープンにしよう、ということで投稿しました。\n\n#課題\nみなさんは会社や所属団体で日々の体調管理をどうやっていますか？\n無償アプリであればGoogle Formを使いこなす手もありますし、有償アプリであればグラフ化やリマインダー付きなど様々な機能がありますね。\nただ、__Google Formは使いにくいし、有償アプリは使わない機能がたくさんあるのに高い__(年間100万円のサービスも！)。。。\n\n__「社会情勢に左右されない、地域とファンと共に歩むプロフェッショナルクラブ」__と理念を掲げるわがノジマ相模原ライズにおいて、チーム活動でクラスターを発生させるわけには絶対にいけません。一方で、100万円あれば他のモノに投資したい( ；∀；)\nマイナースポーツはツラい。。。\n\n#背景\nノジマ相模原ライズでは、コロナが流行り始めた2020年シーズンは、機能を限定した有償アプリを一年限定で無償提供してもらっていました。\n2021年シーズンでは有償アプリの無償提供期間も終了してしまうので、どうしたものかと悩んでいたところ、以下記事を見つけました。\n>[武蔵野大学、Slackと連動した検温・体調管理アプリを開発](https://techable.jp/archives/140163)\n>\"言語は、同学科で主に使うプログラミング言語であるPythonを使用。また、認証系のシステムが実装されていることから、Djangoをバックエンドとして採用したとのこと。\"\n\nまさに勉強中のPythonでできるやん！ということでDjangoでの実装を試みました。\n\n#アプリの仕組み\nDjangoの基本機能しか使ってないので、細かいコードの説明は先達偉人方にお任せして、簡単な仕組みの説明だけ。（最後にGithubのリンクをつけています。）\n[Python Django3超入門](https://www.amazon.co.jp/dp/4798061921/ref=sspa_dk_detail_0?psc=1&pd_rd_i=4798061921p13NParams&spLa=ZW5jcnlwdGVkUXVhbGlmaWVyPUFOODdVS0owRFBLNFUmZW5jcnlwdGVkSWQ9QTAyMDI0ODZTV0pNOUM2TUpWS0YmZW5jcnlwdGVkQWRJZD1BWFU0QlhDUU00T0hNJndpZGdldE5hbWU9c3BfZGV0YWlsJmFjdGlvbj1jbGlja1JlZGlyZWN0JmRvTm90TG9nQ2xpY2s9dHJ1ZQ==)⇦参考にしました。\n\n__システム構成図__\nHerokuでデプロイしました。常時起動のConditionアプリに付随して、Heroku schedulerとwebhookでslackにリマインダーを送る設計にしてあります。\n![UML_condition.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/3365d3b9-882f-b4c7-e803-1e612f3fd0d3.jpeg)\n\n__ユースケース図__\nチームメンバーは日々のアカウント作成からCondition報告までを受け持ちます。別でヘッドマネージャーにConditionアプリの管理者になってもらい、アカウントの管理などを行ってもらっています。\n![UML_condition2.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/e771662d-758f-57e9-0367-838279b2491f.jpeg)\n\n#アプリの画面\n実際のアプリ画面を紹介します。\n\n__ログイン画面__\n初めての方はアカウント作成で新規アカウントを作ります。\n![スクリーンショット 2021-03-25 21.43.50.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/fcf9fe20-f195-3647-6a65-c0cc43a0d7eb.png)\n__トップ画面__\n自分の過去投稿が並んでいます。過去投稿のEdit/Deleteも可能です。\n![スクリーンショット 2021-03-25 21.47.01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/c250fce9-2ebb-7fdb-ea31-d4fae6101549.png)\n__ポスト画面__\n体温や体調を記入します。チームにはアメリカ人もいるため、英語表記です。（英語怪しい）\n![スクリーンショット 2021-03-25 21.49.04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/ed15ee9e-3391-1078-016d-c5ab0835c290.png)\n__一覧画面__\n体温37.5℃以上の人や体調不良の人は赤字で強調されます。ポジションでソートできます。\n![スクリーンショット 2021-03-25 22.20.36.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/ae95044e-3d4d-0103-c831-21ad44648124.png)\n未投稿者はさらされます。\n![スクリーンショット 2021-009.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/50dfc432-0c5a-bf3f-c193-c1f0e5639a85.png)\n__スラックでのリマインド__(Slack画面)\n土日の練習前に自動で未投稿者の名前が投稿されます。\n![スクリーンショット 2021-03-25 22..png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/983155/7656f2eb-0c3f-4891-c369-304383eeba92.png)\n\n#最後に\nコードです([Githubリンク](https://github.com/kt199671/conditions))。ご参考になれば。\n\n__日本のアメフト界には生きたデータと課題が無数にあるにも関わらず、うまく活用されていないのが現状です。__\n嘆いても仕方がないので自分でエンジニアになることにしました。\n検温アプリごときで業界のムードを変革できるとは思いませんが、前に進む一歩を踏んでいきたいですね。\n検温アプリ以外の最近の取り組みはこちら。随時公開していきます。\n\n* GPS付きスマートウォッチから練習中の選手の動きを定量化\n* 試合＆練習ビデオから選手の動きを抽出\n* 選手の全身写真と体重から体組成を可視化\n\n他にもこんなことできそう！などアイデアあればコメントにて教えてください。\nまた、アメフト界をデータ活用で変革したいという想いに賛同して下さる方は、是非一緒に活動しましょう！\nスタッフ申し込みは[こちらのフォーム](http://www.sagamihara-rise.com/recruit/recruit_staff.html)からお願いします。(エンジニア希望の方はコーチ・アナライジングスタッフとしてお申し込みください)\n\n\n\n\n","user":"ryojihimeno","created_at":"2021-03-28T19:58:43+09:00","updated_at":"2021-03-28T21:34:02+09:00"},{"url":"https://qiita.com/nakanowatari-taiki/items/c6d548ee7baea9255ce7","title":"クラスとインスタンスを使ったコードの作成","body":"## 初めに\nクラスとインスタンスを使ってコードを作成していきます。\nまずは用語のおさらいです。\n#### クラスとインスタンスについて\nクラスとはオブジェクト指向の設計図みたいなものです。\nクラスからインスタンスを作成してそインスタンスで処理を行います。\nおおまかに言うと、クラスは設計図、インスタンスはその設計図から作られるものです。なぜクラスからインスタンスを生成するのかというと共通する部分を再利用することができるからです。\nみじかな例として車がインスタンスでクラスが車を作る部品みたいな感じです。\n### クラスとインスタンスを使ってコード書こう\n\n```\nclass Article\n\n  def initialize(author, title, content)\n    @author = author\n    @title = title\n    @content = content\n  end\n\nend\n```\n以下の出力結果を得られるようにします。\n\n```\n著者: 鈴木\nタイトル: Hello Ruby!\n本文: こんにちは、Ruby\n```\nまず、コードの中にinitializeメソッドがあります。これは特殊なメソッドでクラス内に記述した場合、オブジェクトが作成される時に自動で呼び出されます。\nではそのinitializeメソッドにクラスの外からnewメソッドを使いインスタンスを生成し変数に代入します。\n\n```\narticle = Article.new(\"鈴木\", \"Hello Ruby!\", \"こんにちは、Ruby\")\n```\n\nこの時の(\"鈴木\", \"Hello Ruby!\", \"こんにちは、Ruby\")は実引数として、仮引数の(author, title, content)に受け渡します。\n\nそして上記の値が＠author,＠title,@contentに代入されます。\nそして最後にインスタンス変数に代入された値を出力する記述を書いたらコードの完成です。\n\n```\nclass Article\n\n  def initialize(author, title, content)\n    @author = author\n    @title = title\n    @content = content\n  end\n\n  def author\n    @author\n  end\n\n  def title\n    @title\n  end\n\n  def content\n    @content\n  end\n\nend\n\narticle = Article.new(\"阿部\", \"Rubyの素晴らしさについて\", \"Awesome Ruby!\")\nputs \"著者: #{article.author}\"\nputs \"タイトル: #{article.title}\"\nputs \"本文: #{article.content}\"\n```\n\n###最後に\n初学者のため少しわかりにくい部分や間違いもあるかもしれません。何か間違いがあればご指摘お願いします。\n\n\n","user":"nakanowatari-taiki","created_at":"2021-03-28T19:57:04+09:00","updated_at":"2021-03-28T19:57:04+09:00"},{"url":"https://qiita.com/T-Ogaswara/items/33d5c0cb86a5a8665422","title":"scipy.optimize.leastsqで何を最小化するか what should be minimized in the optimization of scipy.optimize.leastsq.","body":"※初投稿で勝手がわからなかったので、後々告知なく修正するかもしれません。\n\nscipy.optimize.leastsqは所謂最小二乗法で二乗残差を最小化することで、ある $y$ の $x$ 依存性 $y(x)$ をある関数 $f(x)$で再現する際のパラメーターを最適化する場合にも用いられる。\n\nscipy.optimize.leastsq is sometimes used to optimize the parameters of a function $f(x)$ that reproduces the $x$-dependency of $y$.\n\n例えば、ある半導体の低効率の温度依存性 $\\rho(T)$ をArrheniusの式 $a\\exp(b/T)$ でフィッティングしたい場合（$a,b$ はフィッティングパラメータ。物理的な意味はググってください。）は\n\nFor example, the temperature depencencies of resistivity $\\rho(T)$ is sometimes fitted by the Arrhenius formula as follows,\n\n```\nimport scipy.optimize as opt\n\ndef arrhenius(param,x): #Arreniusの式\n    a,b = param[0],param[1]\n    return a*np.exp(b/x)\ndef residual(param,x,y,func): #残差計算\n    return y - func(param,x)\n\nresult = opt.leastsq(residual,param,args=(X,Y0,arrhenius))\n```\n\nのような形でフィッティングできる。\n個人的にはフィッティング結果をプロットする場合などを考えるとフィッティング用の関数と残差計算用の関数は別に用意しておいたほうが楽だと思っている。\n\nここで疑問なのが、残差　y - func(param,x)　を最小化することが適切なのかどうか。\n\nHere, it is quastionable whether the minimizing y - func(x) is valid or not.\n\n今回の場合、$y$が低温ほど(つまり$x$が小さいほど)大きくなる。抵抗測定では測定範囲の関係で一般的に真の値が大きいほど誤差も大きくなるので、上のような単純な残差を最小化する場合、低温側のデータの重みが大きくなることになる（逆に抵抗率の逆数である伝導率を用いた場合は高温側の重みが大きくなる）。そこでこのような残差計算を考えてみる。\n\nIn this case, the error of resistivity tend to be proprtional to the magnitude of the real value due to the range of the measurable volrage, thus the data at lower temperature become the hevior aginst the fitting. To modify such a weighted tendencies, I suggest one option of residual function like this:\n\n```\ndef residual(param,x,y,func): #残差計算\n    return func(param,x)/y - 1\n```\n\nこうすると各データ点とフィッティング関数の差分を比として計算しているため、真の値に依存するような重みづけは無くなる。yで割っているのはfの関数形によってはfが0になることがあるから。\n\nthat evaluates the not the difference but the ratio that is not relevant to the absolute value of signs. \n\n個人的な経験としては測定値の誤差自体が十分小さくフィッティングに用いるデータ数が十分な場合やフィッティングパラメータの数が少ない場合は大差はないが、そうでない場合は残差計算の方法の違いでそれなりに結果に違いが生じてくるので個人的には注意したいと思っている部分である。\n\nIn my experience, such a fifference of residual function make no difference if the error itself is enough small or the number of data for fitting is enough or the number of fitting paremeter is enough small, there is no significant diference, Otherwise, there are possibilities to make differencies depending on the choice of residual function. Thus we wolud like to be careful about such a differencies.\n\n正直質問として投稿する内容かとも思ったけれども、フィッティングの関数や範囲などの条件でどうとでも状況が変わる話題だと思うのでこちらで投稿しました。ご指摘ありましたら歓迎いたします。\n\nAlthough I'm not sure whether it should be submitted by article or question, I did because the situation will change depending on the range and the condition of fitting. I welcome the any suggestions ans corrections.\n","user":"T-Ogaswara","created_at":"2021-03-28T19:51:40+09:00","updated_at":"2021-03-28T19:51:40+09:00"},{"url":"https://qiita.com/east_village/items/583ca7dc5779922fdb66","title":"scriptコマンドで、コマンド実行の作業ログを保存する","body":"## 背景 \nLinuxでコマンドの実行ログを保存する必要があったので、その際のメモ\n\n## 使用方法\n\n```shell\nscript <ログを保存したいファイル名> \n```\n\nファイル名を指定しなかった場合は、カレントディレクトリに`typescript` というファイルで保存される\n\n```shell\n[village@localhost ~]$ script\nスクリプトを開始しました、ファイルは typescript です\n[village@localhost ~]$ date\n2021年  3月 28日 日曜日 06:46:13 EDT\n```\n\n終了する場合は`exit`するか`ctrl+d`です。\n\n```shell\n[village@localhost ~]$ exit\nexit\nスクリプトを終了しました、ファイルは typescript です\n```\n\nファイルにログが残っているか確認する\n\n```shell\n[village@localhost ~]$ cat typescript\nスクリプトは 2021年03月28日 06時46分11秒\n に開始しました[village@localhost ~]$ date\n2021年  3月 28日 日曜日 06:46:13 EDT\n[village@localhost ~]$ exit\nexit\n\nスクリプトは 2021年03月28日 06時47分10秒\n に終了しました\n```\n\nきちんと記録されている。\nまた同じファイルに追記したい場合はオプション`-a`を使う。\n","user":"east_village","created_at":"2021-03-28T19:49:38+09:00","updated_at":"2021-03-28T19:49:38+09:00"},{"url":"https://qiita.com/masaru21/items/6c20fe05c1bc6d25472a","title":"WordPressのマルチサイト引越し体験","body":"今回、WordPressで作られたウェブサイトのサーバー移転を請負ました。\nこの作業の中で見つけたネット上の記事を備忘録の意味も込めて、ここに記録したいと思います。\n\nhttp://wordpress.bulog.jp/201604multi-duplicator/\n\nhttps://www.itti.jp/web-design/wp-multi-site02/\n\nhttps://into-the-program.com/wordpress-multisite-database-connection-error/\n\nhttps://free-leaf.org/tomorrow/manual-of-move-wordpress-multisite/\n\nhttps://kinsta.com/jp/blog/wordpress-multisite/\n\n\n[データベース接続確立エラーの修正方法、原因](https://wp-doctor.jp/blog/2015/08/24/wordpress-%e3%83%87%e3%83%bc%e3%82%bf%e3%83%99%e3%83%bc%e3%82%b9%e6%8e%a5%e7%b6%9a%e7%a2%ba%e7%ab%8b%e3%82%a8%e3%83%a9%e3%83%bc%e3%81%a8%e3%81%af%e4%bd%95%e3%81%8b%ef%bc%9f/)\n\n\n上記の記事は、とても勉強になりました。\n\nまた、Xサーバーなどの動作確認URLで、WordPressを利用できないときは、下記の記事を参考にされると良いです。\n\nhttps://www.itra.co.jp/webmedia/hosts_file.html\n\n","user":"masaru21","created_at":"2021-03-28T19:47:45+09:00","updated_at":"2021-03-28T19:47:45+09:00"},{"url":"https://qiita.com/chakkyNote/items/a2fc6cdf582d27022681","title":"Docker SwarmでPostgreSQLストリーミングレプリケーションを実装する","body":"# はじめに\n\nDockerのSwarmモードを使ってPostgreSQLストリーミングレプリケーションを実装します。Docker Composeファイルとレプリケーション設定用のスクリプトを組み合わせて実現しています。PostgreSQLのサンプルデータベースとして公開されているDVDレンタル予約データベースを構築し、レプリケーションの動作確認をしています。\n\n# ソフトウェア構成\n\n| ソフトウェア   | バージョン |\n| -------------- | ---------- |\n| Cent OS        | 8.1        |\n| Docker         | 20.10.5    |\n| Docker Compose | 1.28.5     |\n| PostgreSQL     | 12.6       |\n\n# インフラ準備\n\n#### Dockerインストール\n\n- レポジトリを最新化後、Dockerレポジトリを追加する。\n- コンテナランタイム(containerd.io)をインストール後、Dockerをインストールし、バージョンを確認する。\n- サービス起動と自動起動を有効化し、ステータスを確認する。\n\n```\n# dnf -y update\n# dnf config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# wget https://download.docker.com/linux/centos/8/x86_64/stable/Packages/containerd.io-1.4.3-3.1.el8.x86_64.rpm\n# dnf install -y containerd.io-1.4.3-3.1.el8.x86_64.rpm\n# dnf install -y docker-ce docker-ce-cli\n# docker --version\nDocker version 20.10.5, build 55c4c88\n\n# systemctl start docker\n# systemctl enable docker\n# systemctl status docker\n```\n\n#### Docker Composeインストール\n\n- Docker Composeモジュールをダウンロードする。\n- ダウンロードしたモジュールに実行権限を追加し、バージョンを確認する。\n\n```\n# curl -L \"https://github.com/docker/compose/releases/download/1.28.5/docker-compose-Linux-x86_64\" -o /usr/local/bin/docker-compose\n# chmod +x /usr/local/bin/docker-compose\n# docker-compose --version\ndocker-compose version 1.28.5, build c4eb3a1f\n```\n\n#### Swarmクラスタ構築\n\n- マスタノードでSwarmクラスタを初期化する。\n- マルチノードで構成する場合、追加したいホストのIPアドレスを指定して、クラスタに参加させる。なお、クラスタノード間で名前解決ができるようにしておく必要がある。\n\n```\n# docker swarm init --advertise-addr <master-node-ip-address>\n# ssh <slave-node-ip-address> `docker swarm join-token worker | grep \"docker swarm\"`\n```\n\n# イメージ・構成ファイル準備\n\n#### Dockerイメージダウンロード\n\n- PostgreSQLの公式Dockerイメージをダウンロード、イメージを確認する。\n\n```\n# docker pull postgres:12.6\n# docker images\nREPOSITORY   TAG       IMAGE ID       CREATED         SIZE\npostgres     12.6      fd94a7538179   4 days ago      314MB\n```\n\n#### ディレクトリ作成\n\n- 任意の作業ディレクトリ配下でmaster、replicaディレクトリを作成し、ディレクトリを移動する。ここでは作業ディレクトリをdvdrentalとしている。\n\n```\n# mkdir -p dvdrental/master dvdrental/replica\n# cd dvdrental\n# find .\n.\n./master\n./replica\n```\n\n#### Composeファイル作成\n\n- PostgreSQLストリーミングレプリケーション用のComposeファイルを作成する。\n\n```\n# cat <<EOF > ./docker-compose.yml\nversion: \"3\"\nservices:\n  master:\n    image: postgres:12.6\n    ports:\n      - 5432:5432\n    environment:\n      POSTGRES_USER: \"postgres\" # Specify the database user name\n      POSTGRES_PASSWORD: \"P0stgres\" # Specify the user password\n      POSTGRES_DB: \"dvdrental\" # Specify the database name\n      POSTGRES_INITDB_ARGS: \"--encoding=UTF-8 --locale=C\" # Specify encoding and locale\n    volumes:\n      - ./master:/docker-entrypoint-initdb.d\n  replica:\n    image: postgres:12.6\n    depends_on:\n      - master # Specify the order of service startup\n    deploy:\n      replicas: 3 # Specify the number of replicas\n      restart_policy:\n        condition: on-failure\n    ports:\n      - 5433:5432\n    environment:\n      POSTGRES_USER: postgres # Specify the database user name\n      POSTGRES_PASSWORD: P0stgres # Specify the user password\n    volumes:\n      - ./replica:/docker-entrypoint-initdb.d\nEOF\n```\n\n#### レプリケーション設定用スクリプト作成（マスタ側）\n\n- マスタDB側で必要なレプリケーション関連設定を行うスクリプトを作成する。WAL関連の設定値とレプリケーション用ユーザの名前とパスワードは必要に応じて変更する。\n\n```\n# cat <<EOF > ./master/0000_configure_replication_master.sh\n#!/bin/bash\n\n# Replication settings\nsed -i -e 's/#wal_level = replica/wal_level = replica/g' /var/lib/postgresql/data/postgresql.conf\nsed -i -e 's/#max_wal_senders = 10/max_wal_senders = 10/g' /var/lib/postgresql/data/postgresql.conf\nsed -i -e 's/#wal_keep_segments = 0/wal_keep_segments = 256/g' /var/lib/postgresql/data/postgresql.conf\necho \"host replication replication 0.0.0.0/0 trust\" >> \"/var/lib/postgresql/data/pg_hba.conf\"\n\n# Create users for replication\npsql -U postgres -c \"CREATE ROLE replication WITH REPLICATION PASSWORD 'replication' LOGIN\"\nEOF\n```\n\n#### レプリケーション設定用スクリプト作成（レプリカ側）\n\n- レプリカDB側で必要なレプリケーション関連設定を行うスクリプトを作成する。\n\n```\n# cat <<EOF > ./replica/0000_configure_replication_replica.sh\n#!/bin/bash\n\n# Database shutdwon\n/usr/lib/postgresql/12/bin/pg_ctl -D \"/var/lib/postgresql/data\" -m fast -w stop\nsleep 20\n\n# Delete database directories\nrm -rf /var/lib/postgresql/data/*\n\n# Master database backup \npg_basebackup -R -h master -U replication -D /var/lib/postgresql/data -P\n\n# Replication settings\nsed -i -e 's/#hot_standby = on/hot_standby = on/g' /var/lib/postgresql/data/postgresql.conf\n\n# Database startup\n/usr/lib/postgresql/12/bin/pg_ctl -D \"/var/lib/postgresql/data\" -w start\nEOF\n```\n\n#### サンプルデータロードスクリプト作成（マスタ側）\n\n- PostgreSQLのサンプルデータベースを作成するためのスクリプトを作成する。\n\n```\n# cat <<EOF > ./master/0100_load_sample_data.sh\n#!/bin/bash\n\n# Loading sample data\npg_restore -U postgres -d dvdrental /docker-entrypoint-initdb.d/dvdrental.tar\nEOF\n```\n\n#### サンプル資材格納\n\n- デプロイ後にレプリケーション動作を確認するため、サンプル資材をダウンロードし、コンテナから参照可能なディレクトリに配置する。\n\n```\n# wget https://sp.postgresqltutorial.com/wp-content/uploads/2019/05/dvdrental.zip\n# unzip dvdrental.zip -d ./master/\n# rm -f dvdrental.zip\n```\n\n#### 構成ファイルコピー\n\nマルチノードでSwarmクラスタを構成している場合、SCPで構成ファイルを他ノードにコピーする。\n\n```\n# scp -pr `pwd` <slave-node-ip-address>:`pwd`\n```\n\n------\n\n## デプロイ実行\n\nSwarmクラスタにコンテナサービスをデプロイする。\n\n```\n# docker stack deploy -c ./docker-compose.yml dvdrental\n# docker service ls\nID             NAME                MODE         REPLICAS   IMAGE           PORTS\nsuosdfmse9sf   dvdrental_master    replicated   1/1        postgres:12.6   *:5432->5432/tcp\nxowrzwwtq7sm   dvdrental_replica   replicated   3/3        postgres:12.6   *:5433->5432/tcp\n```\n\n# レプリケーション動作確認\n\n#### サンプルデータベース更新\n\n- マスタ側でサンプルデータベースにログインし、テーブルが作成されていることを確認する。\n- staffテーブルにレコードを追加し、commitする。\n\n```\n# docker ps -a\n# docker exec -it <master-container-name> /bin/bash\n\nContainer> # su - postgres\nContainer> $ psql -d dvdrental\nContainer> dvdrental=# \\dp\nContainer> dvdrental=# select * from staff;\n staff_id | first_name | last_name | address_id |            email             | store_id | active | username |                 password                 |        last_update        |      picture\n----------+------------+-----------+------------+------------------------------+----------+--------+----------+------------------------------------------+---------------------------+--------------------\n        1 | Mike       | Hillyer   |          3 | Mike.Hillyer@sakilastaff.com |        1 | t      | Mike     | 8cb2237d0679ca88db6464eac60da96345513964 | 2006-05-16 16:13:11.79328 | \\x89504e470d0a5a0a\n        2 | Jon        | Stephens  |          4 | Jon.Stephens@sakilastaff.com |        2 | t      | Jon      | 8cb2237d0679ca88db6464eac60da96345513964 | 2006-05-16 16:13:11.79328 |\n(2 rows)\n\nContainer> dvdrental=# insert into staff(staff_id,first_name,last_name,address_id,store_id,username) values(3,'Bob','Ludwig','2','2','Bob');\nINSERT 0 1\nContainer> dvdrental=# commit;\nContainer> dvdrental=# select * from staff;\n staff_id | first_name | last_name | address_id |            email             | store_id | active | username |                 password                 |        last_update         |      picture\n----------+------------+-----------+------------+------------------------------+----------+--------+----------+------------------------------------------+----------------------------+--------------------\n        1 | Mike       | Hillyer   |          3 | Mike.Hillyer@sakilastaff.com |        1 | t      | Mike     | 8cb2237d0679ca88db6464eac60da96345513964 | 2006-05-16 16:13:11.79328  | \\x89504e470d0a5a0a\n        2 | Jon        | Stephens  |          4 | Jon.Stephens@sakilastaff.com |        2 | t      | Jon      | 8cb2237d0679ca88db6464eac60da96345513964 | 2006-05-16 16:13:11.79328  |\n        3 | Bob        | Ludwig    |          2 |                              |        2 | t      | Bob      |                                          | 2021-03-24 09:48:55.856577 |\n(3 rows)\nContainer> dvdrental=# \\q\nContainer> $ exit\nContainer> # exit\n```\n\n#### レプリケーション確認\n\n- レプリカ側でサンプルデータベースにログインし、マスタ側のテーブル更新が反映されていることを確認する。\n- レプリカ側で更新操作ができないことを確認する。\n\n```\n# docker ps -a\n# docker exec -it <replica-container-name> /bin/bash\nContainer> # su - postgres\nContainer> $ psql -d dvdrental\nContainer> dvdrental=# \\dp\nContainer> dvdrental=# select * from staff;\nContainer> dvdrental=# delete from staff where staff_id='3';\nERROR:  cannot execute DELETE in a read-only transaction\nContainer> dvdrental=# \\q\nContainer> $ exit\nContainer> # exit\n```\n\n","user":"chakkyNote","created_at":"2021-03-28T19:45:54+09:00","updated_at":"2021-03-28T19:49:39+09:00"},{"url":"https://qiita.com/hmae12/items/fa6cd06bb6912103e83e","title":"[Rails][RSpec]FactoryBot でFaker を使うのは一意性制約のあるものだけでOK ","body":"# 結論\nFactoryBot でインスタンスを生成する時に、\nFaker でランダムな値を出力するのは一意性制約のあるものだけでOK というお話です。\n# 背景\nRSpec使ったテストコードについて学んでいる中で、\nFactoryBot であらかじめインスタンスをまとめておける、\nFaker でランダムな値を生成できると知り、\nFaker を使うのが楽しくなってこんな感じでユーザー登録用のFactoryBot の記述をしていました。\n\n```spec/factories/users.rb\nFactoryBot.define do\n  factory :user do\n    transient do\n      gimei { Gimei.name } # gem 'gimei'を用いて漢字氏名とフリガナを生成する\n    end\n\n    nickname { Faker::Name.first_name }\n    email { Faker::Internet.free_email }\n    password = 'test1234'\n    password { password }\n    password_confirmation { password }\n    family_name { gimei.last.kanji }\n    first_name { gimei.first.kanji }\n    kana_family_name { gimei.last.katakana }\n    kana_first_name { gimei.first.katakana }\n    birthday { Faker::Date.between(from: '1930-01-01', to: '2016-12-31') }\n  end\n```\n\nそんな時にコードレビューしていただいた方から、\n「FactoryBot では**バリデーションにひっかからず登録できる情報が作れれば良い**ので、\nFaker はemail等の**一意性制約をかけているものだけ使えばOK** ですよー。」\nとコメントを頂きました。\n\nなるほどと思い、書き直したのがこちらです。\n\n```spec/factories/users.rb\nFactoryBot.define do\n  factory :user do\n    nickname              { 'テスト用ユーザー' }\n    email                 { Faker::Internet.free_email }\n    password =            'test1234'\n    password              { password }\n    password_confirmation { password }\n    family_name           { '佐藤' }\n    first_name            { '太郎' }\n    kana_family_name      { 'サトウ' }\n    kana_first_name       { 'タロウ' }\n    birthday              { '1970-01-01' }\n  end\nend\n```\nユーザー登録にemail だけは一意性制約をかけているのでFaker を使い、\n他は重複しても問題無いので直接記述しています。\nこちらの方が断然読みやすくなりました。\n# 学んだこと\nこの時新しくFaker を知ったので、使いたいばかりになっていましたが、\n新しく勉強したことでも、\n本当にそれを使う必要があるのかや、もっとシンプルにコードを書けないかを意識しようと改めて思いました。\n\n\n[Faker](https://github.com/faker-ruby/faker/blob/master/README.md)\n","user":"hmae12","created_at":"2021-03-28T19:38:29+09:00","updated_at":"2021-03-28T19:38:29+09:00"},{"url":"https://qiita.com/horitomoyuki/items/65cf90e0c107f82fb854","title":"Rubyについて","body":"##if文以外の条件分岐について\n### case文\ncase文は条件分岐を表現する文法のひとつであり、elsifで書くよりもシンプルな記法にすることができる。\n\n```ruby:sample.rb\ncase 対象のオブジェクトや式\nwhen 値1\n # 値1に一致する場合に実行する処理\nwhen 値2\n # 値2に一致する場合に実行する処理\nwhen 値3\n # 値3に一致する場合に実行する処理\nelse\n # どれにも一致しない場合に実行する処理\nend\n```\n\n## 繰り返し処理について\n### while文\n指定した条件がTrueである限り、処理を繰り返す。\n\n```ruby:sample.rb\nwhile 条件式\n # 条件が真である時に繰り返す処理\nend\n```\n\n・使い方例\n\n```ruby:sample.rb\nnumber = 0\n\nwhile number <= 10\n puts number\n number += 1\nend\n\n# ターミナル出力結果\n# 0\n# 1\n# 2\n# 3\n# 4\n# 5\n# 6\n# 7\n# 8\n# 9\n# 10\n```\n\n・無限ループになってしまう例\n\n```ruby:sample.rb\nnumber = 0\n\nwhile number <= 10\n puts number\nend\n```\n\nnumberの値が０のままになってしまうので、無限ループが起こる\n無限ループはコンピュータに大きな負荷をかけてしまうので、繰り返し処理を実装する際は注意\n\n## break\n\nbreakは無限ループから脱出するために使われる\n\n```ruby:sample.rb\nnumber = 0\n\nwhile number <= 10\n if number == 5\n   break\n end\n puts number\n number += 1\nend\n\n# ターミナル出力結果\n# 0\n# 1\n# 2\n# 3\n# 4\n```\n","user":"horitomoyuki","created_at":"2021-03-28T19:36:49+09:00","updated_at":"2021-03-28T19:36:49+09:00"},{"url":"https://qiita.com/ayu1921/items/17f3f25ac0b0ba585425","title":"Unityからobnizを操作してみる","body":"\n#はじめに\n初投稿です。\n前からArduinoやRaspberry Piなどを使って、OculusRiftなどのVR HMD用アプリと連動させて使える簡単なVR向けハードウェアを作っていたのですが\nなかなか、私自身ががっつりメカエンジニアなのでUnityアプリとハードの連携などの環境構築から既にギブアップギブ気味で、VR HMDもOculusQuestシリーズをはじめとした、PCレスのスタンドアロン型が主流になり、より厳しい状況に。もっと開発しやすいボードが無いかとかと探してしていたところ、\nファームウェアレスをうたっている**obniz**が相性が良さそうなので試行錯誤中。\n実質マイコンボード側のファームウェア開発が不要となったので、開発の手間が省けて、ハードとアプリソフトの開発だけに打ち込めるのは凄い魅力に感じてます。\n\n#目的\nobniz boardのディスプレイコントロールを例に\nUnityアプリ（for Oculus Quest2）にて、websocket APIを介したobniz board制御と\nWebhook連携によるアプリ起動を使ったobniz board制御\nの2種類のobniz board制御手段を整理\n単純にUnityとobnizを繋げてるだけなのでVRでなくとも操作可\n後述しますが、Websocket APIによる制御は不完全なので注意。\n※各ソフト・ファームウェアVer\nUnity:2020.3.0f1\nobniz OS:obnizb1 3.4.4\n\n#Websocket API制御編\n今回やってることはこんな感じ\n![システム図.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/950682/d93bf0bf-0c3c-887b-7adb-a568ea32c87a.png)\n\n\nobnizのwebsocket APIの導入部分については、以下参考にしました。\nそもそもwebscoketって何？っていう人向け（私も導入にあたってめっちゃ参考になった）記事1：https://qiita.com/hmaruyama/items/eee079f035f864638e13\n\nUnityのWebsocketの使用方法、以下参考にしました↓\n**【今回必須作業】**記事2：https://qiita.com/oishihiroaki/items/bb2977c72052f5dd5bd9\n今回の作業自体は、こちらのwebasocket-sharp(手順1~3でライブラリを読み込む)を行い、4-①のサンプルコードの接続先アドレスを変えるのと、obniz boardディスプレイ操作用のJSON形式の送信データを追加します。\n\nUnityでJSONデータの送信するのに参考にしました。記事3：https://qiita.com/MonoShobel/items/28b99e1753b92ffcdca2\nUnityはobniz.jsと違ってC#言語ですので、JSONデータの送信も若干異なります。そこでこちらの記事参考にさせてもらいました。\nobniz JSONフォーマットはここを参考：https://obniz.com/ja/doc/reference/websocket/\n\nwebsokcet通信部分のコードは以下です。\n\n```c#:webscoket.cs\nusing UnityEngine;\nusing System.Collections;\nusing WebSocketSharp;\nusing  System.Security.Authentication;\n\npublic class WebSocketClient : MonoBehaviour\n{\n\n \n    private int count = 0; // click counter\n    private WebSocket ws;\n\n    void Start()\n    {\n        this.ws = new WebSocket(\"ws://*ws.obniz.io/obniz/自分のobnizの番号/ws/1\"); //アクセス先をwebsocket APIエンドポイントに指定\n                                                                                   //*wsの箇所については、\"ws://obniz.io/obniz/自分のobnizの番号/ws/1”\n                                                                                   //で送信後にRedirectで帰ってきた値へ変更。アクセストークン有の場合は最後に挿入\n        \n        this.ws.OnOpen += (sender, e) =>\n        {\n            Debug.Log(\"[WS] Open\");\n        };\n\n\n\n        this.ws.OnMessage += (sender, e) =>\n        {\n            Debug.Log(\"[WS]Receive message: \" + e.Data);//ハード側からメッセージを受け取った場合にLogに記載\n        };\n        \n        \n\n        this.ws.OnError += (sender, e) =>\n        {\n            Debug.Log(\"[WS]Error: \" + e.Message);//接続失敗した際にエラーをLogに記載\n        };\n    \n        this.ws.Connect();//アクセス先へwebsocket接続\n\n        this.ws.Send(\"[{\\\"display\\\":{\\\"clear\\\":true}},{\\\"display\\\":{\\\"text\\\":\\\"Connect\\\"}}]\");//接続されたことをobnizディスプレイに表示\n\n    }\n\n    void Update()\n    {\n        if (OVRInput.GetDown(OVRInput.RawButton.RIndexTrigger))\n        {\n            Debug.Log(\"clicked!\");\n            count++;\n          this. ws.Send(\"[{\\\"display\\\":{\\\"clear\\\":true}},{\\\"display\\\":{\\\"text\\\":\\\"Hello.world\\\"}}]\");//Oculus questのトリガーボタン押すとディスプレイにメッセージ表示\n\n        }\n    }\n}\n```\n\nアクセス先の部分に注記している通り、Redirectで出てくるエンドポイント指定処理は出来ておらず、一日一回手動でコード直して対応してます。。。\n目的自体は出来てるのですが、もう少しいけてる感じにしたいなと。そこは修正したら編集・追記します。\n（Unity側でID指定やアクセストークン指定とかもしたいけど、そんときは別記事で。）\nその他、注意点として\n・今のままだとwss://で送れないので、エンドポイントをws://にしておく必要がある。(いい方法ないかな～)\n・JSON形式でのデータ送受信なので、基本的には日本語が使えない。そもそも認識されないか、文字化けする。はず（多分やり方はあるかな？）\n\n#Webhookトリガーのアプリ起動による制御編\nこっちはこんなイメージ（※についてはWeb上にデータ送信自体とかは可能だけど、指示側デバイスと直接データやり取りは出来ませんよ的な意味です）\n![システム図2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/950682/3c6e2db7-7d38-8b14-7092-b8caf661b3cd.png)\n\nここで参考にしたのは\nこちらのobnizガイドを基に、あらかじめobniz.js作ってWebhookトリガーにして登録したのみ:https://obniz.com/ja/doc/reference/cloud/serverless-event/\n以上。\n\nobnizサーバー側のコードはほぼサンプルコードなので省略して\nUnity側のwebhookエンドポイントへの接続のコードがこちら\n\n```c#:Webohook\nusing UnityEngine;\nusing System.Collections;\nusing  System.Security.Authentication;\nusing UnityEngine.Networking;\n\npublic class Webhook : MonoBehaviour\n{\n    private WWW www;\n    private bool isDone;\n\n    // Use this for initialization\n    void Update()\n    {\n        if (OVRInput.GetDown(OVRInput.RawButton.RIndexTrigger))//Oculus Questのトリガーボタンを押すとURLへ接続開始\n        {\n \n        var url =\"指定したイベントのwebhook urlを貼り付け\";//接続先URLの指定\n\n        Request(url);\n        }\n    }\n\n      public void Request(string url)\n    {\n        www = new WWW(url);\n        isDone = false;\n    }\n}\n```\n注意点としては\n・複数のイベントで複数の動作をさせたいなら、開いたイベントを閉じる必要がある。（分かってないだけで、やり方分かればまとめたい。）\n・1イベントごとに接続～動作になるのでwebsocketAPIと比べて応答性が若干遅い（JSON形式でのやり取りがしない分、こっちのほうが開発がしやすい気はする。）\n\n#まとめ\n簡単な動作で粗削りではあるけど、マイコンボードとVR HMDを組合せた実装環境が出来たので、アイデア抽出・ハード開発をしっかりして\n実装はこれを基本的に応用すれば、作品の試作は十分に出来るのじゃないかと。\n今年はこちらを基盤とした基盤としたハードを開発しつつ、完成度上げていきたいです。\n以下に動作の様子を載せております。\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/lLsuNXxgBgc\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n","user":"ayu1921","created_at":"2021-03-28T19:30:39+09:00","updated_at":"2021-03-28T21:22:24+09:00"},{"url":"https://qiita.com/ryo_mm2d/items/ff300c531f5ae0832eaa","title":"ConstraintLayoutを使ったフラットなレイアウトでもタッチイベントをInterceptしたい","body":"AndroidではConstraintLayoutが登場してから、より一層Viewのネストが少なく、フラットな階層のレイアウトを作れるようになりました。しかし、イベントのハンドリングなど、Viewにネストがあれば簡単だったことが難しくなっている部分も存在します。\n\n例えば、以下のように上下にスクロールするシートと、横スクロールするカルーセルがあるとします。\n\n<img width=\"400px\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/155171/f6d63e59-2e3f-d6e5-1bbc-92624989e955.gif\"/>\n\n横スクロールのカルーセルは横方向の操作しか消費しません。一方シートは縦方向の操作だけが必要です。\nこういった場合で、特にシートの大きさが十分でない等の場合、カルーセル部分を触った場合でも、操作が上下方向だった場合、動かないカルーセルではなく、シートの操作に反映した方がユーザビリティが高い場合があります。\n\n# 親子関係がある場合\n\nこのような要求がある場合、シートがカルーセルを子に持つViewGroupになっていれば実現可能です。\nシートのViewを拡張して、`onInterceptTouchEvent`をoverride、操作方向を検出してinterceptという流れですね。\n\nざっくりとした実装としてはこのような感じでしょうか。onTouchEventでの処理は適切に実装するとして、`onInterceptTouchEvent`では、`ACTION_DOWN` 時点でのポインター位置を記録、`ACTION_MOVE` では`scaledTouchSlop`以上動いた時点で、それが縦方向か横方向の操作なのかを判断し、縦方向であるならtrueを返します。\n\ntrueを返すと、子Viewには`ACTION_CANCEL`が渡され、タッチイベントは終了し、このViewの`onTouchEvent`がコールされるようになります。\n\n```kotlin\n    private var startX = 0f\n    private var startY = 0f\n    private var judged = false\n    private val scaledTouchSlop: Int by lazy {\n        ViewConfiguration.get(context).scaledTouchSlop\n    }\n\n    override fun onInterceptTouchEvent(e: MotionEvent): Boolean =\n        when {\n            e.action == MotionEvent.ACTION_DOWN -> {\n                startX = e.rawX\n                startY = e.rawY\n                judged = false\n                false\n            }\n            !judged && e.action == MotionEvent.ACTION_MOVE -> {\n                if (hypot(e.rawX - startX, e.rawY - startY) > scaledTouchSlop) {\n                    judged = true\n                    abs(e.rawX - startX) < abs(e.rawY - startY)\n                } else {\n                    false\n                }\n            }\n            else -> {\n                false\n            }\n        }\n```\n\nしかし、どちらのViewもConstraintLayoutの子である場合、こうはいきません。\nどちらも同一階層の子なので、ConstraintLayout上の上にあるViewにのみタッチイベントが伝えられ、他の子Viewはその情報を受け取ることができません。\n\n# 親子関係が無い場合\n\n解決策として、ConstraintLayoutの子View間にタッチイベントの配信に関してだけの仮想的な親子関係を持ち込むことを考えます。\nまずはそれらのViewよりも優先的にTouchEventを受け取ることができるようにする必要があります。\n対策としてはConstraintLayoutを拡張するか、子Viewを拡張するか、ヘルパーViewを導入するか、ぐらいでしょうか？\n子Viewの拡張は、子の間でイベントの受け渡しが必要であり、密結合な仕組みになってしまいますし、ConstraintLayoutの拡張にしても、ちょっとした機能要件を実現するために安易に継承を使うのはよろしくない気がします。\nってことで、ヘルパーViewを作ってみます。\n\nやることは単純で、全部のViewの一番上に、透明なViewとして被さり、最優先でタッチイベントを受け取れるようにします。注意点としては、見えなくてもいいけど、全部のViewの最上位にある必要がありますが、XMLの記述順序よりもelevationの値の方が優先されるので、elevation指定を他のViewに設定している場合は、最上位レイヤーになっているかを確認しましょう。\n\n```xml\n    <net.mm2d.myapplication.TouchInterceptHelper\n        android:id=\"@+id/touch_intercept_helper\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        />\n</androidx.constraintlayout.widget.ConstraintLayout>\n```\n\nTouchInterceptHelperの実装は以下のようになっています。\n\n```kotlin\nclass TouchInterceptHelper @JvmOverloads constructor(\n    context: Context,\n    attrs: AttributeSet? = null,\n    defStyleAttr: Int = 0\n) : View(context, attrs, defStyleAttr) {\n    var parents: List<View> = emptyList()\n    var children: List<View> = emptyList()\n    var onTouch: (View, MotionEvent) -> Boolean = { _, _ -> true }\n    var onInterceptTouch: (View, MotionEvent) -> Boolean = { _, _ -> true }\n    private var interceptableView: View? = null\n    private var consumerView: View? = null\n\n    @SuppressLint(\"ClickableViewAccessibility\")\n    override fun onTouchEvent(event: MotionEvent): Boolean =\n        offsetAndInvoke(event, -x, -y) { e ->\n            if (e.action == MotionEvent.ACTION_DOWN) {\n                interceptableView = parents.firstOrNull { it.isTarget(e) }\n                consumerView = children.firstOrNull { it.isTarget(e) }\n                if (interceptableView == null && consumerView != null) {\n                    interceptableView = consumerView\n                }\n                if (interceptableView != null && consumerView == null) {\n                    consumerView = interceptableView\n                }\n            }\n            onTouchEventInner(e)\n        }\n\n    private fun onTouchEventInner(event: MotionEvent): Boolean {\n        val consumer = consumerView\n        val interceptable = interceptableView\n        consumer ?: return false\n        return if (consumer == interceptable) {\n            onTouch.invokeTouchListener(consumer, event)\n        } else if (interceptable != null) {\n            val intercept = onInterceptTouch.invokeTouchListener(interceptable, event)\n            if (intercept) {\n                if (event.action != MotionEvent.ACTION_DOWN) {\n                    actionAndInvoke(event, MotionEvent.ACTION_CANCEL) { e ->\n                        onTouch.invokeTouchListener(consumer, e)\n                    }\n                }\n                consumerView = interceptable\n                onTouch.invokeTouchListener(interceptable, event)\n            } else {\n                onTouch.invokeTouchListener(consumer, event)\n            }\n        } else {\n            false\n        }\n    }\n\n    private fun ((View, MotionEvent) -> Boolean).invokeTouchListener(\n        v: View,\n        event: MotionEvent\n    ): Boolean = offsetAndInvoke(event, v.x, v.y) { e -> invoke(v, e) }\n\n    private fun offsetAndInvoke(\n        e: MotionEvent,\n        dx: Float,\n        dy: Float,\n        block: (e: MotionEvent) -> Boolean\n    ): Boolean {\n        e.offsetLocation(dx, dy)\n        try {\n            return block(e)\n        } finally {\n            e.offsetLocation(-dx, -dy)\n        }\n    }\n\n    private fun actionAndInvoke(e: MotionEvent, action: Int, block: (MotionEvent) -> Unit) {\n        val savedAction = e.action\n        e.action = action\n        block(e)\n        e.action = savedAction\n    }\n\n    private fun View.isTarget(e: MotionEvent): Boolean =\n        e.x in x..x + width && e.y in y..y + height\n}\n```\n\n`onTouchEvent` イベントで、監視対象のViewのどれがタッチされているのかを調べ、それらに`onInterceptTouchEvent`、`onTouchEvent` 相当の処理を実行します。\n\nポイントとしては、MotionEventの座標は、そのViewの左上を原点とする相対座標に書き換わって渡ってくるため、親基準の座標にオフセット変換した後、各子Viewの座標に変換してコール、コール後、オフセットを戻す。という作業が必要になります。\nそして、このViewに対して、親として処理したいView、子として処理したいViewをセットし、コールバック処理を書けばOKです。\n\n```kotlin\nbinding.touchInterceptHelper.let {\n    it.children = listOf(binding.horizontalScrollView)\n    it.parents = listOf(binding.sheet)\n    it.onTouch = { v, e -> v.dispatchTouchEvent(e) }\n    it.onInterceptTouch = { v, e ->\n        when {\n            e.action == MotionEvent.ACTION_DOWN -> {\n                startX = e.rawX\n                startY = e.rawY\n                judged = false\n                false\n            }\n            !judged && e.action == MotionEvent.ACTION_MOVE ->\n                if (hypot(e.rawX - startX, e.rawY - startY) > scaledTouchSlop) {\n                    judged = true\n                    abs(e.rawX - startX) < abs(e.rawY - startY)\n                } else {\n                    false\n                }\n            else -> false\n        }\n    }\n}\n```\n\nヘルパークラスで直接onInterceptTouchEventをコールしても良さそうですが、親子関係を持っていないということは、親として振る舞って欲しいけど、ViewGroupの子ではないViewもあるかもしれないので、コールバックで実装できるようにしています。\n\nこれらを実装するとこのように所望の動作を実装することができます。\n\n<img width=\"400px\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/155171/2a4a6c90-7c9c-d442-9091-293f7a29d75a.gif\"/>\n\nちゃんと実装しようとするとConstraintLayoutの拡張としてタッチでのみの階層関係を定義できるようにして～とか、いろいろ考えられます。（ここでの実装例はちょっと中途半端ですね）\n\nということで、ConstraintLayoutの子View間でタッチイベントをInterceptする仕組みの導入でした。\n","user":"ryo_mm2d","created_at":"2021-03-28T19:29:24+09:00","updated_at":"2021-03-28T19:29:24+09:00"},{"url":"https://qiita.com/akmhmgc/items/a40b91aa4f469c397f85","title":"RailsでECサイトのカート機能を実装する（ユーザーログインあり・なし両方対応）","body":"## 環境\nRuby 2.6.6\nRails 6.0.3\n\n## 実装機能\n簡単なECサイトのカート機能を作成します。\nログインユーザーにはユーザーに紐づいたカート情報を呼び出し、未ログインユーザーにはsessionを利用します。\n\n## 前提\nユーザーのログインのためにdeviseを導入しています。  (モデル名はUser)\n\n## モデル\n![ec.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1053396/e251337e-ee34-6e2b-efa8-ae6ea3dca43c.jpeg)\n\n※Userモデルは省いています\nカートモデルを作成することでカート内アイテムを管理しています。\n\n```migrationファイル\nclass CreateCartItems < ActiveRecord::Migration[6.0]\n  def change\n    create_table :cart_items do |t|\n      t.integer :quantity, default: 0\n      t.references :product, null: false, foreign_key: true\n      t.references :cart, null: false, foreign_key: true\n      t.timestamps\n    end\n  end\nend\n\n\nclass CreateCarts < ActiveRecord::Migration[6.0]\n  def change\n    create_table :carts do |t|\n      # sessionで管理する場合user_idはnullになるのでnull: falseは不要\n      t.references :carts, :user, foreign_key: true\n      t.timestamps\n    end\n  end\nend\n```\n\n```\nclass Cart < ApplicationRecord\n  has_many :cart_items, dependent: :destroy\nend\n\nclass CartItem < ApplicationRecord\n  belongs_to :product\n  belongs_to :cart\n\n  # カート内の商品合計に利用\n  def sum_of_price\n    product.price * quantity\n  end\nend\n\nclass User < ApplicationRecord\n  has_one :cart, dependent: :destroy\nend\n```\n\n## 現在のカートを参照するメソッドの定義\n```app/controllers/application_controller.rb\nclass ApplicationController < ActionController::Base\n  protect_from_forgery with: :exception\n\n  helper_method :current_cart\n  \n  def current_cart\n    if current_user\n      # ユーザーとカートの紐付け\n      current_cart = current_user.cart || current_user.create_cart!\n    else\n      # セッションとカートの紐付け\n      current_cart = Cart.find_by(id: session[:cart_id]) || Cart.create\n      session[:cart_id] ||= current_cart.id\n    end\n    current_cart\n  end\nend\n```\nユーザーがログインしている場合、紐づいたカートを参照し、なければ作成\nユーザーがいない場合、sessionからカートを参照しなければ作成しています。\n\n\n## ルーティング設定\n```\nRails.application.routes.draw do\n  .\n  .\n  .  \n  get '/my_cart' => 'carts#my_cart'\n  post '/add_item' => 'carts#add_item'\n  post '/update_item' => 'carts#update_item'\n  delete '/delete_item' => 'carts#delete_item'\nend\n```\n他のユーザーのカートを見る必要がないため、showアクションを使わずにカートの中身を見るページを作成しています。\n\n## コントローラーの作成\n```\nclass CartsController < ApplicationController\n  before_action :setup_cart_item!, only: %i[add_item update_item delete_item]\n\n  # カート内アイテムの表示\n  def my_cart\n    @cart_items = current_cart.cart_items.includes([:product])\n    @total = @cart_items.inject(0) { |sum, item| sum + item.sum_of_price }\n  end\n\n  # アイテムの追加\n  def add_item\n    @cart_item ||= current_cart.cart_items.build(product_id: params[:product_id])\n    @cart_item.quantity += params[:quantity].to_i\n    if  @cart_item.save\n      flash[:notice] = '商品が追加されました。'\n      redirect_to my_cart_path\n    else\n      flash[:alert] = '商品の追加に失敗しました。'\n      redirect_to product_url(params[:product_id])\n    end\n  end\n\n  # アイテムの更新\n  def update_item\n    if @cart_item.update(quantity: params[:quantity].to_i)\n      flash[:notice] = 'カート内のギフトが更新されました'\n    else\n      flash[:alert] = 'カート内のギフトの更新に失敗しました'\n    end\n    redirect_to my_cart_path\n  end\n\n  # アイテムの削除\n  def delete_item\n    if @cart_item.destroy\n      flash[:notice] = 'カート内のギフトが削除されました'\n    else\n      flash[:alert] = '削除に失敗しました'\n    end\n    redirect_to my_cart_path\n  end\n\n  private\n\n  def setup_cart_item!\n    @cart_item = current_cart.cart_items.find_by(product_id: params[:product_id])\n  end\nend\n```\n補足としましては、my_cartアクションでは先にカート内商品の合計金額を計算しております。\n(他にきれいな方法があるかもしれません…誰かわかる方教えてください！）\n他のアクションでは基本的にparamsに渡したproduct_idを元に、カート内の商品に変更を加えていくといった感じです。\n\n## ビューの作成(カートのみ)\n```app/views/carts/my_cart.html.erb\n<h2>カート内アイテム</h2>\n<%= render partial: \"carts/cart_item\", collection: @cart_items, as: \"cart_item\"%>\n<h2><%= \"合計：#{@total}円\" %></h2>\n```\n\n```app/views/carts/_cart_item.html.erb\n<li class=\"list-none\">\n    <%= cart_item.product.name %>\n    <%= cart_item.product.price %>\n    <%= form_with(url: update_item_url, method: :post,local: true) do |f| %>\n    <%= f.hidden_field :product_id, value: cart_item.product.id %>\n    <%= f.number_field :quantity ,value: cart_item.quantity%>\n    <%= f.submit \"更新\", class: \"\" %>\n    <% end %>\n    <%= button_to \"削除\", delete_item_path(product_id: cart_item.product.id), method: :delete,\n                                       data: { confirm: \"商品を削除しますか？\" } %>\n</li>\n```\n最低限のビューですが、カート内の商品を編集できるようになりました。\n![タイトルなし.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1053396/ce8e3359-78bf-eb6c-e704-2d09bc256dd0.gif)\n\n\n## 課題\nユーザーと紐づいたカートモデルは決済やログアウトのタイミングで削除すれば良いですが、sessionで管理しているカートモデルのデータを削除するタイミングが決済以外ないので、rake taskで定期的に削除した方がいいかもしれません…！\n\n\n## 参考\nhttps://qiita.com/Coolucky/items/89ce3a0f25c9dfdb38c1\n","user":"akmhmgc","created_at":"2021-03-28T19:26:53+09:00","updated_at":"2021-03-28T19:27:52+09:00"},{"url":"https://qiita.com/katafuchix/items/0dd79882f0a1aae901b8","title":"idiorm.php でテーブルのカラムを取得する","body":"\n```php\n\n$record = ORM::for_table(\"table_name\")->find_one();\n$columns = array_keys($record->as_array());\n```\n","user":"katafuchix","created_at":"2021-03-28T19:23:49+09:00","updated_at":"2021-03-28T19:23:49+09:00"},{"url":"https://qiita.com/nanbuwks/items/19e7a5fafd6061efb909","title":"ミニマムな HTML5 ファイルを 「HTML Standard」を見ながら書く","body":"HTML ファイルの内容を例示するのになるべくコンパクトにしたい。\n\nやっぱり HTML5 が一番コンパクト。HTML5 でミニマムに書いたもの\n\n\n```\n\n<!DOCTYPE HTML>\n<HTML><HEAD><META CHARSET=UTF-8><TITLE></TITLE></HEAD>\n<BODY></BODY>\n</HTML>\n```\n気分で大文字。\nスタイルシートとJavaScriptを使うものは以下の通り（気分で小文字）\n\n```\n\n<!doctype html>\n<html><head><meta charset=utf-8><title></title>\n<link rel=\"stylesheet\" href=\"style.css\">\n<script src=\"script.js\"></script></head>\n<body></body>\n</html>\n```\n\n# HTML Standard\n\n参照したものは HTML Standard（Living Standard — Last Updated 24 March 2021）\nhttps://html.spec.whatwg.org\n\n\n# 要素解説\n\n## ` <!DOCTYPE html> `\n\n「13.1.1 The DOCTYPE」\nhttps://html.spec.whatwg.org/#the-doctype\n\nによると、\n\n> DOCTYPEs are required for legacy reasons. \n\nということで DOCTYPE は必須らしい。\n\nこれは省略できないらしい。\nHTML5より前の\n\n` <!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\"> `\n\nだとかに比べるとシンプルになってうれしい！\n\n## ` <html>,</html> `\n\nlang指定が必要な場合は\n\n` <html lang=\"ja\">`\n\nとするけれども、charset に UTF-8 を指定するから別に無くてもいいよね。\n\n## `  <head>,  </head>`\n\nあいまいでなければ省略できる。しかしながら head タグの内側に内包する title タグは必須らしい。\n\n## `<meta charset=\"UTF-8\">`\n\nこれを明示的に書かないと、一部のブラウザで文字化けすることがあった。\n\nこちらもHTML4の時代と比べるとすっきりしていいですね！\n\n「HTML Standard」（Living Standard — Last Updated 24 March 2021）\nの「4.2.5.4 Specifying the document's character encoding」\nhttps://html.spec.whatwg.org/#character-encoding-declaration\n\nによると、\n\n> Those requirements necessitate that the document's character encoding declaration, if it exists, specifies an encoding label using an ASCII case-insensitive match for \"utf-8\".\n\nとあるので、UTF-8 の記述は大文字でも小文字でも良い。\n\n## `<title>title</title>`\n\nこれも Doctype 宣言と同様に必須らしい\n\n## `  <body>,  </body>`\n\nこれも head タグと同じくあいまいでなければ省略できる\n\ncf.,\n「HTML Standard」（Living Standard — Last Updated 24 March 2021）\nの「4.3.1 The body element」\nhttps://html.spec.whatwg.org/#the-body-element\n\n> A body element's start tag can be omitted if the element is empty, or if the first thing inside the body element is not ASCII whitespace or a comment, except if the first thing inside the body element is a meta, link, script, style, or template element.\nA body element's end tag can be omitted if the body element is not immediately followed by a comment.\n\n\n# 書き方\n\n## 引用符って省略していいの？\n\n13.1.2.3 Attributes\nhttps://html.spec.whatwg.org/#attributes-2\nhttps://html.spec.whatwg.org/#syntax-attribute-name\nによると、値は引用符、二重引用符、引用符無しそれぞれで書くことができる。\n\n\n## 要素は大文字小文字どちらでもいいの？\n\n13.1.2 Elements\nhttps://html.spec.whatwg.org/#elements-2\n\nによると、要素はASCII 大文字小文字いずれでも書くことができる。\n> Tags contain a tag name, giving the element's name. HTML elements all have names that only use ASCII alphanumerics. In the HTML syntax, tag names, even those for foreign elements, may be written with any mix of lower- and uppercase letters that, when converted to all-lowercase, matches the element's tag name; tag names are case-insensitive.\n\n## 字下げは？\n\n\n13.2.5 Tokenization\n13.2.5.1 Data state\nhttps://html.spec.whatwg.org/#data-state\n\n> Consume the next input character:\n> \n> U+0026 AMPERSAND (&)\nSet the return state to the data state. Switch to the character reference state.\nU+003C LESS-THAN SIGN (<)\nSwitch to the tag open state.\nU+0000 NULL\nThis is an unexpected-null-character parse error. Emit the current input character as a character token.\nEOF\nEmit an end-of-file token.\nAnything else\nEmit the current input character as a character token.\n\nということなので、字下げなどに使ったスペースなどはそのまま出力される。\n\n## 改行コードは？\n13.2.3.5 Preprocessing the input stream\nhttps://html.spec.whatwg.org/#preprocessing-the-input-stream\nによると、\n> Before the tokenization stage, the input stream must be preprocessed by normalizing newlines. Thus, newlines in HTML DOMs are represented by U+000A LF characters, and there are never any U+000D CR characters in the input to the tokenization stage.\n\nとあるのでプリプロセッサにて改行コードは LF コードに整形されるらしい。なのであまり気にしなくてもいいですね。\n","user":"nanbuwks","created_at":"2021-03-28T19:23:31+09:00","updated_at":"2021-03-28T19:49:40+09:00"},{"url":"https://qiita.com/takakichi3/items/eb91586ad96db604e109","title":"device.mapファイル","body":"####device.map　とは\nデバイス名と、GRUBブートローダのドライブ名との対応が記述されているファイルである。\n\n    フルパスを確認する\n    # find / -name device.map\n    /boot/grub2/device.map\n\n    中身を確認する\n    # cat /boot/grub2/device.map\n    # this device map was generated by anaconda\n    (hd0)      /dev/sda\n","user":"takakichi3","created_at":"2021-03-28T19:16:44+09:00","updated_at":"2021-03-28T19:16:44+09:00"},{"url":"https://qiita.com/naruqiita/items/ad53a1e82cb4b8f9292c","title":"APIを改めて勉強してIoT機器を動かす（LT用）","body":"\n##  目次\n\n1. APIとは\n2. 仕組み\n3. 便利ツール\n4. やってみた\n\n---\n## 1. APIとは\n\nApplication Programming Interfaceの略\n\n---\n###　機能的には\n\nソフトウェアやアプリケーションなどの一部を外部に向けて公開\n　↓↓↓↓↓\n第三者が開発したソフトウェアと機能を共有するもの\n\n---\n### つまり\n\nアプリケーション、ソフトウェアとプログラムをつなぐもの\n\n---\n### 例えば\n[よくある郵便番号を入力したら住所を入力してくれるやつ](http://zipcloud.ibsnet.co.jp/doc/api)\n[![Image from Gyazo](https://i.gyazo.com/30e8fcb957818e6f44d4441e02be53b3.png)](https://gyazo.com/30e8fcb957818e6f44d4441e02be53b3)\n\n---\n### やってみよう\n`curl -X GET https://zipcloud.ibsnet.co.jp/api/search\\?zipcode\\=あなたの郵便番号`（間のハイフンは無し）\nちなみに`curl`はサーバへ（から）データ転送を行うコマンド\n基本的な使い方はHTTPリクエスト\n\n---\n## 2. 仕組み\n\n---\n- API エンドポイント\n- API キー\n- メソッド\n- クエリパラメータ\n- ヘッダ\n- ボディ\n- レスポンス\n\n---\n## 分解してみよう\n\n---\n### API エンドポイント\nサービスに接続するためのURL\n企業などのサービス提供側が用意している\nこれがないと\nどこにデータを取りに行ったら良いかわからない\n\n---\n#### メソッド\n|ネーム|役割|コメント|\n|:-:|:--:|:--:|\n|GET|リソースの取得|一番安全|\n|POST|リソースの作成|よく使う|\n|PUT|リソースの置き換え|ファイルアップロードなど|\n|PATCH|リソースの部分更新|べき乗でない|\n|DELETE|リソースの更新|べき乗である|\n\n---\n### クエリパラメータ\n使用するAPI・サービスの種類など詳細を指定\n`https://example.com/pathparameter/{pathparameter}?queryparameter=hoge`\n\n※パスパラメータは特定のリソースを識別するために必要な情報\n\n---\n### クエリパラメータ\n特定のリソースを操作して取得する際に必要な情報\n検索やフィルタなどで使用\n\n---\n### ヘッダ\nデータの種類や、API キーなどの認証情報を入力　※POSTメソッドで指定する\n\n---\n### ヘッダ\nそもそも情報は付与してリクエストしている\ncurl -i https://api.github.com/zen\n\n---\n### ボディ\nAPIと送受信したい情報を入力。※POSTメソッドで指定する\n`{hoge_name: fugafuga,description: hogefugahoge}`\n特定のリソースを識別するために必要な情報\n※基本はJSON形式\n\n---\n### JSONかXMLか\nJSON: JavaScript Object Notation\n記述量が少なめ\nXML: Extensible Markup Language\nHTMLと同じマークアップ言語だがデータ記述用の言語\n\n---\n### JSONが増えている\n[![Image from Gyazo](https://i.gyazo.com/39edb5cd3d688e53d8d0e859dc6acbaf.png)](https://gyazo.com/39edb5cd3d688e53d8d0e859dc6acbaf)\n\n---\n### レスポンス (APIからの返答)\n同時にアクセスがある時のPATCHなどべき乗でないので設定が必要\nまた、同時のアクセスが多いものなどには\nプロキシサーバーを立ててあげることで複数のAPIアクセスを個別に行い、レスポンスをまとめて返してくれる\n\n---\n## 3. 便利ツール\n\n### Postman\n### Swagger\n\n---\n### Postman\n[![Image from Gyazo](https://i.gyazo.com/6950cd24fa220a47c7941246e0e351a7.png)](https://gyazo.com/6950cd24fa220a47c7941246e0e351a7)\n\n---\n### Postman\n- リクエストの保存ができる\n- パラメーターのカスタマイズがしやすい\n- 比較的人気\n\n---\n### Swagger\n簡単にいうと\nAPIの仕様書でリクエストも送れるもの\nサーバを立てないとリクエストが遅れないなど少し面倒\n\n---\n## 4. やってみた\n[![Image from Gyazo](https://i.gyazo.com/a3d4fb4b7a9aee965ebd24bc0ec88f10.png)](https://gyazo.com/a3d4fb4b7a9aee965ebd24bc0ec88f10)\n\n---\n### Switch botがAPIを公開している\n\n#### [SwitchBotAPI](https://github.com/OpenWonderLabs/SwitchBotAPI/blob/main/README.md#command-set-for-physical-devices)\n\n生のAPIを使って操作してみた\n\n---\n参考：\n[郵便番号検索API](http://zipcloud.ibsnet.co.jp/doc/api)\n[APIの仕組みが分かる・使いこなせる人材になれる記事（Pythonコード付き）](https://qiita.com/Saku731/items/6ae290f72e98723f165d)\n","user":"naruqiita","created_at":"2021-03-28T19:15:29+09:00","updated_at":"2021-03-28T22:34:10+09:00"},{"url":"https://qiita.com/hiyasichuka/items/f46a363101c18d1bfd70","title":"プロキシ環境下でUbuntu20.04にDockerをインストールするスクリプトをつくった。","body":"# はじめに\n社内プロキシ環境でDockerをはじめとした開発環境を構築する際、ハマったりしないでしょうか。\nそこで、３STEPでスクリプトを作成して、流すだけで最新バージョンのDockerおよびdocker-composeをインストールできるようにしました。\n社内プロキシ環境下のおかげで、環境構築に時間を溶かしている方の一助になれば幸いです。\n\n# STEP1 プロキシ設定スクリプトを作成して実行する。\n\nまず最初に社内のプロキシ情報を確認の上、下記項目を書き換えてください。\n\n- [プロキシサーバのアドレス]\n- [プロキシサーバのポート]\n\n``` bash:settingProxy.sh\n#!/bin/bash\n\n# Proxy Info\nPROXY=\"http://[プロキシサーバのアドレス]:[ポートのポート]\"\n\n# Insert Setting to .bashrc\necho \"\nexport HTTP_PROXY=$PROXY\nexport HTTPS_PROXY=$PROXY\nexport FTP_PROXY=$PROXY\nexport http_proxy=$PROXY\nexport https_proxy=$PROXY\nexport ftp_proxy=$PROXY\nexport no_proxy=\\\"127.0.0.1,localhost\\\"\nexport NO_PROXY=\\\"127.0.0.1,localhost\\\"\n\" >> ~/.bashrc\n\nsource ~/.bashrc\n\n# Add apt setting\necho \"\nAcquire::http::proxy \\\"${http_proxy}\\\";\nAcquire::https::proxy \\\"${http_proxy}\\\";\n\" > /etc/apt/apt.conf\n\n```\n\n上記のファイルを作成後、下記のようにスクリプトを実行してください。\n\n```\nsudo sh settingProxy.sh\n```\n**.bashrcファイルへは追記書き込みしていますので、再実行した場合は設定情報が追記されていきます。**\n**再実行する場合は、.bashrcファイルを開いて前の設定情報を削除してください。**\n\n# STEP2 設定やパッケージインストールするスクリプトを作成して実行する。\n\n次に設定およびパッケージインストールするスクリプトを作成します。\nポイントとしては下記です。\n\n- SSHできるようにする\n- エディタを使えるようにする\n- タイムサーバとの時刻同期\n- Windowsからリモートデスクトップできるようにする\n \n**社内NTPサーバなどと同期しておかないと、時刻がズレてくるので対応しておきます。**\n**[NTPサーバのアドレス]を書き換えてください**\n\n```bash:installPackages.sh\n#!/bin/bash\n\n# set NTP server\nsudo sed -i 's/#NTP=/NTP=[NTPサーバのアドレス]/' /etc/systemd/timesyncd.conf\n\n# Update the apt package index\nsudo apt-get update -y\nsudo apt -y upgrade -y\n\n# install OpenSSH\nsudo apt -y install openssh-server\n\n# install vim\nsudo apt-get install vim-nox -y\n\n# install xrdp\nsudo apt -y install xrdp\n\n# restart sshd\nsudo service sshd restart\n\n# restart timesyncd\nsudo systemctl restart systemd-timesyncd.service\n\n```\n\n上記のファイルを作成後、下記のようにスクリプトを実行してください。\n\n```\nsudo sh installPackages.sh\n```\n\n# STEP3 DockerおよびDocker-composeをインストール＆設定するスクリプトを作って実行する。\n\n最後にDockerおよびdocker-composeをインストール＆設定するスクリプトを作って実行します。\nポイントとしては下記です。\n\n- http-proxy.confにプロキシを設定する\n- docker-composeのバージョンは最新版を取得する\n\n\n```bash:installDocker.sh\n#!/bin/bash\n\n# Update the apt package index\nsudo apt-get update -y\n\n# install packages to allow apt to use a repository over HTTPS:\nsudo apt-get install \\\n    apt-transport-https \\\n    ca-certificates \\\n    curl \\\n    gnupg-agent \\\n    software-properties-common -y\n\n# Add Docker’s official GPG key:\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n# Use the following command to set up the stable repository. \nsudo add-apt-repository \\\n    \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\\n    $(lsb_release -cs) \\\n    stable\"\n\n# INSTALL DOCKER ENGINE\nsudo apt-get update -y\nsudo apt-get install docker-ce docker-ce-cli containerd.io -y\n\n# Create Dir\nmkdir -p /etc/systemd/system/docker.service.d\n\n# Create Proxy Setting File (overwrite)\necho \"\n[Service]\nEnvironment=\\\"HTTP_PROXY=${http_proxy}\\\"\nEnvironment=\\\"HTTPS_PROXY=${http_proxy}\\\"\nEnvironment=\\\"NO_PROXY=localhost\\\"\n\" > /etc/systemd/system/docker.service.d/http-proxy.conf\n\n# Apply Setting\nsudo systemctl daemon-reload\nsudo systemctl restart docker\n\n# Install \"docker-compose\"\nversion=`curl -s https://api.github.com/repos/docker/compose/releases/latest | \\\n        grep tag_name | \\\n        sed -e 's/[^0-9\\.]//g'`\n\nsudo curl -L \"https://github.com/docker/compose/releases/download/$version/docker-compose-$(uname -s)-$(uname -m)\" \\\n             -o /usr/local/bin/docker-compose \\\n             -x ${http_proxy}\n\nsudo chmod +x /usr/local/bin/docker-compose\n\n# check docker-compose version\ndocker version\n\n# check docker-compose version\ndocker-compose version\n```\n\n上記のファイルを作成後、下記のようにスクリプトを実行してください。\n\n```\nsudo sh installDocker.sh\n```\n**実行後、Dockerおよびdocker-composeのバージョンが表示されれば完了です。**\n\n# おわりに\n\n**Windowsのメモ帳でスクリプトを作成した場合、改行コードがCR+LFとなってエラーします。**\n**スクリプトの改行コードはLFでお願いします。**\n\nUbuntu 20.04 LTS 日本語 Remixにて正常実行したことを確認しています。\n","user":"hiyasichuka","created_at":"2021-03-28T19:15:28+09:00","updated_at":"2021-03-28T19:32:27+09:00"},{"url":"https://qiita.com/kona-pen/items/6da6abe0e9cebb070b1b","title":"Mac 時刻が狂った話","body":"#Macの時間が狂った\n\n普段からMacを利用しているのですが、偶に時刻が可笑しくなることがあります。\n時間は人それぞれですが、私の場合は4分ズレました。\n設定から手動で変えることができますが、Mac利用者はIT関係の方が利用していると思います。\n\n##Terminalを用いて時刻を直したい\n早速してみる。\n\n###macがタイムサーバーを利用の有無\n```\nsudo systemsetup -getusingnetworktime\n```\nと入力して、\n```　Network Time: Oｆｆ　```\nと出れば現在タイムサーバを利用していないという意味です。　\n###Onにする\n```\nsudo systemsetup -setusingnetworktime on\n```\n結果が　```setUsingNetworkTime: On```　と表示されれば解決。\n###どこのサーバに繋げたの？？？\nこんな疑問を持った方は感覚が素晴らしいです。\nタイムサーバーに興味出た場合下記のコマンドで接続先を参照できる。\n\n```\nsudo systemsetup -getnetworktimeserver\n```\n```Network Time Server: time.asia.apple.com```\n\nと表示されるはずです、以上でした。\n","user":"kona-pen","created_at":"2021-03-28T19:15:13+09:00","updated_at":"2021-03-28T19:23:01+09:00"},{"url":"https://qiita.com/hideokaizuka/items/a5ad7ade26d6d50d76ae","title":"emotionを用いたReactのプロジェクトでスナップショットテストをする","body":"前回書いた記事の少し発展です。\n\nhttps://qiita.com/hideokaizuka/items/2d7b636b5255e2091b70\n\n\n## スタイルではなくclass名の変更が検知される\n\n[emotion](https://emotion.sh/docs/introduction)を使って開発してるブロジェクトで[storyshots](https://storybook.js.org/docs/react/workflows/snapshot-testing)を用いたスナップショットテストを行おうとすると、そのままだとスタイルではなくclass名がテストされてるという問題があります。（以下の画像参照）\n\n![css変更テストクラス名.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/307699/2d443a17-1210-dc09-655f-83a082e98c59.png)\n\n画像を見るとわかるようにclass名の変更が検知されています。しかし、これはテストの意図としては間違っていて、スタイルの変更を検知して欲しいはずです。意外とこの辺ことについて書かれている記事がなかったので、今回はこの問題を解決する方法について紹介していきます。\n\n## 環境というか諸々のバージョン\n\n`yarn -v\n1.22.10`\n\n`node -v\nv14.11.0`\n\n`react@16.13.1`\n\n`@storybook/react@6.1.20`\n\n`@storybook/addon-storyshots@6.1.2`\n\nなどなど\n\n## 解決方法\n\n[emotion/jest](https://github.com/emotion-js/emotion/tree/master/packages/jest)を導入します。\n\n`yarn add -D @emotion/jest`\n\nstoryshotのテストのファイルに以下のように設定を追加します。\n\n```src/Storyshots.test.js\nimport initStoryshots, { multiSnapshotWithOptions } from '@storybook/addon-storyshots';\nimport { createSerializer } from '@emotion/jest';\ninitStoryshots({\n  integrityOptions: { cwd: __dirname }, // it will start searching from the current directory\n  test: multiSnapshotWithOptions(),\n  snapshotSerializers: [createSerializer()], //これが大事\n});\n```\n\nその上でテストを実行すると、\n\n![スナップショットテストスタイルの変更.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/307699/2af64a3c-b03c-de5b-17e3-6972be1f0879.png)\n\n上記の画像のように、スタイルの変更を検知してくれるようになります。\n\nこの記事が似たようなことで困っている方の助けになれば幸いです。\n\n## 参考\nhttps://emotion.sh/docs/testing\n","user":"hideokaizuka","created_at":"2021-03-28T19:12:04+09:00","updated_at":"2021-03-28T19:13:16+09:00"},{"url":"https://qiita.com/dekamintv/items/f28ace2c6167de55a64f","title":"GitHub リモートのブランチにファイルをプッシュするまでの流れ","body":"# はじめに\n何度も調べるのが面倒なので、自分用のメモとして作成しました。\n前提として、LinuxOS、GitHub上でリモートリポジトリ・ブランチは作成しているものとします。\nまた、リモートブランチをGitHubのサイト上で新規に作成した場合であるものとします。\n\n\n# 流れ\n* [①git clone ＜自分のGitHubアカウントのURL＞](#git-clone-自分のgithubアカウントのurl)\n* [②git fetch](#git-fetch)\n* [③git checkout -b ＜作成したいローカルブランチ名＞ ＜origin/リモートブランチ名＞](#git-checkout--b-作成したいローカルブランチ名-originリモートブランチ名)\n* [④git add ＜ファイル名＞](#git-add-ファイル名)\n* [⑤git commit -m \"任意のわかりやすいコメント\"](#git-commit--m-任意のわかりやすいコメント)\n* [⑥git push](#git-push)\n\n\n<a id=\"git-clone-自分のgithubアカウントのurl\"></a>\n## ①git clone ＜自分のgithubアカウントのURL＞\n既存のリモートリポジトリをローカルに落としたいときのみ。\nそうでない場合は②から始めてください。\n\n\n<a id=\"git-fetch\"></a>\n## ②git fetch\nリモートリポジトリのデータを、リモート追跡ブランチとして取得。\n今回の場合は、新規で作成したリモートブランチのデータを取得しています。\nこのコマンドで、リモートのファイル内容をローカルのファイルに反映させるわけではないです。\n（※） 反映させたい場合は、git mergeを実行する。\nちなみに、アカウント名とパスワードを求められます。\n\nまた、このコマンドの後に、「git branch -a」でリモート追跡ブランチ、ローカルブランチを確認することをお勧めします。\n\n<a id=\"git-checkout--b-作成したいローカルブランチ名-originリモートブランチ名\"></a>\n## ③git checkout -b 作成したいローカルブランチ名 origin/リモートブランチ名\n第２引数に入力した新規のリモートブランチと、ローカルブランチの橋渡しを行うとともに、第１引数の名前のブランチを作成し、移動することができます。\n単に、別のローカルブランチに切り替えたいときは、「git checkout ＜ローカルブランチ名＞」を実行します。\n\nこのコマンドの後に、「git branch -a 」で実際にローカルブランチが作成されたかを確認することをお勧めします。\n\n\n<a id=\"git-add-ファイル名\"></a>\n## ④git add ＜ファイル名＞\npushしたいファイルが、\nGit管理下のディレクトリ（.gitがあるディレクトリ）と異なるディレクトリにある場合は、パスも必要です。\n\nこのコマンドの直後に、「git status」でステージングエリアに追加されたか確認しましょう。\n\n\n<a id=\"git-commit--m-任意のわかりやすいコメント\"></a>\n## ⑤git commit -m ＜任意のわかりやすいコメント＞\n\"\"内はファイルに関する情報が簡潔でわかりやすいコメントすること。\n（特に、追加・修正・更新のいずれかであるかどうかは明示した方が良い）\n\nこのコマンドの直後に、「git log」でコミットできたかどうか確認しましょう。\n\n<a id=\"git-push\"></a>\n## ⑥git push\nいよいよプッシュです。\nアカウント名とパスワードを求められます。\n\n\n# 参考文献\n* git fetch、リモート追跡ブランチに関する記事\nhttps://qiita.com/shun_173/items/5fd10135069ee45233fd\n* GitHubのプッシュまでの流れに関する記事\nhttps://qiita.com/hgaiji/items/ead91bf04720f8eb07c0\n\n# 最後に\n今回は、初心者エンジニアながら、\nGitHubにpushするまでの流れまでを記事にさせていただきました。\n間違っている部分があれば、ご指摘いただけると幸いです。\n","user":"dekamintv","created_at":"2021-03-28T19:11:26+09:00","updated_at":"2021-03-28T22:09:19+09:00"},{"url":"https://qiita.com/syota_19910612bscplog/items/c9789a9686733b3587c4","title":"MAMP環境でtimezoneが反映されない問題の解決過去記事による罠","body":"## タイムゾーンが反映されない問題について\n### 疑う箇所\n- 編集しているphp.iniファイルは合っている？(php.infoから確認できます)\n- コメントアウトされてない？\n- 編集後に再起動した？\n\n\n## 本題\n「PHP MAMP タイムゾーンが反映されない」などで検索すると同じような解決策がずらりと並びます。\nですが今回の問題は上記にあげた疑う箇所によるものではないです。\nというのも過去記事にもMAMPのデフォルトでも同じように以下の記載になっています。\n\n```\n[Date]\n; Defines the default timezone used by the date functions\n; http://php.net/date.timezone\n; date.timezone = \"Europe/Berlin\"\n```\n\nこれを\n\n```\n[Date]\n; Defines the default timezone used by the date functions\n; http://php.net/date.timezone\ndate.timezone = \"Asia/Tokyo\"\n```\n\nと書いたら動きそうですよね？\nでもこれではうまくいきません。\n理由は簡単で「\"\"」が悪さをしています\nこれを\n\n```\ndate.timezone = Asia/Tokyo\n\nまたは\n\ndate.timezone = 'Asia/Tokyo'\n```\nに変更で動きました！\nいやー罠でした。\n\n## 後書き\n以前は「\"\"」でできてたものと推測しますが\n今はなぜできないのか調べても出てきませんでした。\nもしご存知の方いればご教授いただけたらと幸いです。\n","user":"syota_19910612bscplog","created_at":"2021-03-28T19:09:02+09:00","updated_at":"2021-03-28T19:09:02+09:00"},{"url":"https://qiita.com/Mizuki_game/items/90adf78ded2f8cf50f78","title":"ゲーム系の専門学校に通っての個人的な感想","body":"今回はゲーム系専門学校を卒業し、ゲーム業界に内定した私からゲームプログラムの専門学校はどうなの？などをお話したいと思います。\n\n\n\n###ゲーム業界を目指す方法\nまずゲーム業界にはいりたい人に向けてどうすればゲーム業界に入る方法を並べたいと思います。\n#####１，ゲーム系専門学校に入学してゲーム業界を目指す\n#####２，大学に入学してゲーム業界を目指す\nまあ、単純にこの2つが多いでしょう。\nしかしどっちのほうがいいの？と言われると私もこっちのほうが絶対いい！！とは言えません。\nなので私が専門学校を選んだ理由を言いたいと思います。\n\n#####専門学校は授業がプログラムやゲーム開発関係のみ！\n個人的にはまずこれですね。私は理系で世界史や国語などがあまり得意ではないのでプログラムの勉強1本ってところが一番うれしかったですね。高校も工業高校を選んだのですが普通科の勉強をあまりしたくないって理由もすこし込みで選んでますのでｗ\nなので私みたいな複数の勉強を平行してやるのが苦手な人は専門学校を選ぶことお勧めします。\n#####会社に入るまでの期間が大学に比べて少ない！\nもう一つはこれですね。私の専門学校では2、3、4年制とあります。\n2年制クラスに入るには少し大変なのですが、私は少しでも早くゲーム業界に入りたい気持ちがあったので頑張って2年制に入りました。\nなので大学と比べると最高2年間も期間を短くして就職することができます。\nなので早くゲーム業界に入って勉強したい！って人は専門学校をお勧めします。\n\n個人的にはこんな感じでしょうか。簡潔にまとめちゃうとジャンルの違う複数の勉強を平行してやりたくない、早くゲーム業界に入りたいって人は専門学校のほうがいいのかなと思います。\n\n###専門学校ってどんな感じなの？\n少し話題がそれてしまったので専門学校ってどんな感じかをお話したいと思います。\n#####すこし悪い言い方ですがある意味無法地帯\nゲーム系の専門学校は非常に人気でたくさんの人が入学してきます。\nその中にはいろんな人がいます。私が見た中で上げると「高校で進学しろって言われたから来た」、「ゲームできるんでしょ？楽しそう」や授業中永遠とゲームをしている奴、寝ている奴と上げるときりがないのですがはっきり言ってこんなクズたちが結構います。（もっとひどいやつもたくさんいます）\nはっきり言うとこんな奴は絶対にゲーム業界に入れません。無理です。勉強もせずにどうやってゲーム業界に入るのかって話です。\nなので専門学校で本気でゲーム業界を目指しているのであればかかわらないほうが絶対にいいです。\n\nしかしその中にも本気でゲーム業界を目指している人はもちろんいます。\nゲーム業界に入りたい人はこのような人と仲良くなりましょう。技術に関する情報交換や実際に作ったゲームをプレイしてもらってアドバイスをもらったりありがたいことしかありません。なのでこんな友達をたくさん作りましょう。\n\n#####授業はどうなの？\n授業はゲーム業界を目指す方法にも記入しましたが本当にプログラムやゲーム開発に関する授業だけといっても大丈夫です。\nなので本気で目指している人は楽しいと思います。個人的にはめっちゃ楽しかったです。\nしかしIT業界に就職する人もいるのでIT関連の授業もあったりします。\n\n#####先生たちはどうなの？\n私の通っていた専門学校はお世辞抜きでほんとに良い先生ばかりでめちゃくちゃお世話になりました。\n授業以外でもわからないところなど質問しても教えて下さったり、夜中に質問メール送っても返信してくれたりなどめちゃくちゃ助かりました。\n専門学校によって変わるかもしれませんが良い先生が多いのでわからないところは質問しまくりましょう！\n\nこんな感じですかね。なので本気で勉強したい人にはとてもおすすめできる環境ではあると思います。\n\n###人によってはいい環境\n専門学校はプログラム初心者の人が結構います。なのでスタートはほとんど同じです。安心して入学しましょう。\nしかしゲームが好きだからゲーム開発者になる！という考えはやめましょう。\nゲームを作るとゲームをプレイするは全くの別です。\nもし専門学校に入って自分がゲーム開発者に向いてないなと思いたくないのであれば一度ゲームを作ってみるのもありかもしれません。\nでも作り方を知りたいから専門学校に入るんだ！って言われるのもわかります。\nなのでボードゲームを作ってみたりする、などでも大丈夫です。0から1つのゲームを作り出してみましょう。\nそして重要なのが作ったものを周りの人にプレイしてもらって感想や改善点、苦情を聞きましょう。\nその中でめんどくさいなと思ったりしたらその人はゲーム開発者には向いてないかもしれません。\nまたゲーミングPCなどをもっている人はUnityやUE4などを使って自分で簡単に作ってみるのもありです。\nもしゲーム業界を目指すのであれば「ゲームが好き」から「ゲームを作るのが好き」に代わるようにしてみましょう！\n","user":"Mizuki_game","created_at":"2021-03-28T19:08:17+09:00","updated_at":"2021-03-28T19:08:17+09:00"},{"url":"https://qiita.com/urado/items/699740de7475064369e8","title":"デスクトップマスコットを作ってみる。【マスコットの表示編】","body":"# 初めに\nこの記事は以下の記事で作成していた内容と同じですが、\n作成中に方針を変えたため、別記事としています。\n[JavaFX＋Kotlinでデスクトップマスコットを作ってみる。【マスコットの表示編】](https://qiita.com/urado/items/140293b94cac2424dc02)\n\n上記ではJavaFXとKotlinで作成していましたが、\nマスコットアプリ作成のライブラリとして公開する際に、\n依存関係が増えないようにするため、javaのみで実行できるように変えています。\n\nそのため、以降の記事からはJavaFXもKotlinも出てきません。\n（ライブラリとしてリリースされた内容をKotlinで使用することは可能なはず）\n\nということで、似たような内容にはなると思いますが、行ってみましょう！\n\n\n\n\n\n\n\n\n\n\n\n\n#環境\n環境も変わってます。\n\n* windows10\n* Eclipse 2019-12 (4.14.0)\n\n\n\n\n\n\n\n\n\n\n\n\n\n# プロジェクトの作成\nEclipseを起動したら、パッケージエクスプローラを右クリックでプロジェクトを作成します。\n![001.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/bc428b83-b397-88dc-2ef6-4823034a70f7.png)\n\nプロジェクトの名前は**common**とします。\n\n\n\n\n\n\n\n\n\n\n\n\n\n# マスコット表示用の画面を作成\n先ほど作成したcommonの中に新たにクラスを作成していきます。\n（パッケージは任意で決めましょう）\n\nパッケージを右クリックして、クラスを作成します。\n（ちなみにパッケージを新規で作成する場合は上にある**パッケージ**を選択すると作成できます）\n![002.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/d279ea04-3a4d-fa9b-685e-f08917f7a126.png)\n\nクラスの名前も任意で決めましょう。\n（ここではJDMascotとします）\n![003.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/a331a943-5039-b51b-44b9-58269e40cb14.png)\n\nこのクラスをウィンドウとして扱えるようにJFrameクラスを継承させます。\n（クラスに内包する形でも実装できますが、現状この形にしています）\n\nクラスの宣言に**extends JFrame**を追加します。\n\n```java:JDMascot.java\n\npublic class JDMascot extends JFrame {\n\n    // クラスの中身はまだ\n\n}\n\n```\n\nこれでウィンドウとして扱えるようになりました。\n\nただ、このままだと普通のウィンドウと同じ見た目になってしまうため、\nマスコットのみ表示されるようにウィンドウの装飾を外す設定を入れます。\n\nついでに、必要な設定も入れていきます。\n\n```java:JDMascot.java\n\nprivate void setUp() {\n    // ウィンドウの外枠を外す。\n    this.setUndecorated(true);\n    // 背景色を透明にする。\n    this.setBackground(new Color(0, 0, 0, 0));\n    // タスクバーのアイコンを非表示\n    this.setType(Type.UTILITY);\n}\n\n```\n\n※ **this.setType(Type.UTILITY)**はwindowsでしか効かないらしいので注意\n\n作成した**setUp**メソッドをコンストラクタで呼ぶようにします。\n\n```java:JDMascot.java\n\npublic class JDMascot extends JFrame {\n\n    public JDMascot() {\n        // ウィンドウの設定\n        setUp();\n    }\n\n    private void setUp() {\n        // 枠を外す。\n        this.setUndecorated(true);\n        // 背景色を透明にする。\n        this.setBackground(new Color(0, 0, 0, 0));\n        // タスクバーのアイコンを非表示\n        this.setType(Type.UTILITY) ;\n    }\n}\n\n```\n\nこれで、透明なウィンドウの出来上がりです。\n\n試しに起動・・・と行きたいところですが、透明なウィンドウは\n起動しても見えないためうまくいっているかわかりません。\nそのため、先にマスコット用の画像表示ができるように処理を追加していきます。\n\n画像表示は画像表示用のクラスを作成して、JDMascotのコンポーネントとして追加するようにします。\n\n任意のパッケージを選択してクラスを作成します。\n（ここではJDImageとします）\n\n当クラスはJFrameのコンポーネントとして追加する予定のため、**JPanel**を継承させます。\n\n```java:JDImage.java\n\npublic final class JDImage extends JPanel {\n\n    // 中身はまだ\n\n}\n\n```\n\n**final**はこのクラスが継承できないクラスになるようにつけています。\n\n当クラスでは自分自身に画像を描画する処理を追加しますが、\n読み込む画像がないと描画できません。\n\nそのため、コンストラクタもしくはsetterなどを介して情報をもらうようにします。\n（ここではsetterで受け取るようにします）\n\n```java:JDImage.java\n\n/** 描画するイメージ */\nprivate BufferedImage image;\n\npublic JDImage() {\n}\n\npublic void setImage(BufferedImage image) {\n    this.image = image;\n}\n\n```\n\nこのままPanel内にイメージを追加すれば表示が可能ですが、\nマスコットが左右に動くようにしたい・・・\nこの時、右を向いたり、左を向いたりできなければ動きとして違和感が出ますよね？\n\nそのため、左右反転ができる機能をこのクラスに追加します。\n\n```java:JDImage.java\n\n/** 反転フラグ */\nprivate boolean isInvert;\n\npublic void turnLeft() {\n    isInvert = false;\n}\n\npublic void turnRight() {\n    isInvert = true;\n}\n\n@Override\nprotected void paintComponent(Graphics g) {\n    var width = image.getWidth();\n    var height = image.getHeight();\n\n    if (isInvert) {                                                          \n        var scaleInstance = AffineTransform.getScaleInstance(-1.0, 1.0);     \n        scaleInstance.translate(-image.getWidth(), 0);                       \n                                                                             \n        var formOp = new AffineTransformOp(scaleInstance, null);             \n        g.drawImage(formOp.filter(image, null), 0, 0, width, height, this);  \n    } else {                                                                 \n        g.drawImage(image, 0, 0, width, height, this);                       \n    }  \n}\n\n```\n\nJPanelの**paintComponent**メソッドをオーバライドし、処理を上書きします。\n\n**isInvert**は**true**が**右向き**、**false**が**左向き**として、\nメソッドを介して値を変更できるようにしました。\nisInvertフラグによって書き込む処理を分岐しています。\n\n後はJDMascot側のコンストラクタに作成したJDImageを生成して\nコンポーネントに追加する処理と画像の設定、反転を呼び出す処理を追加すれば完成です。\n\n```java:JDMascot.java\n\nprivate JDImage image;\n\nprivate void setUp() {\n    // ウィンドウの外枠を外す。\n    this.setUndecorated(true);\n    // 背景色を透明にする。\n    this.setBackground(new Color(0, 0, 0, 0));\n    // タスクバーのアイコンを非表示\n    this.setType(Type.UTILITY);\n    \n    // ※ここから追加した箇所\n    // 画像表示領域を作成\n    image = new JDImage();\n    // ウィンドウのフレームに追加\n    this.getContentPane().add(image);\n}\n\npublic void setMascot(BufferedImage image) {\n    this.image.setImage(image);\n    // 画像が変わるので再描画処理\n    this.repaint();\n}\n\npublic void invert(boolean isInvert) {\n\n    if (isInvert) {\n        image.turnRight();\n    } else {\n        image.turnLeft();\n    }\n\n    // 画像が変わるので再描画処理\n    this.repaint();\n}\n\n\n```\n\n# テストコードの作成\n\nこれで、マスコットを表示するための準備は整いました。\nちょっとテストしてみましょう。\n\n```java:JDMascotTest.java\n\npublic class JDMascotTest {\n\n    private static JDMascot win;\n    private static boolean flag;\n\n    public static void main(String[] args) throws Throwable {\n        win = new JDMascot();\n        // プロジェクト直下にdesktop.pngを配置しておくこと。\n        BufferedImage image = ImageIO.read(new File(\"desktop.png\"));\n\n        win.setMascot(image);\n        win.setVisible(true);\n\n        // 一定期間で反転処理を行う\n        Timer timer = new Timer(1000, e -> { testInvert(); });\n        timer.start();\n    }\n\n    private static void testInvert() {\n        flag = !flag;\n        win.invert(flag);\n    }\n}\n\n```\n\nこのテストで、マスコットの起動と反転処理の確認をします。\n\nあと、このまま起動すると、閉じる手段がないので終了する際はEclipseから終了しましょう。\n右のほうにあるの赤いボタンを押すと止まります。\n![004.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/457cb0e2-d0f5-77e9-7216-0cebfe0739cc.png)\n\n実際に動かしてみた図\n![Videotogif.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/fabf73a6-1be5-5d22-56b3-041f73f99295.gif)\n\nうむ。\n\n\n\n\n\n\n\n\n\n\n\n\n\n# 終わりに\nここではマスコットの起動と反転のみでしたが、\n実際はマウスでの操作を可能する必要があるため、\n実際のクラスの処理はもう少しあります。\n\nただ、それはそれで結構量があるので、別の記事にしようと思います。\n\n# リンク\n- [デスクトップマスコットを作ってみる。【目次】](https://qiita.com/urado/items/4a810c457cb862e370e8)\n","user":"urado","created_at":"2021-03-28T19:07:40+09:00","updated_at":"2021-03-28T19:07:40+09:00"},{"url":"https://qiita.com/urado/items/896c1ef63b76d4b6a83e","title":"デスクトップマスコットを作ってみる。【マウスの操作編】","body":"# 初めに\n前回の記事ではマスコットの表示と反転までを作成しました。\n\n今回はマウスで動かせるように処理を追加していこうと思います。\nJavaFXで行っていた時と異なり、マウスイベントについて実装を変える必要があったので\nそのあたりが中心になります。\n\n\n\n\n\n\n\n\n\n# MouseListenerの関数型インターフェース化\nJavaFXで作成していたころはFxmlにイベントを定義していましたが、\n今回からはSwingを使用しているため、同じようにはいきません。\n\nJFrameのマウスイベントを設定するためには**MouseListener**インターフェースを\n実装する必要があります。\n\nこのインターフェースにはマウス操作の必要なメソッドがずらっと定義されています。\nこれは関数型インターフェースではないため、ラムダで記述できないのです。\n\nマウスイベントごとに実装クラスを作成したり、何かしらの条件分岐を作れば\n実現可能と思いますが、めんどくさい・・・\n\n悩んだ自分はどうしたかというと、こうしました。\n\n```java:JDIMouseClicked.java\n\n@FunctionalInterface\npublic interface JDIMouseClicked extends MouseListener {\n\n    void jdMouseClicked(MouseEvent e);\n\n    @Override\n    default void mouseReleased(MouseEvent e) {\n    }\n\n    @Override\n    default void mousePressed(MouseEvent e) {\n    }\n\n    @Override\n    default void mouseExited(MouseEvent e) {\n    }\n\n    @Override\n    default void mouseEntered(MouseEvent e) {\n    }\n\n    @Override\n    default void mouseClicked(MouseEvent e) {\n        jdMouseClicked(e);\n    }\n}\n\n```\nインターフェースはデフォルトの実装ができるため、MouseListenerを実装した\nインターフェースをすべてデフォルト実装をして、抽象メソッドを一個だけにすれば\n関数型インターフェースになるということですね。\n\nこのインターフェースを必要なイベントの数だけ作成すれば、\nマスコット側で楽にマウスの処理が実装できそうです。\n\n\n\n\n\n\n\n\n\n\n\n\n\n# マウスイベントの設定\n上記の案でインターフェースを作成した後、マウスのイベントをマスコットに追加していきます。\n\n移動はマウスのドラッグ時に**現在のドラッグイベントの位置**から**最初にクリックした位置**を\n引き算すると移動後の位置が出てきます。\n\nまずはクリックした際に、どこをクリックしたかを保存する必要があるため、\nクリックイベントで位置を保存します。\n\n```JDMascot.java\n\n/** クリック位置保持用 */\nprotected JDPoint clickPoint = new JDPoint(0, 0);\n\nprivate void eventSetClickPoint(MouseEvent e) {\n    // クリック位置：X座標を取得\n    clickPoint.setX(e.getX());\n    // クリック位置：Y座標を取得\n    clickPoint.setY(e.getY());\n}\n\n```\n\n**JDPoint**クラスはただの値を保持しているだけのクラスです。\n\n```java:JDPoint.java\n\npublic final class JDPoint {\n    private int x;\n    private int y;\n\n    public JDPoint(int x, int y) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * xを取得します。\n     *\n     * @return x\n     */\n    public int getX() {\n        return x;\n    }\n\n    /**\n     * xを設定します。\n     *\n     * @param x\n     */\n    public void setX(int x) {\n        this.x = x;\n    }\n\n    /**\n     * yを取得します。\n     *\n     * @return y\n     */\n    public int getY() {\n        return y;\n    }\n\n    /**\n     * yを設定します。\n     *\n     * @param y\n     */\n    public void setY(int y) {\n        this.y = y;\n    }\n}\n\n```\n\n次はドラッグ時の処理を作成していきます。\nドラッグ時は先ほどの通り、現在のイベント位置から最初のクリック位置を引き算して\nその位置に座標を変更するようにします。\n\n```java:JDMascot.java\n\nprivate void eventMoveWindow(MouseEvent e) {\n    var moveX = e.getXOnScreen() - clickPoint.getX();\n    var moveY = e.getYOnScreen() - clickPoint.getY();\n\n    this.setLocation(moveX, this.getY());\n    this.setLocation(this.getX(), moveY);\n}\n\n```\n\nここでは何もチェックしていないですが、画面外にマスコットが出ていかないように\nチェック処理などを入れるとよいかもしれません。\n\n最後に、追加した処理をマウスイベントに設定します。\n設定するメソッドはコンストラクタで呼び出すことにします。\n\n```java:JDMascot.java\n\n/** クリック位置保持用 */\npublic JDMascot() {\n    // ウィンドウの設定\n    setUp();\n\n    // ※今回追加した箇所\n    // イベントの登録\n    setMascotEvent();\n}\n\nprivate void setMascotEvent() {\n    // クリックイベント\n    JDIMousePressed eventSetClickPoint = e -> { eventSetClickPoint(e); };\n    this.addMouseListener(eventSetClickPoint);\n\n    // ドラッグイベント\n    JDIMouseDragged eventMoveWindowDragged = e -> { eventMoveWindow(e); };\n    this.addMouseMotionListener(eventMoveWindowDragged);\n}\n\n```\n\n\n\n\n\n\n\n\n\n\n\n# テストコードの作成\n\nでは、前回作成したテストコードを使用してマウス操作が\nできるようになったかを確認します。\n\nテストコードは新規で作成していません。\n\n![Videotogif.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/555408/3a3e9f70-fc4b-5c99-b8db-407736a27231.gif)\n\nうむ。\n\n\n\n\n\n\n\n\n\n\n\n# 終わりに\n今回はマウスの操作をできるように実装しました。\n次回はアプリケーションの終了を実装する予定です。\n\n\n\n\n\n\n# リンク\n- [デスクトップマスコットを作ってみる。【目次】](https://qiita.com/urado/items/4a810c457cb862e370e8)\n","user":"urado","created_at":"2021-03-28T19:06:05+09:00","updated_at":"2021-03-28T19:06:05+09:00"},{"url":"https://qiita.com/memomaruRey/items/82f7ea73cb3cfb856925","title":"Node.jsからSlackへのレスポンス際に「あなただけに表示されています」と表示されるのを、どうにかしたい","body":"# はじめに\n\n* Slackのslash commandのリクエストに対して、普通にレスポンスを返すと「あなただけに表示されています」という状態で投稿されます\n* 他の人に投稿した内容が見えるようにする方法を簡単にまとめます。\n\n# 「あなただけに表示されています」を解消する方法\n* レスポンス内で```response_type: 'in_channel'```を指定します。 \n* ちなみに、Slackの公式サイトにも以下のように記載されています。\n\n>\nThe response_type parameter in the JSON payload controls this visibility, by default it is set to ephemeral, but you can specify a value of in_channel to post the response into the channel, like this:\n{\n    \"response_type\": \"in_channel\",\n    \"text\": \"It's 80 degrees right now.\"\n}\n参考URL : https://api.slack.com/interactivity/slash-commands\n\nデフォルトでは、```\"response_type\": \"ephemeral\"```が設定されていると書いてありますね。\n\n# サンプルコード\n```body```内で、```response_type: 'in_channel'```を指定すればOKです。\n\n```Node.js\nconst requestPromise = require('request-promise');\nconst options = {\n  url: responseURL, // SlackへのレスポンスURL\n  headers: {\n    'Content-type': 'application/json'\n  },\n  body: {\n    response_type: 'in_channel', // ★ ここで in_channelを指定\n    text: response // Slackへのレスポンス内容\n  },\n  json: true\n };\n\nres = requestPromise.post(options);\n```\n\n\n","user":"memomaruRey","created_at":"2021-03-28T19:02:49+09:00","updated_at":"2021-03-28T19:02:49+09:00"},{"url":"https://qiita.com/roki18d/items/bca8263e475e5ef78076","title":"はじめてのAzure Machine Learning","body":"\n## 概要\n\nAzure Machine Learningの入門記事です。Azure Machine Learning Studioを使って、おなじみTitanic生存予測モデルの学習を行い、学習したモデルをWebサービスとしてデプロイするところまでを実施します。\n\n\n## 前提条件\n\n* Azureのアカウントを所持していること。\n* リソースグループ、およびMachine Learningリソースが作成されていること。（作成の手順については[こちら](https://qiita.com/roki18d/private/874bb1860f504102ce4e)）\n* 機械学習スタジオが起動されていること。\n\n![スクリーンショット 2021-03-28 17.40.08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/ee18e703-f620-e28d-0721-f310a2466450.png)\n\n## データセットの作成\n\n[Kaggle](https://www.kaggle.com/c/titanic/data)よりTitanicデータセットの \"train.csv\" をダウンロードし、これをデータセットとして使用します。\n\n[データセット] メニューより、「+データセットの作成」ボタンを押下し、ローカルファイルからデータセットを作成します。\n\n![スクリーンショット 2021-03-28 17.41.08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/cf437574-169f-efdc-d8a3-ef364bffdfdf.png)\n\n作成後は以下のようなデータセットが作成されています。\n\n![スクリーンショット 2021-03-28 17.46.58.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/d5f78b5e-faa1-d263-5a81-4cf3cc64bbc4.png)\n\n## ノートブックの作成\n\n[Notebooks] メニューを開き、以下のようなディレクトリ構成を作成します。新しいノートブック、および新しいコンピューティングを作成します。\n\n![スクリーンショット 2021-03-28 17.49.12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/4f22d570-3b20-4686-fbfe-b1fe605c3abd.png)\n\n以降、ノートブック上でセルを実行していきます。\n\n\n## ワークスペースの作成\n\nワークスペースを作成します。初回実行時には認証を求められます。\n\n```python\nimport os\nimport json\nimport numpy as np\nimport pandas as pd\n\nimport azureml.core\nfrom azureml.core import Workspace\n\nprint(\"Azure ML SDK Version: \", azureml.core.VERSION)\n# Azure ML SDK Version:  1.24.0\n\nsubscription_id = 'YOUR_SUBSCRIPTION_ID'\nresource_group = 'MyResourceGroup'\nworkspace_name = 'titanicworkspace'\n\nws = Workspace(subscription_id, resource_group, workspace_name)\nprint(ws.name, ws.location, ws.resource_group, sep='\\t')\n```\n\nサブスクリプションIDはワークスペースの画面で確認できます。\n\n![スクリーンショット 2021-03-28 17.57.49.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/273f1b2e-1e9a-157e-af67-fe66972193b8.png)\n\n## 実験の作成\n\n```python\nexperiment_name = 'Demo-titanic-xgboost'\n\nfrom azureml.core import Experiment\nexp = Experiment(workspace=ws, name=experiment_name)\n```\n\n## ComputeTargetの作成\n\n```python\nfrom azureml.core.compute import AmlCompute\nfrom azureml.core.compute import ComputeTarget\nimport os\n\n# choose a name for your cluster\ncompute_name = os.environ.get(\"AML_COMPUTE_CLUSTER_NAME\", \"cpu-cluster\")\ncompute_min_nodes = os.environ.get(\"AML_COMPUTE_CLUSTER_MIN_NODES\", 0)\ncompute_max_nodes = os.environ.get(\"AML_COMPUTE_CLUSTER_MAX_NODES\", 4)\n\n# This example uses CPU VM. For using GPU VM, set SKU to STANDARD_NC6\nvm_size = os.environ.get(\"AML_COMPUTE_CLUSTER_SKU\", \"STANDARD_D2_V2\")\n\n\nif compute_name in ws.compute_targets:\n    compute_target = ws.compute_targets[compute_name]\n    if compute_target and type(compute_target) is AmlCompute:\n        print(\"found compute target: \" + compute_name)\nelse:\n    print(\"creating new compute target...\")\n    provisioning_config = AmlCompute.provisioning_configuration(vm_size = vm_size,\n                                                                min_nodes = compute_min_nodes, \n                                                                max_nodes = compute_max_nodes)\n\n    # create the cluster\n    compute_target = ComputeTarget.create(ws, compute_name, provisioning_config)\n    \n    # can poll for a minimum number of nodes and for a specific timeout. \n    # if no min node count is provided it will use the scale settings for the cluster\n    compute_target.wait_for_completion(show_output=True, min_node_count=None, timeout_in_minutes=20)\n    \n     # For a more detailed view of current AmlCompute status, use get_status()\n    print(compute_target.get_status().serialize())\n```\n\n## 学習スクリプトの作成\n\n```python\n%%writefile train.py\n\nimport os\nimport joblib\nimport numpy as np\nimport pandas as pd\n\nfrom sklearn.metrics import accuracy_score, confusion_matrix\nfrom sklearn.model_selection import train_test_split\n\nfrom xgboost import XGBClassifier\n\nfrom azureml.core import Run\nfrom azureml.core import Workspace, Dataset\n\nrun = Run.get_context()\nws = run.experiment.workspace\n\ndataset_name = \"titanic\"\ndataset = Dataset.get_by_name(workspace=ws, name=dataset_name)\n\ndf = dataset.to_pandas_dataframe()\n\nprint(df.head())\n\n# Pre-process data\ndf['Age'] = df['Age'].fillna(28.0)\ndf['Sex'] = df['Sex'].apply(lambda x: 1 if x == 'female' else 0)\n\nfeaturesCols = ['Sex', 'Age', 'Pclass']\ntargetCol = ['Survived']\n\nX = df[featuresCols].values\ny = df[targetCol].values\n\n# Split data\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=0)\n\n# Define model\nclf = XGBClassifier(\n    max_depth=3, \n    learning_rate=0.2, \n    n_estimators=100, \n    verbosity=1, \n    objective='binary:logistic', \n    random_state=0)\n\n# Fit model\nclf.fit(X_train, y_train)\n\nprint('Predict the test set')\ny_pred = clf.predict(X_test)\n\nacc = accuracy_score(y_test, y_pred)\nprint(f'Accuracy: {acc}')\n\ncm = confusion_matrix(y_test, y_pred)\nprint('Confuxion Matrix')\nprint(cm)\n\nrun.log('accuracy', acc)\nos.makedirs('outputs', exist_ok=True)\n\njoblib.dump(value=clf, filename='outputs/titanic-xgboost-model.pkl')\n```\n\n## 環境の作成\n\n```python\nfrom azureml.core.environment import Environment\nfrom azureml.core.conda_dependencies import CondaDependencies\n\n# to install required packages\nenv = Environment('myenv')\ncd = CondaDependencies.create(\n    pip_packages=['azureml-dataset-runtime[pandas,fuse]', 'azureml-defaults'], \n    conda_packages = ['scikit-learn', 'xgboost'])\n\nenv.python.conda_dependencies = cd\n\n# Register environment to re-use later\nenv.register(workspace = ws)\n```\n\n## 学習の実行\n\n学習を実行します。\n\n```python\nfrom azureml.core import ScriptRunConfig\n\nsrc = ScriptRunConfig(\n    source_directory='.',\n    script='train.py', \n    compute_target=compute_target,\n    environment=env)\n\nrun = exp.submit(config=src)\n```\n\nジョブ実行の詳細を確認します。\n\n```python\nfrom azureml.widgets import RunDetails\nRunDetails(run).show()\n```\n\nジョブ実行が完了をするまで待機します。\n\n```python\n# specify show_output to True for a verbose log\nrun.wait_for_completion(show_output=True) \n```\n\n学習が完了したら、学習スクリプトの中で設定したメトリクスを取得してみます。\n\n```python\nprint(run.get_metrics())\n# {'accuracy': 0.8379888268156425}\n```\n\n## モデルの登録\n\n学習済みモデルを登録します。\n\n```python\nmodel = run.register_model(model_name='titanic-xgboost', model_path='outputs/titanic-xgboost-model.pkl')\nprint(model.name, model.id, model.version, sep='\\t')\n# titanic-xgboost\ttitanic-xgboost:1\t1\n```\n\n[モデル] メニューから、登録したモデルが存在することが確認できます。\n\n![スクリーンショット 2021-03-28 18.39.33.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/de5d5177-83dc-2dd8-84d6-b29d0676ea5a.png)\n\n## スコアリングスクリプトの作成\n\n```python\n%%writefile score.py\n\nimport json\nimport numpy as np\nimport os\nimport pickle\nimport joblib\n\ndef init():\n    global model\n    model_path = os.path.join(os.getenv('AZUREML_MODEL_DIR'), 'titanic-xgboost-model.pkl')\n    model = joblib.load(model_path)\n\ndef run(raw_data):\n    data = np.array(json.loads(raw_data)['data'])\n    y_prob = model.predict_proba(data)\n    return y_prob.tolist()\n```\n\n## モデルのデプロイ\n\nデプロイの設定を定義します。\n\n```python\nfrom azureml.core.model import InferenceConfig\nfrom azureml.core.environment import Environment\nfrom azureml.core.model import Model\nfrom azureml.core.webservice import AciWebservice\n\nmodel = Model(ws, 'titanic-xgboost', version=1)\n\nmyenv = Environment.get(workspace=ws, name=\"myenv\", version=1)\ninference_config = InferenceConfig(entry_script=\"score.py\", environment=myenv)\n\naciconfig = AciWebservice.deploy_configuration(\n    cpu_cores=1, \n    memory_gb=1, \n    tags={\"data\": \"titanic\",  \"method\" : \"xgboost\"}, \n    description='Titanic Survival Prediction with XGBoost')\n```\n\nモデルをデプロイします。\n\n```python\n%%time\nimport uuid\n\nservice_name = 'titanic-xgboost-' + str(uuid.uuid4())[:4]\nservice = Model.deploy(\n    workspace=ws, \n    name=service_name, \n    models=[model], \n    inference_config=inference_config, \n    deployment_config=aciconfig)\n\nservice.wait_for_deployment(show_output=True)\n```\n\n[エンドポイント] メニューから、リアルタイムエンドポイントが作成されていることが確認できます。\n\n![スクリーンショット 2021-03-28 18.50.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/342646/6405ebb8-63db-38a7-c94b-d30cc5db89cd.png)\n\n\n## Webサービスのテスト\n\nエンドポイントに対してテストデータを投入し、結果が返ってくることを確認します。\n\n```python\nimport requests\n\nscoring_uri = service.scoring_uri\ninput_data = json.dumps({\"data\": [[1, 28, 1]]})\nheaders = {'Content-Type': 'application/json'}\n\nresponse = requests.post(scoring_uri, input_data, headers=headers)\nprob = json.loads(response.text)[0][1]\nprint(f'Probability of survival: {prob}')\n# Probability of survival: 0.9525420069694519\n```\n\n## まとめ\n\n以上、Azure Machine Learningを使って機械学習モデルを作成し、Webサービスとしてデプロイしてみたの記事でした。\n\n## 参考\n\n* [チュートリアル:MNIST データと scikit-learn を使用して画像の分類モデルをトレーニングする | Microsoft](https://docs.microsoft.com/ja-jp/azure/machine-learning/tutorial-train-models-with-aml)\n\n\n","user":"roki18d","created_at":"2021-03-28T19:00:12+09:00","updated_at":"2021-03-28T21:58:39+09:00"},{"url":"https://qiita.com/Hamatus/items/fe995488f424245c9d30","title":"【Railsチュートリアル】第2章 Toyアプリケーション 演習と解答","body":"Ruby on Railsチュートリアル第2章の演習問題と解答をまとめました。\n[第2章 Toyアプリケーション - Railsチュートリアル](https://railstutorial.jp/chapters/toy_app?version=6.0#cha-a_toy_app)\n\n# 演習と解答\n\n##2.2.1 ユーザーページを探検する\n\n###2.2.1 - 1\n> CSSを知っている読者へ: 新しいユーザーを作成し、ブラウザのHTML検証機能を使って「User was successfully created.」の箇所を調べてみてください。ブラウザをリロードすると、その箇所はどうなるでしょうか?\n\n答え：__消える__\n\nusersで新規ユーザーを登録（New User）後\n\n```HTML:HTML\n<p id=\"notice\">User was successfully created.</p>\n```\n```CSS:CSS\n#notice {\n  color: green;\n}\n```\n\n新しく作成されたユーザーのshowページには上記のHTMLとCSSが追加されました。\nリロードすると消えます。\n\n###2.2.1 - 2\n> emailを入力せず、名前だけを入力しようとした場合、どうなるでしょうか?\n「@example.com」のような間違ったメールアドレスを入力して更新しようとした場合、どうなるでしょうか?\n\n答え：__そのまま追加されてしまう__\n\n###2.2.1 - 3\n> 上記の演習で作成したユーザーを削除してみてください。ユーザーを削除したとき、Railsはどんなメッセージを表示するでしょうか?\n\n答え：__User was successfully destroyed.__\n\n\n##2.2.2 MVCの挙動\n\n###2.2.2 - 1\n> 図 2.11を参考にしながら、/users/1/edit というURLにアクセスしたときの振る舞いについて図を書いてみてください。\n\n![96ABCDEC-1CC9-4350-82C8-2B479477F8A8_1_105_c.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1104947/79fd66b1-9617-cda3-d305-5001fea9af34.jpeg)\n\n\n###2.2.2 - 2\n> 図示した振る舞いを見ながら、Scaffoldで生成されたコードの中でデータベースからユーザー情報を取得しているコードを探してみてください。Hint: set_userという特殊な場所の中にあります。\n\n```ruby:users_controller\n private\n    # Use callbacks to share common setup or constraints between actions.\n    def set_user\n      @user = User.find(params[:id])\n    end\n```\n\n\n###2.2.2 - 3\n> ユーザーの情報を編集するページのファイル名は何でしょうか?\n\n答え：__edit.html.erb__\n\n## 2.3.1 マイクロポストを探検する\n\n###2.3.1 - 1\n> CSSを知っている読者へ: 新しいマイクロポストを作成し、ブラウザのHTML検証機能を使って「Micropost was successfully created.」の箇所を調べてみてください。ブラウザをリロードすると、その箇所はどうなるでしょうか?\n\n答え：__消える（タグの中身が空になる）__\n\n```HTML:HTML\n<p id=\"notice\">Micropost was successfully created.</p>\n```\n```HTML:HTMLリロード後\n<p id=\"notice\"></p>\n```\n###2.3.1 - 2\n> マイクロポストの作成画面で、ContentもUserも空にして作成しようとするどうなるでしょうか?\n\n答え：__作成される__\n\n###2.3.1 - 3\n> 141文字以上の文字列をContentに入力した状態で、マイクロポストを作成しようとするとどうなるでしょうか?（ヒント: WikipediaのRubyの記事にある設計思想の引用文が140文字を超えているので、これをコピペしてみましょう）\n\n答え：__そのまま投稿されてしまう__\n\n###2.3.1 - 4\n> 上記の演習で作成したマイクロポストを削除してみましょう。\n\n答え：__destroyで削除__\n\n\n## 2.3.2 マイクロポストをマイクロにする\n\n### 2.3.2 - 1\n> 先ほど2.3.1.1の演習でやったように、もう一度Contentに141文字以上を入力してみましょう。どのように振る舞いが変わったでしょうか?\n\n答え：__エラーメッセージが表示され投稿できない__\n　　   __Content is too long (maximum is 140 characters)__\n     （コンテンツが長すぎるので140文字以内に納めてね）\n\n### 2.3.2 - 2\n> CSSを知っている読者へ: ブラウザのHTML検証機能を使って、表示されたエラーメッセージを調べてみてください。\n\n答え：__表示されたエラーメッセージのHTML、CSS部分__\n\n```HTML:HTML\n<div id=\"error_explanation\">\n  <h2>1 error prohibited this micropost from being saved:</h2>\n  <ul>\n    <li>\n      ::marker\n      \"Content is too long (maximum is 140 characters)\"\n    </li>\n  </ul>\n</div>\n```\n```CSS:CSS\n#error_explanation {\n  width: 450px;\n  border: 2px solid red;\n  padding: 7px 7px 0;\n  margin-bottom: 20px;\n  background-color: #f0f0f0;\n}\n```\n\n## 2.3.4 継承の階層\n\n###2.3.4 - 1\n\n> Applicationコントローラのファイルを開き、ApplicationControllerがActionController::Baseを継承している部分のコードを探してみてください。\n\n```ruby:application_controller.rb\nclass ApplicationController < ActionController::Base # 継承している部分\n\t\n  def hello\n    render html:\"hello,world!\"\n  end\nend\n```\n\n\n###2.3.4 - 2\n\n> ApplicationRecordがActiveRecord::Baseを継承しているコードはどこにあるでしょうか? 先ほどの演習を参考に、探してみてください。ヒント: コントローラと本質的には同じ仕組みなので、app/modelsディレクトリ内にあるファイルを調べてみると...?)\n\n```ruby:application_record.rb\nclass ApplicationRecord < ActiveRecord::Base # 継承している部分\n  self.abstract_class = true\nend\n```\n\n## 2.3.5 アプリケーションをデプロイする\n\n### 2.3.5 - 1\n\n> 本番環境で２〜３人のユーザーを作成してみましょう。\n\n答え：__作成できた__\n\n### 2.3.5 - 2\n> 本番環境で最初のユーザーのマイクロポストを作ってみましょう\n\n答え：__作成できた__\n\n### 2.3.5 - 3\n> マイクロポストのContentに141文字以上を入力した状態で、マイクロポストを作成してみましょう。リスト 2.14で加えたバリデーションが本番環境でもうまく動くかどうか、確認してみてください。\n\n答え：__本番環境でもうまく動いた__\n","user":"Hamatus","created_at":"2021-03-28T19:00:06+09:00","updated_at":"2021-03-28T19:23:08+09:00"},{"url":"https://qiita.com/urado/items/4a810c457cb862e370e8","title":"デスクトップマスコットを作ってみる。【目次】","body":"# 概要\n\nデスクトップマスコットを作るための記事のまとめです。\n\n# 元記事\n[JavaFX＋Kotlinでデスクトップマスコットを作ってみる。【マスコットの表示編】]\n(https://qiita.com/urado/items/140293b94cac2424dc02)\n\n\n# 目次\n- [デスクトップマスコットを作ってみる。【マスコットの表示編】]\n(https://qiita.com/urado/items/699740de7475064369e8)\n- [デスクトップマスコットを作ってみる。【マウスの操作編】]\n(https://qiita.com/urado/items/896c1ef63b76d4b6a83e)\n- [デスクトップマスコットを作ってみる。【アプリの終了編】]\n(https://qiita.com/urado/items/d94382e5fc53fbcc6d85)\n- [デスクトップマスコットを作ってみる。【マスコットを投げる編】]\n(https://qiita.com/urado/items/d94382e5fc53fbcc6d85)\n- [デスクトップマスコットを作ってみる。【アニメーション管理編】]\n(https://qiita.com/urado/items/f951f5f05d74be4dc9b4)\n","user":"urado","created_at":"2021-03-28T18:56:16+09:00","updated_at":"2021-03-28T19:11:26+09:00"},{"url":"https://qiita.com/yamamoto_hiroya/items/50965baa67709f33f88b","title":"PHPerKaigi2021に参加しました","body":"## はじめに\n\n[PHPerKaigi2021](https://phperkaigi.jp/2021/)というイベントに参加したので参戦記録を残します。\n今年はコロナ禍ということでオンラインでの開催となり、\n早起きをすることなくのんびり起きて自宅からまったり参加できました。\n僕が所属している[Hamee株式会社](https://recruit.hamee.co.jp/)は本イベントのスポンサーをしており、弊社からも何名か登壇しておりました。\n\n## 気になったセッション\n\n### 静的型解析を用いた大規模レガシーコードのリファクタリング計画\n\nレガシーコードに静的解析をかけると大量のエラーが出るのはあるあるだなと思いました。\n本講演の例だと約2万件のエラーが出て、それを少しずつ減らしているとのことでした。\n僕も昔経験がありますが、大体静的解析かけて大量にエラーが出て、そこで諦めちゃうんですよね。\nそこからレベル絞って少しずつ対応している姿勢に尊敬を覚えました。\nPHPDocを元に型の判別をして静的解析する、ということでしたがレガシーコードにはまずPHPDocなんて書いてないのでまずはPHPDocを充実させていくところから。\n何事も1歩ずつですね。\n\n### テクニカルサポートに精一杯だったチームが、安定運用のための開発を行えるようになるまでの道のり\n\nサポートメンバーも同席しての講演が珍しく印象に残っています。\n弊社でも開発チームとサポートチームとの間のコミュニケーションはしばしば課題になるので、課題感が近く共感して話を聞くことができました。\n部署をまたいだ朝礼など検討しようと思いました。\n本講演がyoutubeなどの媒体に動画としてアップされたら社内共有しようと思います。\n\n### モックの泥沼から脱却するために、あえてDBにつないでテストしている話\n\n発表の最後に登壇者の方もおっしゃっていましたが、結局ケースバイケース。\nモックを用意する方が良いケースもあるし、データを用意する方が良いケースもある。\nテストしたい内容、テストしたいメソッドの性質によって使い分けるのが良いと感じました。\n\n### なるせ先生のPHP学～PHP8新機能スペシャル～ \n\nなるせ先生は何を目指しているのか…。\nひとまず安定の面白さでしたｗ\n\n## 良かった点\n\n* 今年はメインセッションは全て録画放送だったので時間切れの発表はなく、発表者にとっても視聴者にとっても良かった\n* 配信がニコニコ動画だったので画面上にコメントが流れる感じが賑わい感が出て良かった\n* いつもかさばるチラシが今年は1冊の本になっていたので邪魔にならず良かった\n* フィードバックがコメントなしでも送れる仕組みだったのでイイネ感覚で送ることができた\n* GMOさんのCMが相変わらず面白かった\n* ノベルティにカレーが入っていた\n* ノベルティに温泉の素が入っていた（弊社ですが）\n\n## 悪かった点\n\n* 録画配信だったのでリアルタイムのやり取りがなく物足りなさを感じた\n* ニコニコ動画、twitter、discord、自分用メモとPOSTする先が複数あり、配信中に全てに目を通すのが難しかった\n* disocrdのask the speakerが入りにくかった\n* セッション間が20分もあり、リアル会場と違って移動とかないのでただただ暇でテンポが悪かった\n* モンスターハンターライズの発売と被っており、モンハン欲と戦うので必死だった\n\n## ベストフィードバッカー賞\n\nクロージングでツイート企画の表彰とかやってて\nくそー抽選選ばれなかったぜーと思っていたら\nまさかの「ベストフィードバッカー賞」をいただきました！！！\nめちゃびっくりして手が震えました。\n見たセッションに関しては大体フィードバックを送っていて、計21個のフィードバックを書いてました。\nベストフィードバッカー賞ありがとうございます！\nOculus Quest2がもらえるらしい（すごい）\n\n![スクリーンショット 2021-03-28 18.39.46.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/67471/7399071a-ccb2-155c-efb8-49bc7b0dcb0c.png)\n\n![スクリーンショット 2021-03-28 18.39.28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/67471/dcbd7c51-25ca-8d41-68a4-72e0207773d4.png)\n\n\n## まとめ\n\n配信なので自宅から気軽に参加できました。\n実は密かにプロポーザルを出していたのですが見事に採択されませんでした。\n次回は是非プロポーザル採択で登壇できるように精進したいと思います！\n\n![ExiQWr_VIAEoWrv.jpeg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/67471/3888d1e6-f00b-d36f-5787-82e5e46cc2dd.jpeg)\n","user":"yamamoto_hiroya","created_at":"2021-03-28T18:51:34+09:00","updated_at":"2021-03-28T18:53:06+09:00"},{"url":"https://qiita.com/yakitatata/items/be2829e2274e58408763","title":"UbuntuでAlt + Tabを現在のディスプレイに限定する","body":"サブディスプレイはワークスペースを独立させて特定のウィンドウを出しっぱにしていることが多いので、\nAlt + Tab　の挙動をカレントディスプレイに限定させたい。\n\nデスクトップGUIがGNOMEになっているUbuntuバージョンが対象です。\n古いUbuntuでUnityのやつは知らん。\n\n# gnome拡張機能をインストールできるようにする（まだやってない人だけ）\n\n```bash:\nsudo apt install chrome-gnome-shell\n```\n\n# Current screen only on window switcherのインストール\n\n以下のページにアクセスしてONにする\n\nhttps://extensions.gnome.org/extension/1437/current-screen-only-for-alternate-tab/\n\n\n","user":"yakitatata","created_at":"2021-03-28T18:46:52+09:00","updated_at":"2021-03-28T18:46:52+09:00"},{"url":"https://qiita.com/dk4130523/items/d6d8c9f72036cda6bcba","title":"Archlinux lxqt環境でデスクトップにゴミ箱/Trashが現れない場合","body":"Archlinux lxqt環境でデスクトップにゴミ箱/Trashが現れない場合、まずはgvfsを入れてみる。以上。\n\nhttps://wiki.archlinux.jp/index.php/PCManFM\n","user":"dk4130523","created_at":"2021-03-28T18:46:09+09:00","updated_at":"2021-03-28T18:46:09+09:00"},{"url":"https://qiita.com/taka1226/items/0e0d262c3108527dd7db","title":"dockerで、react-nativeの環境を構築する(expoなし、nativeのreact-native)","body":"\n#はじめに\n最近、友達と個人でreact-nativeを使ってアプリ開発をしています。そのときに環境の違いによって余計な時間がかかってしまったというのがあり、dockerを使うことにしました。存在自体は前から知っていたのですが、自分でDockerfileを作ったり、docker-compose.ymlをいじったりするのははじめてだったのでなかなか難儀しました。今回はandroidだけですが、iosでもできるように整備したいですね。\n\n##この環境の強み\nreact native関係のパッケージ(yarn,npm,node,npx)やadbなどのandroid関係のパッケージがdocker内にほぼすべて入っているので、自分のノートパソコンの環境への依存性がかなり減ります。\n\n##参考にしたgithub\nいろいろgithubを見ていたのですが、最終的にreact-native-communityのレポジトリが頻繁に更新されていて使えそうだったのでこれを利用することにしました。(https://github.com/react-native-community/docker-android)\n\n##Dockerfile\n\n```dockerfile\n#基になるdocker image\nFROM reactnativecommunity/react-native-android \n\n# watchmanとnmapをインストール(nmap は自分の好み)\nRUN apt update -qq && apt install -qq -y --no-install-recommends watchman nmap\n\n#work ディレクトリの作成\nRUN mkdir /home/react-native\nWORKDIR /home/react-native\n\n#パッケージのインストール\n#npm install ではなぜかstack over flowのようなエラーがでた\nCOPY . .\nRUN yarn install\n\n```\n\n##docker-compose.yml\n```yml\nversion: \"3\"\nservices:\n  react-native:\n    build: .\n    privileged: true\n    ports:\n      - 8081:8081\n    tty: true\n    volumes:\n      - \".:/home/react-native\"\n      - \"node_modules:/home/react-native/node_modules\"\n\nvolumes:\n  node_modules: # ここでvolumeを定義\n    driver: local\n\n```\n\n##docker-compose\nreact nativeのルートディレクトリで、docker-compose upをすれば立ち上がります。\n\n\n\n#最後に\ngithubにコードをあげています。\nhttps://github.com/taka1226/my_react_native_docker\n","user":"taka1226","created_at":"2021-03-28T18:43:21+09:00","updated_at":"2021-03-28T18:43:21+09:00"},{"url":"https://qiita.com/y_catch/items/1597a9a2ac2f7c8c43bf","title":"ざっくり、Webシステムの発展と最新状況 2021","body":"この記事では、Webシステムがどのように発展してきたのか、最新のキーワードはどこに位置付けられるのか、いろいろ調べて、ざっくりと整理してみました。\n\nWebシステムの進化のスピードは速く、その開発・運用に関わっていると、次々に登場する新しい技術に目が回りそうです。\n\n個々のキーワードを聞いたことがあっても、つながりとして理解していない人も、意外と多いようです。そうすると、技術がどのように発展してきて、どのような課題を解決してきたのか、ある程度把握していないため、新しい技術やキーワードが出てきたときに、その位置付けや効果がピンとこなかったり、枯れた技術に頼りすぎて、新しい解決策のポテンシャルを引き出せないなんてこともあるでしょう。\n\n私はエンジニアとして働いているわけではありませんが、開発ツールベンダーのマーケティングやデベロッパーサポートにたずさわっていて、新しいツールの位置付けや状況を説明しなければならないことがあります。先日の会議でも、Webシステムの典型的な構成と、発展の歴史をすこし説明したんですが、わりといい反応が得られました。\n\nそこで、調べた内容を公開することにしました。\n\nもちろん、私の調査不足・理解不足もあると思います。ご意見や追加情報などがあれば、ぜひ教えてください。\n\n## Webシステムの基本構成\n\nインターネットを経由して、世界中にWebページを配信できる**Webシステム**。すっかりお馴染みですよね。正式名称を[**World Wide Web**](https://ja.wikipedia.org/wiki/World_Wide_Web)（ワールド・ワイド・ウェブ)といいます。これを略して、**WWW**とか**Web**・**ウェブ**と呼ばれています。この記事では、Webを実現するシステムについて説明するので、Webシステムと呼ぶことにします。\n\nWebシステムの当初の目的は、論文などの情報を配信して、閲覧できるようにすることでした。そして、**リンク**という仕組みによって、WebページやWebサイトの間を移動できました。\n\nでは、Webシステムの仕組みは、どのようになっているんでしょう？\n\nWikipediaでは、Webの基本構成を次のように説明しています。\n\n> **World Wide Web**\n> 情報提供を担う者はウェブサーバを公開し、一般利用者はウェブブラウザを介してウェブサーバにある情報を閲覧するようなシステムが基本である。\n> https://ja.wikipedia.org/wiki/World_Wide_Web\n\n本当はネットワークの仕組みや、複数のサーバーを識別する方法なども重要なんですが、Webシステムによる情報の提供と閲覧に対象をしぼると、ざっくり**Webブラウザ**と**Webサーバー**に分けることができます。\n\n![Webシステムの基本構成](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/b872d748-bf5a-7a90-66aa-667a09ac7c46.png)\n\nWebブラウザでリンクをクリックすると、対象となるWebサーバーに**リクエスト**が送られます。Webサーバーは、自分へのリクエストを受け取ると、該当するWebページのあらかじめ用意しておいたHTMLファイルや画像ファイルなどを**レスポンス**として送り返します。Webブラウザは、返ってきたレスポンスをもとにして、Webページを再構成して表示します。\n\nこうして、誰でも情報を配信でき、世界中で閲覧できるようになったわけですね。\n\n1. リクエスト：Webブラウザから、閲覧したいページを要求する \n2. レスポンス：Webサーバーから、HTMLファイルや画像ファイルを返す\n3. 返ってきたレスポンスから、Webページを再構成する\n\nちなみに、Webブラウザ側を**フロントエンド**、Webサーバー側を**バックエンド**と呼びます。Webシステムが、WebブラウザとWebサーバーだけで構成されているなら、こんな呼び方は必要ありませんが、Webシステムを機能拡張していくにつれ、それぞれの側にいろいろなものを追加していって、Webブラウザ側・Webサーバー側と単純に呼べなくなるからです。\n\n## 動的な仕組みの導入\n\nさて、Webシステムが広く使われるようになると、さらに別の応用が求められるようになりました。たとえば、オンラインショッピングです。利用者が購入する商品の個数を入力したり、利用者が購入した商品を表示したり、といった機能が必要になります。そのためには、あらかじめ用意しておいたファイルを返すだけでなく、利用者や状況に合わせて、提供する情報をその場で動的に変える必要があります。\n\nこうした機能を実現するため、WebブラウザとWebサーバーの両方が機能拡張されました。\n\n![動的な仕組みの導入](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/586cd45b-de3a-831c-00b4-dca06e1b8652.png)\n\n\nWebブラウザでは、データを入力・送信する[**Webフォーム**](https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A9%E3%83%BC%E3%83%A0_(%E3%82%A6%E3%82%A7%E3%83%96))や、[**JavaScript**](https://ja.wikipedia.org/wiki/JavaScript)によるプログラムの実行という機能が導入されました。\n\nWebサーバーにも、PerlやPHP・Ruby・Javaなどで開発したアプリケーションプログラムを実行する機能が導入されました。そして、プログラムの中から、データベースにデータを保存したり読み込んだりできるようになりました。\n\nこのような機能によって、Webページのフォームにデータを入力したら、その内容をチェックして、Webサーバーにリクエストといっしょに送信。その内容に合わせて処理を切り替えるといったことが可能になりました。\n\n\n## Web三層システム\n\n多くの利用者が集ってきて、大量のアクセスが発生するWebシステムでは、1台のWebサーバーに、アプリケーションプログラム、データベースなどすべてを詰め込むのは大変です。そこで、機能に応じてバックエンドを分割した**Web三層システム**が登場しました。\n\n![Web三層システム](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/0a4b7f8f-3807-75ff-b6db-f81fec904001.png)\n\n\n各サーバーは、次のような役割を持ってます。\n\n- **Webサーバー**：複数のWebブラウザからのリクエストを受け取り、アプリケーションサーバーを呼び出す。また、アプリケーションサーバーの処理結果をもとに、レスポンスを返す。\n- **アプリケーションサーバー**：PerlやPHP・Ruby・Javaなどで開発されたアプリケーションプログラムを実行する。Webサーバーから呼び出されて処理をおこない、また、データベースからデータの読み込み・書き込みなどを橋渡しする。\n- **データベースサーバー**：その名のとおり、データベースを管理する。大容量のストレージを持ち、データの作成・更新・読み込み・削除などをおこなう。\n\nさらに大量のアクセスが集中したら、その処理負荷に合わせて、Webサーバーやアプリケーションサーバー・データベースサーバーを増設することができます。また、各サーバーを2重・3重にすることで、障害が発生しても、一部のサーバーだけを停止して対応できます。\n\n## 要素技術の発展\n\nWebを利用する人たち爆発的に増えて、あらゆる組織がWebシステムで情報を発信したり、ビジネスを展開したりするようになると、さらに柔軟で強力に安定して処理するため、それぞれの要素技術が発展しました。\n\nここでは、代表的な3つを取り上げます。\n\n### 1.フロントエンド開発技術の発展\n\nフロントエンドでは、JavaScriptと入力フォームだけでは十分な機能や表現力・操作性が得られなかったため、次のようにして解決していました。\n\n- Webブラウザの拡張プラグイン／別ツールの導入\n- オープンソースではなく、商用ソリューションとして提供\n- モバイルはPCと別にシステムを構築\n- JavaScriptも少しづつ進化\n\n![フロントエンド開発技術の発展](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/1fb524ee-3ffe-2b8c-2760-4c5351b59f5d.png)\n\n\nまず、Webブラウザに機能拡張のプラグインを導入したり、Webブラウザとは別のツールを導入したりという流れがありました。これは[**RIA**](https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%83%E3%83%81%E3%82%A4%E3%83%B3%E3%82%BF%E3%83%BC%E3%83%8D%E3%83%83%E3%83%88%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3)(Rich Internet Application)と呼ばれていました。[**Flash**](https://ja.wikipedia.org/wiki/Adobe_Flash)や[**Javaアプレット**](https://ja.wikipedia.org/wiki/Java%E3%82%A2%E3%83%97%E3%83%AC%E3%83%83%E3%83%88)・[**ActiveXコントロール**](https://ja.wikipedia.org/wiki/ActiveX)・**Silverlight**・**Adobe AIR**といったプラグインやツールがありました。\n\n当時、これらの拡張プラグインやツールは、多くの場合、商用ソリューションとして提供されていした。有償で提供したり、無償だけどデータの作成ツールは有償だったり、契約を結んだパートナーだけ提供したりして、[**オープンソース**](https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%BC%E3%83%97%E3%83%B3%E3%82%BD%E3%83%BC%E3%82%B9)にはなっていませんでした。\n\nまた、携帯電話などのモバイルと、PCから接続するWebとは、同じような技術を採用しながら別世界になっていました。当時の携帯電話は、インターネットに接続したり、Webページをそのまま閲覧するには非力だったため、モバイル専用のWebブラウザを搭載したり、モバイル専用にWebサーバーを用意したのです。たとえば、ドコモのiPhoneでは、携帯電話向けに機能を縮小したサブセットを採用していました。\n\n一方で、JavaScriptを使ったソリューションも少しずつ進化を続けていました。[**Ajax**](https://ja.wikipedia.org/wiki/Ajax)と呼ばれる非同期通信技法が、Googleマップに採用されて注目を集めました。Webブラウザ側の処理を容易に記述できるようにするため、[**jQuery**](https://ja.wikipedia.org/wiki/JQuery)というライブラリが人気を集めました。\n\n### 2.インフラストラクチャーの進化\n\nじつは、バックエンドのインフラストラクチャーでも、大きな進化がおきていました。\n\n最初のうちは、あいているPCにLinuxをインストールして野良Webサーバーにするなんてことが当たり前でしたが、本格的にWebサイトを立ち上げるようになると、サーバールームやデータセンターに設置したラックマウント型サーバーに発展しました。\n\nまた、仮想化技術を使うことで、1台のハードウェアで複数の仮想的なコンピュータを利用するようになりました。そのために[**VMware**](https://ja.wikipedia.org/wiki/VMware)・[**Hyper-V**](https://ja.wikipedia.org/wiki/Hyper-V)・[**Xen**](https://ja.wikipedia.org/wiki/Xen_(%E4%BB%AE%E6%83%B3%E5%8C%96%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2))といった仮想化ツールが使われました。\n\nさらに登場したのが[**クラウドサービス**](https://ja.wikipedia.org/wiki/%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0#%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89%E3%82%B3%E3%83%B3%E3%83%94%E3%83%A5%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%82%92%E6%8F%90%E4%BE%9B%E3%81%97%E3%81%A6%E3%81%84%E3%82%8B%E4%BC%81%E6%A5%AD)です。クラウドサービスは、仮想化されたコンピュータ資源をインターネット経由でサービスとして利用します。代表的なクラウドサービスに、[**AWS**](https://ja.wikipedia.org/wiki/Amazon_Web_Services)(Amazon Web Services )や[**Microsoft Azure**](https://ja.wikipedia.org/wiki/Microsoft_Azure)、[**GCP**](https://ja.wikipedia.org/wiki/Google_Cloud_Platform)（Google Cloud Platform）があります。\n\nクラウドサービスの登場で、インフラストラクチャーの使い方は劇的に変わりました。それまでは、サーバーの準備に数日から数週間かかっていたのが、わずか数秒になったのです。そのおかげで、必要なときに必要なだけサーバーを調達できるようになりました。\n\n![インフラストラクチャーの進化](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/df9be8b1-41c9-7118-5eb1-5d0aed3545f5.png)\n\n\n### 3.Webアプリケーションフレームワークの登場\n\nさらに、Webシステムの利用が広がるにつれて、バックエンドで必要となる機能が明らかになってきました。そして、Webシステムのプログラミングに必要となる機能が[**Webアプリケーションフレームワーク**](https://ja.wikipedia.org/wiki/Web%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF)として整備されました。\n\nWebアプリケーションフレームワークは、主に、次のような機能を持っています。\n\n- ビジネスロジックの呼び出し\n- データベースの読み込みと書き込みは\n- 処理結果に合わせてWebページを作成\n\n![Webアプリケーションフレームワーク](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/7ef39ce5-4f40-8c82-d7aa-80aa3dccc8d6.png)\n\n\nまず、アクセスしたアドレスや受け取ったデータに合わせて、ビジネスロジックの呼び出す機能です。ビジネスロジックとは、明確な定義はないようですが、業務システムであれば、その業務で扱う処理手順などを指します。データベースの読み込みと書き込みは、ビジネスロジックの処理結果に合わせて、データベースとの読み書きします。そして、処理結果に合わせてWebページを動的に作成します。\n\nこのようなWebアプリケーションフレームを利用することで、システム開発者は、ビジネスロジックを記述したり、データベースを準備したり、表示するWebページを作成できるようにするだけで、効率よく高機能なWebシステムを開発できるようになりました。\n\nWebアプリケーションフレームワークには多くの種類がありますが、[**Struts**](https://ja.wikipedia.org/wiki/Apache_Struts)や[**Ruby on Rails**](https://ja.wikipedia.org/wiki/Ruby_on_Rails)が人気を集めていました。\n\n## 現在の状況\n\n2021年現在、ネットの利用はさらに進化しています。\n\nビジネスや公共サービスから個人活動まで、ネットを通じておこなうのが当たり前になり、変化する環境にすばやく対応していくことも重要になりました。\n\nそれを支えるための技術も進化を続けています。スマートフォンやクラウドの利用は当然です。変化に対応するため、開発スタイルも、ウォーターフォールからアジャイルに変わりつつあります。\n\nでは、各技術要素はどのように変化を遂げたのでしょうか。\n\n### HTML5の登場／JavaScriptの機能向上\n\nフロントエンドは、2014年に正式勧告された[**HTML5**](https://ja.wikipedia.org/wiki/HTML5)と、2016年にリリースされた[**ECMAScript2016**](https://ja.wikipedia.org/wiki/ECMAScript)で、大きく進化しました。ECMAScriptとは、Javascriptの標準規格です。この標準規格により、多くの強力な機能がJavascriptに追加されたのです。そして、デスクトップアプリケーションやビデオゲームと同じような、利用者にとって使いやすいWebアプリが作れるようになりました。同じころ、高機能になったスマートフォンによって、モバイルでも、PC版と同じHTMLとJavaScriptが利用されるようになりました。\n\n![HTML5の登場／JavaScriptの機能向上](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/ef4f64f1-496c-3d57-6448-677f9f18ebc6.png)\n\nそして、バックエンドが持っていた、ビジネスロジックや処理結果に合わせてWebページを作成する役割がフロントエンドに移ってきました。フロントエンドとバックエンドの間でやり取りする情報も、**Web API**(Application Programming Interface)として設計することで、システムを疎結合にできました。\n\nその結果、フロントエンドで利用者向けの処理をおこない、バックエンドでシステム全体の情報を管理するというように、フロントエンドとバックエンドの役割が変化しました。フロントエンド開発とWebデザインも、バックエンドの開発から独立して、作業しやすくなりました。\n\nさらに、これらの開発ツールが多くの場合オープンソースソフトウェアとして提供される場合が増えたことから、商用のRIAツールに頼る機会が減ってきました。現在では、FlashもJavaアプレットもほとんど使われなくなっています。実際に、開発元であるアドビは2020年12月31日でFlashの配布と更新を終了しました。2018年9月にリリースされたJava11で、Javaアプレットは廃止されています。\n\nこのような利点を最大限に活かすため、JavaScriptによるフロントエンド開発フレームワークが注目を集めています。代表的なのは、Facebookが中心となって開発している[**React**](https://ja.wikipedia.org/wiki/React)と、Googleが中心となって開発している[**Vue.js**](https://ja.wikipedia.org/wiki/Vue.js)・[**Angular**](https://ja.wikipedia.org/wiki/Angular)です。どれもオープンソースソフトウェアとして提供されています。\n\nちなみに、このようなJavaScript系の開発ツールは、[**Node.js**](https://ja.wikipedia.org/wiki/Node.js)というJavaScriptライブラリによって、開発環境を効率よく管理できます。ほんらいNode.jsは、JavaScriptをバックエンドで動かすためのライブラリですが、追加ツールなどを管理する[**NPM**](https://ja.wikipedia.org/wiki/Npm_(%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E7%AE%A1%E7%90%86%E3%83%84%E3%83%BC%E3%83%AB))(Node Package Manager)によって、開発ツールや開発環境を効率よく管理できるのです。\n\n- **HTML5の登場／JavaScriptの機能向上 >>**\n**デスクトップアプリやビデオゲームと同等のWebアプリが開発可能に**\n\n - ビジネスロジックやWebページを作成する役割がフロントエンドに移行\n - Web APIの整備で、フロントエンドとバックエンドが疎結合になる\n - フロントエンド開発とデザイン作業を、バックエンドから分離\n - 商用のRIA開発ツールから、オープンソースソフトウェアに移行\n - Node.jsエコシステムによる開発環境を効率よく管理\n\n\n### DockerとKubernetesでマイクロサービス化\n\nインフラストラクチャーでは、クラウドファースト・クラウドネイティブというように、クラウドを前提にしてシステムを構築するのが当たり前になりました。\n\nそして、DockerやKubernetesを活用したマイクロサービス化が進んでいます。\n\n[**Docker**](https://ja.wikipedia.org/wiki/Docker)は、コンテナと呼ぶ技術を実現する仮想化ツールの一種で、Linux上で独立した複数の仮想Linux環境を提供します。Linux上に隔離された環境を作り出すだけなので、ハードウェアを仮想する方式と比べて、軽量でポータビリティに優れています。これも、オープンソースソフトウェアとして提供されています。多くのアプリケーションが、Dockerコンテナ形式で配布されており、Dockerコンテナを起動するだけで、対象のアプリケーションを利用することができます。\n\n[**Kubernetes**](https://ja.wikipedia.org/wiki/Kubernetes)は、コンテナ管理ツールです。コンテナ化したアプリケーションの配備(デプロイ)、負荷に応じたシステムの増減などを自動的に行います。大量のコンテナを配備および管理するために利用されます。\n\nDockerやKubernetesが力を発揮するのは、クラウド上で利用する場合です。Webサーバーやアプリケーションサーバーが必要になれば、Kubernetesがコンテナとして一瞬で起動して、必要なくなれば、コンテナごと保存してしまえばいいのです。\n\nこのような特徴を利用して、Webシステムのバックエンドは、Web三層システムから[**マイクロサービス**](https://ja.wikipedia.org/wiki/%E3%83%9E%E3%82%A4%E3%82%AF%E3%83%AD%E3%82%B5%E3%83%BC%E3%83%93%E3%82%B9)へと進化しようとしています。アプリケーションの各機能を小さなサーバーとして分割するのです。そして、その機能が必要になったときだけ、Kubernetesが呼び出します。負荷の重い処理があれば、その部分だけコンテナを追加してスケーリングできます。また、バグフィックスや機能向上も、コンテナ単位をおこなうことができます。\n\nさらに、自分たちで用意しないサービスは、APIを通じて外部サービスで利用することもできます。\n\n![DockerとKubernetesによるマイクロサービス化](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86880/cbea6174-3107-a992-8179-9ce651866bb1.png)\n\n\nこのおかげで、Webシステムのバックエンド開発が、すばやく柔軟に継続しておこなえるようになります。開発フェーズが終わったら運用フェーズに移行するというウォーターフォール型のスタイルではなく、開発(Development)と運用(Operations)に一体となって継続して取り組む[**DevOps**](https://ja.wikipedia.org/wiki/DevOps)というスタイルです。\n\n\n## まとめ\n\nというわけで、Webシステムの発展と現在の状況について説明してみました。\n\nWebシステムについて語るときに登場するキーワードについて、少し見通しがよくなったのではないでしょうか。\n\nでも、現在の状況がバラ色という訳では、ないと思います。まだまだ課題もありますし、新しい問題点が浮かび上がってくることもあるでしょう。\n\nたとえば、現在はKubernetesによるマイクロサービス化が注目を集めていますが、実際にすべてのシステムをマイクロサービス化する必要があるのか検討の余地があるでしょう。また、実際にマイクロサービス上にアプリケーションを構築するために利用できるWebアプリケーションフレームワークが必要ですが、その本命が何なのか、まだよく分かっていません。\n\n私は、[**Hexabase**](https://www.hexabase.com/)という、企業向けシステムのバックエンドクラウドサービスに関わっているので、これが本命になればいいと思います(ちょっと宣伝)。ですが、まだまだ認知度が不足しています。\n\n興味がある人たちと、ぜひ情報交換していきたいと思っています。また、この記事について、ご意見や追加情報などがあれば、ぜひ教えてください！\n\n\n## 関連ページ\n\n- [【図解】初心者が知っておきたいサーバ周りの仕組みの話 - Qiita](https://qiita.com/mi-1109/items/a8e5cfa0637ba2925b59)\n- [アイコン素材ダウンロードサイト**icooon-mono**](https://icooon-mono.com/)\n- [Hexabase](https://www.hexabase.com/)\n","user":"y_catch","created_at":"2021-03-28T18:42:21+09:00","updated_at":"2021-03-28T20:35:33+09:00"},{"url":"https://qiita.com/kuromame1020614/items/461b2fba3ca231ceb5c5","title":"OSI参照モデル","body":"#OSI参照モデル\n**7層：アプリケーション層\n6層：プレゼンテーション層\n5層：セッション層\n4層：トランスポート層\n3層：ネットワーク層\n2層：データリンク層\n1層：物理層**\n\n##アプリケーション層\n**「ユーザが操作するソフトウェアが提供する昨日の仕様や通信手順やデータ形式などを定義」**\nHHTP：Webプラウザを利用してWebページを閲覧\nHTTPS：Webプラウザを利用してWebページを閲覧するとき暗号化通信を行う\nFTP：サーバにファイル転送\nSFTP：暗号化転送\nTFTP：簡易的なファイル転送\nSMTP：メール送信\nPOP：メール受信\nTelnet：サーバの遠隔操作\nSSH：サーバの遠隔操作で同時に接続の際にパスワードを暗号化する\nこれらを**定義**する\n\n##プレゼンテーション層\n**「コンピュータとネットワークのデータ形式の変化を定義」**\nSMTP：電子メールを伝送する際に利用されるプロトコル\nFTP：サーバにファイル転送を行う際に利用されるプロトコル\nTLS：反対に下層のセッション層に渡す際はデータの暗号化通信\nどちらもファイルを転送する役目がありますが、送ったファイルがサーバで動作しているアプリケーションの形式に沿ったフォーマットでなければ思ったとおりに表示されない\n\n\n##セッション層\n**「通信の確立、維持、終了するまでの手順を規定」**\nセッションは通信の開始から終了までを管理する1つの単位\n主流のプロトコルSSL/TLS\nSSLサーバ証明書は「運営者の実在性を確認」し、ブラウザとウェブサーバ間で「通信データの暗号化」を行うための電子証明書で認証局から発行\n\n##トランスポート層\n**「正確な信号を送信する通信の企画を定めたもの」**\nプロトコルはTCPとUDP\n\n**TCP(Transmission Control Protozol)**\n通信相手とのコネクションを確立してから、データを送受信するコネクション型の通信プロトコル\nコネクションの確立は、通信相手が確実にデータを受信できることを事前に確認するための手順です。コネクションを確立して、通信相手が確実にデータを受信できることを確認してから、データの転送を開始します。そして、データを受信した宛先では、受信したことを通知するための確認応答を返します。確認応答が返ってこなければ、データが失われたと判断して再送します。また、データを分割しているときには、その順序も明確にできます。\n\n**UDP(User Datagram Protocol)**\n事前に送信相手と接続確認を取ったりせず、一方的にパケットを送り続けるコネクションレス型の通信プロトコル。高速だが信頼性に欠ける。\nデータを受信した通信相手は、確認応答を返すこともしません。コネクションレス型の転送プロトコルは、オーバーヘッドが必要ないのでデータ転送を効率よく行うことができます。しかし、確実に転送したデータが通信相手に届くとは限らないため、信頼性が低いデータの転送となります。\n\n\n##ネットワーク層\n**「サーバー同士の接続」**\nプロトコルの代表的なものはIP\n\n**IP**\nネットワークからネットワークへとパケットを運んで相手に送り届ける\n1つのデータを、より小さなブロックに分割した細切れのデータのかたまりのこと\nパケットは、「ヘッダー」と「データ」に分かれる。ヘッダーには、送信元・あて先IPアドレス、データの内容を表すフラグやTTL（Time to live）、上位層のプロトコルの種類などの情報が保存される\nコンピュータやネットワーク機器などを識別するために、IPアドレスという番号を割り当てて管理している。\n\n**IPアドレス**\nコンピュータやネットワーク機器はIPアドレスという番号で管理されている\nグローバルIPアドレス\nインターネットの世界で使用するIPアドレス\nプライベートIPアドレス\n企業内などでLANの中で使えるIPアドレス\n\n**ネットワーク部とホスト部**\nネットワーク部：どのネットワークに所属しているか示す部分\nホスト部：所属しているネットワーク内でコンピュータを識別する部分\n\n**IPアドレスのクラス**\nネットワークの規模によってクラスA,クラスB,クラスCに分かれる\nクラスA：ネットワークアドレス部8ビット、ホストアドレス24ビット→使用できる台数16777214台\nクラスB：ネットワークアドレス部16ビット、ホストアドレス16ビット→使用できる台数65534台\nクラスC：ネットワークアドレス部24ビット、ホストアドレス8ビット→使用できる台数254台\n\n##データリンク層\n**「通信回線のことを示し正確に通信する規則を定める」**\n代表的な組み合わせはMACアドレスによるイーサネット接続\nMACアドレス（Medium Access Control Address）とはノード間のデータ転送を行う際の宛先として使われるアドレスでコンピュータ機器の製造時に割り振られたもので、これを物理アドレスやノードIDともいいます。イーサネット（Ethernet）とは主に室内や建物内でコンピュータや電子機器をケーブルで繋いで通信する有線LAN（構内ネットワーク）の標準の一つで、最も普及している規格です。また室内でも「無線LAN」がありLANケーブルを必要としない通信技術も存在します。要するにイーサネットの概念は有線でも無線でもローカルエリア（室内、企業のオフィス内）のネットワークである\n\n\n##物理層\n**「ハードウェアのコネクタ形状やピン数などの物理的な接続を定めるもの」**\n\n\n","user":"kuromame1020614","created_at":"2021-03-28T18:41:04+09:00","updated_at":"2021-03-28T18:41:04+09:00"},{"url":"https://qiita.com/nasubiee/items/861b4e93979415920e3b","title":"プログラミング未経験だったぼくのエンジニア転職日記【面接編_前編】","body":"#はじめに\n昨年9月からプログラミングスクールに通って、プログラミングを勉強し始めてから早半年、この度、自社開発企業複数社様から内定をいただくことができました。そこで、スクールのカリキュラム終了後から転職活動までの経験をこれから複数回に分けて投稿していこうと思います。こんな人もいるんだなあという感じで見てください。\nこれまで、シリーズ化してきた体験談も面接編でラストです。面接編は二回に分けて投稿予定で、今回はその前編です。\n第一回はポートフォリオの作り方、第二回はWantedlyの活用方法について書いているので、そちらも見ていただけると嬉しいです。\n\nhttps://qiita.com/nasubiee/items/bc297d11eac734c126bd\n\nhttps://qiita.com/nasubiee/items/78c094890d52163909d3　\n\n# 転職活動概要\n### 転職活動期間\nぼくは主に2月初旬〜3月中旬にかけて約7週間ほど転職活動を行っていました。このうち、最後の2週間は、1社だけ選考を続けていた期間なので、実質の活動期間としては約5週間です。この5週間で何をやっていたかに関しては、以下の通りです。\n\n* 最初の3週間：企業研究、面接対策、Wantedlyでの応募、カジュアル面談、面接(2社)\n* 後半の2週間：面接(10社)、企業研究\n\nこのうち、最初の3週間はもう少しうまくできたかなという思いもあります。ここに3週間かかった理由は主に2つあります。1つは自分の行動力が足りなかったことと、もう1つはスクールの応募解禁前だったことです。このうち、前者は自分自身の問題なので、もっとどんどんWantedlyで応募するなど、改善の余地はあったなと思います。ただ、前半の反省も踏まえて、後半の2週間の行動力全振りみたいな方針につながったので、この辺は何とも言えない部分です笑。この後半2週間については、以下の__転職活動戦略__の中で話そうと思います。\n\n### 転職活動戦略\nぼくの転職活動の戦略(特に後半の2週間)は、シンプルに面接を__受けまくる__ことでした。具体的には、後半の__2週間で12回__面接を受けました。この期間は1日1回以上のペースで受けていたので、さすがに自分でもやりすぎかなと思う部分もありましたが、結果としては、この方法を取って本当によかったなと思います。具体的に、短期間で多くの面接を受けるメリット・デメリットをまとめると以下のようになると思います。\n\n* メリット<br>\n進展が早い / 面接の場慣れができる / 望みを持てる選択肢が多く精神的に嬉しい / 当初志望度が高くない企業でも思わぬ良さを発見できる\n* デメリット<br>\n体力的にはきつい / 1回1回の面接の割り切りができない場合は精神的にきつい / 自己応募一本だと企業とのやり取りが大変\n\nこの中でも、特に1回1回の__面接の割り切り__についてお話しようと思います。ぼくは計12社の面接を経験しましたが、言葉は悪いですが、ある程度、面接練習と割り切って、志望度が高い企業から低い企業まで幅広く受けていました。個人的には、この意識がすごく良かったなと思っていて、最悪、選考に落ちても精神的ダメージは少ないですし、面接の内容も志望動機以外はほぼ同じなので、ある程度落ち着いた心持ちで、本命の企業を受ける前に面接官の反応を確かめることができます。また、当初、志望度が低い企業でも、特にCEOやCTOの方の話に魅力を感じ、その企業の本当の良さを知れるなんてこともあるかなと思います。\n\n以上の話から、デメリットよりメリットの方に魅力を感じる方は、短期間に多くの面接を受ける手法を取るのは向いてるのかなと思います。\n\nまた、短期間で面接をするという点は個人の向き・不向きがあるとは思いますが、多くの企業を受けるという点は、現職との折り合いがつけば、これを見てる方全員に薦めたいと思ってます。というのも、前回の投稿でも触れましたが、IT業界で実務を経験していない状態での志望順位なんて、そんなに正当性はなく、面接をしてみて企業の良さがわかることも多くあると思います。ぼくも転職活動前後で志望順位なんてまるっきり変わってます。良くも悪くも比較して初めて分かることは多いので、出来るだけ多くの企業の方の話を聞くというのは大事なことかと思います。\n\n### 転職活動結果\n以上の方針で転職活動を行ったぼくの戦績は、以下の通りです。\n\n||選考フェーズ|企業数|備考|\n|:---:|:---:|:---:|:---:|\n|①|書類応募|17|応募経路内訳<br>（Wantedly経由5社、スクール経由11社、その他1社）|\n|②|書類通過|13|内1社はその後自主辞退|\n|③|一次+二次面接通過|4||\n|④|最終面接通過<br>（内定）|4|自社開発企業3社、SES企業1社|\n\n各選考フェーズについての話は、書類選考と面接それぞれにこだわりポイントがあって長くなりそうなので、次回の後編で書いていこうと思います。\n\n\n# 終わりに\n今回は、自分の転職活動の大まかな流れについて書いてみました。面接をやってみて思ったのは、ありきたりな話ですが、慣れがものを言う部分も多いと思うので、1回1回の結果を気にしすぎないマインドセットが大事ということでした。次回は、各選考フェーズについて詳しく書いていくので、そちらも見ていただけると嬉しいです！\n","user":"nasubiee","created_at":"2021-03-28T18:40:24+09:00","updated_at":"2021-03-28T18:40:24+09:00"},{"url":"https://qiita.com/hayase_nuts/items/22b1f1bc7fe4128f2efd","title":"Nreal Light devloper kitでGooglePlayを使えるようにする方法 ","body":"Nreal Light devloper kitでGooglePlayを使えるようにする方法を見つけたので自分の備忘録的に書いておきます。\n\nこちらの記事を参考に\nhttps://bibinbaleo.hatenablog.com/entry/2020/07/31/141343\n\nScrcpyを使ってNreal LightのAndroid画面をPCに写すことができました。\n\nYouTubeアプリをapkインストールで入れてみましたが白い画面になってしまい起動ができません。\n\nGooglePlayを入れるとGoogle Play Servicesが必要とのこと\n\n以下のapkを上から順番でインストールすると解決します。\n1.[Google Account Manager (Googleアカウントマネージャー)](https://www.apkmirror.com/apk/google-inc/google-account-manager/google-account-manager-5-1-1743759-release/google-account-manager-5-1-1743759-android-apk-download/)\n2.[Google Services Framework (Googleサービスフレームワーク)](https://www.apkmirror.com/apk/google-inc/google-services-framework/google-services-framework-5-1-1743759-release/google-services-framework-5-1-1743759-android-apk-download/)\n3.[Google Play Services (Google Play開発者サービス)](https://www.apkmirror.com/apk/google-inc/google-services-framework/google-services-framework-5-1-1743759-release/google-services-framework-5-1-1743759-android-apk-download/)\n4.[Google Play Store (Google Play ストア)](https://www.apkmirror.com/apk/google-inc/google-play-store/google-play-store-15-8-23-release/google-play-store-15-8-23-all-0-pr-259261889-android-apk-download/)\n\nfireタブレットを購入した時もGooglePlayStoreが入っていないことを思い出して同じ方法でやってみたらできました。\n次は以下の記事で紹介されているNebulaとSTYLY for Nrealのインストールを試みてみたいと思います。\nhttps://styly.cc/ja/manual/stylyfornreal-manual/\n\n\n参考\nhttps://kodomotablet.com/how-to-install-google-play-on-fire-tablet/\n\n\nNreal Light devloper kitはかけた状態で右側のつるのボタンを長押しすることでAndroid画面を表示させることができます。\nただ、操作ができないので別に入れても意味ないなと思いました。\nBluetoothで画面をPCにミラーリングさせれば操作はできそうですが…\n","user":"hayase_nuts","created_at":"2021-03-28T18:40:20+09:00","updated_at":"2021-03-28T19:04:37+09:00"},{"url":"https://qiita.com/ryoto_qiita/items/502926601f051169b5f9","title":"WinActor Ver6.3.0とVer7.2.0のVerの違いと使用感レビュー","body":"# はじめに\n\n* バージョンの違いを難しい言葉で説明されてもわからない。\n* 実際両方とも使用した人の声が聞きたい。\n\nそんな初心者の方に向けた記事です。\n\n# 本題の Verの違い & 使用感\n\nVer6.3.0とVer7.2.0の使用感の大きな違いは**3つ！**\n\n* 項目ごとに分かれていたウィンドウが **１つ** ！\n* 変数の個数上限が **256** から **上限無し** ！\n* <font color = \"RED\">圧倒的</font>**処理速度**！\n\n## 使用感詳細\n>　項目ごとに分かれていたウィンドウが **１つ**\n\n今、Ver7.2.0以前を使用している方が一度は必ず\n**「ウィンドウ分かれてるのどうにかならないのかなぁ」**と思ったのではないでしょうか？\n\nモニターが余っていれば２つ、余ってない時は１つの画面で使用していたのですが、\n**Ver6.3.0** の時は毎回「ウィンドウごとに位置を変えて～」「大きさを変えて～」と\nちまちま行ってました。\n\n~~この手間が毎日あると結構やる気を削がれたりも~~\n\n**その作業が Ver7.3.0 になってからはウィンドウを １つ 動かすだけで済むわけです！**\n\n使用したことが無い方からすると、とても些細な変更だと思うのですが\n高頻度で使う方からすると <font color = \"RED\">**とても**</font> 大きな変更になると思います。\n***\n> 変数の個数上限が **256** から **上限無し**\n\n上限解放は関係ある方とない方が居るとは思うのですが、私は前者でした。\nExcelファイル間のデータ移行で変数が300ほど必要と判明。\n\n~~Ver.6.3.0しか使ったことがない当時の私は「どうすれば良いのか...」と絶望してました~~\n***\n> <font color = \"RED\">圧倒的</font>**処理速度**\n\nもう何も説明は要らないでしょう。\nただただ、処理速度が<font color = \"RED\"> 格段 </font>に上がりました。\n体感 ３ 倍(それ以上かも)です。~~完全にシ○アのモビルスーツです、絶対<font color = \"RED\"> 赤色 </font>です。~~\n\nただ、これが意外と良い事ばかりではなく...\n\n処理速度が **速すぎて** ウェブの応答速度が間に合わない事も多々...\n「一度テスト実行して、応答が間に合わない所には **待機** を追加してっと」\n速すぎるのも案外困ったものです。\n\n# まとめ\n\n個人的な総合的評価はVer7.2.0が良いと感じました。\n流石最新版だけあるな...といった所でしょうか。\n\nVer7.2.0にも所々不具合もあるので、そういう詳しい話も今後出来たらいいなと思ってます。\n\n## おまけ\n\nWinActorを使用していてわからない事は 必ず 出てくると思います。\n**「でも、質問する宛てが無い！」**という方は[公式のユーザーフォーラム](https://winactor.com/questions/)を利用してみてください。\nきっと先人達が<font color = \"RED\"> 解決法 </font>や<font color = \"YELLOW\"> アドバイス </font>を教えてくれるはずです☺\n\n<br>\n**何か不備等ありましたらコメントお願いします。**\n","user":"ryoto_qiita","created_at":"2021-03-28T18:38:24+09:00","updated_at":"2021-03-28T18:42:01+09:00"},{"url":"https://qiita.com/YutaNakamura1413/items/945ab02d8e9625c25828","title":"【Bubble入門 Part.1】5分で作るTwitter","body":"# [Bubble](https://bubble.io/)とは\nウェブサービスを作るためのノーコードサービスです。\n学習コストも低く、直感にしたがってUIやロジックを組み立てれるのが特徴です。\n\n新規事業の仮説検証に使ってみたのですが、非常に高速にプロトタイプを作ることができました。\n慣れてしまえば、今回紹介する簡単なTwitter風アプリなら5分程で作ることができます。\nこの記事では、非エンジニアでも作れるようにスクショ多めで解説してますので、もしこの記事にたどり着いた方は再現してみてください。\n\n# Bubbleを学ぶ方法\n最初はBubbleが提供している[チュートリアル](https://bubble.io/lessons)を一通り行うことを強くお勧めします。\n\nチュートリアル後はとにかく手を動かすことだと思っています。その一歩目となれるように基本的な機能のみでTwitter風アプリを作っていく過程を細かめに説明したいと思います。\n\n# この記事で学べるBubble技術\n- Input Form\n- Work Flow\n- Data (モデル)\n- Repeating Group\n- Popup （モーダル）\n\n# BubbleでTwitterを作る\n## アプリケーションを作成する\n[Bubble](https://bubble.io/home)にアクセスし、「New application」を押します。\n\nアプリケーションの名前などを入力して、「Create a new app」をクリックします。\nアプリケーションの名前が他のアプリケーションと被っていては作成できないので、お好きな名前にしてください。\nまた、その他の入力項目も今回作るアプリケーションには特に影響しないので、お好きなものを選んでください。\n![スクリーンショット 2021-03-26 1.37.19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/b51f77bd-affb-bfe3-05ab-0eba9fca6f1d.png)\n\n## 準備\nデフォルトでBubbleのLPのような画面が作られていると思いますので、まずはこちらを全て消していきましょう。\n「Elements tree」には画面を構成するElementたちが表示されているので、「右クリック→削除」で全て消してください。\n![スクリーンショット 2021-03-26 1.42.48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/dce349f1-bc98-cc92-ac47-60e914f13097.png)\n\n最終的にスマホで見ることを想定して、画面の横幅と高さを設定しましょう。\n画面上にあるグレーの部分をダブルクリックするとそのElementの設定パレットが出てくるので、WidthとHeightを設定してください。今回は「３７５ x 812」で作っていきます。\n![スクリーンショット 2021-03-27 14.09.11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/b2757076-399a-73d3-d0ec-2fe3936aa02d.png)\n\n## ツイートを投稿 （Input From, Data, Work Flow）\nツイートを投稿できるフォームを作っていきましょう。\nと言ってもやることは、「UI Builder」の中にあるElementから「Input」と「Button」を設置するだけです。\n![スクリーンショット 2021-03-27 15.00.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/26f79ec2-9f3c-4803-c8ca-32c6cbfdf05f.png)\nこれだけでツイートを投稿する上で必要な画面は完成です。\n\n次はツイートの内容を保存するデータベースを作っていきましょう。\n画面左のDataタブからデータベースの作成ができます。\n①「New Type」にTweetと入力し、Createを押すと、これでデータタイプ（モデル）ができます。\n②「Create a new field」からツイートの内容を保存するフィールドを作成できます。\nこれでTweetを保存するデータベースの準備は終わりです。\n![スクリーンショット 2021-03-27 18.26.21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/02d6b313-9a96-6ed5-3775-5823e9eea86d.png)\n![スクリーンショット 2021-03-27 18.24.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/6b167ddc-9d53-6228-f409-2c1836e32b8b.png)\nでは続いて、ツイートボタンを押した時に、Input Elementに入力されたテキストを保存するロジック（workflow）を作っていきます。\nDesignタブに戻り、ツイートするボタンを選択し、設定パレットの「Start/Edit workflow」を押すと、workflowタブに移動します。\n![スクリーンショット 2021-03-27 19.12.06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/e08f7835-5f71-0520-b325-fa32cf77cb86.png)\n「ボタンを押された時」に、「Data」に「新たなオブジェクトを作成」するというworkflowを作成します。\n「Button ツイートする is clicked」→「Data（Things）」→「Create a new thing...」を選択し、パネルにて保存するデータを設定します。\n![スクリーンショット 2021-03-27 19.16.12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/9a0d383b-33c3-bd16-f36d-dd4db194bc9a.png)\nTypeにはTweetを選択し、「Set another field」から「contents = Input Tweet's value」とすることで、入力欄に入れたテキストがTweetのcontentsフィールドに格納されるようになります。\n![スクリーンショット 2021-03-27 19.31.47.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/ac3b3495-de10-1945-2c36-5b573e37cd70.png)\nついでに、「ツイートボタンを押した時」に、「入力欄の中身をリセットする」というworkflowを作っていきます。\n「Click here to add an action...」→「Element Actions」→「Reset inputs」を設定するだけで、リセットされるようになります。\n![スクリーンショット 2021-03-27 19.37.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/a80c162f-8b99-b17e-20ff-13e704884fba.png)\nこれでツイートを投稿は完成です。\n## ツイートを表示 (Repeating Group)\nでは、投稿されたツイートを表示する部分をRepeating Groupを使って作成していきます。\nDesignタブで「UI Builder」→「Containers」→「Repeating Group」を選択し、画面の下部に設置します。\nRepeating Groupの設定パネルにて、Type of contentとData sourceをそれぞれ以下で設定してください。\n・Type of content:「Tweet」\n・Data source:「Do a Search for」→「Type： Tweet」\nこれにより、Repeating Groupの1セルに対して、データベースに格納された１ツイートのデータが割り当てられます。\n![スクリーンショット 2021-03-27 19.47.26.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/c2049f04-f104-e2ba-3a8a-8450abc74741.png)\nしかしまだ、これだけではツイートの内容は表示されません。\nTweetのデータベースに格納されたcontentsフィールドの内容を表示するために、「UI Builder」の「Text」をRepeating Groupの一番上のセルに配置します。\nTextの表示内容には「Insert dynamic data」から「Current cell's Tweet」→「contents」を選択します。\nこれでツイートの中身が随時Repeating Groupに表示されていきます。\n![スクリーンショット 2021-03-27 23.58.25.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/6b697ea7-8807-7190-b4a5-5a52a684744d.png)\n\nここで一度表示確認のため、Bubble画面の右上にある「Preview」を押して、表示を確認してください。\nツイート内容を入力し、ボタンを押すとその内容が随時表示されていきいます。\n\n## サインアップ機能 (Popup, Sing up)\nこれだけでは物寂しいので、サインアップ機能とツイートと一緒にユーザー名を表示するように作っていきます。\nまず初めにサインアップ画面を作っていきます。\n今回はPopup（モーダル）を使って、画面を作っていきます。「UI Builder」→「Containers」→「Popup」を選択し、画面中央に配置します。\nまたそのPopup上に、「user name」「mail」「password」の入力欄と「Sing up」ボタンを作成します。\nここまでできれば、あとは「Sign up」ボタンにworkflowを作成していくだけです。\n先ほどと同じようにWorkflowタブを開きます。\n「Sign upボタンが押された時」に「ユーザーSign up」を行う。というWorkflowを作ります。\n![スクリーンショット 2021-03-28 0.29.56.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/c82aff17-cc79-aaf5-f4a5-3a7cc56b44c7.png)\nEmailとPasswordには、先ほど作った入力欄の値をそれぞれ入れてください。\n「User name」は、現状ではUserモデルにフィールドがないため、保存できませんが、このWorkflow設定パネル上から新たなフィールドを作成することができます。\n「Change another field」→「Create a new field」をクリックし、Field nameに「user_name」、Field typeを「text」とすることでユーザー名を格納するフィールドを作成できます。\nEmailとPassword同様にuser_nameフィールドにも入力欄のvalueを格納するように設定します。\n![スクリーンショット 2021-03-28 0.35.22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/79365e13-8c1b-f059-bbe7-8a6caa4efda1.png)\nサインアップが成功した際には、モーダルを閉じて欲しいので、「Element Actions」→「Hide」→「ElementにPopup」を設定します。\n![スクリーンショット 2021-03-28 0.43.26.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/4e216d33-9a95-2dd7-4ff7-e427da17968d.png)\n最後にページが開かれた時に、モーダルが表示されるように設定しましょう。\n「Click here to add an event」→「General」→「Page is loaded」でページが開かれた時のWorkflowを設定できます。\n![スクリーンショット 2021-03-28 0.57.56.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/a2471c64-6d35-b695-cdb4-ce90804371dd.png)\n先ほどのモーダルを閉じるのと逆で「Show Popup」をActionに設定します。\n![スクリーンショット 2021-03-28 0.59.50.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/770aa565-7bc9-03d5-228f-de67d3d504bd.png)\nこれで、サインアップ機能の完成です。\n\n## ツイートにユーザー名を表示する (Repeating Group, Data)\nBubbleでは、「作成されたオブジェクトはどのユーザーによって作られたオブジェクトなのか？」という情報をデフォルトで保存するようになっています。\nDataタブで確認してみると、TweetモデルのフィールドにCreator（TypeはUser）というフィールドがあることが確認できます。\nこのフィールドにどのユーザーがこのTweetオブジェクトを作ったのかが保存されています。\n![スクリーンショット 2021-03-28 18.13.10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/3ed26684-e376-8985-356c-6bab450ebc6a.png)\nつまり、ツイートにユーザー名を表示するためには、「Tweetオブジェクト」の「Creator」の「user name」を表示させれば良いということになります。\nここまでわかれば、ツイートの内容を表示した時とほとんど同じです。\nUI BuilderからTextを選択し、「Repeating Group」の一番上のセルに配置して、「Current cell's Tweet」→「Creator」→「user_name」の順番で入力していきます。これだけでユーザー名を表示することができます。\n![スクリーンショット 2021-03-28 18.18.11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/77cd46d7-d10f-958f-6ad5-c98e41819f93.png)\n\n最後に「Preview」を押して、表示確認してください。\nサインアップした状態で、ツイートしユーザー名が一緒に表示されていればOKです。\n![スクリーンショット 2021-03-28 18.25.58.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/265251/9f10bda0-e43a-9975-2750-f710f951752d.png)\n","user":"YutaNakamura1413","created_at":"2021-03-28T18:28:28+09:00","updated_at":"2021-03-28T18:28:28+09:00"},{"url":"https://qiita.com/hironity_jp/items/1d41c7ebf8bc25bc5015","title":"AWS SAP 勉強方法について（時間の取れない方向け、2021年3月時点）","body":"#記事概要\n先日、AWS SAP（ソリューションアーキテクトプロフェッショナル）試験を受験し合格する事が出来ました。\n\n平日まとまった学習時間が取れず、勉強法を工夫してみましたので、同じ状況の方の参考になればと思い、記事を書いています。個人的に分かりづらかった項目や、試験当日の感想なども記載しています。\n\n※この情報は2021年3月時点の情報となります。今後試験問題の改訂など状況が変わった場合、参考にならない可能性もありますので、ご承知置きください。\n\n#今までに取得したAWS資格\n|コード|  資格名称  |  受験日  | スコア |\n| ---- | ---- | ---- | ---- |\n| SAA-C02 | Solutions Architect - Associate  |  2020/12/6  | 753 |\n| SAP-C01 |  Solutions Architect - Professional  |  2021/3/7  | 761 |\n\n両方とも結構ギリギリめです。\n\n#筆者情報・AWSサービス使用歴\n- Webエンジニア\n- AWS実務利用1年半程度\n    - よく使用するサービス\n        - EC2, RDS, ALB, S3, CloudWatch, Lambda, CloudFormation, SNSなど\n    - 利用経験のあるサービス\n        - API GateWay, DynamoDB, SCT, DMS, Kinesis Data Firehose, SESなど\n\n# 使用教材等\n目新しさは無いですが、以下3つを使用しました。\n\n1. [試験対策本: 『AWS認定ソリューションアーキテクト -プロフェッショナル　試験特性から導き出した演習問題と詳細解説』](https://www.amazon.co.jp/dp/4865942483)\n2020年6月初版の書籍です。解説が詳細で分かりやすく、分かりにくいサービスや概念などを図示している箇所もあり、大変参考になりました。\n![スクリーンショット 2021-03-28 15.51.10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/365656/e6d41fe3-391a-ec2e-edad-15040302e2fa.png)\n\n\n2. [Udemy教材: AWS 認定ソリューションアーキテクト プロフェッショナル模擬試験問題集（全5回分375問）](https://www.udemy.com/course/aws-53225/)\n問題範囲が広く、恐らく実際に出題された問題に近い問題を揃えていると思われます。こちらをこなす事で色々なサービスに関する知識を身につけられます。また、スマホアプリもありますので、手軽に空き時間で問題を解く事も可能です。\nまれに、正解や解説が若干怪しい部分がありますので、公式サイトなども併せて確認すると効果的だと思います。セール時の購入がおすすめです。\n\n3. [AWS公式ドキュメント](https://docs.aws.amazon.com/index.html)\nできればこちらで全てのサービスに関する情報を確認したいところですが、英語であったり、分かりづらい箇所もありますので時間効率を考えて、概要は分かりやすい2次情報などで理解→詳細や正確な情報の理解は公式を利用など上手に使うのが望ましいと個人的には考えています。\n\n# 学習方法概要\n- 試験対策本をざっと1週する\n- Udemy教材で問題を繰り返し解く\n- 足りない知識は公式サイトなどで適宜インプット\n\n学習方法については、以下サイト等を参考にさせていただきました。\n\n- [AWS SAP試験 合格後の反省と勉強したこと](https://dev.classmethod.jp/articles/aws-sap-review-by-ohmura/)\n- [【AWS認定試験】６試験（CLF・SAA・SAP・SOA・DVA・DOP）合格までの道のりと勉強方法について（2020年4月時点）](https://qiita.com/gomasa/items/6ce860a2e11a620c92ae#%E3%81%BE%E3%81%A8%E3%82%81)\n\n## 具体的な学習方法\n###30分を1コマとして学習内容を分割する\n平日は仕事等でまとまった時間が取れない方も多いと思います。\nUdemyの問題などは、**1回分（75問）を全て一度にやろうとすると2時間以上はかかる**事になり、間違えた問題の見直しや解説内容の理解などに要する時間を含めると時間の確保が難しいです。また、75問の内容を一度に記憶するのは私の場合不可能でした。\n\nそのため、問題を解くのであれば15問を1セットにする等で、**1回の学習時間を30分程に抑えます。**\nこの方法で、通勤の電車内などの時間で学習を行います。\n\n\n###同じ内容を1日の中で繰り返し学習する  \nよほど能力の高い方以外は、一度学習した事を全て記憶しておくのはなかなか難しいと思います。ですので、1日の中で同じ事を繰り返し学習する事で脳に記憶を定着させます。\n具体的に私の場合、朝の移動時間に解いた問題を帰りの移動時間で再度解くなどしていました。個人差がありますが、1日に数回繰り返すと効果的な様です。\n\n##試験会場\n今まで2回程受験していますが、2回とも試験会場で受験しています。自宅でのオンライン受験も可能なようですが、通信状態が悪くなる可能性等を考えて会場受験としています。\n\n##受験中の感想\nSAPは長丁場です。180分間で75問を回答しますが、問題文が長めで終盤は集中力が切れてきます。時間配分について、1問2分で解く事にすると、30分の見直し時間が確保できる計算になります。15問終了時点で30分以内を目安とするなどして時間管理をしながらの受験をおすすめします。\n\n試験当日は問題をガンガン解いてから本番に臨むなどはやめて、軽く参考書やサイトを眺めるぐらいにとどめた方が吉です。（受験前に疲れてしまうため）\n\nまた、試験のセオリーかもですが、分からない問題は飛ばして分かりやすい問題から回答し、余った時間で飛ばした問題を解く方法は有効だと思います。既に解けている問題が多いと精神的にも余裕が出てきます。\n\n##個人的に分かりづらかったポイント\n- ハイブリッド環境におけるユーザー認証\n    - SAMLアサーションやWeb Identity Federation, SSOを使用する場合など、パターンが豊富で全体的な理解が難しい\n    - 参考サイト\n        - [AWS Directory Service](https://docs.aws.amazon.com/ja_jp/directoryservice/latest/admin-guide/what_is.html)\n        - [AWS 認定ソリューションアーキテクト – プロフェッショナル資格試験に向けた知識の整理 IDフェデレーションとDDoS対策](https://qiita.com/fkooo/items/a6d71407b2bed42332cc)\n        - [Amazon Cognito を利用した認証と認可の流れ - 概要の理解 編\n](https://qiita.com/YamaguchiKenya/items/a8bb71c94dca49f1802b)\n        - [AWS SSOを図解してみた](https://dev.classmethod.jp/articles/aws-sso-wakewakame/)\n\n- オンプレとAWSの接続\n    - VPN, DirectConnect, DirectConnect Gateway, LAG, CloudHub, etc..など登場するサービスが多く使用する機会もなかったため、イメージがしづらい\n    - 参考サイト\n        - [顧客拠点から Amazon VPCへの接続パターンまとめ](https://dev.classmethod.jp/articles/whitepaper-translate-jpn-vpc-connectivity-options-01/)\n        - [AWS Direct Connect とは\n](https://docs.aws.amazon.com/ja_jp/directconnect/latest/UserGuide/Welcome.html)\n        - [VPN CloudHub を使用して安全なサイト間通信を提供する\n](VPN CloudHub を使用して安全なサイト間通信を提供する\n)\n\n##まとめ・最後に\nSAPの学習方法として、問題を解く -> 足りない知識を補う -> 問題を解くの繰り返しが効果的だと思います。\nまた、1日の中で繰り返し同じ事を学習し、長期記憶に定着させましょう。\n私自身は学習期間約3ヶ月間、受験前の問題正答率は8割程でした。\n\nこれから受験される方の参考に少しでもなれば幸いです。\n","user":"hironity_jp","created_at":"2021-03-28T18:26:42+09:00","updated_at":"2021-03-28T18:29:23+09:00"},{"url":"https://qiita.com/y-fuku/items/b8cf42468bc7212a9e40","title":"pyrealsense2をMacのpyenv,pipenv環境にインストールする","body":"#はじめに\npyrealsense2をmacのpyenv,pipenv環境にインストールした際の備忘録。\n基本のビルド方法は@comachiさんの記事を参考にさせていただきました。\n[Mac に pyrealsense2 をインストールする](https://qiita.com/comachi/items/14b358568365bc5ee474)\n\n#検証環境\nmacos 10.15.7\nIntel® RealSense™ SDK 2.0 (v2.43.0)\npyenvとpipenv環境(Python3.7.7で作成)\n\n#ビルド＆インストール\n\nlibrealsenseのソースは以下のようにgit cloneするか、[公式サイト](https://www.intelrealsense.com/sdk-2/)からDLします。\n公式サイトでは[Xcodeを使ったビルド方法が紹介されています](https://dev.intelrealsense.com/docs/macos-installation-for-intel-realsense-sdk)が、普通にmakeでもできるんですね。\n\n今回は仮想環境をpython3.7.7で構築する前提で進めます。python3.7.7のバイナリは、/Users/xxxxxxxxx/.pyenv/versions/3.7.7/bin/python3　にあるとします（xxxxxxxxの部分は各自のユーザー名に置き換えてください）。\n\n```\n$ brew install libusb pkg-config\n$ brew install homebrew/core/glfw3\n$ brew install cmake\n$ git clone https://github.com/IntelRealSense/librealsense.git \n$ cd librealsense\n$ mkdir build && cd build\n$ cmake .. -DBUILD_EXAMPLES=true \\\n-DBUILD_WITH_OPENMP=false \\\n-DHWM_OVER_XU=false \\\n-DBUILD_PYTHON_BINDINGS=true \\\n-DPYTHON_EXECUTABLE:FILEPATH=/Users/xxxxxxxxx/.pyenv/versions/3.7.7/bin/python3 \\\n-G \"Unix Makefiles\"\n$ make\n$ sudo make install\n```\n\npyrealsense2のインストールパスを確認\n\n```\n$ find /usr -name pyrealsense*\n....\n....\n/usr/local/lib/python3.9/site-packages/pyrealsense2\n/usr/local/lib/python3.9/site-packages/pyrealsense2/pyrealsense2.2.43.0.cpython-37m-darwin.so\n/usr/local/lib/python3.9/site-packages/pyrealsense2/pyrealsense2.2.43.cpython-37m-darwin.so\n/usr/local/lib/python3.9/site-packages/pyrealsense2/pyrealsense2.cpython-37m-darwin.so\n```\n\nこの辺は人によって違うと思われますが、私の場合、\n/usr/local/lib/python3.9/site-packages/pyrealsense2\n以下にインストールされていることがわかります。なお、見た感じpython3.7対象のバイナリが3.9のディレクトリ以下に生成されてしまっていますので、本来の3.9など別のpythonバージョンで使うときは都度ビルドしなおした方がよいでしょう。\n\n#pipenv環境の構築\n作業ディレクトリにpipenv環境を作成します。今回はpython 3.7.7で環境構築しています。\n\n```\n$ mkdir realsense-test\n$ cd realsense-test\n$ pyenv local 3.7.7\n$ pipenv --python 3.7.7\n```\n\n#pipenv環境にpyrealsense2をコピーする\n\nさて、最近のバージョンのlibrealsenseではインストールプロセスになにがしか問題があるようで、通常の環境でもpyrealsense2がすんなり動作しないケースがあるようです。特に今回仮想環境を使っているのでややこしさ倍増です。そこで美しくありませんが、ライブラリを作業ディレクトリにばくっとコピーして解決します。\n\nさきほどのpyrealsense2ディレクトリ以下に生成された６つの.soファイルをすべて作業用ディレクトリにコピーしましょう。\nimportをしてpipeline()してエラーが出なければDone！　うまくできていない場合pipeline()で落ちます。\n\n\n```\n$ cp /usr/local/lib/python3.9/site-packages/pyrealsense2/* .\n$ pipenv run python3 -c \"import pyrealsense2 as rs; rs.pipeline();\"\n```\n\nlibrealsense/wrappers/python/examples/ 以下のサンプルファイルも実行してみましょう。\n\n以上。\n\n\n\n\n","user":"y-fuku","created_at":"2021-03-28T18:25:27+09:00","updated_at":"2021-03-28T18:32:00+09:00"},{"url":"https://qiita.com/quryu/items/fea4fa0998fa9810e4bf","title":"AWS Cognito トリガーを使ってサインアップ・サインインのログを取る","body":"# 目的\n\nCognitoで認証システムを構築したをWebサイトに対して、サインアップやサインインがどのくらい行われたのかログを取りたかった。\n\n# トリガー\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/621414/c5792a75-f3d5-4890-0840-adadf4d5ccdb.png)\n\n\n\n上記のようにlambda関数を指定する。すると以下のようなログがCloudWatch Logsに出力される。\n\nサインアップ前・・・サインアップ時にユーザーが送信する情報が含まれる\n\n```\n{\n\t'version': '1',\n\t'region': 'ap-northeast-1',\n\t'userPoolId': 'ap-northeast-1_XXXXXXXXX',\n\t'userName': 'test-user-29',\n\t'callerContext': {\n\t\t'awsSdkVersion': 'aws-sdk-js-2.6.4',\n\t\t'clientId': 'xxxxxxxxxxxxxxxxxxxxxxxxx'\n\t},\n\t'triggerSource': 'PreSignUp_SignUp',\n\t'request': {\n\t\t'userAttributes': {\n\t\t\t'email': 'xxxxxxxxxxxx@sample.com'\n\t\t},\n\t\t'validationData': None\n\t},\n\t'response': {\n\t\t'autoConfirmUser': False,\n\t\t'autoVerifyEmail': False,\n\t\t'autoVerifyPhone': False\n\t}\n}\n```\n\n認証前・・・サインイン時にユーザーが送信する情報が含まれる\n\n```\n{\n\t'version': '1',\n\t'region': 'ap-northeast-1',\n\t'userPoolId': 'ap-northeast-1_XXXXXXXXX',\n\t'userName': 'test-user-13',\n\t'callerContext': {\n\t\t'awsSdkVersion': 'aws-sdk-js-2.6.4',\n\t\t'clientId': 'xxxxxxxxxxxxxxxxxxxxxxxxx'\n\t},\n\t'triggerSource': 'PreAuthentication_Authentication',\n\t'request': {\n\t\t'userAttributes': {\n\t\t\t'sub': 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx',\n\t\t\t'email_verified': 'true',\n\t\t\t'cognito:user_status': 'CONFIRMED',\n\t\t\t'email': 'xxxxxxxxxxxx@sample.com'\n\t\t},\n\t\t'validationData': {},\n\t\t'userNotFound': False\n\t},\n\t'response': {}\n}\n```\n\n# Lambda関数\n\n画像にあるlambda関数は以下の通り。\n\n```python\ndef lambda_handler(event, context):\n    print(event)\n    return event\n```\n\n# 参考記事\n\nhttps://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-lambda-pre-sign-up.html\n\nhttps://docs.aws.amazon.com/ja_jp/cognito/latest/developerguide/user-pool-lambda-pre-authentication.html\n","user":"quryu","created_at":"2021-03-28T18:22:21+09:00","updated_at":"2021-03-28T18:22:21+09:00"},{"url":"https://qiita.com/namidayo/items/acf989a144df6b65b148","title":"Swaggerでモックサーバーを作成するまで","body":"つい最近中長期のハッカソンにフロントエンドエンジニアの友達と出場する機会がありました。\nその際に(API開発を待つことなく)スムーズに開発をしてもらえるようSwaggerを用いてAPI仕様書の定義 & モックサーバーを提供する機会があったのでその際の手順をまとめていきたいと思います :muscle_tone1: \n\n# SwaggerHub上でAPI仕様書(yaml)を定義\n- [Swagger](https://swagger.io/): REST APIを定義するためのAPI開発フレームワーク\n- [SwaggerHub](https://swagger.io/tools/swaggerhub/?utm_source=aw&utm_medium=ppcg&utm_term=swaggerhub&utm_content=437792116777&utm_campaign=9551186114&gclid=CjwKCAjwr_uCBhAFEiwAX8YJgW5zx6zoxmyKTUyzVolYiZqMQq-Kh3RZUamVE_2aRUCz5_emNV_DbhoCzeUQAvD_BwE&gclsrc=aw.ds): 公式が提供している、エディタやモックサーバを立てたりできる便利なサービス\n\n今回はよくあるTwitterの簡易版のようなものを作成するとします\n\n| エンドポイント | 詳細 |\n| --- | --- |\n| GET /posts | 投稿一覧 |\n| POST /posts | 投稿作成 |\n| GET /posts/:id | 投稿詳細取得 |\n| PUT /posts/:id | 投稿更新 |\n| DELETE /posts/:id | 投稿削除 |\n\nこれらをyaml形式で定義すると以下のようになります\n\n```swagger.yaml\nopenapi: 3.0.0\ninfo:\n  title: Twitter簡易版\n  description: Twitter簡易版\n  version: 1.0.0\nservers:\n- url: https://virtserver.swaggerhub.com/[ユーザー名]/[サービス名]/1.0.0\n  description: SwaggerHub API Auto Mocking\ntags:\n- name: post\n  description: 投稿関連\npaths:\n  /posts:\n    get:\n      tags:\n      - post\n      summary: 投稿一覧\n      operationId: getPosts\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: '#/components/schemas/post'\n                x-content-type: application/json\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-swagger-router-controller: Post\n    post:\n      tags:\n      - post\n      summary: 投稿作成\n      operationId: createPost\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body'\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/post'\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-swagger-router-controller: Post\n  /posts/{id}:\n    get:\n      tags:\n      - post\n      summary: 投稿詳細\n      operationId: getPostById\n      parameters:\n      - name: id\n        in: path\n        description: 投稿ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: 12345678\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/post'\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-swagger-router-controller: Post\n    put:\n      tags:\n      - post\n      summary: 投稿更新\n      operationId: updatePost\n      parameters:\n      - name: id\n        in: path\n        description: 投稿ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: 12345678\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/body_1'\n      responses:\n        \"201\":\n          description: Created\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/post'\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-swagger-router-controller: Post\n    delete:\n      tags:\n      - post\n      summary: 投稿削除\n      operationId: deletePost\n      parameters:\n      - name: id\n        in: path\n        description: 投稿ID\n        required: true\n        style: simple\n        explode: false\n        schema:\n          type: string\n        example: 12345678\n      responses:\n        \"204\":\n          description: NoContent\n        \"400\":\n          description: BadRequest\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n        \"500\":\n          description: InternalServerError\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/ErrorResponse'\n      x-swagger-router-controller: Post\ncomponents:\n  schemas:\n    post:\n      required:\n      - created_at\n      - id\n      - title\n      - updated_at\n      type: object\n      properties:\n        id:\n          type: string\n          format: uuid\n        title:\n          maxLength: 140\n          minLength: 1\n          type: string\n          example: タイトルタイトルタイトルタイトルタイトルタイトル\n        created_at:\n          type: string\n          format: date-time\n          example: 2021-04-01T23:59:59+09:00\n        updated_at:\n          type: string\n          format: date-time\n          example: 2021-04-01T23:59:59+09:00\n      example:\n        updated_at: 2021-04-01T23:59:59+09:00\n        created_at: 2021-04-01T23:59:59+09:00\n        id: 046b6c7f-0b8a-43b9-b35d-6489e6daee91\n        title: タイトルタイトルタイトルタイトルタイトルタイトル\n    ErrorResponse:\n      required:\n      - code\n      - message\n      type: object\n      properties:\n        code:\n          type: string\n          example: \"400\"\n        message:\n          type: string\n          example: BadRequest\n    body:\n      required:\n      - title\n      type: object\n      properties:\n        title:\n          maxLength: 140\n          minLength: 1\n          type: string\n          example: タイトルタイトルタイトルタイトルタイトルタイトル\n    body_1:\n      required:\n      - title\n      type: object\n      properties:\n        title:\n          maxLength: 140\n          minLength: 1\n          type: string\n          example: タイトルタイトルタイトルタイトルタイトルタイトル\n  responses:\n    BadRequest:\n      description: BadRequest\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n    InternalServerError:\n      description: InternalServerError\n      content:\n        application/json:\n          schema:\n            $ref: '#/components/schemas/ErrorResponse'\n```\n\nこれらをSwaggerHubのエディタに打ち込んでみると...\n\n![スクリーンショット 2021-03-28 0.55.28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1236826/2acfa5eb-bb50-272d-38a1-b222e509730d.png)\n\nyamlで定義した内容がリアルタイムで反映されて非常に見やすいですね :clap_tone1: \nこれらをSaveして右上の `View Documentation`を開けばチームのメンバーにドキュメントを共有することもできます！\n\n# モックサーバーの作成\nさて、SwaggerHub上でのAPI仕様書の定義が無事に完了したので本題のモックサーバーの作成に移っていきたいと思います :muscle_tone1: \nSaveをした後に右上のExport > Server Stubを選択するといろいろ選択肢が出てくると思いますが、今回は `nodejs-server`でモックサーバーを作成しました\n![スクリーンショット 2021-03-28 1.00.24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1236826/0219c337-20eb-0822-de1d-3d8c2b77fe05.png)\n\n選択するとダウンロードが開始されるので、ダウンロードが完了したらTerminalでその階層に入りましょう(私の場合は `Downloads`配下に`nodejs-server-server-generated`という名前のディレクトリがダウンロードされました)\n`nodejs-server`を選択した方は `README.md`に書いてある通り`npm start`と打てばモックサーバーが立ち上がります :clap_tone1: (デフォルトはhttp://localhost:8080)\n試しに今回作成した投稿一覧エンドポイントである `/posts`を開いてみると、以下のように返ってきていることが確認できると思います！\n![スクリーンショット 2021-03-28 1.08.25.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1236826/668466dd-d49a-6c0c-b861-348bc591d052.png)\n\nちなみにですが `http://localhost:8080/docs`を開くとドキュメントを見ることもできます :eyes: \n\n# 最後に\nこの記事が同じような境遇の方の手助けになれれば幸いです :pray_tone1: \n説明が足りないところ、間違っているところなどあればご指摘いただけると助かります :bow_tone1: \n","user":"namidayo","created_at":"2021-03-28T18:22:13+09:00","updated_at":"2021-03-28T18:22:13+09:00"},{"url":"https://qiita.com/kenRp01/items/db3019fb2a18d759be97","title":"インフラ知識ないバックエンドエンジニアがAWS SAA取得までにやったこと","body":"## 前置き\n私事ですが、先日AWS SAAことAWS認定ソリューションアーキテクト アソシエイト（AWS Certified Solutions Architect - Associate）を受験し、合格しました。(SAA-C02試験)\nスコアは730\n合格スコアは720からのためとてもギリギリなスコアになります。\n\n普段はバックエンドエンジニア経験４年のエンジニアです。\nインフラ構築は自身でブログを作る際に構築したことがある程度です。\n試験学習、試験を受けた感想について記事として、これから自分のようなスキル感で試験を受けられる方の参考になれば良いと思っています。\n\n## AWS SAAとは\nAWS認定は12種類あります。その内訳は基礎コース、アソシエイト（3種類）、プロフェッショナル（2種類）、専門知識（5種類）、および専門知識データベースです。\nアソシエイトとプロフェッショナルは、それぞれアーキテクト（設計者）、運用（運用者）、デベロッパー（開発者）に分かれています。\n簡単に言うとAWSを使って良い感じに設計でるかを問われる資格試験です。\n\n## 資格取得の背景\n業務で外部サービス連携、外部DBの使用等をする場合にAWS知識が必要だと思う機会が増えたからです。\nまた、自分の目標の一つとしてフルスタックエンジニアを目指しているため、AWSアーキテクチャ設計に関する知識の習得が必要だと思ったからです。\n\n## 学習内容\n学習内容は以下の通りです。\n\n* これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座(Udemy試験講座)([リンク](https://www.udemy.com/course/aws-associate/))\n* 【SAA-C02版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集（6回分390問）（[リンク](https://www.udemy.com/course/aws-knan/)）\n* AWS認定資格試験テキスト AWS認定ソリューションアーキテクト - アソシエイト（[リンク](https://www.amazon.co.jp/AWS%E8%AA%8D%E5%AE%9A%E8%B3%87%E6%A0%BC%E8%A9%A6%E9%A8%93%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88-AWS%E8%AA%8D%E5%AE%9A%E3%82%BD%E3%83%AA%E3%83%A5%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%A2%E3%83%BC%E3%82%AD%E3%83%86%E3%82%AF%E3%83%88-%E3%82%A2%E3%82%BD%E3%82%B7%E3%82%A8%E3%82%A4%E3%83%88-%E6%94%B9%E8%A8%82%E7%AC%AC2%E7%89%88-NRI%E3%83%8D%E3%83%83%E3%83%88%E3%82%B3%E3%83%A0%E6%A0%AA%E5%BC%8F%E4%BC%9A%E7%A4%BE/dp/4815607389/ref=asc_df_4815607389/?tag=jpgo-22&linkCode=df0&hvadid=342397001181&hvpos=&hvnetw=g&hvrand=16103343561434831047&hvpone=&hvptwo=&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009343&hvtargid=pla-1016930256377&psc=1&th=1&psc=1&tag=&ref=&adgrpid=72867581430&hvpone=&hvptwo=&hvadid=342397001181&hvpos=&hvnetw=g&hvrand=16103343561434831047&hvqmt=&hvdev=c&hvdvcmdl=&hvlocint=&hvlocphy=1009343&hvtargid=pla-1016930256377])\n* AWS ホワイトペーパー([リンク](https://aws.amazon.com/jp/whitepapers/))\n\n## 学習スケジュール\n１日に勉強時間を２〜３時間。それを２ヶ月継続しました。\n具体的には以下のように進めました。\n\n### 1. AWS認定資格試験テキスト AWS認定ソリューションアーキテクト - アソシエイト\n１週間は「AWS認定資格試験テキスト AWS認定ソリューションアーキテクト - アソシエイト」にそって参考書を読み基礎知識を付けました。\n\n### 2. これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座の基礎講座\n「これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座の基礎講座」を１週間半かけて、実際の構築と基礎学習を行い。\nさらに１週間かけ「これだけでOK！ AWS 認定ソリューションアーキテクト – アソシエイト試験突破講座の基礎講座」の模擬試験３問の実施、間違えた問題の復習をしました。この時のもし点数は５、６割が中心でした。\n\n### 3. 【SAA-C02版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集\n２週間かけ「【SAA-C02版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集」の試験６問を解き、間違えた問題の復習。難易度が高いこともあり、この時の点数は５割ほどでした。\n\n### 4. AWS ホワイトペーパー、AWS Black Belt\n１週間でAWS ホワイトペーパーやAWS Black Beltを読み込み理解の薄いサービスの読み込み\n\n### 5. Udemy講座模擬試験\n残りの１週間半でもう一度全ての模擬試験を実施しました。この時の点数は8、9割りでした。\n\n## 感想・改善した方が良かったこと\nまだまだ初学者の域は超えていませんが、AWSの学習をすることで現場サービス開発の理解が深まり、とても良い経験でした。\nこれからはプロフェッショナル資格に向けて少しずつ勉強を行っていきたいと思います。\n\n今回試験を受けてみて誤算だったのはAWS SAA試験にて出される問題の日本語問題文章が曖昧で最後の二択等で迷う部分、また模擬試験や自身の学習範囲外の問題が出題されたことが点数が伸びなかった要因です。\n要はSAAの試験範囲を全て抑えることができていなかったこと。\nまた、試験慣れしておらず動揺してしまったことが良い点数に繋がらなかった要因です。\n資格取得のための勉強ではなく、AWSサービスの理解を深めたいことが試験をうける目的なのであれば、AWS ホワイトペーパーやAWS Black Beltの読み込み時間を増すべきかもしれません。\n資格取得が目的の方はUdemyの講座内容を全て抑えるだけで資格試験の合格はできるでしょう。\n自分の目的も前者でしたが詰めが甘かったので、もしそちらを目的をされる方は参考にしてください。\n\nまた自分は試験をオンライン受講する予定だったのですが、自宅の通信環境が悪く断念する羽目になりました。\nオンライン試験をうける際の通信環境をチェックするツールでは問題ないとされていたのですが、\n試験実施した途端通信が悪くなり、選択肢を何も選ぶことも、試験実施中に何か起きた際に連絡をするチャットすらフリーズして試験官との連絡が取れなくなり、試験が中断されました。\n当然試験料金の返金はしていただけましたが、試験中はPCのカメラ外に出た場合は、試験失格とするルールがありましたので２時間に及びPCの前で拘束されました。。。\n\nその後テストセンターにて試験を受け無事合額することができました。\n\nネットにはオンライン試験で無事できましたとの記事しか上がっていないため、もしオンライン試験をされる方はトラブルがあることもあることを念頭に置いておくと良いかもしれません。\n\nまた、模擬試験を自信をつけるために２周したのですが、これはあまり意味がなかったと思っています。\n流石に二周目となれば問題もわかりますし、ケアレスミス程度になりました。\n個人的には自信を付けたく行ったのですが、極端に点数が低かった模擬試験のみ再実施し、その他は間違った問題を深掘りして調べる方が効果的だと思います。\n\n試験難易度も「【SAA-C02版】AWS 認定ソリューションアーキテクト アソシエイト模擬試験問題集」の高難易度問題ほどのレベル感です。もし受講される方はご参考ください。\n\n最後まで記事を読んでくださりありがとうございました。\n","user":"kenRp01","created_at":"2021-03-28T18:20:39+09:00","updated_at":"2021-03-28T18:49:47+09:00"},{"url":"https://qiita.com/anchor_/items/83303e0b323720df0f1c","title":"【初心者】Swift UIを勉強する その⑦ ーーー ジオメトリ エフェクト","body":"# はじめに\n\n前回のアニメーションを踏まえて、`matchedGeometryEffect()`を使って少し複雑なアニメーションを作っていきます。\n![Mar-07-2021 21-53-52.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1065841/8181f8f8-ac22-298c-08a3-913d97ff88a9.gif)\n\n\n# 目次\n<!-- タイトルとアンカー名を編集 -->\n1. [matchedGeometryEffect](#matchedGeometryEffect)\n2. [まとめ](#まとめ)\n3. [参考文献](#reference)\n\n<!-- 各チャプター -->\n<a id=\"#matchedGeometryEffect\"></a>\n# matchedGeometryEffect\n・[`matchedGeometryEffect()` --- If inserting a view in the same transaction that another view with the same key is removed, the system will interpolate their frame rectangles in window space to make it appear that there is a single view moving from its old position to its new position.](https://developer.apple.com/documentation/swiftui/view/matchedgeometryeffect(id:in:properties:anchor:issource:))\n\n・つまり、アニメーションを作成の際に、初めの状態と終わりの状態を定義すれば、プログラムが勝手に動いてくれるということです。\n・例えば、以下のように楕円は初めに横100縦200として、タップされたら横200縦100に変わっていきました。しかし、変化する最中に横縦は特に指定されていません。\n\n```swift\nstruct ContentView: View {\n    @State var expand = false\n    \n    var body: some View {\n        Ellipse()\n            .fill(Color.blue)\n            .frame(width: expand ? 100 : 200, height: expand ? 200 : 100)\n            .offset(y: expand ? -250 : 0)\n            .animation(.easeIn)\n            .onTapGesture {\n                self.expand.toggle()\n            }\n    }\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1065841/fbcb2ef8-8b4f-ef7d-5139-ebc836324bfe.gif\" width=20%>　　　<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1065841/fcb49826-441d-ea99-fbff-a45a00ce0e2c.gif\" width=20%>　　　\n\n\n・実際に前回作ったカードで`matchedGeometryEffect()`を試していきましょう。\n・`CourseItem()`は2回呼ばれて、それぞれ初めの状態と終わりの状態を表しています。\n　`isSourse`はビューをグループ内の他のビューのジオメトリのソースとして使用する場合にTrueを指定します。\n　`show.toggle()`はタップされたら`Bool`が変わります。\n\n```swift:CoursesView.swift\nstruct CoursesView: View {\n    @State var show = false\n    @Namespace var namespace\n    \n    var body: some View {\n        ZStack {\n            CourseItem()\n                .matchedGeometryEffect(\n                    id: \"Card\", in: namespace, isSource: !show\n                )\n                .frame(width: 335, height: 250)\n            if show {\n                CourseItem()\n                    .matchedGeometryEffect(id: \"Card\", in: namespace)\n                    .transition(.opacity)\n                    .zIndex(1)\n                    .edgesIgnoringSafeArea(.all)\n            }\n        }\n        .onTapGesture {\n            withAnimation(.spring()) {\n                show.toggle()\n            }\n        }\n    }\n}\n```\n・この間作った`CourseRow()`を使って、カードがタップされたら`CourseRow()`のリストを出せるようにします。\n・状態が終わった後にリストを追加するので、2回目に呼ばれた`CourseItem()`を`ScrollView`に突っ込みます。\n　また、全画面にしたくないので、縦を300にします。\n\n```swift:CoursesView.swift\nScrollView {\n     CourseItem()\n          .matchedGeometryEffect(id: \"Card\", in: namespace)\n          .frame(height: 300)\n}\n```\n\n・`ForEach`で`CourseRow()`を表示されます。\n\n```swift:CoursesView.swift\nForEach(0 ..< 20) { item in\n      CourseRow()\n}\n```\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1065841/ed4b25f7-d847-a09b-f2f5-9ef79a26b14f.gif\" width=20%>　　\n\n\n<a id=\"#まとめ\"></a>\n# まとめ\n・気づいているかもしれませんが、リストの消えるタイミングが遅くて、次回はこれを解決します。\n\n**ソースコード[Github](https://github.com/wsimple1028/swiftUI_ios14)**\n\n<a id=\"#reference\"></a>\n# 参考文献\n- [Design Code --- SwiftUI for iOS 14](https://designcode.io/swiftui-ios14)\n\n\n\n\n","user":"anchor_","created_at":"2021-03-28T18:16:59+09:00","updated_at":"2021-03-28T18:16:59+09:00"},{"url":"https://qiita.com/yuki_ink/items/91c8525cd995e094a5e0","title":"【Bubble】Tabで入力フォーム移動するときの順序をいい感じにする","body":"#はじめに\n[前回](https://qiita.com/yuki_ink/items/dfcacdd1ccaa30ac4457)の記事でめでたくユーザー登録編が完結したわけですが、テストをしているとあることが分かりました。\n\n**え、Tab使った時の移動順変じゃね？？**\n\nユーザー登録ページがこんな感じであって、当然、上から順に [お名前] ⇒ [メールアドレス] ⇒ [生年月日]、、というように移動したい。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/731275/e8c3c8d8-f94c-aeaf-a123-14ef0cf375f5.png)\nしかし、私の環境でいざTab移動してみると、 [お名前] ⇒ [パスワード] ⇒ [パスワード（確認用）] という順番にTab移動してしまい、もう酷いものでした。\nいやいや、メールアドレスとか飛ばさないでほしい。。\n\n今回はそんな地味な欠陥をプラグインを使って解決していきます。\n\n#Fix Tab Orderを使う\nFix Tab Orderというプラグインを使います。\nプラグインの詳細は[こちら](https://bubble.io/plugin/fix-tab-order-1595502384716x853477727762120700)。\n無料で使えるプラグインです。\n\n###とりあえずインストール\n左ペインからPlugins画面を開き、右上の「Add plugins」をクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/731275/bce54a9b-88d5-7b77-d6f4-cc1f0ebea633.png)\nFix Tab Orderを見つけ、「Install」ボタンをクリックし、続いて「DONE」ボタンをクリックします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/731275/4e8ea1bb-6db4-9ed2-6d6a-b7985438e0f6.png)\nこれでインストール完了です。\nInstalled PluginsのなかにFix Tab Orderが表示されていれば、正常にインストールできています。\n\n###エレメントとしてページ上に配置\n[Random Number Generatorを導入したとき](https://qiita.com/yuki_ink/items/20f9868dbeb1062b506f#%E6%89%BF%E8%AA%8D%E3%82%B3%E3%83%BC%E3%83%89%E3%82%92%E5%8F%96%E5%BE%97%E3%81%99%E3%82%8B)と同様ですが、Bubbleのプラグインはエレメントとしてページ上に配置して初めて機能するようです。\n\nDesign画面に移り、Visual elementsを確認すると、「Tab Fix」が追加されていることが分かります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/731275/5dd4ac50-3887-19d9-d8c9-4274a468be0e.png)\n\nこの「Tab Fix」のエレメントをuser_registrationページに追加します。\nいつものようにドラッグアンドドロップ。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/731275/b7b4e3aa-d841-10c5-54ca-8ff082c6a447.png)\nこれで導入完了です。\nPreviewしてみると、いい感じにTab移動できていることが確認できます。\n\n###デフォルト設定のままでOK\nTab Fixの設定ウィンドウを見てみると、「Include Date Inputs」と「Include Radio Buttons」にチェックが入っていないことが分かります。\nこのままでは、[生年月日] と [加入プラン] はTabでの移動でスキップされてしまいます。\n\nしかし、それで別に問題ないのでは、、というのが私の考えです。\n基本的にDate InputsとRadio Buttonsはマウス操作での入力となるため、Tab移動で選択できたとしてもあまりメリットがありません。\nですので、ここに関してはデフォルト設定で放置でOKかと思います。\n\n#終わりに\n今回発見した欠陥は地味ですが、かなりインパクトの大きいものだと思います。\n入力項目多めのページではどうしてもTab移動使いがちですから、そこでユーザーにストレスを与えてしまってはユーザー登録やーめたとなるのがオチです。\n\nご自身の環境をチェックしていただき、Tab移動の順序が想定と異なるようであれば、ぜひFix Tab Orderを使ってみてください。\n","user":"yuki_ink","created_at":"2021-03-28T18:16:07+09:00","updated_at":"2021-03-28T18:19:32+09:00"},{"url":"https://qiita.com/t-kigi/items/0b4dd6bd15313faa3d73","title":"Chalice で Lambda Layer を利用する","body":"# 問題点\n\nChalice で１つの `app.py` 内に以下のようなコードを書いた場合、API Gateway用の Lambda関数 と  定期実行用の２つの Lambda 関数が作成される。 デフォルトの設定だと　`requirements.txt` で指定するすべてのライブラリを各 Lambda 関数内に展開してアップロードするので、２つの Lambda のコードサイズが大きくなる。\n\n```python:app.py\n@app.route('/')\ndef index():\n    pass\n\n\n@app.schedule('rate(5 minutes)')\ndef cron(event):\n    pass\n```\n\nこういった場合には共通ライブラリの配置場所として Lambda Layer を利用できるのだが、昔ドキュメントを読んだときに読み落としていたのか chalice ではまだサポートされていないと思い込んでいた。　改めて調べると、ちゃんと Layer を使うことができたので、そのやり方を示す。\n\n# 対象コードとバージョン\n\n今回は以下のような cryptography を使って暗号化・復号化を行うだけのサンプルを利用した。\n\n```python:app.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nfrom chalice import Chalice\nfrom cryptography.fernet import Fernet\n\nfrom typing import Union, Any\n\napp = Chalice(app_name='layer-sample')\n\n\ndef _encrypt(key: str, text: str, else_value: Any = None) -> Union[str, Any]:\n    try:\n        fernet = Fernet(key.encode())\n        return fernet.encrypt(text.encode()).decode()\n    except Exception:\n        return else_value\n\n\ndef _decrypt(key: str, encrypted_text: str,\n             else_value: Any = None) -> Union[str, Any]:\n    try:\n        fernet = Fernet(key.encode())\n        return fernet.decrypt(encrypted_text.encode()).decode()\n    except Exception:\n        return else_value\n\n\ndef _encrypt_and_decrypt() -> dict:\n    key = Fernet.generate_key().decode()\n    message = 'EXAMPLE'\n    enctext = _encrypt(key, message)\n    return {\n        'key': key,\n        'message': message,\n        'encrypt': enctext,\n        'decrypt': _decrypt(key, enctext),\n    }\n\n\n@app.route('/')\ndef index():\n    return _encrypt_and_decrypt()\n\n\n@app.schedule('rate(5 minutes)')\ndef cron(event):\n    print(_encrypt_and_decrypt())\n```\n\n```requirements.txt\ncryptography\n```\n\n```text:バージョンなど\n$ pipenv --version\npipenv, version 2020.11.15\n$ pipenv run chalice --version\nchalice 1.22.3, python 3.8.5, linux 5.8.0-45-generic\n```\n\n## Lambda Layer なしでデプロイした場合\n\n```bash\n$ pipenv run chalice deploy\nCreating deployment package.\nCreating IAM role: layer-sample-dev\nCreating lambda function: layer-sample-dev-cron\nCreating lambda function: layer-sample-dev\nCreating Rest API\nResources deployed:\n  - Lambda ARN: arn:aws:lambda:ap-northeast-1:************:function:layer-sample-dev-cron\n  - Lambda ARN: arn:aws:lambda:ap-northeast-1:************:function:layer-sample-dev\n  - Rest API URL: https://**********.execute-api.ap-northeast-1.amazonaws.com/api/\n```\n\n![SnapCrab_NoName_2021-3-28_17-28-38_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502582/1e454b84-41da-9064-28ff-dfffef7d23a1.png)\n\n両方のLambda関数に cryptography ライブラリが含まれており、関数サイズがそれなりに大きいことが分かる。\n\n## Lambda Layer ありでデプロイした場合\n\nLambda Layer にまとめるには `.chalice/config.json` に以下の通り `automatic_layer: true` を記載する。\n\nhttps://aws.github.io/chalice/topics/configfile.html\n\n```json:.chalice/config.json\n{\n  \"version\": \"2.0\",\n  \"app_name\": \"layer-sample\",\n  \"stages\": {\n    \"dev\": {\n      \"api_gateway_stage\": \"api\",\n      \"automatic_layer\": true\n    }\n  }\n}\n```\n\nこれでデプロイすると以下のようになる。\n\n```bash\n$ pipenv run chalice deploy![SnapCrab_NoName_2021-3-28_17-30-39_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502582/d71bf63c-f291-c004-683d-db8adb0a9c75.png)\n\nCreating shared layer deployment package.\nCreating app deployment package.\nCreating lambda layer: layer-sample-dev-managed-layer\nUpdating policy for IAM role: layer-sample-dev\nUpdating lambda function: layer-sample-dev-cron\nUpdating lambda function: layer-sample-dev\nUpdating rest API\nResources deployed:\n  - Lambda Layer ARN: arn:aws:lambda:ap-northeast-1:************:layer:layer-sample-dev-managed-layer:1\n  - Lambda ARN: arn:aws:lambda:ap-northeast-1:************:function:layer-sample-dev-cron\n  - Lambda ARN: arn:aws:lambda:ap-northeast-1:************:function:layer-sample-dev\n  - Rest API URL: https://**********.execute-api.ap-northeast-1.amazonaws.com/api/\n\n# 動くかテスト\n$ curl -s https://**********.execute-api.ap-northeast-1.amazonaws.com/api/ | jq .\n{\n  \"key\": \"WPBwgDQ9dJSgXzhZ4cKLcklGtR6glH70gHY2fcE9PwY=\",\n  \"message\": \"EXAMPLE\",\n  \"encrypt\": \"gAAAAABgYD7DFXS2oJuwmBtvwFcz6vEW0bBq-qi970IW9MUxs5L8XFsV7RgUO0NBQDFfQxSuQGf8qt4D9LMbqYrLEp4jBYs6tQ==\",\n  \"decrypt\": \"EXAMPLE\"\n}\n```\n\nライブラリ分は全部新しいレイヤーである `arn:aws:lambda:ap-northeast-1:************:layer:layer-sample-dev-managed-layer:1` にデプロイされ、今回作成した Lambda 関数はこのレイヤーを使うようになっている。\n\n![SnapCrab_NoName_2021-3-28_17-30-39_No-00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/502582/b73b3ab9-73b2-2c83-1818-f372bd74430c.png)\n\n\n## 別で作成したレイヤーを利用する場合\n\nLambda Layer は chalice とは関係ないところで作成して使うこともできる。 例えば、過去にSVGデータのラスタライズをうまいこと実施するための方法として検討したことがある。\n\nhttps://qiita.com/t-kigi/items/acb3e8c5c8c08b8dcb51\n\nこういった Lambda Layer を利用するには `.chalice/config.json` で `layers` オプションを指定すればよい。 例えば、上記記事で作成したレイヤー `arn:aws:lambda:ap-northeast-1:************:layer:rsvg-convert:3` を使おうとすれば、以下のように設定を記載する。\n\n```json:.chalice/config.json\n{\n  \"version\": \"2.0\",\n  \"app_name\": \"layer-sample\",\n  \"stages\": {\n    \"dev\": {\n      \"api_gateway_stage\": \"api\",\n      \"automatic_layer\": true,\n      \"layers\": [\n        \"arn:aws:lambda:ap-northeast-1:************:layer:rsvg-convert:3\"\n      ]\n    }\n  }\n}\n```\n\nこれで、\"chaliceが自動生成するレイヤー\" と \"日本語ラスタライズ用のレイヤー\" の２つを利用することができる。 なお、Lambda Layer は１関数あたり５個までなので、上限個数には注意のこと。\n\n## 削除\n\n`pipenv run chalice delete` で全体を削除すると、ちゃんとLayerも削除される。\n\n# まとめ\n\nどうも最近 Cognito を調べていると、うーーーーん…、となることが多いので、改めてどうなんだろうと Firebase Auth を再検討した結果、Layerの利用が可能ということが分かったので、改めてこの記事を書いた。\n\n前に書いた以下の記事では chalice が Lambda Layer をサポートしていないと思い込んでるのでこんなことを書いている。\n\n> 単純な作業として完結させる場合は Build-in Authorier を使うので良いのですが、firebase-admin のライブラリだけで10MB近くの容量(バイナリビルドが走った場合20MBぐらい)になっています。\n認証の１か所にしか使わないライブラリに対してLambdaの容量を喰いたくないので、この部分を CustomAuthorizer として別のLambda関数として切り出すことを考えてみます。\n> \n> https://qiita.com/t-kigi/items/7fc50f9639c6ece4b62e\n\nが、Layer で共通化できるんならわざわざ分ける必要性はない。 そっちのがシンプルなので。\n","user":"t-kigi","created_at":"2021-03-28T18:14:56+09:00","updated_at":"2021-03-28T18:14:56+09:00"},{"url":"https://qiita.com/take_me/items/a791c107129a22815384","title":"補完機能を持つ拡張機能の開発チュートリアル","body":"## Abstract\n\n本記事では拡張機能開発におけるregisterCompletionItemProviderの使い方を説明したいと思います。\nつまり拡張機能で補完を追加する方法を解説します。(公式のチュートリアル)\n\n## 想定読者\n\n- VSCodeで拡張機能開発をしたい人\n    - hello worldの次の段階を想定します。\n- TypeScriptの文法をある程度知っている人\n    - 筆者はTypeScript自体歴が浅いので、文法を解説できる自信はないです。非推奨な書き方をみつけたら指摘していただけると嬉しいです。\n   \nhello worldについては、[こちら](https://qiita.com/intertext543210/items/75e8dedab69ae3b1cff7)がチュートリアルになっていると思います。単に動かすだけではなく、コードを少し変更しているので理解も深まると思います。\n\n## 環境\n\nwindows 10です。\n\n```bash\n$ code --version\n1.54.2\n\n$ node --version\nv12.16.1\n\n$ npm --version\n7.6.1\n```\n\n## 動機\n\nフレームワーク[deap](https://github.com/deap/deap)をVSCodeで使っていた時、補完が効かないことに気づいてしまいました。原因は簡単で、クラスを動的に生成しているからです。\n\n```python\ncreator.create(\"FitnessMax\", base.Fitness, weights=(1.0,))\ncreator.create(\"Individual\", list, fitness=creator.FitnessMax)\n```\n\n実行時にクラスが生成されるので、当然コーディングでは補完されないというわけですね。\nそこで補完機能を加える拡張機能を開発したいと考えたのですが、情報が少なく苦労したので備忘録を兼ねて筆を執りました。\n完成品は[Deap-supporter](https://github.com/Take-Me1010/Deap-supporter)です。\n\n## 公式チュートリアル\n\n公式の補完を実装する例を解説します。\nコードは[公式チュートリアルのリポジトリ](https://github.com/microsoft/vscode-extension-samples/tree/main/completions-sample)のものです。\n\n```extension.ts\nimport * as vscode from 'vscode';\n\nexport function activate(context: vscode.ExtensionContext) {\n\n\tconst provider1 = vscode.languages.registerCompletionItemProvider('plaintext', {\n\n\t\tprovideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext) {\n\n\t\t\t// a simple completion item which inserts `Hello World!`\n\t\t\tconst simpleCompletion = new vscode.CompletionItem('Hello World!');\n\n\t\t\t// a completion item that inserts its text as snippet,\n\t\t\t// the `insertText`-property is a `SnippetString` which will be\n\t\t\t// honored by the editor.\n\t\t\tconst snippetCompletion = new vscode.CompletionItem('Good part of the day');\n\t\t\tsnippetCompletion.insertText = new vscode.SnippetString('Good ${1|morning,afternoon,evening|}. It is ${1}, right?');\n\t\t\tsnippetCompletion.documentation = new vscode.MarkdownString(\"Inserts a snippet that lets you select the _appropriate_ part of the day for your greeting.\");\n\n\t\t\t// a completion item that can be accepted by a commit character,\n\t\t\t// the `commitCharacters`-property is set which means that the completion will\n\t\t\t// be inserted and then the character will be typed.\n\t\t\tconst commitCharacterCompletion = new vscode.CompletionItem('console');\n\t\t\tcommitCharacterCompletion.commitCharacters = ['.'];\n\t\t\tcommitCharacterCompletion.documentation = new vscode.MarkdownString('Press `.` to get `console.`');\n\n\t\t\t// a completion item that retriggers IntelliSense when being accepted,\n\t\t\t// the `command`-property is set which the editor will execute after \n\t\t\t// completion has been inserted. Also, the `insertText` is set so that \n\t\t\t// a space is inserted after `new`\n\t\t\tconst commandCompletion = new vscode.CompletionItem('new');\n\t\t\tcommandCompletion.kind = vscode.CompletionItemKind.Keyword;\n\t\t\tcommandCompletion.insertText = 'new ';\n\t\t\tcommandCompletion.command = { command: 'editor.action.triggerSuggest', title: 'Re-trigger completions...' };\n\n\t\t\t// return all completion items as array\n\t\t\treturn [\n\t\t\t\tsimpleCompletion,\n\t\t\t\tsnippetCompletion,\n\t\t\t\tcommitCharacterCompletion,\n\t\t\t\tcommandCompletion\n\t\t\t];\n\t\t}\n\t});\n\n\tconst provider2 = vscode.languages.registerCompletionItemProvider(\n\t\t'plaintext',\n\t\t{\n\t\t\tprovideCompletionItems(document: vscode.TextDocument, position: vscode.Position) {\n\n\t\t\t\t// get all text until the `position` and check if it reads `console.`\n\t\t\t\t// and if so then complete if `log`, `warn`, and `error`\n\t\t\t\tconst linePrefix = document.lineAt(position).text.substr(0, position.character);\n\t\t\t\tif (!linePrefix.endsWith('console.')) {\n\t\t\t\t\treturn undefined;\n\t\t\t\t}\n\n\t\t\t\treturn [\n\t\t\t\t\tnew vscode.CompletionItem('log', vscode.CompletionItemKind.Method),\n\t\t\t\t\tnew vscode.CompletionItem('warn', vscode.CompletionItemKind.Method),\n\t\t\t\t\tnew vscode.CompletionItem('error', vscode.CompletionItemKind.Method),\n\t\t\t\t];\n\t\t\t}\n\t\t},\n\t\t'.' // triggered whenever a '.' is being typed\n\t);\n\n\tcontext.subscriptions.push(provider1, provider2);\n}\n```\n\n基本的な流れは`vscode.languages.registerCompletionItemProvider`でproviderを登録し、その返り値を`context.subscriptions.push`で追加すると言った、シンプルな流れをとります。\n\n以下では上記のコードを細かく見ていきます。\n\n```extension.ts\nconst provider1 = vscode.languages.registerCompletionItemProvider('plaintext', {\n```\nまずは登録です。\n`vscode.lanmguages.registerCompletionItemProvider('補完を有効にする言語モード', provider, '補完のトリガーになる単語')`\nという形で使用します。ここで`provider`は`provideCompletionItems`をメソッドに持つオブジェクトです。補完のトリガーになる単語は、その単語が入力されたら起動するという意味です。例では'.'を指定しています。\n例では第一引数に'plaintext'を指定しているので、このproviderは、プレーンテキスト編集時に有効になります。他にも例えば'python'と指定すれば、pythonを編集時に有効になります。\n\n次の行では、`provider`を定義しています。`provideCompletionItems`を実装しなければならないので\n\n```typescript\n{\n    provideCompletionItems(document: vscode.TextDocument, position: vscode.Position, token: vscode.CancellationToken, context: vscode.CompletionContext){\n        // 色々やって\n        // vscode.CompletionItemのリストを返す\n        return compItems\n    }\n}\n```\n\n大枠として、上記のようなオブジェクトを必要とします。\nここで返却したvscode.CompletionItemのリストが表示される補完を決めるものになります。\n以下では`vscode.CompletionItem`の生成例を見ていきます。\n\n\n```typescript\n// a simple completion item which inserts `Hello World!`\nconst simpleCompletion = new vscode.CompletionItem('Hello World!');\n```\n\nnewを使って生成します。コンストラクタ―は```CompletionItem('ラベル名', kind)```の形です。\nラベル名は、補完の際に表示される名前です。\nkindは任意引数です。`vscode.CompletionItemKind`に存在する値しか受け取りません。これについては[VSCode拡張機能開発・Intellisenseのアイコンマークまとめ](https://qiita.com/k-wth/items/1e4f44771d34125d191f)に一覧があります。\n\nさてその他にも補完が登録されていますが、主に使用されているアトリビュートをまとめました。\n\n|アトリビュート|型|意味|\n|------------|--------|--------|\n|kind|vscode.CompletionItemKind|補完で端に表示されるアイコン|\n|insertText|String / SnippetString|選択された際に挿入されるテキスト。未設定ではラベル名が使われる。|\n|documentation| string / MarkdownString|補完を選択するときに表示されるドキュメンテーション。下の図：documentation参照。|\n|detail|string|補完選択で表示される詳細。図：detail1, detail2を参照。|\n|command|Command|補完で選択された時に実行するコマンド。イマイチ使い道がわからないが、{command: 'editor.action.triggerSuggest', title: '説明'}のようなオブジェクトを渡す。例では補完を連続で起動できるということであろうか。|\n\n![detail1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/483769/bea1482f-5ef0-fc0c-1e3c-0a453da665b9.png)\n図：detail1\n![detail2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/483769/653d3492-a847-35d0-720e-0c401e80265c.png)\n図：detail2\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/483769/e624bee2-7a61-fb35-66c3-3c5956c3a4c6.png)\n図：documentation\n右に出ている吹き出しで、上の薄い字がdetailで、下側がdocumentationです。\n\n上記のアトリビュートを変えることで、補完を簡単に(?)登録できるというわけですね！\n\n例では4つの`CompletionItem`を作り、最後に\n\n```extension.ts\n            // return all completion items as array\n            return [\n                simpleCompletion,\n                snippetCompletion,\n                commitCharacterCompletion,\n                commandCompletion\n            ];\n```\n\nのようにして返却しています。\n以上で簡単な補完を実装するprovider1を登録できました。しかし実際には直前の単語によって提案する補完を変えたりする必要があります。その機能を盛り込んだものがprovider2です。\n以下ではprovider2の実装を見ていきます。\n\n`provideCompletionItems`の`document: vscode.TextDocument, position: vscode.Position`はざっくり言えばそれぞれ編集中のファイルと補完が起動している場所になっています。\nこの引数を利用して、まず初めに`console.`で終わっていないかを確認する処理を入れています。\n\n```typescript\nconst linePrefix = document.lineAt(position).text.substr(0, position.character);\nif (!linePrefix.endsWith('console.')) {\n\treturn undefined;\n}\n```\n\n細かな仕様を理解していないのですが、上記のようなメソッドチェーンで現在補完を起動している行(カーソルがあるところの手前まで)を取得できます。\nまた、`console.`で終わっていない場合には、`undefined`を返却することで補完を何も表示しないようにしています。\nなお、`.`で補完が起動するように登録しているので、この関数が呼ばれている時点で100％行の最後の文字は`.`です。そこに注意しましょう。\n\n```typescript\nreturn [\n\tnew vscode.CompletionItem('log', vscode.CompletionItemKind.Method),\n\tnew vscode.CompletionItem('warn', vscode.CompletionItemKind.Method),\n\tnew vscode.CompletionItem('error', vscode.CompletionItemKind.Method),\n];\n```\n\nと返すことで、補完候補に`log`, `warn`, `error`を表示するようにしています。\n\n## まとめ\n\n`registerCompletionItemProvider`を使えば簡単に補完機能を追加する拡張機能を開発できることがわかったと思います。\nその他の機能も比較的簡単に実装はできるのでしょうが、英語の情報が基本となるので少々大変です。\nこの記事がその足がかりになることを願います。\n\n## 今後の展望\n\n`implements`を使用した別の書き方の紹介\n","user":"take_me","created_at":"2021-03-28T18:14:46+09:00","updated_at":"2021-03-28T18:14:46+09:00"},{"url":"https://qiita.com/tani__san929/items/fcbb91936454b2cdc62a","title":"今更ながらcookie🍪って何？","body":"![DTNJ_COOKIE-1.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/55f7d751-b0b0-2a3b-6b0e-c9a7873787fa.jpeg)\n\n\nこんにちは、たにーです。\n\n今回は、cookieについてです。\n\n「、、、クッキー🍪 ですか？？？(笑)」\nはい。本気で最初聞いた時は、頭に🍪 が出てきました(笑)\n\ncookieを知ったきっかけは、チーム開発での雑談と、railsチュートリアルでです。\n（ログイン機能実装の場面で出てきました。）\n\nなので、今回は、\ncookieが何者なのか、実際にどんな役割を果たしているのかを纏めてみます。\n\n#cookie(クッキー)とは？\n\nクッキー（Cookie）とは、\n**Webサイトにアクセスしたユーザーに関する情報を保存する仕組み**を意味します。\nそのおかげで、あるページから別のページに移動した時にもユーザー情報などが破棄されず、\n再びページを訪れた際でもそれらのユーザー情報が引き継がれます。\n\n#具体的に言うと？？？\ncookieを何かに例えるなら、**「会員証」**と言われています。\n具体例を挙げるならば、下記がおそらく該当するかと思います。\n<br>\n\n###ログイン状態の保持(TwitterやFacebookなどのSNS)\n\nTwitterやInstagramなどのSNS、ログインが必要な各種サービスを考えてみてください。\n一度IDとパスワード（アイパス）を入力してしまえば、しばらくしてからアクセスしても、\nログイン状態は保持されていて、いちいちログイン情報を入力する必要はありません。\nこれは、cookieにログイン情報が記載されているおかげです。\n\n\n![ダウンロード (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/73fce462-fb3b-58e5-f26c-53ef1f9c2bda.png)\n\n###買物カゴの中身の維持(ZOZOなどのECサイトでのカート情報など)\n\n多くのショッピングサイトでは、ユーザーのIDやカートの情報をcookieで保存しています。\nこれにより、一回サイトを離れてしまったユーザーがまたサイトを訪れた時に、\n毎回IDを打ち込んだり商品をカートに入れ直したりすることなく、スムーズにショッピングの続きができます。\nこれもSNS同様に、cookieにその履歴情報が記載されているからです。\n![ダウンロード (2).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/fcd47115-0b92-6c72-aa27-da2c112c686d.png)\n\n\nよくよく考えてみると、\n私たちの生活において常日頃からcookieを使用している事がわかります。\n最近は、通販で物を買うことも増えたので余計にですね。\n\n#cookieの起源\n\ncookieを開発したのは、ルー・モントゥリ(Lou Montulli)という人物。彼はMIT（マサチューセッツ工科大学）の「Innovators under 35（35歳以下のイノベーター35人）」に選ばれた人物であり、90年代のアメリカのIT業界で大活躍したとのこと。\n\n90年代初頭には現在のWWW（ワールド・ワイド・ウェブ）の技術のもととなるWebブラウザLynxを開発したり、ウェブページを作るのに必要なHTML言語の発展に貢献。1994年にネットスケープ社のエンジニアになったモントゥリは商用ウェブアプリケーションの開発を担当し、そこでcookieを開発。\n\nはじめはネットスケープ社のウェブサイトを訪れたユーザーが、すでに訪問したことがあるかどうかを識別するのにcookieが使われていましたが、その後より詳細なユーザー情報が取得できるように発展。\n\n\n#cookieの由来\n\n調べてみると、cookieの語源は「マジッククッキー」であると言われているそう。マジッククッキーとは、中に秘密のメッセージが入ったクッキーのこと。\n秘密のメッセージを入れるというところが、ユーザーの情報をやり取りする役割と重なり、cookieと名づけられたとのこと。\n\n![GettyImages-506878030-e4beb95a66e84b34bce8bc0ff7b940a8.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/128d0724-7998-845b-74ab-1b6d745a8454.jpeg)\n\n\nほう、、、と納得しました(笑)\n\n#cookieの仕組み\n\n次は、cookieの仕組みです。\nわかりやすい画像がありましたので、引用させていただきます。\n\n「cookie」の仕組みは、\nWEBサーバーからユーザーが使用しているWEBブラウサに送信される、ユーザーがのデータを保管しておくためのファイルです。\n\n![cokkie_仕組み画像.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/27006861-67ba-c0e7-9d7a-6c8f9892bfba.jpeg)\n引用：https://sem-journal.com/design/cookie/\n\n上記の図の流れのように、\n2回目にwebサイトにアクセスした際に、前回発行されたcookieファイル(=そのユーザーの詳細情報が記録されている)があるため、\nすんなりログインが出来たり、買い物の続きができるようになります。\n\n\n#cookieのメリット\n\nユーザー目線とWEBマーケター目線から。\n\n##ユーザー目線でのメリット👪\n\n###Webサイトを快適に閲覧できる\n\nこれは言わずとも先ほど具体例をあげた、SNSなどのログイン情報保持がそうですね。\n何度、IDやパスワードを入れずに住むのは、私たちにとってストレスフリーです。\n\n###検索結果のパーソナライズ\n\nGoogle検索を利用していると、「同じキーワードで検索したときに自分と他の人の検索結果が異なる」ことがあります。\nこれは、Cookieを利用してパーソナライズド検索が行われているからです。\nサイトを訪問した履歴が記録されるので、「以前も訪問していたこのWebサイトを探しているのかもしれない」と判断され、\n検索結果に影響を与えるのです。そのため、より早く目的のサイトを見つけ出すことができます。\n\n##Webマーケター目線でのメリット💻\n\n###アクセス状況を解析できる\nページの遷移やセッション数などの細かいユーザー分析を出来ます。\n\n###リターゲティング広告・ターゲティング広告に活用できる\n広告配信という観点からも、自社サイトに訪れたことがあるかどうかをCookieに保存された情報をもとに判断することができます。\nこの情報を使うことでリターゲティング広告の配信が可能になり、自社サイト以外のページを見ているユーザーに対して、的確に広告を表示することができます。\n\n###提供する情報を変えられる\n提供する情報を出し分けることができます。例えば、始めてサイト訪問したユーザーに対しては、「はじめてまして」というごあいさつを表示し、\n2回目以降のユーザーに対しては「いつもありがとうございます」という文章を表示することも可能です。\nECショップであれば、女性と想定されるユーザーに女性向けの商品、\n男性と想定されるユーザーに男性向けの商品をレコメンドするという使い方もできます。\n\n#cookieのデメリット🚨\n\nこちらは、ユーザー目線のみですが、\n\n###ユーザー情報が漏洩してしまう可能性もある\n\nパソコンを共有している、インターネットカフェや学校等で、または他人のパソコンでID・パスワードを利用したときは注意が必要です。\nパソコンに保存されているクッキー情報を使って、誰かがなりすましてサイトを利用できてしまうからです。\n\nとはいえ、心配する必要はありません。Cookieのセキュリティは、基本的に、\nウェブサイトとブラウザに任せておけばOKです。実際にCookieの暗号化機能がハッカーからあなたを守ってくれるので問題ない。\n\n#確認方法🔎\n\nWEBサイト上で、右クリックし、検証をクリック。\n![スクリーンショット 2021-03-28 17.00.02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/e0ca8d7f-d6a6-1bc4-c721-3ab625ebf47b.png)\nディペローツールが開きます。\n\n![スクリーンショット 2021-03-28 17.00.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/2c0e7295-e1b3-8ad1-f715-44eba7095e61.png)\n\n次に、上段に並んでる**application**を選択。\n左側にいくつかありますが、探してみるとcookiesが有ます。\nここで、cookiesの確認が出来ます。\n\n![スクリーンショット 2021-03-28 16.36.35.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/9a2c94ce-1317-e66b-bea3-f21b00d00f64.png)\n\n#cookiesの動きを確認する。\n\nなにかのECサイトに訪問しログインする前と想定します。\nその時のcookiesは、先ほどと同じ状態です。\n\n![スクリーンショット 2021-03-28 16.36.35.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/9a2c94ce-1317-e66b-bea3-f21b00d00f64.png)\n\n実際に、新規会員登録すると想定しましょう。\n登録完了が済み、無事ログイン出来た際にもう一度cookiesを確認しましょう。\n\n![スクリーンショット 2021-03-28 17.06.05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/92e36179-5cd0-e207-3654-641ccd8a5ff3.png)\n\nあえて、行を選択し、わかりやすくしていますが、\nその部分が先ほど無かった部分で、ログインしたことによって追加されました。\n\n**それが、cookiesによってユーザーのログイン情報が保存された証拠になります。**\nこれによって、再度本ECサイトを訪問しても、スムーズにログインや、前回の続きでお買い物が出来たりします。\n\n#削除方法\n\n削除も簡単に出来ます。\nログインしているwebサイトにて同様にディペローツールを開き、同じ画面までいきましょう。\n![スクリーンショット 2021-03-28 17.06.05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1029483/92e36179-5cd0-e207-3654-641ccd8a5ff3.png)\n\nこの画面に行き着いたら、nameのところを探しましょう。\n今回、このサイトは「NaganoCake」なので、青色の部分が該当しているcookiesになります。\n\nそこを右クリックすると、「delete」とあるので、押すと削除出来ます。これで完了です。\n\n---\nまだまだ、cookieの知識が浅いです。\n実際、実務においてどこまでcookieを考慮してやっているのかもわかりませんが。\nセキュリティー面は、考えなくてはいけない部分だと思うので引き続き勉強しないとですね。\n\n\n以上、たにーでした。\n\n#参考文献\n\nhttps://railstutorial.jp/\n\nhttps://qiita.com/coe401_/items/ad7dc2f3e319c5beaf40\n\nhttps://www.onemarketing.jp/knowledge/word/cookie\n\nhttps://saruwakakun.com/it/web/cookie-cache\n\nhttps://sem-journal.com/design/cookie/\n","user":"tani__san929","created_at":"2021-03-28T18:08:46+09:00","updated_at":"2021-03-28T18:11:45+09:00"},{"url":"https://qiita.com/suama-akdo5317/items/98029cebc9e2f4f03106","title":"【RubyOnRails + MySQL】AWS Cloud9 環境構築 MySQLの文字化け解消まで","body":"AWS Cloud9で　RubyOnRails + MySQL　の環境構築を行う\n(大変初歩的なことで申し訳ないが)\n\nCreate environment後、\n\n##Rubyの設定\n\n####Rubyの好きなバージョンをインストールせよ\n\n```\n$ rvm install バージョン\n```\n\n実行後、\n\n```\n$ ruby -v\n```\nをすることで現在インストールされているバージョンを確認できるよ。\nCloud9には元々Rubyはインストールされてるけど、自分の好きなバージョンを入れてね\n\n####インストールしたRubyを使用できるようにせよ\n上記のインストールだけでは、ただAWSにインストールしただけだよ\n\n```\n$ rvm --default use バージョン\n```\nにて、使用するバージョンを決めておいて\n\n\n##Rails の設定\n####好きなバージョンのRailsをインストールせよ\n```\n$ gem install rails -v バージョン\n```\nRubyのときと同じく、念のためインストールしたRailsのバージョンを確認しといて\n\n```\n$ rails -v\n```\n\n##MySQLの設定\n\nMySQLはAWSに元からインストールされてる基本的に既存のバージョンで大丈夫だと思うよ\n\n\n####MySQLの文字化けを回避せよ\n\nMySQLのデフォルトの文字コードだと、日本語を登録した際に文字化けの恐れがある。変更すべし。\n\n試しにMySQLにログインしチェックしてみよう\n\n```\n$ sudo mysql -u root -p\nmysql> show variables like 'character%';\n```\n\n```\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | latin1                     |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | latin1                     |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n```\n上記の latin1 という文字コードを UTF-8 にしなければ。\n\n####vimで設定を書き換える\n\n```\n$ vi /etc/mysql/mysql.cnf\n```\n下部に\n\n```\n[mysqld]\ncharacter-set-server=utf8\n[client]\ndefault-character-set=utf8\n```\nこれを書き加え、保存してね。\n\n\n再び\n\n```\nmysql> show variables like 'character%';\n```\nを実行してみると...\n\n\n```\n\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | utf8                       |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | utf8                       |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n```\n\nこうなっていればひとまず解決です。\n","user":"suama-akdo5317","created_at":"2021-03-28T18:08:38+09:00","updated_at":"2021-03-28T18:35:26+09:00"},{"url":"https://qiita.com/ren_nomura/items/99dbf702fbaa73f4a8a9","title":"M1 Mac、pod 'FirebaseUI/Storage'やpod 'SDWebImageSwiftUI'でエラーが出るときの対処法","body":"M1 Macでpod 'FirebaseUI/Storage'をPodfileに追加してpod installした時、エラーに遭遇したので対処法を共有します。\n\n#対処法\n対処法は単純、多分、ユニバーサルバイナリ使ってIntelアーキテクチャで実行ってこと\n\n```bash\narch -x86_64 pod install\n```\n何かと便利そうなので、すぐ使えるようにaliasを切っておきます。M1 Macだとデフォルトがzshなのでルートディレクトリの.zshrcを編集、なかったら作成します。\n\n```bash:~/.zshrc\nalias intel=\"arch -x86_64\"\n```\n以下で読み込み。\n\n```bash\nsource ~/.zshrc\n```\nこうすれば、これだけでOK。\n\n```bash\n\nintel pod install \n```\n\nお疲れ様でした！\n","user":"ren_nomura","created_at":"2021-03-28T18:05:31+09:00","updated_at":"2021-03-28T18:05:31+09:00"},{"url":"https://qiita.com/KoheiQiita/items/be762f43dda5bc44a0d0","title":"cvxpy install","body":"# cvxpy とは\n\nhttps://www.cvxpy.org/install/\n\n# cvxpy インストール・環境設定\n\n```shell\n\n$ conda create -n cvxpy python=3.7 anaconda\n\n$ conda activate cvxpy\n\n$ conda install -c conda-forge cvxpy\n\n```\n\n# jupyter table of contents(2)\n\n```shell\n\n$ pip install jupyter_contrib_nbextensions\n\n$ jupyter contrib nbextension install --user\n\n$ jupyter notebook\n\n```\n\nこのあと、ブラウザ画面に移動するので、そこで\"Nbextensions\"をクリックし、「Table of Contents (2)」のチェックを入れる。\n\n","user":"KoheiQiita","created_at":"2021-03-28T18:04:14+09:00","updated_at":"2021-03-28T18:20:01+09:00"},{"url":"https://qiita.com/Hyman1993/items/1ce359c8f2a952756477","title":"Webセキュリティ解説とセキュリティ対策","body":"### 一、Webセキュリティとは\nいまの時代、サイバー攻撃はだんだん増えてます。さまざまな被害が出てしまいます。\nこのような脅威から身を守るための対策を、一般的に「Webセキュリティ」と呼んでいます。\n普段、システムを構築する際に、情報が外部へ漏洩しないよう、サイバー攻撃を防ぎ、WebサイトやWebサービスのセキュリティを高めるための対策を目指しています。\n\n### 二、サイバー攻撃の種類について\n\nサイバー攻撃については、いくつかの種類があります。\n本記事は主に下記のサイバー攻撃をご紹介いたします。\n\n#### 2.1 SQLインジェクションとは\n> データベースと連携したウェブアプリケーションの多くは、利用者からの入力情報を基にSQL文（データベースへの命令文）を組み立てています。ここで、SQL文の組み立て方法に問題がある場合、攻撃によってデータベースの不正利用をまねく可能性があります。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/225740/21cae600-9d7f-cada-412c-0f61c8a53fd1.png)\n\n\n#### 2.2 XSSとは\n> ユーザーの入力内容によって表示が動的に変わる Web ページにおいて、悪意のあるスクリプトが Web サイトに入り込んでしまう脆弱性です。\n\n ![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/225740/7a483352-39fc-9864-2576-2a041bc4f6c0.png)\n\n\n#### 2.3 CSRFとは\n> Web アプリケーションが偽装された（本来送信されるべきではない）リクエストを正規のものとして受信してしまう脆弱性、または攻撃手法を意味します。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/225740/7ae39a0d-1060-ec83-dd0b-40a3a7a1f63a.png)\n\n\n### 三、Webセキュリティ対策\nここまで、一般的なサイバー攻撃の種類を知りましたが、では、どうやって効果的なWebセキュリティ対策をしますか？\n実は、それぞれのサイバー攻撃に対して、Webセキュリティ対策が違います。\n\n#### 3.1 SQLインジェクションの対策\n\n- SQL文の組み立ては全てプレースホルダで実装する。\n- ウェブアプリケーションに渡されるパラメータにSQL文を直接指定しない。\n\n#### 3.2 XSSの対策\n- 入力値を制限する\n- エスケープ処理を行う\n- Cookie情報の漏えい対策として、発行するCookieにHttpOnly属性を加え、TRACEメソッドを無効化する。\n\n#### 3.3 CSRFの対策\n- トークンを利用して正しいリクエストであるかをチェックする\n\n### 四、最後に\n最後まで読んでいただき、ありがとうございます。\n","user":"Hyman1993","created_at":"2021-03-28T18:03:50+09:00","updated_at":"2021-03-28T18:03:50+09:00"},{"url":"https://qiita.com/vincent_h/items/b6cba57db5c8b7c59dfd","title":"Nextcloud中occ命令用法","body":"<font color=red>occ命令位于Nextcloud根目录中，要使用occ命令必须确保在PHP中启用[posix功能](https://www.php.net/manual/en/book.posix.php)，编译安装时默认启用，如通过软件包安装可能需要单独安装”php-process“扩展</font>\n# 1. 文件管理\n\n`occ`命令在Nextcloud中具有三种于管理文件的方式：\n\n```shell\nfiles:cleanup              #清理文件缓存\nfiles:scan                 #重新扫描文件系统\nfiles:scan-app-data        #重新扫描AppData文件夹\nfiles:transfer-ownership   #所有文件和文件夹的所有权都移到了另一个用户，也可以只传送一个目录及其内容。\n```\n\n## 1.1 扫描\n\n`files:scan`\n\n该命令将扫描新文件并更新文件缓存。您可以按用户重新扫描所有文件，用空格分隔的用户列表，并限制搜索路径。如果不使用`--quiet`，则统计信息将在扫描结束时显示：\n\n语法格式：\n\n```shell\nsudo -u nginx php occ files:scan --help\nfiles:scan [-p|--path=\"...\"] [-q|--quiet] [-v|vv|vvv --verbose] [--all] [user_id1] ... [user_idN]\n```\n\n参数说明\n\n```shell\nuser_id  #将重新扫描指定用户的所有文件\n```\n\n选项说明\n\n```shell\n--output[=OUTPUT]          #输出格式（纯文本，json或json_pretty，默认为纯文本）[默认：“纯文本”]\n-p，--path=PATH            #限制重新扫描到该路径，例如。--path =“/alice/files/Music”，user_id由路径确定，而user_id参数和--all被忽略\n--all                      #将重新扫描所有已知用户的所有文件\n--unscanned                #仅扫描标记为未完全扫描的文件\n--shallow                  #不要递归扫描文件夹\n--home-only                #仅扫描主存储，忽略任何已安装的外部存储或共享\n-h，--help                 #显示此帮助消息\n-q，--quiet                #不输出任何消息\n-V，--version              #显示此应用程序版本\n--ansi                     #强制ANSI输出\n--no-ansi                  #禁用ANSI输出\n-n，--no-interaction       #不问任何互动问题\n--no-warnings              #跳过全局警告，仅显示命令输出\n-v | vv | vvv，--verbose   #增加消息的详细程度：1表示正常输出，2表示更多详细输出，3表示调试\n```\n\n<font color=red>**注意事项**</font>\n\n```shell\n--unscanned：默认情况下后台通过cron定期进行该扫描。使用-–unscanned选项可以从CLI触发此操作。\n\n--path:路径必须包含以下部分:\n\"user_id/files/path\"\n  或\n\"user_id/files/mount_name\"\n  或\n\"user_id/files/mount_name/path\"\nExample:\n--path=/vincent/files/Music\n  或\n-p /vincent/files/Music\n\n--path:根据文件路径确定[user_id]， 使用此选项就不需指定[user_id]\n--all:扫描所有文件，不需要指定[path]或[user_id]\n```\n\n**参考`files:scan`的[使用范例](#scan)**\n\n## 1.2 扫描应用数据\n\n`occ files:scan-app-data`\n\nAppdata是数据目录内部的文件夹，其中包含用户之间共享的文件，并且可以由服务器或应用（例如头像图像，文件预览和缓存的CSS文件）放置在该文件夹中。\n\n由于常规文件扫描仅对用户文件起作用，因此该命令将检查appdata目录，并确保文件缓存与实际存储中的文件一致：\n\n语法格式：\n\n```shell\nsudo -u nginx php occ files:scan-app-data --help\nfiles:scan-app-data [options] [--] [<folder>]\n```\n\n参数说明：\n\n```shell\nfolder           #要扫描的appdata子文件夹 [default: \"\"]\n```\n\n## 1.3 清理文件缓存\n\n`files:cleanup` \n\n通过删除存储表中没有匹配条目的所有文件条目来整理服务器的文件缓存。\n\n## 1.4 转移\n\n`files:transfer-ownership`\n\n您可以将所有文件和共享从一个用户转移到另一个用户。这在删除用户之前很有用：\n\n语法格式：\n\n```shell\nsudo -u nginx php occ files:transfer-ownership --help\nfiles:transfer-ownership [options] [--] <source-user> <destination-user>\n```\n\n也可以只传送一个目录及其内容。该`--path`参数作为从源用户看到的目录路径给出：\n\n```shell\nfiles:transfer-ownership --path=\"path_to_dir\" <source-user> <destination-user>\n```\n\n参数说明：\n\n```shell\nsource-user         #文件的所有者，该文件应被移动\ndestination-user    #将成为文件新所有者的用户\n```\n\n选项说明：\n\n```shell\n--path=PATH         #有选择地提供转移途径。 例如--path =“ folder_name”[default: \"\"]\n--move              #将数据从源用户移动到目标用户的根目录，该目录必须为空\n```\n\n用户也可以自己选择性地传输文件或文件夹。详细信息可参考[所有权转让](https://docs.nextcloud.com/server/latest/user_manual/en/files/transfer_ownership.html)。\n\n## 1.5 使用范例\n\n### 1.5.1 <span id=scan>添加服务器本地文件到Nextcloud</span>\n\n通过Nextcloud上传的文件和文件夹默认都在`Nextcloud/data/<user_dir>/files`目录下，但是直接将服务器中的文件或文件夹移动至该目录中在Nextcloud里并不会显示这些文件。因为数据库里并没有这个文件的信息，文件信息都被存储在数据库的`oc_filecache`表中。因此需要手动执行`files:scan`重新扫描文件系统将文件索引写入数据库：\n\n- 查看`oc_filecache`表中的部分字段信息：\n\n```sql\nselect path,name,size from oc_filecache;\n```\n\n![image-20210305220013424](https://gitee.com/hrong1123/picture_bed/raw/master/Nextcloud/image-20210305220013424.png)\n\n- 扫描所有用户目录下的文件\n\n\n```shell\nsudo -u nginx php occ files:scan --all\n```\n\n![image-20210305203612474](https://gitee.com/hrong1123/picture_bed/raw/master/Nextcloud/image-20210305203612474.png)\n\n- 扫描指定用户目录下的`files`文件夹\n\n\n```shell\nsudo -u nginx php occ files:scan -p /admin/files\n```\n\n![image-20210305202148003](https://gitee.com/hrong1123/picture_bed/raw/master/Nextcloud/image-20210305202148003.png)\n\n- 或者扫描指定用户目录下的所有文件\n\n\n```shell\nsudo -u nginx php occ files:scan admin\n```\n\n![image-20210305202611072](https://gitee.com/hrong1123/picture_bed/raw/master/Nextcloud/image-20210305202611072.png)\n\n- 扫描完之后就可以在数据库中查询到你添加的文件，刷新Nxetcloud即可看到文件\n\n```sql\nselect path,name,size from oc_filecache where name=\"yoko.flac\";\n```\n![image-20210305223048632](https://gitee.com/hrong1123/picture_bed/raw/master/Nextcloud/image-20210305223048632.png)\n","user":"vincent_h","created_at":"2021-03-28T18:03:32+09:00","updated_at":"2021-03-28T18:03:32+09:00"},{"url":"https://qiita.com/umaibou1126/items/cf42bf29e0fa4f52ae60","title":"モスクワの天気に詳しい彼女botが欲しい","body":"\n# はじめに\n\nモスクワの天気に精通した**彼女風LINE BOT**を作成しました\n\n[![Image from Gyazo](https://i.gyazo.com/c78a840ad1fe0201b3b649766a4e7a04.png)](https://gyazo.com/c78a840ad1fe0201b3b649766a4e7a04)\n\n#### QRコード\n\n[![Image from Gyazo](https://i.gyazo.com/f22a26304e7bc0755cd4f4a95b1d2cd2.png)](https://gyazo.com/f22a26304e7bc0755cd4f4a95b1d2cd2)\n\n#### 使用技術\n - Go\n - line-bot-sdk\n - heroku\n - [openWeather API](https://openweathermap.org/)\n\n# 事前準備\nLINE BOT 作成手順は、以下記事にまとめましたので、参考にして頂けますと幸いです。\n[LINE BOTで彼女botを作りたい](https://qiita.com/umaibou1126/items/f1a00c1311f6f2dc0114)\n\n# リッチメニュー 作成\n\n#### [LINE Official Account Manager](https://account.line.biz/login?redirectUri=https%3A%2F%2Fmanager.line.biz%2F%3Fstatus%3Dsuccess) ログイン\n\n#### 「アカウント名選択」 > 「トークルーム管理」 > 「リッチメニュー」 選択\n\n[![Image from Gyazo](https://i.gyazo.com/2e0075892f6e13d93ab03534a44b0add.png)](https://gyazo.com/2e0075892f6e13d93ab03534a44b0add)\n\n#### 「作成」 > 「コンテンツ設定」 > 「テンプレート選択」 > 「画像を作成」\n\n[![Image from Gyazo](https://i.gyazo.com/128c0a3297fad8a8cf0b24e00d8e4b9e.png)](https://gyazo.com/128c0a3297fad8a8cf0b24e00d8e4b9e)\n\n#### 任意の画像・テキストを設定し、右上の「適用」をクリック\n\n[![Image from Gyazo](https://i.gyazo.com/b7ecaee4b1c98d4dbf7674664ff67e7f.png)](https://gyazo.com/b7ecaee4b1c98d4dbf7674664ff67e7f)\n\n#### 「アクション」 で「テキスト」を選択し、任意の文字を設定 > 右上の「保存」で完了\n\n[![Image from Gyazo](https://i.gyazo.com/11322d60079be878e42e612a77ea6703.png)](https://gyazo.com/11322d60079be878e42e612a77ea6703)\n\n\n# openWeather API 設定\n\n#### [openWeather API](https://openweathermap.org/) > API Key 取得\n\n[![Image from Gyazo](https://i.gyazo.com/cea6f6f9adb5007a454c111898d14c3b.png)](https://gyazo.com/cea6f6f9adb5007a454c111898d14c3b)\n\n# Bot作成\n\n#### Goプロジェクト準備\n\n```\n$ mkdir sample-bot && cd sample-bot\n$ go mod init github.com/GitHubユーザ名/GitHubリポジトリ名\n```\n\n#### Goライブラリインストール\n\n```\n$ go get github.com/line/line-bot-sdk-go/linebot\n$ go get github.com/gin-gonic/gin\n```\n\n#### コーディング\n\n```main.go\npackage main\n\nimport (\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strings\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/line/line-bot-sdk-go/linebot\"\n)\n\ntype Wdata struct {\n\tWeather []Weather `json:\"weather\"`\n\tInfo    Info      `json:\"main\"`\n}\n\ntype Weather struct {\n\tMain string `json:\"main\"`\n\tIcon string `json:\"icon\"`\n}\n\ntype Info struct {\n\tTemp     float32 `json:\"temp\"`\n\tHumidity float32 `json:\"humidity\"`\n}\n\nfunc main() {\n\tport := os.Getenv(\"PORT\")\n\n\tif port == \"\" {\n\t\tlog.Fatal(\"$PORT must be set\")\n\t}\n\tbot, err := linebot.New(\n\t\t\"LINE シークレット\",\n\t\t\"LINE アクセストークン\",\n\t)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\trouter := gin.New()\n\trouter.Use(gin.Logger())\n\n\t// LINE Messaging API ルーティング\n\trouter.POST(\"/callback\", func(c *gin.Context) {\n\t\tevents, err := bot.ParseRequest(c.Request)\n\t\tif err != nil {\n\t\t\tif err == linebot.ErrInvalidSignature {\n\t\t\t\tlog.Print(err)\n\t\t\t}\n\t\t\treturn\n\t\t}\n\n\t\t// モスクワ\n\t\tvar moskwaWeather string\n\t\tmoskwaWeather = \"モスクワ\"\n\n\t\tfor _, event := range events {\n\t\t\t// イベントがメッセージの受信だった場合\n\t\t\tif event.Type == linebot.EventTypeMessage {\n\t\t\t\tswitch message := event.Message.(type) {\n\t\t\t\t// メッセージがテキスト形式の場合\n\t\t\t\tcase *linebot.TextMessage:\n\t\t\t\t\treplyMessage := message.Text\n\t\t\t\t\t// モスクワ\n\t\t\t\t\tif strings.Contains(replyMessage, moskwaWeather) {\n\t\t\t\t\t\tmoskwasWeather(bot, event)\n\t\t\t\t\t}\n\t\t\t\t\t// 上記意外は、おうむ返しで返信\n\t\t\t\t\t_, err = bot.ReplyMessage(event.ReplyToken, linebot.NewTextMessage(replyMessage)).Do()\n\t\t\t\t\tif err != nil {\n\t\t\t\t\t\tlog.Print(err)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t})\n\trouter.Run(\":\" + port)\n}\n\n// モスクワ\nfunc moskwasWeather(bot *linebot.Client, e *linebot.Event) {\n\tlat := \"55.755826\" // モスクワの緯度\n\tlon := \"37.6173\" // モスクワの経度\n\turl := \"http://api.openweathermap.org/data/2.5/weather?lat=\" + lat + \"&lon=\" + lon + \"&APPID=XXXXXXXXXX\" // openWeather：API Keyを設定\n\t//天気情報を取得\n\tresp, err := http.Get(url)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tdefer resp.Body.Close()\n\tbyteArray, _ := ioutil.ReadAll(resp.Body)\n\tjsonBytes := ([]byte)(string(byteArray[:]))\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\twdata := new(Wdata)\n\tif err := json.Unmarshal(jsonBytes, wdata); err != nil {\n\t\tfmt.Println(\"JSON Unmarshal error:\", err)\n\t\treturn\n\t}\n\tvar resWeather string\n\tresWeather = fmt.Sprintf(wdata.Weather[0].Main)\n\n\t// 日本語変換\n\tif resWeather == \"Clouds\" {\n\t\tresWeather = \"曇り\"\n\t} else if resWeather == \"Clear\" {\n\t\tresWeather = \"晴れ\"\n\t} else if resWeather == \"Rain\" {\n\t\tresWeather = \"雨\"\n\t} else if resWeather == \"Drizzle\" {\n\t\tresWeather = \"霧雨\"\n\t} else if resWeather == \"Thunderstorm\" {\n\t\tresWeather = \"雷雨\"\n\t} else if resWeather == \"Snow\" {\n\t\tresWeather = \"雪\"\n\t}\n\n\tvar temp string\n\ttemp = fmt.Sprintf(\"%.2f\", (wdata.Info.Temp - 273.15))\n\tvar humidity string\n\thumidity = fmt.Sprintf(\"%.2f\", wdata.Info.Humidity)\n\tvar res string\n\tres = fmt.Sprintf(\"天気：%s\\n気温：%s℃\\n湿度：%s％\", resWeather, temp, humidity)\n\n\t_, err = bot.ReplyMessage(e.ReplyToken, linebot.NewTextMessage(res)).Do()\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n}\n```\n\n# 参考文献\n\n - [LINE BOT APIで簡単BOT作成](https://ceblog.mediba.jp/post/150169029917/line-bot-api%E3%81%A7%E7%B0%A1%E5%8D%98bot%E8%A3%BD%E4%BD%9C)\n - [【初学者向け】Go,LINEBot,AWSLambdaで天気予報のボットを作成！](https://qiita.com/shinya_1004/items/fb73172feb693b57605c)\n - [毎朝 天気を通知する LINE Bot を作ってみました。](http://takagusu.hateblo.jp/entry/2017/01/24/200453)\n - [無料天気予報APIのOpenWeatherMapを使ってみる](https://qiita.com/nownabe/items/aeac1ce0977be963a740)\n - [モスクワの基本情報](https://tentsuki.jp/information/russian/1632/)\n","user":"umaibou1126","created_at":"2021-03-28T18:02:43+09:00","updated_at":"2021-03-28T18:26:28+09:00"},{"url":"https://qiita.com/fy406/items/afa7a21095776d743569","title":"Dockerコンテナ化したGitLabのアンイストール方法","body":"次回実施予定のGitLabのバージョン合わせの事前準備として、前回インストールしたGitLabをアンイストールしました。\n概出かもしれませんが、今回は備忘録を兼ねて手順を残しておきます。\n\n#GitLabの停止\nまずは以下のコマンドからDockerを停止させます。\nなお、sudoは省略しています。\n\n```\ndocker exec -it gitlab gitlab-ctl status\ndocker exec -it gitlab gitlab-ctl stop\ndocker exec -it gitlab gitlab-ctl status #全てdownになっていればOK\n```\n\n続いてDockerのGitLabプロセスを停止させます。\n\n```\ndocker ps\ndocker stop gitlab\ndocker ps #gitlabのプロセスが表示されなければOK\n```\n\n以上でGitLabの停止は完了です。\n\n#GitLabのアンイストール・イメージ削除\n続いてGitLabのアンイストールを実施します。\nコマンドは以下の通りです。\n\n```\ndocker ps -a\ndocker rm -f gitlab\ndocker ps -a #gitlabのプロセスが表示されなければOK\n```\n\nアンイストール実行後、イメージも不要であれば削除します。\nコマンドは以下の通りです。\n\n```\ndocker images #ここでgitlabのIMAGE IDを控える\ndocker rmi <IMAGE ID> #gitlabのIMAGE IDを指定\ndocker images #gitlabのイメージが消えていればOK\n```\n\n以上でGitLabのアンイストールとイメージ削除も完了しました。\n\n#GitLab関連ディレクトリの削除\n最後にGitLab関連のディレクトリを削除します。\n\n```\nrm -rf /srv/gitlab/config/\nrm -rf /srv/gitlab/data/\nrm -rf /srv/gitlab/logs/\n※インストール時にGitLabの関連ディレクトリの場所を別の場所に指定した場合は「/srv/gitlab/」を指定していた場所に読み替えてください\n```\n\n以上でアンイストール作業は完了です。\n上記の流れでアンイストールすれば再インストールも問題なく実行できます。\n簡単ですね。\n","user":"fy406","created_at":"2021-03-28T18:01:42+09:00","updated_at":"2021-03-28T18:01:42+09:00"},{"url":"https://qiita.com/aokirozin/items/dba9c3fb4dc112b9d083","title":"DockerでUbuntu+Python3.9+JupyterLab3+SSHdなイメージを作る","body":"以下\n\nポイントとしては、\n\n- 日本語化している\n- SSHサーバが起動している\n- Miniconda + conda-forge リポジトリを利用している\n- Jupyter Lab に Rubyカーネルが追加されている\n- Jupyter Lab に すぐに Perlカーネルを追加できる\n\nセキュリティ的にはいろいろNGかと。\n\n\n```dockerfile:Dockerfile\nFROM ubuntu\n\n# 管理ユーザ名\nARG user=\"[管理ユーザ名]\"\n# 管理ユーザパスワード\nARG pass=\"[管理ユーザ名のパスワード]\"\n# パッケージのインストール時に警告を出さない\nENV DEBIAN_FRONTEND=noninteractive \\\n    DEBCONF_NOWARNINGS=yes\n# rootにパスワードを設定\nRUN echo \"root:[rootパスワード]\" | chpasswd \\\n\\\n# パッケージのインストール\n    && apt-get update -y \\\n    && apt-get upgrade -y --no-install-recommends \\\n    && apt-get install -y --no-install-recommends \\\n        cpanminus \\\n        curl \\\n        git \\\n        less \\\n        libczmq-dev \\\n        libffi-dev \\\n        libtool \\\n        libzmq3-dev \\\n        locales \\\n        make \\\n        openssh-server \\\n        perl \\\n        ruby \\\n        ruby-dev \\\n        sudo \\\n        tzdata \\\n        vim \\\n        wget \\\n    && apt-get clean -y \\\n    && rm -rf \\\n        /var/lib/apt/lists/* \\\n        /var/cache/apt/* \\\n        /usr/local/src/* \\\n        /tmp/* \\\n\\\n# 日本語環境の設定\n    && locale-gen ja_JP.UTF-8 \\\n    && echo \"export TZ=Asia/Tokyo\" > /etc/profile.d/ja_tokyo.sh \\\n    && echo \"export LANG=ja_JP.UTF-8\" >> /etc/profile.d/ja_tokyo.sh \\\n    && echo \"export LANGUAGE=ja_JP:ja\" >> /etc/profile.d/ja_tokyo.sh \\\n\\\n# SSHサーバの設定\n    && mkdir /var/run/sshd \\\n    && echo \"PermitRootLogin yes\" >> /etc/ssh/sshd_config.d/root_pwd.conf \\\n    && echo \"PasswordAuthentication yes\" >> /etc/ssh/sshd_config.d/root_pwd.conf \\\n    && echo \"UseDNS no\" >> /etc/ssh/sshd_config.d/root_pwd.conf \\\n\\\n# Minicondaのインストール\n    && curl -LO https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \\\n    && bash ./Miniconda3-latest-Linux-x86_64.sh -bfp /opt/miniconda \\\n    && rm -f ./Miniconda3-latest-Linux-x86_64.sh \\\n    && echo 'PATH=\"/opt/miniconda/bin:$PATH\"' >> /etc/profile.d/miniconda.sh \\\n\\\n# Pythonモジュールをcondaでインストール\n    && . /etc/profile.d/miniconda.sh \\\n    && conda config --add channels conda-forge \\\n    && conda config --remove channels defaults \\\n    && conda update -y conda \\\n    && conda update -y --all\\\n    && conda install -y \\\n        imageio \\\n        ipywidgets \\\n        jupyterlab \\\n        matplotlib \\ \n        numpy \\\n        nodejs \\\n        openpyxl \\\n        pandas \\\n        scikit-learn \\\n        scipy \\\n        seaborn \\\n        xeus-python \\\n    && conda clean -y --all \\\n\\\n# condaでインストールできないモジュールをpipでインストール\n    && python -m pip install \\\n        japanize-matplotlib \\\n        mglearn \\\n    && rm -rf /root/.cache \\\n\\\n# JupyterLabの設定\n    && mkdir /etc/jupyter \\\n    && echo \"c = get_config()\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.allow_remote_access = True\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.allow_root = True\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.ip = '0.0.0.0'\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.open_browser = False\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.port = 8888\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.NotebookApp.token = ''\" >> /etc/jupyter/jupyter_notebook_config.py \\\n    && echo \"c.LabBuildApp.minimize = False\" >> /etc/jupyter/jupyter_notebook_config.py \\\n\\\n# JupyterLabの拡張機能のインストール\n    && . /etc/profile.d/miniconda.sh \\\n    && jupyter labextension install \\\n        @jupyterlab/debugger \\\n        @jupyterlab/toc \\\n    && jupyter labextension update --all --minimize=False \\\n    && jupyter lab build --minimize=False \\\n\\\n# JupyterにRubyカーネルを追加\n    && gem install \\\n        cztop \\\n        iruby \\\n    && iruby register --force \\\n\\\n# JupyterにPerlカーネルを追加\n# (これだけでは追加できない, コンテナ内で iperl notebook を初回のみ実行することが必要)\n    && cpanm Devel::IPerl --notest \\\n\\\n# ユーザ作成\n    && adduser -q --gecos \"\" --disabled-login ${user} \\\n    && usermod -aG sudo ${user} \\\n    && echo \"${user}:${pass}\" | chpasswd\n\n# 作業ディレクトリ\nWORKDIR /root/\n# 使用ポート\nEXPOSE 22 8888\n\n# SSHサーバを起動する\nCMD [\"/usr/sbin/sshd\", \"-D\"]\n```\n\nDockerコマンドの例 (Dockerfileのあるディレクトリで実行)\n\n```bash\n# イメージ作成\ndocker image build --tag ubuntu/py/sshd:20210328 .\n\n# コンテナをバックグラウンドで起動\ndocker container run --rm -d --name ubuntu_py_sshd -h ubuntu -p 33322:22 -p 38888:8888 ubuntu/py/sshd:20210328\n\n# コンテナにログイン\ndocker container exec -it ubuntu_py_sshd bash --login\n\n# JupyterにPerlのカーネルを追加する(初回1回のみ, 正常にrunningしているのを確認を終了)\niperl notebook\n# JupyterLabを起動\njupyter lab --no-browser\n\n# コンテナを停止して削除\ndocker container stop ubuntu_py_sshd\n```\n","user":"aokirozin","created_at":"2021-03-28T17:59:42+09:00","updated_at":"2021-03-28T17:59:42+09:00"},{"url":"https://qiita.com/tmasuyama/items/059191681e764c13299a","title":"pyenvで任意のPythonバージョンに切り替える方法","body":"タイトル通り、pyenvを使って任意のPythonバージョンをインストールし、使いたいランタイムに応じて切り替える方法を紹介します。\n環境は Mac です。\n本記事執筆時点では AWS SAM が Python 3.9 に対応していなかったので、Python 3.8 をインストールしようと思いまとめます。\n\nHomebrew を用いて pyenv をまずはインストールします。\n\n```\n$ brew install pyenv\n```\n\nインストールが終わったら pyenv でインストールできる Python バージョンを確認します。\n(予め指定したいバージョンがわかっているならば必要ありません）\n\n```\n$ pyenv install -l\n```\n\n今回は Python 3.8.8 をインストールしたいので、その場合は次のようにターミナルに入力します。\n\n```\n$ pyenv install 3.8.8\n```\n\nインストールしたら、次のコマンドでデフォルトの Python バージョンを切り替えます。\n※もし切り替わらない場合は一回ターミナルを再起動してみましょう。\n\n```\n$ pyenv global 3.8.8\n$ python --version\n  Python 3.8.8\n```\n\nこれでインストールした Python 3.8.8 に切り替えることができました。  \n\nついでに Python 3.7 系もインストールしておきます。\n\n```\n$ pyenv install 3.7.10\n```\n\nここで、複数のバージョンを pyenv でインストールした時の切り替え方を紹介します。\n次のコマンドでインストールしたバージョンを確認できます。\n\n```\n~ $ pyenv versions\n  system\n  3.7.10\n* 3.8.8 (set by /Users/yourname/.pyenv/version)\n```\n\n上記の中でアスタリスクがついているバージョンが、現在使われている Python のバージョンということを表しています。\n切り替えるには pyenv global コマンドを使います。\n\n```\n$ pyenv global 3.7.10\n$ python -V\nPython 3.7.10\n```\n\n指定したバージョンに切り替わったことを確認できました。\n","user":"tmasuyama","created_at":"2021-03-28T17:57:41+09:00","updated_at":"2021-03-28T17:57:41+09:00"},{"url":"https://qiita.com/rokusyou/items/ab96b9c51c42870503ce","title":"vagrantでdocker-composeが使えるubuntu18.04を立ち上げる","body":"### この記事について\n1. macにvagrantでubuntu18.04を立ち上げdocker-composeを使えるようにしました。\n背景はdocker-for-macの実行速度が遅かったので、ubuntuでdockerを使痛くなったことです。\n\n2. あくまで個人の備忘録です、参考にされる場合はその点ご留意ください。\n\n### やったこと\n#### 1. vertualBoxとvagrantのインストール\n こちら各サイトを参考にしてみてください。\n1) VertualBox\nhttps://pc-karuma.net/mac-virtualbox-install/\n2) vagrant\nhttps://weblabo.oscasierra.net/install-vagrant-onto-macosx/\n\n\n#### 2. Vagrantの仮想マシンを立ち上げる\n\n1) Vagrantfileを作成\n\n```\n## 任意の実行を作成\n$ mkdir vagrant\n$ mv vagrant\n## 以下のコマンドを実行\n$ vagrant init ubntu/bionic64\n```\n\nこれで実行ディレクトリにVagrantfileが作成される\n2)\n試しに仮想マシンが立ち上がるか確認する\n\n以下を実行してssh接続できることを確認。できれば仮想マシンが立ち上がっていることになる。\n\n\n```\n$ vagrant up\n\n$ vagrant ssh\n```\n\n dockerが入っていないことを確認してみる(まだコマンドないと言われるはず)\n\n\n```\nbionic$ docker -v\n```\n\n\n終わったらhaltする\n\n```\n### 仮想マシンから抜ける\nbionic$ exit\n\n### ホストで仮想マシンを止める\n$ vagrant halt\n```\n\n\b・docker-composeを使えるようにする\n公式のgithubを参考にしました。\nhttps://github.com/leighmcculloch/vagrant-docker-compose\n\n私が実行した手順は以下です。\n\n1) ホストでプラグインをインストール\n\n```\n$ vagrant plugin install vagrant-docker-compose\n\n```\n\n2) Vagrantfileに追記\n\n```\n  config.vm.prvision :docker\n  config.vm.provision :docker_compose\n```\n\n3) 追記内容を反映させる\n\n以下のコマンド実行すれば仮想マシンにdocker-composeがインストールされます。\n```\n$ vagrant provision\n```\n\n仮想マシンを立ち上げてdocker-composeがインストールされてるのを確認します。\n\n```\n$ vagrant up\n$ vagrant ssh\n## dockerとdocker-composeが入ってるのを確認\nbioic$ docker -v\nDocker version xx.xx.x, build xxxxxxx\n\nbionic$ docker-compose -v \nDocker version xx.xx.x, build xxxxxxx\n```\nでそれぞれversionが表示されればOK！\n\n\n","user":"rokusyou","created_at":"2021-03-28T17:54:27+09:00","updated_at":"2021-03-28T20:07:00+09:00"},{"url":"https://qiita.com/AkizukiAki/items/074fa7db2eec58d978c9","title":"エンジニアのための民法（民事訴訟）","body":"#はじめに\nどーも。エンジニアの皆さんこんにちは。\n皆さんはこのような経験はありませんか？\n\n「商品を納品したのに、難癖付けられてお金を払ってくれない！」\n\n「商品を作っているときに、一方的に契約解除された！お金も払ってくれてないのに！」\n\nなんと！これら！すべて民法上の規定があるので解決できます！\n\nなお、当方は司法試験予備試験受験生であるものの実務家ではないので具体的事案の法律的見解は専門家である弁護士先生の見解を第一にしてください。\n\n#難癖付けてお金を払ってくれないとき\nフリーランスのエンジニアにはこういうことあると思います。\nですが、契約が締結され、実際にエンジニアが設計や打ち合わせなど仕事を始めた時点で民法第632条（請負）が成立しています。\n\n>民法第632条（請負）\n　請負は、当事者の一方がある仕事を完成することを約し、相手方がその仕事の結果に対してその報酬を支払うことを約することによって、その効力を生ずる。\n\nでは、「仕事の完成」とはいったいどういう意味なのでしょうか。\n法学上において、「仕事の完成」とは、\n\n**報酬請求が可能な程度であり、請負工事が当初予定されていた最終の工程まで一応終了したこと**をいうとされています。\n\nすなわち、エンジニア的に言うと、仕事の契約内容が「〇〇のシステムを作ってください。」だけだとして、\n「コードが完成して実機でテストをして問題なく動作した」\nなら\n「コードが汚い」だとか何とか難癖付けて契約内容を逸脱したリテイクを要求して報酬を払ってくれないことは問題となるわけです。\n\nその場合は、民法633条（報酬の支払い時期）に反するということです。\n\n>民法第633条（報酬の支払い時期）\n　報酬は、仕事の目的物の引き渡しと同時に、支払わなければならない。ただし、物の引渡しを要しないときは、第624条第1項［雇用における報酬の支払い時期］の規定を準用する。\n\nこの報酬請求権なのですが、報酬額が具体的に決定されていない場合であっても報酬額の決定方法が定まってさえいれば成立します。これを**概算請負**と言ったりします。\n\n絶対に相手方は「こんなの完成したとは言えない！」とかほざいてくると思いますが、「民法の規定」ではこのようになっています。\n\n#一方的に契約解除を突き付けてお金を払ってくれないとき\nこれは誠に遺憾ですね～。\nですが、意外とよく聞く話です。\n\nしかし、さすが民法。しっかりと規定しています。民法第641条（注文者による契約の解除）ですね。\n>民法第641条（注文者による契約の解除）\n　請負人が仕事を完成しない間は、注文者は、いつでも損害を賠償して契約の解除をすることができる。\n\nでは、今回の事案に当てはめていきましょう。\n言い忘れてましたが、法律は「当てはめ」です。\n\n法律で「〇〇のときは××である。」とあったら、即座に事案に当てはめです。\n\n今回の場合では、「請負人が仕事をしているときに注文者が一方的に契約の解除を宣告している。しかし、その損害を賠償してくれない。」という構図です。\n\n注文者の契約解除権は民法第641条で認められています。すなわち、前段はOKということですね。\nしかし、後段の「その損害を賠償してくれない。」というのが問題ですね。\nここで今回の事案と民法の規定で齟齬が発生しています。\n\n請負人はこのようなとき、何ができるか。そうです。**損害賠償請求**です。\nちなみに、この損害賠償ですが、その範囲は**請負人が既に支出した費用のほかに仕事が完成しているのならば本来得られたであろう利益**も含まれるとされています。\nこの**仕事が完成しているのならば本来得られたであろう利益**を**履行利益**というので是非覚えておいてください。\n\n#これら二つの事案の対処法\n\nでは、実際に被害にあったときにどうするか。\nそうです。**民事訴訟制度の利用**です。\nもちろん、民事訴訟制度の利用以外にも**調停**や**和解**・**仲裁**などの自主的解決の手段はありますが、民法の明示されている規定を守らずに債務不履行を行っている相手に自主的解決なんて無謀だと個人的には思っています。\n\n民事訴訟制度と言ってもたくさんあります。\nまず、スタンダードな**通常訴訟**。\n次に、簡易迅速な略式訴訟の**少額訴訟**。\n最後に、**督促手続**です。\n\nスタンダードな通常訴訟は皆さんお分かりだと思うので省略します。\nまぁ、よくみる民事訴訟のことです。\n\n##少額訴訟って？\n少額訴訟とは、簡易裁判所における訴額60慢円以下の金銭支払い請求のための簡易・迅速な略式訴訟のことです。\nこれの良いところは、\n１．口頭弁論が一回で終わる。\n２．口頭弁論終了後すぐに判決が言い渡される。\n３．少額訴訟債権執行が勝訴したときに行える。\nです。\n１・２は簡単に分かると思います。\n簡単に言ったら「裁判が迅速・簡単」ということです。\n\n３は、勝訴して債務名義を得たときに限り，その簡易裁判所において行う金銭債権（本件なら正当な報酬や損害賠償）に対する強制執行のことです。\n\n##督促手続って？\n督促手続とは、金銭の支払又は有価証券若しくは代替物の引渡しを実質審理を行わずに支払い督促を発するための手続きです。\nこれの良いところは\n１．書類審査のみだから、訴訟のように審理のために裁判所に行く必要がないこと。\n２．手数料が訴訟の場合の半額であること。\nです。\nまた、督促後に債務者から督促異議申立が**2週間**なされなければ**仮執行宣言付支払督促**というものが付与されます。\n仮執行宣言付支払督促が付与されると、訴訟の判決と同じく債務者の財産を差し押さえるために、強制執行を申し立てることができます。\n\n#そもそもこれらを未然に防ぐために\nいや、そもそも民事訴訟制度なんて利用したくないですよね？\n時間とお金の無駄だと感じることもあると思います。\nでは、このような民事紛争を未然に防ぎましょう。\n\n##契約時点で「どの範囲までを業務として行うか」を明確にしましょう。\nすなわち、営業の段階で念入りに打ち合わせを具体的な範囲まで行うということです。\nコードは実際に使える程度で良いのか、それとも綺麗にしていくのか。\n保守・運用は業務はいるのか。\nリテイクは何回までか。\nこのようなところは、契約の時点で明確にしておきましょう。そして、口頭でなく電磁的記録含めた書面で！\n\n##「契約書」を念入りに作りましょう。\n\n自身がエンジニアとして活動しているということもあり、様々な契約書を拝見することがあるのですが、中には「いやこんな契約まかり通らねぇよ！」という契約書や「これ絶対のちのちに紛争起きるな！」という契約書がたくさんあります。\n契約書を作るときは弁護士や司法書士の先生の手を借りましょう。一見、お金がかかるように見えますが、訴訟の方がお金が発生します。\n\n専属合意管轄裁判所の設定や準拠法の設定も忘れず！\n\n##発注者との信頼関係を密接に！\n積極的に発注者と連絡を取って進捗確認を行うだったりの信頼関係を密接にしましょう。\n請負というのは、相手の業務活動を信頼して行うことです。\nしかし、発注者も人間です。すこし、業務に対して疑念も生まれます。\nですので、不安を少しでも払拭するために連絡を積極的にとって下さい。\n意外と、紛争を未然に防ぐことができる活動です。\n\n##困ったときは法律の専門家へ！\nそれでもやはり紛争は起きてしまうことがあります。\nそんなときは、すぐに弁護士などの法律の専門家のところへ行きましょう。\n紛争は「ガン」と同じでほっておくほど、面倒になります。\n早期に適切な対応をすることが重要です。\nというわけで少しでも紛争の兆候が見られたらすぐに相談しましょう。\n\n#最後に\n今回は、よくあるエンジニアの紛争について解決策と未然防止策の紹介をしました。\n今後のエンジニアライフにおいて役に立つ記事だと思っているので是非LGTMして何かあったときに見返せるようにしましょう！\n\nここまでご覧いただきありがとうございました！\n","user":"AkizukiAki","created_at":"2021-03-28T17:51:28+09:00","updated_at":"2021-03-28T18:58:11+09:00"},{"url":"https://qiita.com/virty/items/fe2e4ebf4921f2e4b6af","title":"kivyMDチュートリアル其の玖 Components - Bottom Navigation篇","body":"はい、今日もやって参りました。kivyMDのお時間です。\n今日も元気にOSS活動！ということで今週もやっていこうと思います。\n\n今週は何といっても、LI○Eの話題が多くありましたね。自分もある程度kivyMDを使いこなせる\nようになれば、メッセージ交換アプリとか作ろうかなぁと思った次第です。ただ、あそこまで\n作り込むことは無理ゲーにはなりますが。\n\nという横道も外れながらですが、早速やっていきたいと思います。\n今週はBottom Navigationということで、よくスマホアプリとかで下あたりにあるUIパーツになります。\n\n## Bottom Navigation\n\nはい、毎週のごとくMaterial Designのリンクを見てよという案内からになります。\nここではこちらも毎週のごとく触れ込みは省きますが、一応概要だけ。\n\n特に説明もなくとも、どんなことをするのかということはイメージしやすいと思いますが\nMaterial Designのリンク上では目的地を表示させるものとあります。アイコンやテキスト\nを併用して使用されることがよくあり、まさにこれはナビゲーションという用語がマッチする\nなということがよく分かります。\n\n## Usage\n\n使い方は以下のようにするみたいです。\n\n```python\n<Root>>:\n\n    MDBottomNavigation:\n\n        MDBottomNavigationItem:\n            name: \"screen 1\"\n\n            YourContent:\n\n        MDBottomNavigationItem:\n            name: \"screen 2\"\n\n            YourContent:\n\n        MDBottomNavigationItem:\n            name: \"screen 3\"\n\n            YourContent:\n```\n\nMDBottomNavigationウィジェットの配下にまたMDBottomNavigationItemウィジェット\nを配置させるという記法になっています。MDBottomNavigationウィジェットに見せたい\nコンテンツを配置させるという記法も併せ持っています。\n\n```\n<Root>>:\n\n    ScreenManager:\n\n        Screen:\n            name: \"screen 1\"\n\n            YourContent:\n\n        Screen:\n            name: \"screen 2\"\n\n            YourContent:\n\n        Screen:\n            name: \"screen 3\"\n\n            YourContent:\n```\n\n分かりやすくすると、こうなるぜというのが上記の疑似コードだという説明があります。\n分かりやすいか?と少し思ってしまいますが、まだまだkivy力が足りないんだと思うだけ\nにここはしておきます。\n\n## Example\n\nということで、サクサクと進んでいますがサンプルコードに入っていこうと思います。\n今回はマニュアル通りだとつまらないので、少しこれまでに試したことも併せながら\nコードを少し変更しています。\n\n```python:ix/bottom_navigation.py\nfrom kivymd.app import MDApp\nfrom kivy.lang import Builder\n\n### font package\nfrom kivy.core.text import LabelBase\nfrom kivymd.font_definitions import theme_font_styles\n\nclass Test(MDApp):\n\n    def build(self):\n        ### self.theme_cls.primary_palette = \"Gray\"\n        \n        ### add font info\n        LabelBase.register(name=\"gomarice_mukasi_mukasi\",fn_regular=\"gomarice_mukasi_mukasi.ttf\")\n        theme_font_styles.append('gomarice_mukasi_mukasi')\n        self.theme_cls.font_styles[\"gomarice_mukasi_mukasi\"] = [\"gomarice_mukasi_mukasi\", 32, 0.15]\n\n        return Builder.load_string(\n            '''\nBoxLayout:\n    orientation:'vertical'\n\n    MDToolbar:\n        title: 'Bottom navigation'\n        #md_bg_color: .2, .2, .2, 1\n        #specific_text_color: 1, 1, 1, 1\n\n    MDBottomNavigation:\n        #panel_color: .2, .2, .2, 1\n\n        MDBottomNavigationItem:\n            name: 'screen 1'\n            text: 'season1'\n            icon: 'human-male-female'\n\n            MDLabel:\n                text: 'いま今、あるところにおじいさんと\\\\nおばあさんがいました。'\n                font_style: \"gomarice_mukasi_mukasi\"\n                halign: 'center'\n\n        MDBottomNavigationItem:\n            name: 'screen 2'\n            text: 'season2'\n            icon: 'golf-cart'\n\n            MDLabel:\n                text: 'おじいさんは山でゴルフに、\\\\nおばあさんは近所の\\\\nコインランドリーへ。'\n                font_style: \"gomarice_mukasi_mukasi\"\n                halign: 'center'\n\n        MDBottomNavigationItem:\n            name: 'screen 3'\n            text: 'end.'\n            icon: 'clock-end'\n\n            MDLabel:\n                text: 'めでたし、めでたし。'\n                font_style: \"gomarice_mukasi_mukasi\"\n                halign: 'center'\n'''\n        )\n\n\nTest().run()\n```\n\nさぁ、勘の良い方は何をするのか、ははーんとなるかもしれませんがそういうことになります。\n何をするのか分からない方はもう少しお待ちください。\n\nまず、今回も先週と同じようにkv側を中心に見ていきます。buildメソッドの方ではカスタムで\n色々ごにょごにょやっていますが、こちらは以前にもやったフォントの取り込みなので興味が\nある方は以下リンクを見られてください。\n[kivyMDチュートリアル其の伍 Themes - Icon Definitions篇](https://qiita.com/virty/items/97499128a205113431d5)\nただただこのメソッドは、kvで定義したものを読み取っているだけです。\n\n\n```python\nBoxLayout:\n    orientation:'vertical'\n\n    MDToolbar:\n        title: 'Bottom navigation'\n        #md_bg_color: .2, .2, .2, 1\n        specific_text_color: 1, 1, 1, 1\n\n    MDBottomNavigation:\n        #panel_color: .2, .2, .2, 1\n\n        MDBottomNavigationItem:\n            name: 'screen 1'\n            text: 'season1'\n            icon: 'human-male-female'\n\n            MDLabel:\n                text: 'いま今、あるところにおじいさんと\\\\nおばあさんがいました。'\n                font_style: \"gomarice_mukasi_mukasi\"\n                halign: 'center'\n```\n\nということで本日のメインディッシュであるkv側の触れ込みになります。\n\nまず、BoxLayoutはもういいでしょうかね。こちらは縦積みをするレイアウトウィジェットに\nなります。で、あとのMDToolbarもどうせ後でやるしで、ここでは触れ込んでいきません。\n\nで、残ったMDBottomNavigationとMDBottomNavigationItemになりますが、こちらも\nマニュアルのUsageであった通りになりますね。んー、実にシンプルな使用方法。\n\nMDBottomNavigationですが、マニュアルの仕様だと以下のようになります。\n\n### class kivymd.uix.bottomnavigation.MDBottomNavigation(**kwargs)\n\n> A bottom navigation that is implemented by delegating all items to a ScreenManager.\n\n`first_widget`\n> first_widget is an MDBottomNavigationItem and defaults to None.\n\n`tab_header`\n> tab_header is an MDBottomNavigationHeader and defaults to None.\n\n`text_color_normal`\n> Text color of the label when it is not selected.\n> text_color_normal is an ListProperty and defaults to [1, 1, 1, 1].\n\n`text_color_active`\n> Text color of the label when it is selected.\n> text_color_active is an ListProperty and defaults to [1, 1, 1, 1].\n\n(省略)\n\n冒頭の説明は翻訳が非常に難しいものがありますが、全てのアイテムをScreenManagerに\n移譲させることによって実装させるUIウィジェットとなる、そういったことになりますかね。\nえぇ、どういうこと？w すみません、分かったフリして実は分かっていません。翻訳したもの\nをさらにこっちの方かなという書き換えをやって載せただけで余計複雑になってしまいました。\nScreenManagerがInterface役??なのか。。MDBottomNavigationがScreenManager\nと同じということ？？このままだと、謎がさらに謎を呼びそうなのであまり触れ込みすぎない\nようにします。\\# よし、今後の課題っと\n\n特にサンプルコード上のプロパティなどはpanel_color(これもマニュアル記載ない。。)\nくらいで、触れ込む必要もなさそうです。ただし、上記でもあるtext_color_normalと\ntext_color_activeプロパティは注意が必要そうです。こちらは定義をしても動きません\nでしたー。おそらく現状のissueリストとかでは挙げられているかもしれません。なぜなら\n変な翻訳サイトでまさしくこちらが話題に挙がっていましたから。。\n\nというわけでよく分からないまま、MDBottomNavigationItemに入っていきます。こちらの\n仕様としては、以下になります。こちらはシンプルな情報量。\n\n### class kivymd.uix.bottomnavigation.MDBottomNavigationItem(**kwargs)\n\n> A tab is simply a screen with meta information that defines the content that goes in the tab header.\n\n`header`\n> header is an MDBottomNavigationHeader and defaults to None.\n\n`on_tab_press(self, *args)`\n\n`on_leave(self, *args)`\n\n冒頭の説明としては、翻訳に依頼したものが信頼度は高そうなので依頼したものをそのまま\n貼っておきます。\n\n> A tab is simply a screen with meta information that defines the content that goes in the tab header.\n> タブは、タブヘッダーに含まれるコンテンツを定義するメタ情報を含む単なる画面です。 \n\nこれも理解できないほどではありませんが、上記のようになるとのことです。\nいきなり、タブがなぜ出てきた...？ということで自身はkivyのTabを継承しているのかとも\n思っていますが、どうなのでしょうね。位置するところはMDTabsと同じなのか？こればかり\nはまだはっきりとしてはいませんが、こちらはどちらかなのだろうと捉えるしかありません。\n\nマニュアルには記載されていませんが、コード上でnameやtextプロパティを保持している\nところからやはりMDBottomNavigationItem=MDTabsということなのでしょうか。また、\n今回はcontentとしてMDLabelが定義されています。これもおそらくScreenが配置できる\nのであれば、Listだとか色々なウィジェットを配置出来そうです。ということで、触れ込み\nはこの辺にしたいと思います。\n\n## 結果\n\nはよ、結果はよということを思われるかもしれないので、一気に結果の方を\n載せていきたいと思います。論より証拠をということで以下にキャプチャを\n添付します。\n\n![26.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/82826/53cea486-e51f-481b-4a4c-2c61f221bd0e.png)\n\n![27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/82826/5cc74b44-f04e-cfc6-9f38-6d61a62e0783.png)\n\n![28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/82826/3d6231ed-8541-ea4e-53f1-b6848db27358.png)\n\nということで今日したかったことでいうと、以前に1画面で終わる昔話のストーリーを\nアレンジということでした。なので、動かすときにはフォントを取得するようにして\nおいてください。別に同じフォントを用意する必要はありませんが、その場合はコードを\n変更するということもお忘れなく。前回はストーリーが直ぐに終わり、寂しかったものが\nリッチになりました。あとは、いうまでもなくですが無意味にテーマをデフォルトにしています。\n\n1つ補足というか注意点ですが、MDBottomNavigationItemにあるtextプロパティですが\nこちらは日本語がうまく表示できませんでした。なのでアイテムを切り替えるときのアイコン\nとともに表示されているテキストは英語表記をしなければいけないという制限ももれなく付いちゃいます。\n\n## まとめ\n\nさぁ、いかがだったでしょうか。使用方法は簡単でしたが、マニュアルを読み解くのに苦労する\nかなぁと思ってしまいました。自分だけ思ってることであれば良いのですが。。それでも今後の\nアプリ開発として使うには協力な武器になると思われます。これを動かしたときはあ、もうアプリが\n出来たなと勝手に思い込んでしまいました。全然まだまだ、コンポーネントは限りないのですが。。\n\nということで今週はこれまでにしたいと思います。\nそれでは、ごきげんよう。\n\n## 参照\n\n> Components » Bottom Navigation\n> https://kivymd.readthedocs.io/en/latest/components/bottom-navigation/\n","user":"virty","created_at":"2021-03-28T17:49:57+09:00","updated_at":"2021-03-28T17:49:57+09:00"},{"url":"https://qiita.com/Teach/items/5808849c2d1824677b4f","title":"AWS Lambdaで関数作ってAPIGatewayで公開するまでの学習","body":"# 本記事でやること\n\n![スクリーンショット_2021-03-28_17_22_37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/ea799a62-b7d4-6169-cea7-f51db4cba365.png)\n\n適当なJSONを返す\n\n# 前提\n[AWSのアカウント作成後のAdminのIAMユーザー作成](https://qiita.com/Teach/items/8212c06dc9f4a2546800)\n\n# Lambdaのスタート\n## Lambdaとは？\nサーバー管理せずにコードが実行できるサービス\n\n## コスト\nコード実行していない間は無料\nhttps://aws.amazon.com/jp/lambda/pricing/\n\n永久無料枠アリ\n\n## イベント\nS3、DynamoDBの変更をトリガーにして発火できる\n\n## 学び方\nhttps://docs.aws.amazon.com/lambda/latest/dg/welcome.html#welcome-first-time-user\n\n1. 動画見る\nhttps://aws.amazon.com/jp/lambda/\n英語。adblock切らないとみれなかった\n\n2. Getting started with Lambda\nhttps://docs.aws.amazon.com/lambda/latest/dg/getting-started-create-function.html\n\n## AWS CLIを使ってやってみる\nhttps://docs.aws.amazon.com/lambda/latest/dg/gettingstarted-awscli.html\nここやればOK\n\nroleの作成時のパスは`file://`が必須なので注意\n\n# 本題\n## 関数作る\n![スクリーンショット_2021-03-28_17_32_03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/e58a232b-1c4b-f4f4-bb2f-a0b94891e79a.png)\n\n一から作成\n関数名: my-function\nランタイム: Node.js 14.x\nデフォルトの実行ロールの変更 > 既存のロールを使用する > lambda-ex( AWS CLIの演習で作ったやつ)\n\n\nで、関数の作成\n\n## 公開する\n\n公開はAPI Gatewayでやる。\n登録して12ヶ月は無料枠があるが、永久無料枠はないので注意。\n\n![スクリーンショット_2021-03-28_17_34_38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/6ca5263a-9e28-45ae-fb6e-dfe0601ffeb3.png)\n\n以下のように設定\n\n![スクリーンショット 2021-03-28 17.37.19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/5c4fad7d-656d-b66b-0a42-154169b17415.png)\n\n\nそしたらトリガーができるので選択。\n\n![スクリーンショット 2021-03-28 17.38.14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/7c24edd1-c5f3-9c85-3b29-9f9d55bc76b0.png)\n\n\nそしたら以下のような画面が出る。\n\n![スクリーンショット_2021-03-28_17_38_50.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/b4a02ab7-4150-501e-4946-f4c83f1c1d77.png)\n\nこの「URLを呼び出す」の$defaultのほうを使う。\nこのURLの末尾にLambdaの関数名をslachでつなげる。\nすると呼べる。\n![スクリーンショット_2021-03-28_17_41_02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/ddc1f876-d342-f4a5-9a6a-aa2d041d128d.png)\n\n## レスポンスを修正\n![スクリーンショット_2021-03-28_17_43_15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/036c6565-8a25-d3bd-072c-9c264a647ee5.png)\n\nコードタブで変更してデプロイ\n\nすると、先ほどのURLで別のレスポンスが帰るようになる。\n\n# 参考\n\n[AWS Lambda を Amazon API Gateway に使用する](https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/services-apigateway.html)\n","user":"Teach","created_at":"2021-03-28T17:46:03+09:00","updated_at":"2021-03-28T17:46:03+09:00"},{"url":"https://qiita.com/nyasba/items/7aca9019fd6ecbdf92e0","title":"ECS Serviceを自動起動・停止するAutomation","body":"AWSではEC2やRDSの自動起動・停止を行うためにAutomationという機能がデフォルトで用意されています。CloudwatchEventと組み合わせるだけで簡単に夜間や休日の停止が実現でき、コスト削減が実現できます。\n\nただ、残念ながら自分がよく使うFargate(ECS)ではそのようなAutomationがなかったため、Runbookを自分で作りました。\n（起動はタスク数を1以上に、停止はタスク数を0にする形で実現しています）\n\nどのように記載するかのリファレンスが少なかったですが、Boto3のSDKを内部で呼び出しているだけのようだったので特にハマることなく実現できました。\n\n## Automation作成方法\n\nSystemsManager > 共有リソース > ドキュメント にて 「オートメーションを作成する」で エディタにYamlを貼り付けるだけ。\n\n### EcsServiceStart Runbook\n\n```yaml\ndescription: ecs service start automation runbook\nschemaVersion: '0.3'\nparameters:\n  EcsClusterName:\n    type: String\n  EcsServiceName:\n    type: String\n  DesiredCount:\n    type: Integer\n    default: 1\nmainSteps:\n  - name: ECS\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: ecs\n      Api: UpdateService\n      cluster: '{{ EcsClusterName }}'\n      service: '{{ EcsServiceName }}'\n      desiredCount: '{{ DesiredCount }}'\n```\n\n### EcsServiceStop Runbook\n\n```yaml\ndescription: ecs service stop automation runbook\nschemaVersion: '0.3'\nparameters:\n  EcsClusterName:\n    type: String\n  EcsServiceName:\n    type: String\nmainSteps:\n  - name: ECS\n    action: 'aws:executeAwsApi'\n    inputs:\n      Service: ecs\n      Api: UpdateService\n      cluster: '{{ EcsClusterName }}'\n      service: '{{ EcsServiceName }}'\n      desiredCount: 0\n```\n\n## スケジュール実行設定\n\n作成したAutomationをCloudwatchEventsで自動化します。\n\nCloudwatch > イベント > ルール　で　イベントソースを cron式 に、ターゲットを **作成したSSM Automation** にするだけです。ここでCluster名やService名も指定しましょう。\n\nできあがり。\n","user":"nyasba","created_at":"2021-03-28T17:44:00+09:00","updated_at":"2021-03-28T17:44:00+09:00"},{"url":"https://qiita.com/RuruVba/items/b4386689948c0c08bb08","title":"【VBA】1つのセルから特定の文字列を抽出する方法","body":"今回は、1つのセルから特定の文字列を抽出する方法です。\n\n下記のように、1つのセルに入れた文字列の中で特定の文字列を\n別々のセルに書き出したい。。。そんな時はないでしょうか。\n\n下記は、各職業のステータスを1つのセルに書いてしまいました。\nここから、各ステータスの値のみ抽出をし、それぞれのステータスの欄に\n格納したいと思います。\n\n![サンプル](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1242278/b57525fe-86b0-47fd-23c2-d526035298b3.jpeg)\n\n以下がサンプルコードになります。\n\n```vb.ステータスを分割する\nSub ステータスを分割する()\n\nDim txt As String\n\nDim i As Long\n\nFor i = 3 To 6\n\n    With Sheets(\"Sheet1\")\n\n    txt = .Cells(i, 3).Value\n    txt = Replace(txt, \" \", \"\")\n            \n    .Cells(i + 9, 3) = Mid(txt, InStr(txt, \"【HP】\") + 4, InStr(txt, \"【MP】\") - InStr(txt, \"【HP】\") - 4)\n    .Cells(i + 9, 4) = Mid(txt, InStr(txt, \"【MP】\") + 4, InStr(txt, \"【攻撃力】\") - InStr(txt, \"【MP】\") - 4)\n    .Cells(i + 9, 5) = Mid(txt, InStr(txt, \"【攻撃力】\") + 5, InStr(txt, \"【防御力】\") - InStr(txt, \"【攻撃力】\") - 5)\n    .Cells(i + 9, 6) = Mid(txt, InStr(txt, \"【防御力】\") + 5, InStr(txt, \"【素早さ】\") - InStr(txt, \"【防御力】\") - 5)\n    .Cells(i + 9, 7) = Mid(txt, InStr(txt, \"【素早さ】\") + 5, InStr(txt, \"【賢さ】\") - InStr(txt, \"【素早さ】\") - 5)\n    .Cells(i + 9, 8) = Mid(txt, InStr(txt, \"【賢さ】\") + 4)\n\n    End With\n\nNext i\n\nEnd Sub\n```\n\nでは、詳細を説明していきます。\n\n```\nDim txt As String\n\nDim i As Long\n```\nまずは変数を用意します。「txt」は抽出対象の文字列を格納するもので、\n「i」は各行数を格納するものになります。\n\n```\nWith Sheets(\"Sheet1\")\n\n    txt = .Cells(i, 3).Value\n    txt = Replace(txt, \" \", \"\")\n            \n    .Cells(i + 9, 3) = Mid(txt, InStr(txt, \"【HP】\") + 4, InStr(txt, \"【MP】\") - InStr(txt, \"【HP】\") - 4)\n    .Cells(i + 9, 4) = Mid(txt, InStr(txt, \"【MP】\") + 4, InStr(txt, \"【攻撃力】\") - InStr(txt, \"【MP】\") - 4)\n    .Cells(i + 9, 5) = Mid(txt, InStr(txt, \"【攻撃力】\") + 5, InStr(txt, \"【防御力】\") - InStr(txt, \"【攻撃力】\") - 5)\n    .Cells(i + 9, 6) = Mid(txt, InStr(txt, \"【防御力】\") + 5, InStr(txt, \"【素早さ】\") - InStr(txt, \"【防御力】\") - 5)\n    .Cells(i + 9, 7) = Mid(txt, InStr(txt, \"【素早さ】\") + 5, InStr(txt, \"【賢さ】\") - InStr(txt, \"【素早さ】\") - 5)\n    .Cells(i + 9, 8) = Mid(txt, InStr(txt, \"【賢さ】\") + 4)\n\nEnd With\n```\n上記を、各行ごとに処理をしていきます。\n\nWithを使うことで、Withの中では指定したシートを省略することができます。\n今回は、Sheets(\"Sheet1\")を指定してますので、「.（ドット）」から始まる部分でSheets(\"Sheet1\")を省略しています。\n\n```\ntxt = Replace(txt, \" \", \"\")\n```\nこちらは、対象のセルにスペースが入っていた場合に削除しています。\n今回は不要でしたが、備忘録として記載しています。\n\n```\n.Cells(i + 9, 3) = Mid(txt, InStr(txt, \"【HP】\") + 4, InStr(txt, \"【MP】\") - InStr(txt, \"【HP】\") - 4)\n```\nこちらで、Mid関数とInStr関数を使用することで、抽出したい文字列を指定し、\n値をセルに格納しています。\nMid関数とInStr関数については、下記の記事を参考にしてください。\n\nMid関数\nhttps://www.tipsfound.com/vba/05mid\n\nInStr関数\nhttps://www.tipsfound.com/vba/05instr\n\n```\nFor i = 3 To 6\n```\nそして、For文で抽出対象の行数分ループ処理をして完了です。\n\n以上、1つのセルから特定の文字列を抽出する方法でした。\n","user":"RuruVba","created_at":"2021-03-28T17:37:59+09:00","updated_at":"2021-03-28T17:37:59+09:00"},{"url":"https://qiita.com/kazuyaseo/items/355bf823022e1f661796","title":"MacOS Big SurでHomesteadを立ち上げようとしたらエラー","body":"MacOSをBigSurに更新するタイミングで、一気にクリーンインストールを実施。\nその後、改めてHomesteadの実行をしようとしたら、vagrant up を実行したタイミングで以下のようなエラーが出た。\n\n### 環境\nOS: MacOS Big Sur 11.2.2\n\n### エラー内容\n\n```\nThere was an error while executing `VBoxManage`, a CLI used by Vagrant\nfor controlling VirtualBox. The command and stderr is shown below.\n\nCommand: [\"hostonlyif\", \"create\"]\n\nStderr: 0%...\nProgress state: NS_ERROR_FAILURE\nVBoxManage: error: Failed to create the host-only adapter\nVBoxManage: error: VBoxNetAdpCtl: Error while adding new interface: failed to open /dev/vboxnetctl: No such file or directory\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), component HostNetworkInterfaceWrap, interface IHostNetworkInterface\nVBoxManage: error: Context: \"RTEXITCODE handleCreate(HandlerArg *)\" at line 94 of file VBoxManageHostonly.cpp\n```\n\n### 原因\n色々と探し回ったところ、VirtualBoxの再インストールで解決すると書いてあったため、以下URLより再インストールを実施。\nhttps://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html\nそれでも同じエラーのため、他を見回ったところ、設定の「セキュリティとプライバシー」からソフトウェアの許可を行う必要がある様子。\n\n### 対処方法\n\nMacの システム環境設定 > セキュリティとプライバシー を表示し、\n「開発元\"Oracle America, Inc.\"のシステムソフトウェアの読み込みがブロックされました。」の項目横にある「許可」ボタンをクリックして許可を実施。\nその後、念の為VirtualBoxを再インストールしました。\n\n上記を実施することで解決しました。\n","user":"kazuyaseo","created_at":"2021-03-28T17:36:55+09:00","updated_at":"2021-03-28T18:06:16+09:00"},{"url":"https://qiita.com/novelworks/items/8a1399445c0df067dd06","title":"UnityでAWSのRekognition使ってみた。","body":"##Amazon Rekognitinとは\nAmazon　Rekognitionとは、AWSのサービスの一つで、画像や動画を投げると、顔比較や感情分析など高度なことを、簡単に行える便利なものです。今回はこのサービスを使って、感情分析を行っていきます。\n\n##AWS SDK for .Netについて\nunityでのAWSSDK導入方法については基本ここ参照。\nhttps://qiita.com/nshinya/items/0a71d4658e7f4a650844\n\nRekognitionを使いたいので、AWSSDK.Rekognition.dllを入れてください\n\n##やりかた\nやり方として\n####1.unityでwebカメラを使う\n####2.Rekognitionにwebカメラの画像を投げる\n####3.返ってきたえJson風データから感情値を取り出す\nの三つで説明していきます\n\n##完成コード(雑です)\n\n```\nusing System;\nusing System.Linq;\nusing System.Threading;\nusing System.Threading.Tasks;\nusing System.IO;\nusing System.Collections;\nusing System.Collections.Generic;\nusing UnityEngine;\nusing UnityEngine.UI;\nusing Amazon.Rekognition;\nusing Amazon.Rekognition.Model;\n\n\n\n\npublic class DetectFaces : MonoBehaviour\n{\n    public RawImage rawImage;\n\n    WebCamTexture webCamTexture;\n\n\n    //textureをtexture2dにする関数\n    public Texture2D ToTexture2D(Texture self)\n    {\n        var sw = self.width;\n        var sh = self.height;\n        var format = TextureFormat.RGBA32;\n        var result = new Texture2D(sw, sh, format, false);\n        var currentRT = RenderTexture.active;\n        var rt = new RenderTexture(sw, sh, 32);\n        Graphics.Blit(self, rt);\n        RenderTexture.active = rt;\n        var source = new Rect(0, 0, rt.width, rt.height);\n        result.ReadPixels(source, 0, 0);\n        result.Apply();\n        RenderTexture.active = currentRT;\n        return result;\n    }\n\n\n\n\n\n    //Amazon Rekognition\n    public async Task Example(Amazon.Rekognition.Model.DetectFacesRequest image)\n    {\n        //AmazonRekognitionClient\n        AmazonRekognitionClient rekognitionClient = new AmazonRekognitionClient(\"AWSのアクセスキー\", \"AWSのシークレットキー\");\n\n        var response = await rekognitionClient.DetectFacesAsync(image);\n        \n        \n        foreach(var i in response.FaceDetails[0].Emotions)\n        {\n            Debug.Log(i.Confidence);\n            Debug.Log(i.Type);\n        }\n    }\n\n    \n\n    //start\n    public void Start()\n    {\n        webCamTexture = new WebCamTexture();\n        rawImage.texture = webCamTexture;\n        webCamTexture.Play();\n    }\n\n    public async void UseReko()\n    {\n        var img2d = ToTexture2D(webCamTexture);\n        var img = img2d.EncodeToJPG();\n        var stream = new MemoryStream(img);\n        List<string> att = new List<string>() { \"ALL\" };\n        var rekoImg = new Amazon.Rekognition.Model.Image { Bytes = stream };\n        var reqImg = new DetectFacesRequest {Attributes=att, Image = rekoImg };\n\n        await Example(reqImg);\n        \n    }\n\n```\n\n\n##1,Webカメラ\nRawImageにwebカメラで取得した画像をはっつけます。顔見たいからです。別に顔を画面で見たくねえよって人はrawImageなんていりません。\n\n\n```\n\n略\n\npublic RawImage rawImage;\nWebCamTexture webCamTexture;\n\n略\n\n\n    public void Start(){\n        webCamTexture=new WebCamTexture();\n        rawImage.texture=webCamTexture;\n        webCamTexture.Play()\n    }\n}\n\n```\n\nんで、webCamTextreなんですが、これをそのままImageとしてRekognitionに投げるわけにはいきません。\nというのも、Amazon.Rekognition.Model.DetectFacesRequestクラスのImageを投げなきゃいけないのです。ということで、\nWebCamTexture>Texture2D>JPG形式>MemoryStream>DetectFacesRequestという順序で変換していきます。\n\n####WebCamTexture>Texture2D\nWebCamTextureは一見Texture2Dなんですが、残念ながら違うんです。WebCamTextureというクラスなんです。だから、いったんToTexture2D()をつかって変換します。\n\n```\nvar img2d = ToTexture2D(webCamTexture);\n```\n\n####Texture2D>JPG\nこれも関数一発ドーンってやつです\n\n```\nvar img = img2d.EncodeToJPG();\n```\n\n####JPG>MemoryStream\nDetectFacesRequestを作るには、Byte列としてMemoryStreamを作る必要があります。MemoryStreamがなんだかはよくわかっていません。これもドーンです。\n\n```\nvar stream = new MemoryStream(img);\n```\n####MemoryStream>DetectFacesRequest\nこれはnewするときの引き数にMemoryStreamを入れるだけです。\n\n```\nvar rekoImg = new Amazon.Rekognition.Model.Image { Bytes = stream };\n```\n\n\nこれで投げる画像はOKです。あと、どんな情報が返ってくるかの指定として、ALLを指定しておきます。ALLじゃないと感情値とかは返ってきません。\n\n```\nList<string> att = new List<string>() { \"ALL\" };\n```\n\nんで最後に\n\n```\nvar reqImg = new DetectFacesRequest {Attributes=att, Image = rekoImg };\n```\nというようにRekognitionに投げるものを作ってあげれば終了です。\n\n\n\n##RekognitionにWebカメラの画像を投げる\n\n```\nAmazonRekognitionClient rekognitionClient = new AmazonRekognitionClient(\"AWSのアクセスキー\", \"AWSのシークレットキー\");\n\n        var response = await rekognitionClient.DetectFacesAsync(image);\n\n```\nここで、DetectFacesAsync()をつかって投げています。ここで大事なのが、DetectFacesじゃなくてDetectFacesAsyncを使わなくちゃいけないということです。非同期なのでそこら辺のことも書き足さなきゃデス。\n\nAsynchronous operations (methods ending with Async) in the table below are for .NET 4.5 or higher. For .NET 3.5 the SDK follows the standard naming convention of BeginMethodName and EndMethodName to indicate asynchronous operations - these method pairs are not shown in the table below.\n（APIリファレンスにちっちゃく書いてある)\n\nきちんとリファレンス読むべきですね。(Asyncないとerrorとしてinaccesible due to のやつが出てきます)\n\n\n\n\n##返ってきたJson風データから感情値を取り出す\n返ってくるデータはこんな形です。\n\n```\n{\n   \"FaceDetails\": [ \n      { \n         \"AgeRange\": { \n            \"High\": number,\n            \"Low\": number\n         },\n         \"Beard\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"BoundingBox\": { \n            \"Height\": number,\n            \"Left\": number,\n            \"Top\": number,\n            \"Width\": number\n         },\n         \"Confidence\": number,\n         \"Emotions\": [ \n            { \n               \"Confidence\": number,\n               \"Type\": \"string\"\n            }\n         ],\n         \"Eyeglasses\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"EyesOpen\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"Gender\": { \n            \"Confidence\": number,\n            \"Value\": \"string\"\n         },\n         \"Landmarks\": [ \n            { \n               \"Type\": \"string\",\n               \"X\": number,\n               \"Y\": number\n            }\n         ],\n         \"MouthOpen\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"Mustache\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"Pose\": { \n            \"Pitch\": number,\n            \"Roll\": number,\n            \"Yaw\": number\n         },\n         \"Quality\": { \n            \"Brightness\": number,\n            \"Sharpness\": number\n         },\n         \"Smile\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         },\n         \"Sunglasses\": { \n            \"Confidence\": number,\n            \"Value\": boolean\n         }\n      }\n   ],\n   \"OrientationCorrection\": \"string\"\n}\n```\n\nさっき、返ってくるデータ指定したけれど、DefaultだとBoundingBox, Confidence, Pose, Quality, Landmarksだけ返ってきます。\nforeachでちょちょいと出してあげればOKです。\n\n以上、Rekognitionの簡単な使い方でした。感情値データを使えばいろいろなことができるので遊んでみてください。\nあと、動くけれどここのやり方違うとかあるかもなので、そこんところは教えてくれると嬉しいです。\n","user":"novelworks","created_at":"2021-03-28T17:36:22+09:00","updated_at":"2021-03-28T17:36:22+09:00"},{"url":"https://qiita.com/take-2405/items/302a7ebf2783a2d8a739","title":"FlaskでWebAPIをデプロイした","body":"# Python(Flask)でWebAPIをデプロイした際の備忘録\n\nどうもtake-2405です。  \n普段は golangでバックエンドの開発を行っているのですが、1週間ほどPythonについて調べつつWebAPIをデプロイしました。\n\n## 1. WebAPIをローカル環境で作成\n#### 前提条件\n- Githubに関する知識がある\n- Herokuのアカウントがある\n  \n#### 今回の開発環境 \n\n- MacBook Pro 2018 (OS:Big Sur 11.2.1)\n- Python 3.7.10(このバージョンは任意)\n- Flask 1.1.2  \n**注意事項：後述しますが、デプロイの際にはサポートされているバージョンに合わせる必要があります。**\n\n#### Flaskのinstall\n\n```\npip install Flask\n```\n\n#### 簡単なAPIの作成  \n今回僕が作ったAPIは外部のAPIを利用して必要な情報のみを返すAPIだったためDBは利用していません。\n下記のようなmain.pyを作成します。\n\n```python:main.py\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/hello', methods=[\"GET\"])\ndef hello_world():\n    return jsonify({'message': 'Hello, world'})\n\nif __name__ == \"__main__\":\n    app.run(debug=True)\n```\n実行します\n\n```\npython main.py\n```\n\n[http://127.0.0.1:5000/hello](http://127.0.0.1:5000/hello)にアクセスすると\n\n```\n{\n  \"message\": \"Hello, world\"\n}\n```\n\nレスポンスが得られました。\n\n##### 注意事項  \nここに書いているAPIは簡単なものです。各々の目的に合わせてエンドポイントを追加し、処理を記述してください。\n\n## 2. 作成したAPIをデプロイする  \n#### デプロイ環境  \n- Heroku\n\n#### 注意事項：サポートされているveriosnについて  \nHerokuでは全てのPythonのバージョンがサポートされているわけではありません。  \n下記のサイトからサポートされているバージョンを確認\n(なぜかこのサイトに書いてあるものではうまく動作せず、僕の開発段階ではversion3.7.10で動作)\n[Herokuサポートバージョン](https://devcenter.heroku.com/articles/python-support)\n\n---\n#### デプロイに必要なファイルの準備\n- main.py(プログラムファイル)  \nPythonの実行ファイル   \n \n- runtime.txt(Pythonのバージョンを記載）  \n\n```\necho python-3.7.10 > runtime.txt\n```\n- requirements.txt（インストールすべきライブラリ(パッケージ)を記載）\n\n```\npip freeze > requirements.txt\n```\n\n- Procfile（プログラムの実行方法を記載）\n\n```\necho web: python main.py > Procfile\n```\n\n---\n#### いよいよデプロイ\n\n**すでにGit管理下にあるものとして説明しています。**\n\nHerokuにlogin\n\n```\nheroku login\n```\n\n対象のリポジトリに移動する\n\nHerokuでアプリケーションを作成\n\n```\nheroku create [任意のアプリケーション名]\n```\n\nHerokuにデプロイする(メインブランチ以外のブランチをデプロイする場合は**<ブランチ名>:main**)\n\n```\ngit push heroku main\n```\n\n## 発生した問題  \n- デプロイができたがすぐにクラッシュする  \nどうやらFlaskは外部に公開するためには開放するport周りで指定が必要なようだった  \n最後の１行を下記のように変更したらいけた\n\n```python:main.py\n    app.run(debug=False, host='0.0.0.0', port=8080)\n```\n\n- レスポンスの日本語が文字化けする  \n下記のように１行文字コードについての指定を加えることで解決\n\n```python:main.py\napp = Flask(__name__)\napp.config['JSON_AS_ASCII'] = False\n\n```\n- ログに関して\nProcfileに以下を追加\n\n```\nweb: gunicorn main:app --log-file -\n```\n\n## 参考にした記事\n- Pythonのversion変更の際に参考にした記事  \nhttps://qiita.com/TheHiro/items/88d885ef6a4d25ec3020#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95  \nhttps://teratail.com/questions/323061\n\n```\n# もしかしたらインストールの際に役に立つかも\npyenv install --patch 3.7.2 < <(curl -sSL https://github.com/python/cpython/commit/8ea6353.patch\\?full_index\\=1)\n```\n\n- Flaskのport関連で参考にした記事  \nhttps://qiita.com/miroha-eng/items/cf446a3a012c32a6d03c\nhttps://qiita.com/tomboyboy/items/122dfdb41188176e45b5\n\n\n\n","user":"take-2405","created_at":"2021-03-28T17:35:47+09:00","updated_at":"2021-03-28T17:53:32+09:00"},{"url":"https://qiita.com/kimisyo/items/4e29500dc97353a26bfb","title":"可視化指標を用いて様々な可視化手法を比較してみた","body":"#はじめに\n多次元空間のデータを二次元平面で可視化した結果を評価する指標である、[k3n error (k-nearest neighbor normalized error for visualization and reconstruction)](https://datachemeng.com/k3nerror/) というものを見つけたので試してみた。\n\n\n#k3n errorとは\n[こちら](https://datachemeng.com/k3nerror/)によると、以下の2つを同時に評価する指標である。\n① 多次元空間において近いサンプル同士は、2次元平面においても近いか？\n② 2次元平面において近いサンプル同士は、多次元空間においても近いか？\n\nプログラムは、[こちら](https://github.com/hkaneko1985/k3nerror)で公開されている。\n\n#k3n errorの使い方\n以下のようにインポートして実行する。\n\n```python\nfrom k3nerror import k3nerror\n\nX = .. # 可視化前の多次元空間のデータ\nZ = .. # 可視化後の2次元平面のデータ\nk3n_Z_error = k3nerror(X, Z, k_in_k3nerror) \nk3n_X_error = k3nerror(Z, X, k_in_k3nerror) \n```\n\nソース内の解説を読んだところ、```k3nerror(X, Z, k_in_k3nerror) ```で①、```knerror(Z, X, k_in_k3nerror) ```で②を評価するための計算が行われ、最終的に```①＋②```の値が、k3nerrorとなるようである。\n\n#やってみよう\n今回以下のデータを、PCA, MDS, tSNE, UMAP, GTMで可視化した際の可視化指標を求めてみる。\n\n- ケモインフォマティクスのデータということで、いつものごとくRDKitに付属の[こちら](https://github.com/rdkit/rdkit/tree/master/Docs/Book/data/solubility.train.sdf)のデータを利用 \n- RDkitを利用し、化学構造から説明変数を生成(記述子計算)\n- 記述子計算して得られた123個の説明変数から、計算エラーが含まれる説明変数、分散が0になる説明変数、相関係数が0.9以上の説明変数(どちらかを削除)を削除した81の説明変数を利用\n\n#ソース\n\n可視化および指標の計算を行うプログラムは以下の通りである。実行には、各可視化ライブラリに加え、GPy, GPyOptが必要となる。GTMは[こちら](https://github.com/hkaneko1985/gtm-generativetopographicmapping)のプログラムを利用し、ハイパーパラメータチューニングは、 [こちら](https://qiita.com/maskot1977/items/92571ab225b15ca393c5)を流用させてもらった。GTM以外はパラメータチューニングはしなかった。\n\n\n```deduct_dmension.py\nimport numpy as np\nimport pandas as pd\nimport argparse\nimport csv\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.decomposition import PCA\nfrom sklearn.manifold import TSNE, MDS\nimport umap\nfrom k3nerror import k3nerror\nfrom gtm import GTM\nimport GPy, GPyOpt\n\n\ndef output_csv(path, ids, xs, ys):\n\n    with open(path, 'w') as f:\n        writer = csv.writer(f, delimiter=\",\", lineterminator=\"\\n\")\n        for id, x, y in zip(ids, xs, ys):\n            id = id.replace('\\uffb4', '')\n            writer.writerow([id, x, y])\n        f.close()\n\n\ndef main():\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(\"-input\", type=str, required=True, help=\"input csv file.\")\n    parser.add_argument(\"-method\", type=str, required=True, choices=[\"PCA\", \"tSNE\", \"MDS\", \"UMAP\", \"GTM\"])\n    parser.add_argument(\"-output\", type=str, required=True, help=\"output csv file.\")\n\n    args = parser.parse_args()\n\n    # データの読み込み\n    df = pd.read_csv(args.input, index_col=0)\n\n    # オートスケーリング\n    ss = StandardScaler()\n    X = ss.fit_transform(df.values)\n\n    k_in_k3nerror = 10\n    Z = None\n\n    if \"PCA\" in args.method:\n        pca = PCA(n_components=2)\n        Z = pca.fit_transform(X)\n\n    if \"MDS\" in args.method:\n        mds = MDS(n_jobs=4)\n        Z = mds.fit_transform(X)\n\n    if \"tSNE\" in args.method:\n\n        tsne_model = TSNE(n_components=2)\n        Z = tsne_model.fit_transform(X)\n\n    if \"UMAP\" in args.method:\n        Z = umap.UMAP().fit_transform(X)\n\n    if \"GTM\" in args.method:\n        # 変数探索範囲\n        bounds = [\n            #{'name': 'shape_of_map_grid', 'type': 'discrete', 'domain': np.arange(30, 31, dtype=int)},\n            {'name': 'shape_of_map_grid', 'type': 'discrete', 'domain': np.arange(50, 51, dtype=int)},\n            {'name': 'shape_of_rbf_centers_grid', 'type': 'discrete', 'domain': np.arange(2, 22, 2, dtype=int)},\n            {'name': 'variance_of_rbfs_grid', 'type': 'discrete', 'domain': np.arange(-5, 4, 2, dtype=float)},\n            {'name': 'lambda_in_em_algorithm_grid', 'type': 'discrete', 'domain': np.arange(-4, 0, dtype=float)},\n            {'name': 'number_of_iterations', 'type': 'discrete', 'domain': np.arange(300, 301, dtype=float)},\n        ]\n        k_in_k3nerror = 10\n\n        def gtmf(x):\n            shape_of_map_grid = int(x[:, 0][0])\n            shape_of_rbf_centers_grid = int(x[:, 1][0])\n            variance_of_rbfs_grid = int(x[:, 2][0])\n            lambda_in_em_algorithm_grid = int(x[:, 3][0])\n            number_of_iterations = int(x[:, 4][0])\n            display_flag = 0\n            model = GTM([shape_of_map_grid, shape_of_map_grid],\n                        [shape_of_rbf_centers_grid, shape_of_rbf_centers_grid],\n                        2 ** variance_of_rbfs_grid, 2 ** lambda_in_em_algorithm_grid, number_of_iterations,\n                        display_flag)\n            model.fit(X)\n            if model.success_flag:\n                # calculate of responsibilities\n                responsibilities = model.responsibility(X)\n                # calculate the mean of responsibilities\n                means = responsibilities.dot(model.map_grids)\n                # calculate k3n-error\n                k3nerror_of_gtm = k3nerror(X, means, k_in_k3nerror)\n\n                # 評価指標を出力\n                k3n_Z_error = k3nerror(X, means, k_in_k3nerror)\n                k3n_X_error = k3nerror(means, X, k_in_k3nerror)\n\n                print(\"k3n-Z-error={0}\".format(k3n_Z_error))\n                print(\"k3n-X-error={0}\".format(k3n_X_error))\n                print(\"k3n-error  ={0}\".format((k3n_Z_error + k3n_X_error)))\n\n            else:\n                k3nerror_of_gtm = 10 ** 100\n            return k3nerror_of_gtm\n\n        myBopt = GPyOpt.methods.BayesianOptimization(f=gtmf, domain=bounds)\n        #myBopt.run_optimization(max_iter=300)\n        myBopt.run_optimization(max_iter=30)\n\n        print(myBopt.x_opt)\n        print(-myBopt.fx_opt)\n\n        shape_of_map = [int(myBopt.x_opt[0]), int(myBopt.x_opt[0])]\n        shape_of_rbf_centers = [int(myBopt.x_opt[1]), int(myBopt.x_opt[1])]\n        variance_of_rbfs = 2 ** myBopt.x_opt[2]\n        lambda_in_em_algorithm = 2 ** myBopt.x_opt[3]\n        number_of_iterations = int(myBopt.x_opt[4])\n        display_flag = 0\n\n        # construct GTM model\n        model = GTM(shape_of_map, shape_of_rbf_centers, variance_of_rbfs, lambda_in_em_algorithm, number_of_iterations, display_flag)\n        model.fit(X)\n\n        # calculate of responsibilities\n        responsibilities = model.responsibility(X)\n        Z = responsibilities.dot(model.map_grids)\n\n\n    output_csv(args.output, df.index.values, Z[:, 0], Z[:, 1])\n    k3n_Z_error = k3nerror(X, Z, k_in_k3nerror)\n    k3n_X_error = k3nerror(Z, X, k_in_k3nerror)\n\n    print(\"k3n-Z-error={0}\".format(k3n_Z_error))\n    print(\"k3n-X-error={0}\".format(k3n_X_error))\n    print(\"k3n-error  ={0}\".format((k3n_Z_error + k3n_X_error)))\n\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n#結果\n結果を以下に示す。k3n-Z-errorが①、k3n-X-errorは②の値である。数値が小さい程よい値である。\n計算時間は掲載していないが、GTMはパラメータチューニングで30回実行しており、また1回あたりの計算時間も他手法より時間がかかった。\n\n##PCA\n```\n　k3n-Z-error=2.6223228035570054\n　k3n-X-error=0.578405109666366\n　k3n-error  =3.2007279132233712\n```\n\n##MDS\n```\n  k3n-Z-error=1.7886900303710693\n  k3n-X-error=0.44521214922051466\n  k3n-error  =2.233902179591584\n```\n\n##tSNE\n\n```\n  k3n-Z-error=1.033589128650684\n  k3n-X-error=0.12006930439514711\n  k3n-error  =1.153658433045831\n```\n\n##UMAP\n```\n  k3n-Z-error=1.970052284296805\n  k3n-X-error=0.17142884248639179\n  k3n-error  =2.1414811267831966\n```\n\n##GTM\n\n```\n  k3n-Z-error=2.2293570682113013\n  k3n-X-error=0.40085975080186265\n  k3n-error  =2.630216819013164\n```\n\n#考察\n\n- tSNEが①、②、総合でダントツで良い結果になった。\n- GTMはパラメータチューニングの余地があるのか、思わしくない結果に。\n\nちなみにGTMの可視化結果はこんな図になりました。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/329816/22d9b7c0-404a-c164-de05-d5045ecc4724.png)\n\n#今後\n同じ画面内で複数の手法による可視化結果を比較できるようなインターフェースを作ってみたい。\n\n#参考\n- [k3nerror](https://datachemeng.com/k3nerror/)\n- [k3nerror](https://github.com/hkaneko1985/k3nerror) k3nerrorのソース\n- [GTM](https://github.com/hkaneko1985/gtm-generativetopographicmapping)　今回使ったGTM\n- [GTM (Generative Topographic Mapping) のハイパーパラメータチューニングでベイズ最適化を使った](https://qiita.com/maskot1977/items/92571ab225b15ca393c5)　GTMパラメータチューニングで参考にした\n","user":"kimisyo","created_at":"2021-03-28T17:32:37+09:00","updated_at":"2021-03-28T17:57:38+09:00"},{"url":"https://qiita.com/ether2420/items/dc427accc6cb7cb02e92","title":"【Python】回転行列【AtCoder】","body":"ABC197\n[D - Opposite](https://atcoder.jp/contests/abc197/tasks/abc197_d)\nででてきた、**回転行列問題**\n\n今後のためにも自作ライブラリの作成。\n\n※ちなみにこの問題は複素数平面でもとける！\n知らなくても競プロで困ることはなさそうだが、教養として知っておいて良さそう。\n俺の学生時代は教科書にのっていなかったけど、今や数Ⅲの範囲らしい・・・\nヨビノリたくみさんのyoutubeが参考になった。\n[中学数学からはじめる複素数](https://www.youtube.com/watch?v=IQaYyFboK48)\n\n\n#回転行列\n\n```python:test.py\nimport math\ndef RotationMatrix(before_x,before_y,d):\n    d = math.radians(d)\n    new_x = before_x*math.cos(d)-before_y*math.sin(d)\n    new_y = before_x*math.sin(d)+before_y*math.cos(d)\n    return new_x,new_y\n```\n\nおわり！\n","user":"ether2420","created_at":"2021-03-28T17:31:10+09:00","updated_at":"2021-03-28T17:31:42+09:00"},{"url":"https://qiita.com/from_Unknown/items/c42db488c1a0992fc1b5","title":"[メモ] eslint-config-prettierのv8.0.0以降でextendsの設定の仕方が変わっていた","body":"# 概要\nタイトルの通り、eslint-config-prettierのv8.0.0以降でextendsの設定の仕方が変わっていた。\n\n結果、 `prettier/react` 、 `prettier/@typescript-eslint` 等のプラグインを指定しなくても全て `prettier` に含まれるようになったらしい。\n\nソース： [Prettier > Installation](https://github.com/prettier/eslint-config-prettier#installation)\n> information_source Note: You might find guides on the Internet saying you should also extend stuff like \"prettier/react\". Since version 8.0.0 of eslint-config-prettier, all you need to extend is \"prettier\"! That includes all plugins.\n\n現場からは以上です。\n","user":"from_Unknown","created_at":"2021-03-28T17:29:11+09:00","updated_at":"2021-03-28T17:29:11+09:00"},{"url":"https://qiita.com/mine820/items/2d85a4967acf81e223f2","title":"WaffleでもOLEDに文字を表示してみる","body":"# はじめに\n[こちらの記事](https://qiita.com/mine820/items/c9d08a61a0fc15db2916)でArduino Nano EveryでOLEDに文字を表示したので、Waffleでも表示してみることにしました。\n\n# 準備\n- [Waffle](https://dotstud.io/docs/waffle/)\n- [0.96インチ　128x64ドット有機ELディスプレイ（OLED）](https://akizukidenshi.com/catalog/g/gP-12031/)\n- ブレッドボード\n- ジャンパーケーブル（4本）\n- Groveケーブル（ストレート、1本）\n- PC（今回はWindows 10）\n- USBケーブル（Type-A（オス）～Type-C（メス））\n\n# 環境構築\nWaffleの環境構築は[こちら](https://qiita.com/mine820/items/cab307d684bcc0ffed57)を参照してください。\nOLEDの環境構築は[前の記事](https://qiita.com/mine820/items/c9d08a61a0fc15db2916)を参照してください。\n\n# 結線\nWaffleにはI2Cのコネクタがあるので、これとOLEDを繋ぎます。\nケーブルの色と接続先の組み合わせは以下の通りです。\n\n| Groveケーブル（Waffle） | OLED |\n|:---:|:---:|\n| 赤 | VCC |\n| 黒 | GND |\n| 白 | SCA |\n| 黄 | SCL |\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/4ee951d7-5c6a-3caa-a278-2b5c89009b71.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/ee9a6fb9-3631-8609-80f2-0ddc71b86bfb.png)\n\n# サンプルプログラム\n「Hello World!」と表示するプログラムを実行してみます。\nこちらはArdiono Nano Everyとまったく同じなのですが、念のため、再掲します。\n\n```c\n#include<Wire.h>\n#include<Adafruit_GFX.h>\n#include<Adafruit_SSD1306.h>\n\nAdafruit_SSD1306 display(-1);\n\nvoid setup() {\n  // initialize\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n}\n\nvoid loop() {\n  // clear display\n  display.clearDisplay();\n\n  // set text parameter\n  display.setTextSize(1);\n  display.setTextColor(WHITE);\n\n  // set text position\n  display.setCursor(0, 0);\n\n  // display text\n  display.println(\"Hello\");\n  display.println(\"World!\");\n\n  // draw\n  display.display();\n  delay(1000);\n}\n```\n\nI2Cで接続していますので、何も変更しなくても大丈夫です。\n\n表示のされ方も同じになります。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/2a1cb333-b738-ee6f-9f73-c9f80e9e6126.png)\n\n# まとめ\nもう少し苦労するかと思いましたが、意外と簡単にWaffleでも表示できてしまいました。\nArdiuno互換、恐るべしです。\n","user":"mine820","created_at":"2021-03-28T17:28:31+09:00","updated_at":"2021-03-28T17:28:31+09:00"},{"url":"https://qiita.com/aerialist/items/2230ba645fe0691a201c","title":"KiCadで外部ライブラリを使う","body":"\nPro MicroボードとRGB LED付きロータリーエンコーダのボードを作りたかった。\nどちらもSparkfunのKiCadライブラリに含まれているのでありがたく使わせてもらう。\n\nhttps://github.com/sparkfun/SparkFun-KiCad-Libraries\n\nライブラリのインポートの仕方はDigiKeyのフォーラムで紹介されているのを参照して、Project Specific Libraryとして使うことにした。\n\nhttps://forum.digikey.com/t/importing-the-digi-key-kicad-library-into-kicad-5-0-0/4075\n\nGitHubで公開されているライブラリをローカルにクローンして、\n\nSchematic editor\nPreferences --> Manage Symbol Libraries\nProject Specific Libraries tab:\nClick on the Add existing library to table button:\nで.libファイルを選ぶ\n\n同様に\nPCB Layout\nPreferences --> Manage Footprint Libraries\nProject Specific Libraries tab:\nClick on the Add existing library to table\nで.prettyフォルダを選ぶ\n\n\n## その他便利そうなライブラリやサイト\n\nhttps://github.com/Digi-Key/digikey-kicad-library\n\nhttps://www.snapeda.com/kicad/\n\nhttps://octopart.com/\n\n\n","user":"aerialist","created_at":"2021-03-28T17:28:19+09:00","updated_at":"2021-03-28T17:28:19+09:00"},{"url":"https://qiita.com/miriwo/items/371d6bc125a97fd8b055","title":"laravel8 Auth認証をしていないと表示できないページを作成する","body":"# 目的\n\n- Auth認証を行っていないと表示できないページを実装する方法をまとめる\n\n# 方法\n\n- ルーティングに記載するだけで実装が可能である。\n- 下記のようなルーティング情報が記載されていたとする。\n\n    ```アプリ名ディレクトリ/routes/web.php\n    Route::get('/top', [TopController::class, 'index'])->name('top.index');\n    ```\n\n- 下記のように記載することで当該ページが認証していないと表示できないページにする事ができる。\n\n    ```アプリ名ディレクトリ/routes/web.php\n    Route::get('/top', [TopController::class, 'index'])->middleware(['auth'])->name('top.index');\n    ```    \n","user":"miriwo","created_at":"2021-03-28T17:25:11+09:00","updated_at":"2021-03-28T17:25:11+09:00"},{"url":"https://qiita.com/Yuya-Shimizu/items/156736cc76a32c23caa5","title":"Pythonで学ぶ制御工学　第21弾：P・PI・PID制御（開ループ系）","body":"# #Pythonで学ぶ制御工学< P・PI・PID制御（開ループ系） >\n\n##はじめに\n基本的な制御工学をPythonで実装し，復習も兼ねて制御工学への理解をより深めることが目的である．\nその第21弾として「P・PI・PID制御（開ループ系）」を扱う．\n\n##P・PI・PID制御\n制御については，以前(https://qiita.com/Yuya-Shimizu/items/8570640e6e03c3d1e09a )に学習したが，ここでは開ループ特性を確認しながらPID制御器を設計する．まず，P・PI制御を実装して，ゲインを変化させたときの開ループ伝達関数$H(s)=P(s)K(s)$の特性がどのように変化するのかを確認する．なお，ここでの制御対象も垂直駆動アームの角度制御とする．\n\n##実装\n\n###P制御\n以下にソースコードと出力を示す．出力はパラメータと図とがある．\n#####ソースコード\n```P_control.py\n\"\"\"\n2021/03/26\n@Yuya Shimzu\n\nP制御（アーム）\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom control import tf, feedback\nfrom control.matlab import bode, logspace, margin\nfrom tf_arm import arm_tf       #自作関数\n#https://qiita.com/Yuya-Shimizu/items/c7b69b4dfd63fb8facfa\nfrom for_plot import linestyle_generator, plot_set, bodeplot_set      #自作関数\n#https://qiita.com/Yuya-Shimizu/items/f811317d733ee3f45623\n\n##パラメータ設定\ng    =   9.81                  #重力加速度[m/s^2]\nl     =   0.2                    #アームの長さ[m]\nM   =   0.5                    #アームの質量[kg]\nmu =   1.5e-2               #粘性摩擦係数[kg*m^2/s]\nJ    =   1.0e-2               #慣性モーメント[kg*m^2]\n\n#制御対象\nP = arm_tf(J, mu, M, g, l)\n\n#目標値(指示値=refference)\nref = 30        #目標角度30[deg]\n\n#比例ゲイン\nkp = (0.5, 1, 2)        #比較のために3つ用意\n\n\n\n##P制御を用いたときのステップ応答の描画\nLS = linestyle_generator()\nfig, ax = plt.subplots(2, 1)\nfor i in range(len(kp)):\n    K = tf([0, kp[i]], [0, 1])  #P制御\n    H = P*K  #開ループ系\n    gain, phase, w = bode(H, logspace(-1, 2), Plot = False)     #ボード線図\n\n    #ゲイン線図と位相線図\n    pltargs = {'ls':next(LS), 'label':f\"$k_P$={kp[i]}\"}\n    ax[0].semilogx(w, 20*np.log10(gain), **pltargs)\n    ax[1].semilogx(w, phase*180/np.pi, **pltargs)\n    \n    #ゲイン余裕，位相余裕，位相交差周波数，ゲイン交差周波数\n    print('Kp=', kp[i])\n    print('(GM, PM, wpc, wgc)')\n    print(margin(H))\n    print('--------------------------')\n    \n\nax[0].set_title('P control - Bode Plot')\nbodeplot_set(ax, 3)\n\nplt.show()\n```\n\n#####出力\n```\nKp= 0.5\n(GM, PM, wpc, wgc)\n(inf, 21.156175957298814, nan, 12.030378476260191)\n--------------------------\nKp= 1\n(GM, PM, wpc, wgc)\n(inf, 12.118321095140175, nan, 13.995414100411576)\n--------------------------\nKp= 2\n(GM, PM, wpc, wgc)\n(inf, 7.419183191955369, nan, 17.217014751495988)\n--------------------------\n```\n![image](https://user-images.githubusercontent.com/61382602/112745340-8d3e8e00-8fe2-11eb-95de-08974352e426.png)\n出力された図に赤丸でゲイン交差周波数に印をつけた．比例ゲインを大きくすると，ゲイン交差周波数が大きくなることがわかる．また図からは分かりにくいが出力された位相余裕GMを見ると，小さくなることが分かる．このことから，**比例ゲインを大きくすると，応答が速くなるかわりに，応答が振動的になる．また低周波ゲインは大きくなるが，$\\infty$でないため，定常偏差が残る．**\n\n###PI制御\n以下にソースコードと出力を示す．出力はパラメータと図とがある．\n#####ソースコード\n```PI_control.py\n\"\"\"\n2021/03/28\n@Yuya Shimzu\n\nPI制御（アーム）\n\"\"\"\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom control import tf, feedback\nfrom control.matlab import bode, logspace, margin, step\nfrom tf_arm import arm_tf       #自作関数\n#https://qiita.com/Yuya-Shimizu/items/c7b69b4dfd63fb8facfa\nfrom for_plot import linestyle_generator, plot_set, bodeplot_set      #自作関数\n#https://qiita.com/Yuya-Shimizu/items/f811317d733ee3f45623\n\n##パラメータ設定\ng    =   9.8                    #重力加速度[m/s^2]\nl     =   0.2                    #アームの長さ[m]\nM   =   0.5                     #アームの質量[kg]\nmu =   1.5e-2                #粘性摩擦係数[kg*m^2/s]\nJ    =   1.0e-2                 #慣性モーメント[kg*m^2]\n\n#制御対象\nP = arm_tf(J, mu, M, g, l)\n\n#目標値(指示値=refference)\nref = 30        #目標角度30[deg]\n\n#比例ゲインと積分ゲイン\nkp = 2\nki = (0, 5, 10)        #比較のために3つ用意\n\n\n##PI制御を用いたときのボード線図\nLS = linestyle_generator()\nfig, ax = plt.subplots(2, 1)\nfor i in range(len(ki)):\n    K = tf([kp, ki[i]], [1, 0])  #PD制御\n    H = P * K  #開ループ系\n    gain, phase, w = bode(H, logspace(-1, 2), Plot=False)     #ボード線図\n\n    #ゲイン線図と位相線図\n    pltargs = {'ls':next(LS), 'label':f\"$k_I$={ki[i]}\"}\n    ax[0].semilogx(w, 20*np.log10(gain), **pltargs)\n    ax[1].semilogx(w, phase*180/np.pi, **pltargs)\n    \n    #ゲイン余裕，位相余裕，位相交差周波数，ゲイン交差周波数\n    print('kp=', kp, 'ki=', ki[i])\n    print('(GM, PM, wpc, wgc)')\n    print(margin(H))\n    print('--------------------------')\n    \nax[0].set_title(f\"PI control : $k_P$={kp}  $k_I$={ki} - Bode Plot\")\nbodeplot_set(ax, 'lower left')\n\nplt.show()\n\n\n##PI制御を用いたときのステップ応答の描画\nLS = linestyle_generator()\nfig, ax = plt.subplots()\nfor i in range(len(ki)):\n    K = tf([kp, ki[i]], [1, 0])  #PI制御\n    Gyr = feedback(P*K, 1)  #閉ループ系\n    y, t = step(Gyr, np.arange(0, 2, 0.01))     #ステップ応答\n\n    pltargs = {'ls':next(LS), 'label':f\"$k_I$={ki[i]}\"}\n    ax.plot(t, y*ref, **pltargs)\n\nax.set_title(f\"PI control: $k_P$={kp}  $k_I$={ki}\")\nax.axhline(ref, color='k', linewidth=0.5)\nplot_set(ax, 't', 'y', 'best')\n\nplt.show()\n```\n\n#####出力\n```\nkp= 2 ki= 0\n(GM, PM, wpc, wgc)\n(inf, 7.417931704458113, nan, 17.214126785924563)\n--------------------------\nkp= 2 ki= 5\n(GM, PM, wpc, wgc)\n(0.7349999999999999, -0.8676868998766736, 15.652475842498527, 17.27470341959991)\n--------------------------\nkp= 2 ki= 10\n(GM, PM, wpc, wgc)\n(0.21, -8.765023417097723, 11.832159566199232, 17.4470150837457)\n--------------------------\n```\n![image](https://user-images.githubusercontent.com/61382602/112745511-ec50d280-8fe3-11eb-9c9c-fda6f5b41d76.png)\n出力された図に赤丸でゲイン交差周波数に印を，青丸で位相交差周波数に印をつけた．積分ゲインを大きくすると，低周波ゲインが大きくなることがわかる．さらに直流ゲインは$\\infty$となるので，ステップ目標値に対する定常偏差は0になる．一方で位相余裕は小さくなり，さらには0degを下回ってしまう．そして，**$\\omega_{pc}>\\omega_{gc}$の関係が崩れてしまう．これは閉ループ系が不安定となる**．このことから，**積分ゲインを大きくすると，定常偏差を小さくできるかわりに，振動的な応答になったり，不安定になったりする．**\n\n実際にこのときの閉ループ系のステップ応答を示す．\n![PI_control_step](https://user-images.githubusercontent.com/61382602/112745689-4a31ea00-8fe5-11eb-9f62-3327e6a73725.png)\n発散しており，確かに不安定になっていることが確認できる．\n\n\n###PID制御\n以下にソースコードと出力を示す．出力はパラメータと図とがある．\n#####ソースコード\n```python:PID_control.py\n\n```\n\n#####出力\n```\nKp= 2 Ki= 5 Kd= 0\n(GM, PM, wpc, wgc)\n(0.7349999999999999, -0.8676868998766736, 15.652475842498527, 17.27470341959991)\n--------------------------\nKp= 2 Ki= 5 Kd= 0.1\n(GM, PM, wpc, wgc)\n(inf, 45.204662149872405, nan, 18.800416410143438)\n--------------------------\nKp= 2 Ki= 5 Kd= 0.2\n(GM, PM, wpc, wgc)\n(inf, 71.268850312253, nan, 24.726943509483277)\n--------------------------\n```\n![image](https://user-images.githubusercontent.com/61382602/112745839-43f03d80-8fe6-11eb-837f-47efe2f631b5.png)\nPI制御では，積分ゲインを大きくすると閉ループ系が不安定になっていたが，微分ゲインを大きくすると位相余裕が大きくなり，不安定化を回避できている．また，微分ゲインを大きくするとゲイン交差周波数が大きくなる一方，低周波ゲインは変わらないことも分かる．このことから，**D制御を加えることで，振動が小さくなり，少し応答が速くなることが分かる．**\n\nこれは閉ループ系からも確認できる．\n![PID_control_step](https://user-images.githubusercontent.com/61382602/112745945-d85aa000-8fe6-11eb-90d2-44c50ac03467.png)\n\n以上のまとめとして，2つの制御器\n\n* 設計前：$k_{P}=1, k_{I}=0, k_{D}=0$\n* 設計前：$k_{P}=2, k_{I}=5, k_{D}=0.1$\n\nの性能を比較する．\nそのソースコードは先ほど示したソースコードの後半に記述している．出力のみを以下に示す．\n![image](https://user-images.githubusercontent.com/61382602/112746564-86b41480-8fea-11eb-814f-4552216bce9e.png)\n開ループ系の設計仕様\n\n* **安定性（$\\omega_{gc}<\\omega_{pc}$）**\n* **速応性（$\\omega_{gc}$をできるだけ大きくする）**\n* **減衰性（位相余裕PMを大きくする）**\n* **定常偏差（低周波ゲインを大きくする）**\n\n設計後のパラメータにおいては，これらを満たしていることが分かる．次に閉ループ系についての出力も確認しておく．\n![PID_control_closed_BA](https://user-images.githubusercontent.com/61382602/112746567-8ae03200-8fea-11eb-997c-60f0f7162dd7.png)\n閉ループ系の設計仕様\n\n* **速応性（$G_{yr}$のゲイン線図においてバンド幅$\\omega_{bw}$が十分大きい）**\n* **減衰性（$G_{yr}$のゲイン線図においてピークゲイン$M_{p}$が小さい）**\n* **定常偏差（$G_{yr}$の低周波域のゲインが0dB）**\n\n設計後のパラメータにおいては，これらも満たしていることが分かる．\n\nさいごに，このときのステップ応答を図示し，そのときの挙動についても確認する．\n![PID_control_step_BA](https://user-images.githubusercontent.com/61382602/112746568-8ca9f580-8fea-11eb-9ef7-8ba6af0dd03a.png)\n\nこの図から，設計後のパラメータにおいて，振動を抑えつつ速やかに目標値に追従していることが分かる．\n\n##感想\n今回は，開ループ系の設計仕様を満足する設計にすることで，閉ループ系の設計仕様も満足し，うまく制御器を設計できることを確認できた．開ループ系も閉ループ系も設計仕様においていろいろな用語があり，図において見るべきところがいくつかあるため，図から設計仕様を満たしているか判断するのには，まだ時間はかかるが，理解はできているのではないかと思う．\n\n\n##参考文献\nPyhtonによる制御工学入門　　南 祐樹　著　　オーム社\n","user":"Yuya-Shimizu","created_at":"2021-03-28T17:22:01+09:00","updated_at":"2021-03-28T17:25:58+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/8a93786a7210f1e3584c","title":"Udemyメモ「2時間でわかる！確実に商談を前進させる営業トーク50選」","body":"- [【初心者向け】2時間でわかる！確実に商談を前進させる営業トーク50選](https://www.udemy.com/course/sales_talk_50/)\n\n## 成果を出すための3つのポイント\n\n1. Yes を急ぐより、「No を言わせない」\n    - 議題について、顧客と課題感を共有する\n        - 課題の必要性や対象者は？\n        - 具体的にどのくらい必要？\n    - 課題感の共有後、自分の知識と掛け合わせ、ソリューションを想像\n2. 商品特性より、「判断基準を売り込む」\n    - 顧客の課題には、複数あっても大きさに差がある（課題？、予算？、モチベUP？）\n    - その課題に応じた判断基準をもって、商品を売り込む\n3. スピーディな対応により、「顧客の熱を下げない」\n    - 連絡や対応のスピード（遅くても3日）\n    - 顧客は、方々から営業を受けるため、紹介した商品の説明も埋もれてしまう\n    - 担当者の力量も競合と比較されている\n\n## 訪問前の動き\n\n1. 顧客に聞ける内容は聞いておく\n    - 事前の聴取がないと、複数の案がある場合、当日は一方的な話になってしまう\n    - ある程度、選択肢を絞らせることで、想定質問への深掘りもできる\n2. 社内ノウハウ\n    - 社内相談しておくことで、過去の対応実績から、新たな対応ができる可能性が高まる\n3. 訪問前に決めること\n    - 訪問の目的とゴールは明確であるか（相手の心に残したいこと）\n    - 目的とゴールに顧客にとって有益な情報があるか\n\n## 課題の引き出し方\n\n1. テーマの確認\n    - 冒頭に「相互に話したい議題を宣言」\n2. 課題の洗い出し\n    - 担当者と決裁者の課題を聞く（社内では？、管理者では？、あなたは？）\n    - 二人が語る課題が、大きな課題である可能性高い\n3. 課題の深掘り\n    - 課題は、「数値と人」に注目すると、見つけやすくなる\n    - 問題は誰に当てはまる？、具体的なシーンは？、どの程度の割合で当てはまる？\n4. 課題の焦点化\n    - 「重要度、緊急度」で課題を分類分けし、各課題に「絡まり」を持ち、重要性が高い課題を見つける\n5. 過去から現在までの取組、新たな課題を引き出す\n    - 顧客の成功体験と、失敗経験を踏まえて、提案する\n    - 社内資料を獲得できると、本当に刺さる提案への第一歩\n6. 取り組みへの共感と、方向性の確認\n    - 「他者を追随 or 方向性維持 or 方向転換」への次の一歩について、制約を省きどうしたいか\n7. お土産情報を用意する\n    - 顧客にとって有益な情報\n    - また話したいと思う営業マンへ！\n\n## 失敗しない提案を作成\n\n1. 時期の確認\n    - いつ頃に実現できると理想か？\n    - 内部のマニュアル的に〇月までに合意を取る必要あるか？\n    - 導入にあたり予算獲得時期との兼ね合いも必要のため、スケジュール共同作成等の提案\n2. 予算の確認\n    - 予算的に無理な提案をしないため、概算でも良いので把握する必要あり\n    - 直接的に聞く or 他社サービスの導入例を元に金額感を聞く\n3. 検討組織の確認\n    - 提案商品サービスによる顧客の課題解決以外にも、導入に至るまでの課題も把握する必要あり\n        - 誰が提案承認する？\n        - 名刺交換等の顔合わせだけでも試みる\n        - 営業の場への同席を打診\n4. 競合接触の確認\n    - 顧客は、競合の`何に対して`魅力を感じているかに着目\n        - どういった点が良いと感じたか\n        - 他社のサービスも引き合いに出して判断基準を探る\n5. 現在のサービス判断基準と理由の確認\n    - 顧客の選定基準に合わせたサービス紹介\n        - 直接、選定基準を聞く\n        - 曖昧なら、顧客が言語化できていない観点を一緒に探す\n\n## スムーズに提案に移行するコツ\n1. 他社の事例からサービス紹介\n    - 顧客の課題感と近い、他社の成功事例を切り口へ\n    - 違う部分もあるため、顧客に合わせてアレンジ\n2. 複数の選択肢を提示\n    - 基準を明確にして３案ほど用意\n    - 費用が安い案、効果が高い案、他社の成功事例の案\n\n## クロージング\n1. 「すぐに受注に結びつきそう！」\n    - 提案を書面化\n    - 顧客社内の検討スピードを早める\n2. 「担当者レベルでは不安...」\n    - 不安要素を除外する提案\n    - 担当者が社内で導入を進めるにあたり、会議の同席や書面作成など営業マンとしてサポート\n3. 「予算がなくて...」\n    - OKラインを探る\n    - 「顧客の予算に合わせて提案したいから、予算の3パターン程教えてくれると！」\n    - 「一番安いプランから試験的に始めて、データを見てプランを考えるとか！」\n4. 「導入は急がない...」\n    - 外部の動きを比較させる\n    - 社会変化へ急ぎ対応することとか、競合の動きとか\n    - スタートが早いほど、課題解決へのノウハウを蓄積できる\n5. 特別対応など社内交渉が必要な時\n    - 論点整理と締め切りを確認\n6. 相手の本気度を見極める\n    - 1: 具体的なスケジュールと予算を検討します！\n    - 2: 決裁者に相談します\n    - 3: 関係各所から必要な情報を集めます\n    - 4: チーム内に情報共有します\n    - 5: 考えておきます\n\n## まとめ\n1. 大前提は、信頼を獲得すること\n2. ステップを作ってトライ\n3. 社外のみならず社内でも実践\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:20:27+09:00","updated_at":"2021-03-28T17:20:27+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/5da049b2d31c516378f3","title":"Udemyメモ「Google Apps Scriptの仕事効率化・自動化をプログラミングで実現」","body":"## 概要\n\n- [【業務自動化をゼロからマスター】Google Apps Scriptの仕事効率化・自動化をプログラミングで実現 \\| Udemy](https://www.udemy.com/course/gasmore1/)\n- [Apps Script  \\|  Google Developers](https://developers.google.com/apps-script)\n- [Google Apps Script でよく使うスニペット集 30 選 \\- Qiita](https://qiita.com/tanabee/items/5de3e8715be759ce1c7f)\n\n## Google Apps Script を使用した業務の自動化\n\n### Google Form 送信時における自動メール通知\n\n1. Google Drive から、Google Form を生成\n2. 適当に入力フォームを追加\n3. `回答`タブから、`回答をスプレッドシートに表示` を押下\n4. `ツール`タブから、`スクリプトエディタ`を起動\n5. ヘッダー中段の時計アイコンである`現在のプロジェクトのトリガー`を押下\n6. FloatingActionButton を押下し、トリガーを生成\n7. エディタで、`フォーム送信時`に発火するトリガーを元に起動する function を定義\n8. フォームで、右上のプレビュー機能を使用して、フォームを送信\n9. 入力したメールアドレスに以下の文面が届いたら成功\n\n```js\n// https://developers.google.com/apps-script/reference/gmail\nfunction autoReply(event) {\n  const [timeStamp, companyName, name, email] = event.values;\n  const subject = `『${name}様』 お問い合わせありがとうございます`;\n  const body = `\n  お名前 ${name} 様\n\n  お問い合わせありがとうございます\n  以下の内容で、お問い合わせを承りました。\n\n  会社名: ${companyName}\n  お名前： ${name}\n  メールアドレス: ${email}\n  `;\n\n  GmailApp.sendEmail(email, subject, body);\n}\n```\n\n### Google Form 送信時における Slack 自動通知\n\n1. 自分用の workspace を用意\n2. 通知したい channel を用意\n3. `Setting and Adnimistration`から、`Manage App` を押下して、Webページへ\n4. `Incoming Webhook` を探し、対象の workspace に導入すると、設定画面に移動\n5. Webhook 用の URL をコピーしておき、下部で設定を保存する\n6. 以下の通りコードを用意\n\n\n```js\n// https://developers.google.com/apps-script/reference/gmail\n\nfunction autoReply(event) {\n  const [timeStamp, companyName, name, email] = event.values;\n  const subject = `『${name}様』 お問い合わせありがとうございます`;\n  const body = `\n  お名前 ${name} 様\n\n  お問い合わせありがとうございます\n  以下の内容で、お問い合わせを承りました。\n\n  会社名: ${companyName}\n  お名前： ${name}\n  メールアドレス: ${email}\n  `;\n  const slackMessage = `\n  お名前 ${name} 様\n\n  以下の内容で、お問い合わせを承りました。\n\n  会社名: ${companyName}\n  お名前： ${name}\n  メールアドレス: ${email}\n  `;\n\n  GmailApp.sendEmail(email, subject, body);\n  notifySlack(slackMessage);\n}\n\nfunction notifySlack(message) {\n  const WEBHOOK_URL = `${slack の web ページでコピーした URL}`;\n  const userName = \"gasBot\";\n\n  const payloadObj = {\n    username: userName,\n    text: message\n  };\n  const payloadJson = JSON.stringify(payloadObj);\n  const options = {\n    method: \"post\",\n    contentType: \"application/json\",\n    payload: payloadJson,\n  };\n\n  UrlFetchApp.fetch(WEBHOOK_URL, options);\n}\n```\n\n\n### 顧客リストを元に一斉メール送信\n\n```js\n//https://developers.google.com/apps-script/reference/gmail/gmail-app#sendEmail(String,String,String,Object)\n\nfunction sendAll() {\n  const ss = SpreadsheetApp.getActiveSheet();\n  const range = ss.getDataRange().getValues();\n\n  const file = DriveApp.getFilesByName(\"Google Driveのマイドライブに存在するファイル名\").next();\n\n  for(var i = 1; i < range.length; i++){\n    var title = `【${range[i][2]} 様】新商品のお知らせです`;\n    var body = `\n    ${range[i][1]}\n    ${range[i][2]} 様\n\n    新商品のお知らせです。\n    `;\n    var email = range[i][3];\n    var cc = range[i][4];\n    var options = {\n      attachments: [file],\n      cc: cc\n    };\n\n    GmailApp.sendEmail(email, title, body, options);\n  }\n}\n```\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:18:50+09:00","updated_at":"2021-03-28T17:18:50+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/0399d8a84af00076e1cf","title":"Udemyメモ「すぐに使えるデザイン思考！〜基本をおさえ、日常にイノベーションを起こす38個の習慣〜」","body":"\n[【超実践】すぐに使えるデザイン思考！〜基本をおさえ、日常にイノベーションを起こす38個の習慣〜 \\| Udemy](https://www.udemy.com/course/design-thinking-for-everyday-life/)\n\n## デザイン思考の基礎\n\n- ３つのプロセスを素早く回す\n    1. アイデア\n        - 不安な気持ちも持ちつつ、枠から飛び出す\n        - 素材を集めつつ、枠を外し、発想する\n    2. 試行\n        - 即座に自分で実験してみる\n    3. フィードバック\n        - アイデアを育てていく\n- サイクルを早く回す\n\n## アイデアとは\n\n### アイデアに気付けるトリガー\n\n- 「こんなやり方で大丈夫？、失敗するかも。。」と思ったら、枠にはまっている状況かも。\n- 「それはちょっと。。」と思ったら、自分とは違う世界があるかもと認める？\n- 「どうすればいいのか。。」と思ったら、本当に問題なのか？とゼロベースに立ち返る。\n\n### アイデアを見つけるコツ\n\n- 動作のバグを探す\n    - 一連の業務の中において、ムダな作業は無いか？\n- 愛のあるクレーマーになる\n    - 困った箇所とかにイチャモンを付ける！\n    - イチャモンとセットで、改善提案を合わせる。\n- 五感で考える\n    - 手を動かす、喋る、見る、体感する、歩く、様々な動きから、アイデアを生み出す\n\n## A4 1枚思考法（例）\nデザイン思考のプロセスを身に着ける第一歩\n\n1. 左上に「日付・テーマ」に書いて、記入時間を限定して枠を埋める\n    - 時間による強制力を発揮\n    - 固定枠が存在するため、埋めようとする心理\n2. 頻度が多いタスクに対して、赤丸を付ける\n3. イライラ度が高いタスクに対して、三角を付ける\n4. 重要なタスクに対して、四角を付ける\n5. マークが重複したタスクが重要であると視覚化できる\n\n|%m/%d<br>いつもの仕事|（４）する|（８）する||\n|---|---|---|---|\n|（１）する|（５）する|||\n|（２）する|（６）する|||\n|（３）する|（７）する|||\n\n## 体感ヒアリング\n\n### ユーザの声を鵜呑みにしない\n\n- ユーザの声は、真正面から聞いてはいけない\n    - V = f(x)\n    - user_voice = filter(experience)\n    - ユーザによる直接の声は、本当に欲しい体験がフィルターされて隠される\n    - 医者による問診のように、真の問題を掘り下げる\n\n### ユーザに弟子入り\n\n#### 弟子入りの流れ\n\n- どのようにタスクをしているかをヒアリング\n    1. 教えを乞う\n    2. 理由を深掘り\n    3. 確認する\n- 動作のフォーカスを変えて繰り返す\n\n#### 弟子入りのポイント\n\n- 師匠ユーザは職人気質\n    - ユーザの話は、ハッピーパスとして要約されるため、不完全を前提\n    - タスク中の例外は省略されるため、深掘りしてエッジケースを明らかにする\n- 自分が理解したことを師匠ユーザに確認\n    - 相手の話を聞くとき、次の質問を考えてはいけない\n    - 自分の中で解釈で留めず、師匠ユーザに解釈を確認\n- 弟子入りする上で気をつけること\n    - 師匠ユーザに対し専門家として、その場で改善を図らない（タスクを「ありのまま」を体験する）\n    - 現場視察として、緊張感のある雰囲気を出してはいけない（緊張感を持たせると「ありのまま」の作業にならない）\n    - リサーチャーとして、単純な質問するだけはいけない（深掘りしないならアンケートと同じ）\n\n#### 成功させるコツ\n\n- 沈黙は、全く問題ない\n    - 無理やり質問しても意味ない\n    - 師匠ユーザにタスク工程の意味を説明してもらいながら、作業してもらう\n- 非言語に注目\n    - 動作の矛盾に注目\n    - 動作のバグとして、そこに改善ポイントがあるかも\n\n#### ヒアリング法\n\n相手の説明に存在する文脈から、抽象的な説明をクリック！\n\n```md\n- { [\"説明1\", \"説明2\", \"説明3\", \"説明4\", \"説明5\" ] }\n    - 深掘り！=> { \"説明2\": [\"説明2-1\",\"説明2-2\",\"説明2-3\",] }\n        - 深掘り！=> { \"説明2-2\": [\"説明2-2-1\",\"説明2-2-2\",\"説明2-2-3\",] }\n    - 戻り質問！　=> { \"説明5\": [\"説明5-1\",\"説明5-2\",\"説明5-3\",] }\n```\n\n- 望ましくないヒアリング\n    - 話を掘り下げず、`用意した質問をする`\n        - => すぐに質問がなくなる...\n        - => 一言二言で終わっちゃう...\n    - 話を掘り下げず、`自分の考えで決めつける`\n        - => 真の問題に気づけない...\n    - 話の途中なのに、`断りなく切り上げて次の質問へ`\n        - => 相手の心が閉じてしまい、必要な情報が引き出せない...\n- 望ましいヒアリング\n    - 質問前に知りたいことを宣言\n    - 話の途中で聞きたい事項が発生した場合、キーワードをメモ\n    - 情報がまとまってきた場合、出てきた話を噛み砕いて、相手に確認\n\n\n### アイデアの発想法\n\n- A4 1枚思考法を応用\n    - 機能分解\n        - 既存の商品サービ スに対して、機能分解し、求められる機能をあぶり出す\n    - フィルタインプット\n        - 商品サービスの一つに着目し、「〇〇 × △△」、「〇〇 × ■■」として、試行錯誤\n    - アナロジー\n        - 商品サービスを着目し、別の世界の常識を持ってきて思考\n        - 機能分解した結果、似てればなんでも良いので、試行錯誤\n\n## 試作\n\n### 目的\n\n- アイデアを最短、最速で良し悪しを体感する\n    - 過去は、選択肢が限られるため、内部で考え抜いて時間をかけてユーザに届く\n    - 選択肢の多い現代では、いち早くユーザに届けて良し悪しを検証の必要あり\n- 試作は、未完成品である\n    - アイデアを作り込みがちになり、ユーザに届けるのが遅れる\n    - また、内部のアイデアのみで時間を消費しても、完成度は大きく上がらない\n    - ある程度作ったら、人の目に晒すことにより、新たな視点や気づきが外部から得られる\n- 早く失敗して学びを得る\n    - 量をこなすことで、質が高まる\n    - Fail Fast Learn Lot.\n- 自らの存在定義\n    - 「〜〜な」「〜〜する」「体験 or 機会 etc..」を提供する\n\n### コンセプトを作る\n\n- 誰に何を伝えたいか\n    - 問題解決するターゲットは「誰か」\n    - 「どんな利益」を提供できるか\n\n### ストーリーを作る\n\nユーザ目線に立つため、コンセプトの実現に至るストーリーを作る。\n\n1. 何かを始める（モチベーション高い！）\n2. 途中で壁に直面する...\n3. 壁を越えるための解決策を提供！\n4. 大成功！（コンセプトや目指す状態に至る）\n\n### 3つの方法\n\n- 絵を作成して、イメージを起こす\n- 質問することで言語に起こす\n\n## フィードバック\n### 目的\n- 多角的な視点を取り込み、次の学びへ繋げること\n    - 複数人なら、仲間を作ること\n    - 一人なら、自分のアイデア及び自信を育てること\n\n### 必要な受け手\n- アイデアは赤子であり、育てる対象\n    - 意見を貰えそうなノリの良い人を捕まえる\n    - 早めに人を巻き込み目撃者を作る\n    - 見てもらいたいターゲットを共有して、アイデアを理解してもらう\n\n### 必要な評価者\n- 批判しない\n    - `Yes And`の姿勢で、褒めて改善点を提案\n- アイデアに対しフィードバック\n    - 発言者を見て評価しないよう注意\n- ユーザ視点でフィードバック\n    - アイデアを最後に受け取るユーザの立場を忘れないこと\n\n### 進め方\n- 見て議論する\n    - 口頭だけでは、受け手に多大な負荷を要する\n    - A4用紙1枚だけでも用意して、認識を可能な限り合わせる\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:17:35+09:00","updated_at":"2021-03-28T17:17:35+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/4d1976d9e49fcc74a29c","title":"Udemyメモ「プロダクトマネジメント入門講座：作るなら最初から世界を目指せ！シリコンバレー流Product Management」","body":"[プロダクトマネジメント入門講座：作るなら最初から世界を目指せ！シリコンバレー流Product Management \\| Udemy](https://www.udemy.com/course/introduction-to-pm/)\n\n## PM の仕事とは\n\n### プロダクトビジョンの作成\n1. ProductVision とは\n    - 会社の Misson を達成したい`超長期的ゴール`から導出される\n    - プロダクトの長期的なゴール ( 1~2年スパン )\n    - 例: 「次の1年で解決すべき顧客の課題は〜〜〜だから、プロダクトは〜〜〜となる必要あり」\n2. 初めに会社が考えているゴールを確認 ( CxO 役職と調整 )\n    - PM チーム全体で ProductVision を導出\n    - 作成時期は、6ヶ月 ~ 1年スパン\n3. 各担当 PM の担当領域でゴールを決定\n    - 担当領域の中で、解決すべき問題は何か\n\n\n### リサーチ\n1. リサーチとは\n    - 顧客が「良い」と思うプロダクトを作る視点を持つ\n    - なぜ、ユーザは〜〜〜という問題を抱えるのか？\n    - プロダクトが解決しようとする問題は何か？\n2. プロダクトが世の中に存在する時の全体像を掴む\n    - 顧客および周辺人々のネットワーク\n    - プロダクト周辺のテクノロジーやトレンド\n    - 顧客の行動や導線、感情\n    - 使用場所やタイミング\n3. プロダクトがビジネスとして成立するか\n    - ProductMarketFit が存在するか仮説を立てる\n    - マーケット規模、潜在ユーザ規模\n\n\n### プロダクトプランニング\n1. 自分の中で5つの質問に対する解を用意\n    - ユーザが直面する問題に対して、自分の立ち位置や業界の流れは何か\n    - プロダクトを通して、たどり着きたいゴールはどこか\n    - そのために、どのような機能やプロダクトを継続リリースすることで、たどり着くのか\n    - その際に想定できるリスクは何か\n    - リスクを乗り越えていけると信じられる理由は何か\n\n\n### ロードマップ\n1. ロードマップとは\n    - 新機能や新プロダクトのマーケット投入時期を示す\n    - マーケティング部門は GoToMarketプラン、営業部門は Salesプランを策定\n    - PM は常にアップデートを続ける\n2. 会社全体として、方向性と戦略の意思統一を作り、KPI として定量的に設定 ( 3ヶ月後 ~ 1年後 )\n3. KPI に一番効果のあるプロダクトの機能やアイデア、その前提となる仮説を洗い出し\n4. アイデアが発生させる KPI へのインパクトとリソース配分から、優先順位付け\n5. 優先順位に基づき、タイムライン毎に設定 ( 月毎、四半期毎、半年毎 )\n6. 開発とユーザ向けテストを頻繁に回し、仮設検証しつつ、プロダクトをリリース\n7. ロードマップに更新あれば実施\n\n\n## PM とアジャイル開発プロセス\n- すべての開発は、投資でありコストである\n- どのような開発投資を決めることをスプリントプランニング\n- スプリントは決定した方向で、投資効果を最大化すべく全速力で動く\n- スプリント半ばにおける機能改善要求は、多大なコストが発生する\n- `機能改善による実現見込み利益 >> スプリント中止による損失` を見て判断\n\n### 開発プロセス\n1. プロダクトバックログ（ 主担当: PM ）\n    - PRD に基づき、開発するプロダクトの機能一覧をハイレベルで抽出\n    - 各機能に対して、優先順位を設定\n    - プロダクトの実装目的を記述\n2. スプリントプランニング（ 主担当: PM・PG ）\n    - 開発機能に対する担当者を決定\n    - 開発機能に対する工数を見積もり\n    - PRD の抜け漏れを PM に確認\n3.  スプリントバックログ（ 主担当: PG ）\n    - 開発機能について、エンジニアリングタスクに分解\n    - タスクに対する工数を見積もり\n    - タスクに対する優先順位を設定\n4. スプリント（ 主担当: PG ）\n    - 2~4 週間単位の開発期間\n    - 毎日 or 週3回程度、チーム内で MTG 実施 ( 進捗報告、担当間のタスク依存関係を元に調整 )\n    - バグ発生時、即座の修正 or 後回しか相談\n    - インクリメント（ 主担当: PM ）\n4. スプリント期間中の PM 対応\n    - 次のスプリントで対応する事項を調整\n    - バグの対応優先順位付け\n5. スプリントレビュー\n    - QA を通し、リリース可能な機能を確認\n    - 開発中に発生したバグの対応時期を確認\n6. スプリント振り返り\n    - スプリント期間中に発生した、プロセス改善案等のフォローアップ\n\n### 非開発部門との関わり\n1. 他チーム内で、機能改善要求をまとめ、リストにして優先順位を設定\n2. 他チーム代表は、PM に対して定期的に共有\n3. PM は、既存の開発ロードマップを鑑みて優先順位を設定\n    - 要求事項は、ユーザに対して価値を提供できるか\n    - 要求事項は、他の開発を停止してでも、会社に利益をもたらすか\n    - ロードマップとは、`今後の実装プロダクトや機能をリリース見通し` ( 必ず実装する性質の計画でなく、あくまで変化する可能性を加味した見通し )\n\n\n## 実行と意思決定\n### 開発中の PM の役割\n- PRD の段階で、技術仕様書に落とし込み時に要件定義が甘い場合、都度、詳細の詰めを追加実施\n    - 初期の開発見積もりより、ボリュームが多いことに気付く\n    - API ドキュメント通り動かない\n    - 技術的負債(バグ)が開発スピード落とす\n    - 開発担当のエンジニアが転職等\n- PM の役割: タスクの優先順位付け\n    - バグ修正の優先順位付け\n    - どのデザインパターンで進めるか\n    - 想定通り動作しない場合、ワークアラウンドオプション出しと、リスク評価および選択\n    - 実装機能の優先順位付け\n- PM の役割: コミュニケーション\n    - 開発メンバーが障害にぶつかってないか確認\n    - 当初予定の PRD の通り進めるか、スコープ変更した場合は影響範囲との調整\n    - 上層部への調整 ( 進捗・投資効果・メンバーのモチベーション維持 )\n- PM の役割: プロダクトリリース時\n    - クリティカルなバグは全て潰す\n    - ユーザに対する UI/UX は、期待値に届いているか\n    - GoToMarket 戦略は、実行可能な状態か\n    - KPI のモニタリング準備はできているか\n- PM の役割: プロダクトリリース後\n    - KPI のモニタリング\n    - ユーザからのフィードバック確認\n    - クラッシュやバグの発生率を確認\n\n### PM の姿勢\n- 失敗の可能性がある限り、初期段階では小さく試す\n- 事前に失敗時の手打ちをする\n- 失敗は隠さず、学ぶ\n- 失敗を共有し、組織全体の「知見」に昇華\n\n\n## PM を生かせる組織形態とは\n1. 組織文化\n    - PM がプロダクト開発に集中できる仕組みを整える\n    - ロードマップの変更が許容できる文化を整える\n    - 失敗をネガティブ感覚から、組織への学びの感覚を持つ\n2. チーム構成\n    - 最小構成\n        - PM\n        - Dev ( 兼QA )\n        - Designer\n    - 標準構成\n        - PM\n        - PjM\n        - DataAnalyst\n        - Dev\n        - QA\n        - Designer\n    - 最適構成\n        - PM\n        - PjM\n        - DataAnalyst\n        - Web/Mobile Dev\n        - Backend Dev\n        - QA\n        - Designer\n3. 会社側によるチームへのサポート\n    - 自律的に動けるよう、Vision や KPI を決めたら、会社はチームに委ねる\n    - 意思決定をしやすくして、意思決定ラインを短く簡潔にする\n    - 構成単位を小さく ( 例: Amazon はピザ2枚で賄える人数程度を設定 )\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:16:36+09:00","updated_at":"2021-03-28T17:16:36+09:00"},{"url":"https://qiita.com/antk/items/892651251b4694e61d6a","title":"【Swift】モーダル遷移する、モーダルを閉じる","body":"# これはなに\n\nSegueを使わずにコードで `NextViewController` という名前のControllerへの遷移を想定する。\nフルスクリーンで遷移する。\n\n## 遷移\n\n```swift:ViewController.swift\nlet storyboard = UIStoryboard(name: \"NextViewController\", bundle: nil)\nlet vc = storyboard.instantiateViewController(identifier: \"NextViewController\")\n\nvc.modalPresentationStyle = .fullScreen\n\nself.present(vc,animated: true)\n```\n\n一応\n\n**【Swift】モーダル遷移かつNavigationBarも表示させたいかつフルスクリーンで表示させたい**\n<https://qiita.com/antk/items/e8bccccfad08a61fb140>\n\n## 閉じる\n\nフルスクリーンなので**モーダルを下げる取っ手**が無いためどこかに閉じるボタンを作る。\n\n```swift:ViewController.swift\nself.dismiss(animated: true, completion: nil)\n```\n\nおわり(´・ω・｀)\n","user":"antk","created_at":"2021-03-28T17:16:05+09:00","updated_at":"2021-03-28T17:16:05+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/4a22e9e4c299157a1c9f","title":"Udemyメモ「プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、伝わるプロダクトアイデアの書き方」","body":"[プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、伝わるプロダクトアイデアの書き方 \\| Udemy](https://www.udemy.com/course/practical_prd/)\n\n## 基本知識\n### PRD とは？\nプロダクト開発または機能開発を通じて、実現したいこと示す `プロダクトマネージャーの考えを記したドキュメント`\n\n特性 | PRD | その他 ( 例: 仕様書 )\n---|---|---\n誰向け？ | 全社的に横断 | PG のみ\n更新タイミング | 継続アップデート | 一度書いて終了\n内容の深度 | 要点をハイレベルで記述 | 詳細を落とし込む\n伝達したい内容 | Why & What & When | How to...\n目的 | プロダクトチームの想像力を引出す | チームをルールで拘束する\n\n\n### PM のコミュニケーション\nコミュニケーション通過思考を元にしたチーム構築\n\n要素 | 実例\n---|---\nインスピレーション | モチベが高まるようなプロダクトビジョンやチームメンバーの強み、得意なこと、ポテンシャルが十分に発揮する機会\nタスク | メンバーにとって適度なタスクを提供<br>興味のある新ツール試行<br>メンバーのリソース有効活用<br>情報の透明性やサポート体制を構築\nポジション | メンバーがチームに参加してもらうことによる社内への認知拡大と評判向上<br>「選ばれし者」としての認識\n関係性 | チームの中にいて良いという感覚を提供<br>話を聞いてもらえる助け合えるという心理的安全性を提供\nプライベート | 仕事その他個人的な出来事を共に喜んだり感謝し合えること<br>メンバーの自己イメージ向上<br>仕事へのオーナーシップ提供<br>コンフォートゾーンの尊重\n\n- 価値を下げる事例\n    - 相手の頑張りを認めない\n    - サポートしない\n    - チャレンジさせない\n    - スプリント終了近くの時に、終わらせるよう恐喝\n    - 相手の評判に傷をつける\n\n## PRD の５形態\n1~4 までの形態を経て、PRD は姿を現す\n1. Product Vision\n2. Product Strategy\n3. Product Roadmap\n4. Product Concept\n5. Product Require Document\n\n### Product Vision\n\n- 目的\n    - プロダクトの「なぜ」に対する説明\n    - プロダクトに関わる人に対して、同じ方向を向いてもらう\n    - 全ての意思決定は、ビジョン実現のためにする\n    - 必ずしもユーザの方向を向く必要はない\n- やること\n    1. 以下の特性を持つ「実現したい言葉」を文字に起こす\n\n特性 | 詳細\n---|---\nClear | 平易な言葉を使用 ( 抽象的な言葉は可能な限り回避 )\nStable | Vison は、一度決めたら変更はあまりしない<br>「プロダクトの先」を見据える方がブレが少なくなる\nBroad | プロダクトの可能性を広く捉える\nEngaging | Vision を聞いた人がワクワクする<br>ユーザが思わず使いたくなる\nShort & Sweet | 短く簡潔\n\n> 実例: 楽曲レコメンデーション機能を作る！\n>- 悪い例: `AI を活用して、他社よりも優れた、楽曲レコメンデーションを提供し、最高の顧客満足度を実現する。`\n>    - AI は手段でしかない。\n>    - 他社のキャッチアップに終始しかねない\n>    - 顧客満足度は、良いプロダクトを作った結果でしかない\n>    - 実現するとは、作り手視点でしかない\n>- 良い例: `思わず聴きたくなる曲が、使う度に現れる。`\n>    - 平易な言葉でブレがない\n>    - AI にこだわるのではなく、新技術も見える\n>    - 「使う度」という言葉に、ユーザのエンゲージメントを深めるための手段に想像力が触発される\n>    - ワクワクする\n\n### Product Strategy\n- 目的\n    - プロダクト開発時、何をして何をしないかを決定\n    - Vision を達成するために、現在クリアすべき仮説は何か\n- やること\n    1. 4つの事項を明確化\n        - ターゲットユーザーは誰か？\n        - ユーザのペインポイントをどう解決するか？\n        - どのようなプロダクトで、どこで差別化できるか？\n        - ビジネス上、求められるゴールは？\n    2. 最終的に3つの事項を明確化\n        - コスト構造と収益獲得方針\n        - 競合を誰とするか？\n        - プロダクトの拡散手段\n\n\n### Product Roadmap\n- 目的\n    - Product Strategy の表現形態\n    - 基本、ハイレベルな情報に止める\n    - CxO が投資家にプレゼンする時にしようされる\n    - プロジェクトがどのように連動しているかと、おおよそのタイムライン\n- やること\n    1. Product Strategy から、3つの観点でポテンシャルが存在するテーマを抽出\n        - Delight Customer: 顧客を満足させる可能性を持つ機能\n        - Margin Enhancement: 利益率の向上\n        - Hard to copy by competitor: 競合に対する参入障壁\n\n### Product Concept\n- 目的\n    - Product Concept は、特定の機能またはプロダクト完成時のゴールを表現（文字 or パワポ）\n    - 開発前、ステークホルダーやプロダクトチームに理解して欲しいことを洗い出し\n- やること\n    1. 次の説明ができるようにする。\n        - エレベーターピッチ\n        - プロダクトデザイン\n        - やらないことリスト\n        - ステークホルダーを探す\n        - 解決案を描く\n        - 夜も眠れない問題\n        - 期間はどれくらいか\n        - 何を諦めるか\n        - どれだけ試算が必要か\n\n> 実例: airbnb の Product Concept\n> - Product Pitch Deck と呼ばれ投資家向け説明だが、記述する類似点が多い\n> - なお、ある程度サービスが走ってる段階の資料であることを留意\n> - [airbnb\\.pdf \\- Google ドライブ](https://drive.google.com/file/d/1hhhCI8odo5YlH3VlVgo5p_2mpv5NdSKQ/view)\n## Product Required Document\n- 参考フォーマット\n    - [Product Hunt \\- Google ドキュメント](https://docs.google.com/document/d/1yrU5F6Gxhkfma91wf_IbZfexw8_fahbGQLW3EvwdfQI/edit#heading=h.oiwrkd62e6f7)\n- 参考URL\n    - PRD を公開し、議論できるサービス => [Product Hunt – The best new products in tech\\.](https://www.producthunt.com/)\n### 問い・背景\n####  ユーザが直面する問題は？\n- 3つのスコープで、緊急性や重要性が高くないと、ユーザに価値が伝わらない\n    - Pain: 困りごと・不便\n    - Gain: 利得・利便\n    - Jobs: 効率・帰結\n\n####  ビジネス機会・規模は？\n- フェルミ推定で、概算でターゲットユーザ数を計算\n    - 市場調査の前に本当にビジネス機会があるかのあたりをつける ( Backward research method )\n- いずれかのフレームワークでマーケットリサーチ\n    - PEST\n    - DEEPLIST\n    - FiveForth\n    - SWOT\n\n#### 自社と競合の立ち位置は？\n- Customer\n    - 顧客は誰か？（セグメントサイズ、成長率、マーケットシェア）\n    - 過去から現在までのトレンドは？（上昇、下降、定常）\n    - ニーズは？（各サグメントが価値を感じていること）\n    - セグメント毎に好まれる販売チャネルは？\n    - カスタマー集中度はどのくらい？\n- Product\n    - プロダクト名は？\n    - プロダクトができることは？\n    - プロダクトの使われ方は？\n    - コモディティー化しているか？、どこで差別化できるか？\n    - プロダクトライフサイクルの位置付け（新規参入者？、以前から？）\n- Company\n    - 会社の強みは？\n    - コスト構造は？\n    - ブランド力は？\n    - 財務状況\n    - 組織体制\n    - 法規制環境\n- Competition\n    - マーケット集中度は？（独占・寡占・混沌？、何社競合が存在しシェアは？）\n    - 競合はどこ？\n    - 競合は、どのようなプロダクトを出してる？\n    - 競合は、最近どんな一手を出した？\n    - 競合がしていて、自社がしてないことは？\n    - どのような販売チャネル？\n    - 参入障壁とそのハードルの高さは？\n### 仮説\n####  仮説を立てる\n- なぜ問題が発生し、どこを解決すると、プロダクトとしてビジネスが成立するか OR ユーザの増加定着しそうか\n- 例: `ユーザは X という問題を抱えている。この仮説が正しいと仮定し、Y のプロダクトに対し、Z の機能を盛り込むことで解決する。`\n- 仮説が増えると検証が複雑になるため、一つの PRD に一つの仮説を立てる\n####  仮説を研ぎ澄ます\n- 仮説に対し反論し、その反論にサポートできる仮説や事実は存在しないか？\n    - Step1: `仮説が確かであっても、Y のプロダクトに対し、Z の機能を追加してはいけない！`\n    - Step2: `仮説が不確かであっても、Y のプロダクトに対し、Z の機能を追加してはいけない！`\n- Backward Casting\n    - 仮説が既に成功していたとしたら、何が成功要因か\n- Premotem\n    - 仮説が失敗するとしたら、何が原因になりそうか\n####  仮説を検証する\n- A/B テスト\n\n### 機能・プロダクト\n- What を定義する\n    - 特性で考える\n        - 価値機能群（技術要件、パフォーマンス要件、デザイン要件）\n        - ビジネスプロファイル群（ビジネス要件、プロジェクト要件）\n    - 時間×時間軸で考える\n        - Phase1: MVP を目指して、UI/UX に不足あっても、コアとなる価値を提供する\n        - Phase2: MVP で対応不可だった事項（ PRD の場合、見通しレベル）\n        - Phase3: やろうとした機能を網羅（ PRD の場合、見通しレベル）\n\n#### ビジネス要件\n\n考慮事項 | 内容\n---|---\n目的 | プロダクト又は機能のゴールは何か\n提案の概要 | 一言で何をするプロダクト又は機能か？<br>どのユーザに対し、どのような利得が生じるか？\n対応スコープ | 何を作り、何を作らないか？<br>その境界線はどこか？\nリスク | 施策の遂行にあたり、何がリスクとなるか？<br>そのリスクはどのように再消化できるか？\n依存関係 | 社内・社外で依存関係となる部分はどこか？\n\n#### プロジェクト要件\n考慮事項 | 内容\n---|---\nスケジュール | PM としてリリースしたいタイミングはいつか？\n将来の対応事項 | 今回の施策はワンショット？、又は継続的に対応する？<br>継続的な場合、どのようになぜ分割する？\nテスト計画 | プロダクト又は機能の Acceptance Criteria をどこに置くか\n人員 | プロダクトチームの所属メンバーはどこから調達するか？\n\n#### 技術要件\n- Input と Output を意識して、ユーザストーリーで考える\n    - `#{ペルソナ定義}のユーザとして、A ということがしたい、その結果 B ということを実現したい。`\n- 周辺要件（適宜必要な事項を考慮）\n    - API を使用するか\n    - データ信頼性・依存性・一貫性\n    - ユーザイベントログ\n    - CRM\n    - Deeplink\n    - プライバシー\n    - セキュリティー\n    - サポータビリティ（新機能をリリースする場合、運用サポート担当者の観点から使いやすいか）\n\n#### パフォーマンス要件\n- タップやクリックに対するレスポンス速度\n- アクセス集中時、システムクラッシュさせるかデグレを発生させても使用可能にするか\n\n#### デザイン要件\n- デザイン部分は、PRD を書く前にデザイナーとエンジニアと調整し、まとめておく\n- 最低でも、ワイヤーフレーム〜LowFidelity 程度のモックを用意\n- ローカリゼーションの必要性\n- ユーザインタビューを通して、Usability がある程度クリアできているか\n- ユーザのモチベーションを捉えているか\n\n\n### 何をもって成功とするか\n- プロダクトの成功を定義\n    - トップライン KPI がどれだけ動くか\n    - 顧客の流入する Input がどれだけ増加し、利益に繋がる Output への影響要素を増加させるか\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:15:54+09:00","updated_at":"2021-03-28T17:15:54+09:00"},{"url":"https://qiita.com/Teach/items/8212c06dc9f4a2546800","title":"AWSのアカウント作成後のAdminのIAMユーザー作成","body":"# 本記事について\nAWSのアカウントを作って、さあやるぞ！って言う時に\nいろんなチュートリアルや、手続きで「IAMでユーザー作るのがベストプラクティスです」とめっちゃ押される。\n\n少し経ってからIAMユーザー作って良いことがあったのでそのやり方を書く。\n\n# 前提\nAWSにルートユーザーとしてsigninできること\n\n# IAMユーザーを作って役立ったこと\nIAMユーザー作成時にそのユーザーのアクセスキー、シークレットキーが作られる。\nそれらを、aws cliを使い始めるときに入力する。\n\n# 作り方\n[Creating your first IAM admin user and group\n](https://docs.aws.amazon.com/IAM/latest/UserGuide/getting-started_create-admin-group.html)\n\nの「Creating an administrator IAM user and group (console)」をやればOK\n\n以下和訳と図\n\n1. [IAM console](https://console.aws.amazon.com/iam)にルートユーザーでいく\n\n2. IAM ユーザーによる請求情報へのアクセスを有効にする\n![スクリーンショット_2021-03-28_16_48_08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/66f3c2fc-b4d6-453a-6fe8-b55580190bc4.png)\n\n下にいくと以下の項目があるので編集を押してチェックつけて、更新。\nそれで有効になる。\n![スクリーンショット_2021-03-28_16_49_43.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/adbd3c5f-ec5e-1f75-a8f7-daf8960b551c.png)\n\n3. IAMユーザーを作る\n\n![スクリーンショット_2021-03-28_16_53_39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/113504/7ce28e4e-bd9b-bc5f-5aed-1088cf1df716.png)\n\n設定項目が複数あるがここは私は以下のように設定した。(パスワードとかは自由)\n\nユーザー名: Administrator\n\nアクセスの種類\n☑︎プログラムによるアクセス\n☑︎AWSマネジメントコンソールへのアクセス\n\nコンソールのパスワード: カスタムパスワード\n\nパスワードのリセットが必要のチェックは外す。\n\n\nで次にいくと、グループ指定する画面になるので\n\n`Administrators`という名前でグループを作成\n権限は`AdministratorAccess`にする\n\nタグはスキップ\n\nこれでOK\n\n作ると、アクセスキーやシークレットアクセスキーが表示されるのでそれらはメモっておくこと。\n\n# AWS CLIのインストール\n\n環境はmac\n2021/3/28時点\n\nbrewを使ってインストールした。\n[homebrew](https://formulae.brew.sh/formula/awscli)\n\n```\nbrew install awscli\n```\n\n> ここでインストールされるのはawscliのv2\n\nインストールしたら`aws configure`コマンドで設定ファイルを作る\n\n例\n\n```\n$ aws configure\nAWS Access Key ID [None]: IAMユーザー作る時にメモっておいたやつ\nAWS Secret Access Key [None]: IAMユーザー作る時にメモっておいたやつ\nDefault region name [None]: ap-northeast-1\nDefault output format [None]: json\n```\n\nそうすると、ホームの`.aws`以下にconfig, credentialsファイルが作られる\n\n```\n.aws$ cat config\n[default]\nregion = ap-northeast-1\noutput = json\n.aws$ cat credentials\n[default]\naws_access_key_id = IAMユーザー作る時にメモっておいたやつ\naws_secret_access_key = IAMユーザー作る時にメモっておいたやつ\n```\n","user":"Teach","created_at":"2021-03-28T17:14:45+09:00","updated_at":"2021-03-28T17:14:45+09:00"},{"url":"https://qiita.com/KeisakuHiga/items/39d68f4a78211cb5642c","title":"対称鍵暗号（共通鍵暗号）と非対称暗号（公開鍵暗号）","body":"## はじめに\n以下は私が暗号技術について勉強中の内容を記述しているものです。\n間違いありましたら、ご指摘いただけると幸いです！\n\n### 対称鍵暗号（共通鍵暗号）\n\n1. 送信者と受信者が同じ鍵を持つから、復号化ができる\n1. 共通鍵なしで復号化することは現実的には不可能とみなされている\n1. 当事者間にセキュアなチャネルが必要\n\n### 非対称暗号（公開鍵暗号）\n\n1. 公開鍵（パブリックキー）と秘密鍵（プライベートキー）が対（ペア）で作成される\n1. 公開鍵で暗号化されたデータは対となる秘密鍵でしか復号化できない\n1. ~~秘密鍵で暗号化されたデータは対となる公開鍵でしか復号化できない~~ ← **これは公開鍵暗号の良くある誤解で、こちらの記事（[秘密鍵で暗号化？](https://qiita.com/angel_p_57/items/d7ffb9ec13b4dde3357d#%E7%A7%98%E5%AF%86%E9%8D%B5%E3%81%A7%E6%9A%97%E5%8F%B7%E5%8C%96)）を参照する！**\n1. 当事者間にセキュアなチャネルは不要\n1. アリスとボブのメッセージやり取りの例\n    1. アリスがメッセージの送信者\n    1. ボブはメッセージの受信者\n    1. アリスがボブの公開鍵でメッセージを暗号化して送信すると、ボブは自分の秘密鍵を使って復号化してメッセージを読み取ることができる。つまり、ボブ以外の人はボブの秘密鍵を持っていないからアリスのメッセージを読み取ることが出来ない。\n    1. でも、ボブの公開鍵は誰もが持っているから、受け取ったメッセージが本当にアリスから送信されたのかは分からない。困る。\n    1. ~~そこでアリスは自分の秘密鍵でメッセージを暗号化した後に、さらにボブの公開鍵で暗号化することにした。二重で暗号化した後にメッセージを送信した。これによってメッセージが確かにアリスによって送信されたことが証明出来る。~~\n    1. ~~メッセージを受け取ったボブはまず自分の秘密鍵で復号化。続いてアリスの公開鍵で復号化した。うまいことメッセージが複合化できたのでボブは送信者がアリスだということがわかった。~~\n    1. ~~よりセキュアにメッセージを送信したいアリスは「デジタル署名」を使うことにした。~~ ← **「デジタル署名」は「公開鍵暗号(の暗号化機能)」の応用ではないらしい！「公開鍵暗号(という総称の技術)の1ジャンル」のようだ。詳細勉強中！**\n    1. ~~まずメッセージをハッシュ化して、それを元のメッセージにくっつける。そして、それらをアリスの秘密鍵で暗号化、ボブの公開鍵で暗号化してボブに送信した。~~\n    1. ~~メッセージを受け取ったボブは、ボブの秘密鍵で復号化、アリスの公開鍵で復号化して、プレーンなメッセージとハッシュ化されているメッセージ①を取り出す。~~\n    1. ~~アリスが使ったハッシュアルゴリズムでプレーンなメッセージをハッシュ化②して、先に取り出したハッシュ化されているメッセージ①とそのハッシュ②が一致するかを検証する。もし一致しない場合、メッセージが送信中に破損あるいは改ざんされたことになる。~~\n","user":"KeisakuHiga","created_at":"2021-03-28T17:13:37+09:00","updated_at":"2021-03-28T19:44:43+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/3da4186e1ca29ea1ff36","title":"Udemyメモ「プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、世界の最前線で使われるKPI」","body":"[プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、世界の最前線で使われるKPI \\| Udemy](https://www.udemy.com/course/practical_kpi/)\n\n## KPI の基礎知識\n\n### KPI とは\nゴールにたどり着くために必要な数値目標\n\nシリコンバレーの格言\n`測定できなければ改善することもできない。破壊的想像なんてもってのほかだ`\n\n### KPI の重要性\n- KPI を見ると、ビジネス等の成長度合いや問題点が一目瞭然\n- ユーザにプロダクトの価値を提供できているかを高い解像度で理解可能\n- 数値で語ることにより、ステークホルダー間の認識を合わせられる\n- 個々の施策の説明責任が一目瞭然\n\n## KPI の運用\n\n### KPI に必要な概念\n\n要素|事例\n---|---\n数値|10%、10billion$\n比較可能|前年比、地域別、プロダクト別\n連続性|過去3年、直近4週間\n自社で取得可能|データソースが自社内\n利用目的が明快 | 社内で共通認識を持ち行動の指針\n\n### 良い KPI の要素\n- Specific: 具体的な表現\n- Meaturable: 数値計測が可能\n- Agreeable: ステークホルダー間で合意\n- Relevant: 目標に関連\n- Time-bound: 期限の区切り\n\n### 現場における導入初期の対応\n導入初期は、データがそろってない場合が多い。\n\n1. North Star Metric が決まり、 KSF を抽出\n2. とりあえず判明しているデータから計測開始\n3. 「Build => Measure => Learn」のサイクルで回す\n4. 不適切な KPI の場合は、適宜修正\n\n## North Star Metric 詳説\n### North Star Metric とは\nプロダクトや事業の価値が、ユーザに届いているかを測定する指標\n\n- 何に力を置き、何にトレード歩するのか、判断の軸となる\n- 施策のインパクトおよび進捗度を組織内にも共有しやすい\n- 明瞭な説明責任を得られる\n\n### 必要な５要素\n- ユーザ体験とプロダクト提供価値がリンクすること\n- ユーザがプロダクトにおける定着度となること\n- 長期的には `Up and to the right` に進めること\n- 収益に直結する `Leading Indicator` であること\n- 組織内で共通認識を持てること\n\n#### 良い例\n- Uber: 月間アクティブプラットフォーム利用者数\n    - 増加するほど、ユーザが価値を感じてもらえる指標\n    - ユーザが継続して利用することを示す指標\n    - Uber としての成長指標\n    - 増加するほど、収益が増える指標\n    - 組織内でも明瞭な指標\n- Amazon: プライムユーザーの購買点数\n- Medium: 総読書時間\n- Facebook: 直近10日間で、7人以上友達を追加したユーザ数\n- airbnb: 予約された宿泊数\n\n#### 悪い例\n- ダウンロード数\n    - × ユーザが価値を感じる指標とならない\n    - × プロダクトに定着しているとは言えない\n    - × 場合によるが、多くの場合は増加しても、プロダクトの成長を示していない\n    - × 場合によるが、収益に結びつくと言えない\n    - ○ 組織内では理解してもらえる\n- 登録ユーザ数\n    - × ユーザが価値を感じる指標とならない\n    - × プロダクトに定着しているとは言えない\n    - ○ 一応言える\n    - △ 場合による\n    - ○ 組織内では理解してもらえる\n\n#### 悪い例の理由\n- 誰にでもわかる指標を安易に選択してしまった\n- Lagging Indicator (結果指標) を選択してしまった\n    - ユーザがどのようにプロダクトに辿り着いたか\n    - どのようにプロダクトから便益を受けているか\n\n#### LinkedIn の失敗例\n\n- 失敗例\n    1. LinkedIn のミッションは「世界中のプロフェッショナルが生産的かつ成功できるよう繋げていくこと」\n    2. その中で、Skill Endorsement という、自分のスキルを他人に証明してもらう機能を追加 (スキルに対するいいね機能)\n    3. 証明時は、複数のスキルを証明できてしまう\n    4. さらに証明してあげた相手には、通知がいく\n    5. そうすると、「たくさん証明してあげるから、僕のスキルにたくさん証明して！」という動機が生まれる\n    6. 最後は、スキルの証明数が意味を為さなくなった\n- 対処例\n    1. スキルを証明した人を表示するだけでなく、特に秀でた人から証明された場合、その人を優先表示させた\n    2. 自分よりも証明数が多い人のお墨付きをもらう\n\n### North Star Metric と組織\n\nNorth Star Metric は、会社組織に一つのみ設定する。\nただし、子要素として、複数の LeadingIndicator を持つことは良いこと。\n\n\n**配送会社のケース**\n\n- 親要素: North Star Metric\n  - 定時配達完了アイテム数\n- 子要素\n  - 広がり: 新規ユーザ数\n  - 深さ: 注文あたりのアイテム数\n  - 頻度: ユーザあたりのアイテム数\n  - 効率: 定時配達のアイテム数\n\n### 注意事項\n#### 設定時期\n\n0->1 ではなく、1->100 の GrouthStage で設定する。\nProductMarketFit が見つかってからの方が効果が高い。\n\n#### 見直し時期\n\n3年後を見据えて設定するため、頻繁に変更しない。\nプロダクトのステージに合わせて変更する。\n\n1. Introduction Stage\n   - Conversion Rate\n2. Growth Stage\n   - User Retention (顧客維持)\n   - Lifetime Value (顧客生涯価値)\n   - Customer Acquisition Cost (顧客獲得コスト)\n3. Maturity Stage\n   - Montly Recurring Revenue (月次経常収益)\n   - Annual Recurring Revenue (年間経常収益)\n4. Decline Stage\n   - 新規サービス移行率 (新規サービスの投入)\n\n#### その他見直し時期\n\n- 会社の戦略変更\n- 会社の統廃合\n- 単純に上手く運用できていない時\n  - まだ、PMF に至らない状況\n  - 成長しない\n  - 成長しても、ビジネスの帰結が改善しない\n  - その場合、3, 6, 12ヶ月程度毎にヘルスチェックすべき\n\n#### 他指標の兼ね合い\nNSM が増加に伴い、他の指標が下げる事例はよくあること。\nその際は、NSM が最優先指標として取り扱うこと。\nただし、影響度をモニターする必要はある。\n\n## User Retention 詳説\n\n### User Retention とは\n\n現代では、競合サービス数が多い。\nそのため、ユーザ獲得のみならずユーザ定着率も非常に重要となる。\n\n### ユーザ定着率の算出方法\n\n業界やプロダクトにより、定義が変わることに留意すること。\n簡便な算出方法であるため、厳密な方法でないことに留意すること。\n\n- `UR <= Daily Active User / Monthly Active User`\n- `UR <= DayN / Daily Active User`\n- `UR <= Day(N | Later) ユーザ数 / DAU`\n- `UR <= Day(N to N+α) / DAU`\n\n### User Retention Curve (ユーザ定着率曲線)\n...\n\n### Retention Life Cycle\n#### 概要\nユーザのステージ毎に分割される。\n新規から現行へ、再起から現行へ移行させるソリューションが重要となる。\n\n- User Engagement により５つの種類に分割\n  - 新規ユーザ: プロダクト使い始め\n  - 現行ユーザ: 一定期間使用している\n  - パワーユーザ: ヘビロテする\n  - 休眠ユーザ: 一定期間後、使わなくなった\n  - 再起ユーザ: 休眠ユーザから再度使う\n\n#### ステージの定義方法\n\n| タイプ               | 例                                                                 |\n| -------------------- | ------------------------------------------------------------------ |\n| ユニーク             | X 機能を使用したユニークユーザ                                     |\n| 総イベント数         | X, Y, Z 3種類のイベントが、アカウント登録から延べ100回以上のユーザ |\n| アクティブ%          | DAU における X イベントが発生したユーザ割合                        |\n| 平均                 | X 機能を Weekly で平均何回使用されたか                             |\n| 頻度                 | X 機能を Weekly で Y 回以上使用するユニークユーザ                  |\n| 特定プロパティの総計 | X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ数         |\n| 特定プロパティの割合 | X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ割合       |\n\n#### パワーユーザに注目\n- Heavy User\n  - プロダクトの使用頻度が多いのみならず、現行ユーザが普段使用しない機能も使用する\n- Core User\n  - プロダクトを「期待通り」に使用する\n- Passive User\n  - プロダクトを頻繁に使用するが、サービス提供方法と意図しない方法で使用する\n  - 新機能発見の源泉\n\n### Behavioral Persona\n#### 概要\n- ペルソナとは、ユーザ群に共通する属性等の情報群をまとめた姿\n- Behavioral Persona は、静的情報(地域、言語)より、動的情報(プロダクトの使用方法)を元にユーザ属性を抽出したもの\n- 明確にすると、ペルソナに対するベスト体験を考えやすくなる\n- 1%ルール\n  - 1%のユーザが、コンテンツを作成\n  - 9%のユーザが、コンテンツに対して反応\n  - 90%のユーザが、閲覧のみ\n\n#### Instagram と Twitter の事例\n\n- Instagram\n  - 最初は、ロケーションアプリだった\n  - 現行ユーザの継続率が低くて伸び悩む。。\n  - ペルソナ分析の結果、パワーユーザは `写真のシェアとコメント` を評価して使用していた\n  - Photo Sharing に特化し、他全ての機能を停止 (= 事業のピボット)\n- Twitter\n  - 最初は、簡易ブログプラットフォームだった\n  - 次第に、ユーザが様々なプロダクトやサービスの文句をツイートするようになる\n  - ペルソナ分析の結果、この使用方法が多かった\n  - ツイートから直接メッセージを送信可能になった\n\n## A/Bテストによる KPI 測定\n\n### 具体例\n[AB Testing Case Studies from the world’s data driven marketeers \\| CRO cases](https://www.abtestcases.com/)\n\n### A/Bテスト手順\n1. Step1: 問題設定\n   - データドリブンで理由付け ( ユーザ滞在時間数が少ない、DAUあたりアップロード数が少ない )\n2. Step2: 仮説を立てる\n   - ユーザ体験を損なう仮説を設定 ( トップ画像でプロダクト価値を伝えられてない？、アップロード部分が面倒？ )\n3. Step3: ゴールを決める\n   - どの KPI を増加させるか１つ決定\n   - 一度のテストで変更箇所を増やさない\n4. Step4: ユーザを分割\n   - Test Group: 新しい施策を体験するユーザ群\n   - Control Group: 既存の状態を体験するユーザ群\n5. Step5: テストバージョン投入\n   - 投入前にA/Aテストで、ユーザが分割しているか確認する時もあり\n6. Step6: 他部署のA/Bテストや、ノイズが入らないよう調整\n   - テスト期間中に避けるべきこととして、バックエンドのアップデートやマーケティングキャンペーンを実施しないこと\n7. Step7: テストバージョンの動作確認\n8. Step8: テスト開始\n\n### 確証バイアスに注意！\n- 新情報に対して、自分の都合の良い結果として主観的に捉えてしまう\n- 対策\n  - A/B テストの3要素(Why, What, How) をドキュメント化して、何を目的とするか事前に備える\n  - A/Bテストのメトリックとして、`％` に拘らず、絶対数も確認する\n  - ユーザインタビューは、多様なバックグラウンドを持つ人に聞く\n\n\n[プロダクトマネジメント実践講座: シリコンバレーの現役プロダクトマネージャーが伝授する、世界の最前線で使われるKPI \\| Udemy](https://www.udemy.com/course/practical_kpi/)\n\n## KPI の基礎知識\n\n### KPI とは\nゴールにたどり着くために必要な数値目標\n\nシリコンバレーの格言\n`測定できなければ改善することもできない。破壊的想像なんてもってのほかだ`\n\n### KPI の重要性\n- KPI を見ると、ビジネス等の成長度合いや問題点が一目瞭然\n- ユーザにプロダクトの価値を提供できているかを高い解像度で理解可能\n- 数値で語ることにより、ステークホルダー間の認識を合わせられる\n- 個々の施策の説明責任が一目瞭然\n\n## KPI の運用\n\n### KPI に必要な概念\n\n- 数値%、10billion$\n- 比較可能: 前年比、地域別、プロダクト別\n- 連続性: 過去3年、直近4週間\n- 自社で取得可能: データソースが自社内\n- 利用目的が明快: 社内で共通認識を持ち行動の指針\n\n### 良い KPI の要素\n- Specific: 具体的な表現\n- Meaturable: 数値計測が可能\n- Agreeable: ステークホルダー間で合意\n- Relevant: 目標に関連\n- Time-bound: 期限の区切り\n\n### 現場における導入初期の対応\n導入初期は、データがそろってない場合が多い。\n\n1. North Star Metric が決まり、 KSF を抽出\n2. とりあえず判明しているデータから計測開始\n3. 「Build => Measure => Learn」のサイクルで回す\n4. 不適切な KPI の場合は、適宜修正\n\n## North Star Metric 詳説\n### North Star Metric とは\nプロダクトや事業の価値が、ユーザに届いているかを測定する指標\n\n- 何に力を置き、何にトレード歩するのか、判断の軸となる\n- 施策のインパクトおよび進捗度を組織内にも共有しやすい\n- 明瞭な説明責任を得られる\n\n### 必要な５要素\n- ユーザ体験とプロダクト提供価値がリンクすること\n- ユーザがプロダクトにおける定着度となること\n- 長期的には `Up and to the right` に進めること\n- 収益に直結する `Leading Indicator` であること\n- 組織内で共通認識を持てること\n\n#### 良い例\n- Uber: 月間アクティブプラットフォーム利用者数\n    - 増加するほど、ユーザが価値を感じてもらえる指標\n    - ユーザが継続して利用することを示す指標\n    - Uber としての成長指標\n    - 増加するほど、収益が増える指標\n    - 組織内でも明瞭な指標\n- Amazon: プライムユーザーの購買点数\n- Medium: 総読書時間\n- Facebook: 直近10日間で、7人以上友達を追加したユーザ数\n- airbnb: 予約された宿泊数\n\n#### 悪い例\n- ダウンロード数\n    - × ユーザが価値を感じる指標とならない\n    - × プロダクトに定着しているとは言えない\n    - × 場合によるが、多くの場合は増加しても、プロダクトの成長を示していない\n    - × 場合によるが、収益に結びつくと言えない\n    - ○ 組織内では理解してもらえる\n- 登録ユーザ数\n    - × ユーザが価値を感じる指標とならない\n    - × プロダクトに定着しているとは言えない\n    - ○ 一応言える\n    - △ 場合による\n    - ○ 組織内では理解してもらえる\n\n#### 悪い例の理由\n- 誰にでもわかる指標を安易に選択してしまった\n- Lagging Indicator (結果指標) を選択してしまった\n    - ユーザがどのようにプロダクトに辿り着いたか\n    - どのようにプロダクトから便益を受けているか\n\n#### LinkedIn の失敗例\n\n- 失敗例\n    1. LinkedIn のミッションは「世界中のプロフェッショナルが生産的かつ成功できるよう繋げていくこと」\n    2. その中で、Skill Endorsement という、自分のスキルを他人に証明してもらう機能を追加 (スキルに対するいいね機能)\n    3. 証明時は、複数のスキルを証明できてしまう\n    4. さらに証明してあげた相手には、通知がいく\n    5. そうすると、「たくさん証明してあげるから、僕のスキルにたくさん証明して！」という動機が生まれる\n    6. 最後は、スキルの証明数が意味を為さなくなった\n- 対処例\n    1. スキルを証明した人を表示するだけでなく、特に秀でた人から証明された場合、その人を優先表示させた\n    2. 自分よりも証明数が多い人のお墨付きをもらう\n\n### North Star Metric と組織\n\nNorth Star Metric は、会社組織に一つのみ設定する。\nただし、子要素として、複数の LeadingIndicator を持つことは良いこと。\n\n\n**配送会社のケース**\n\n- 親要素: North Star Metric\n  - 定時配達完了アイテム数\n- 子要素\n  - 広がり: 新規ユーザ数\n  - 深さ: 注文あたりのアイテム数\n  - 頻度: ユーザあたりのアイテム数\n  - 効率: 定時配達のアイテム数\n\n### 注意事項\n#### 設定時期\n\n0->1 ではなく、1->100 の GrouthStage で設定する。\nProductMarketFit が見つかってからの方が効果が高い。\n\n#### 見直し時期\n\n3年後を見据えて設定するため、頻繁に変更しない。\nプロダクトのステージに合わせて変更する。\n\n1. Introduction Stage\n   - Conversion Rate\n2. Growth Stage\n   - User Retention (顧客維持)\n   - Lifetime Value (顧客生涯価値)\n   - Customer Acquisition Cost (顧客獲得コスト)\n3. Maturity Stage\n   - Montly Recurring Revenue (月次経常収益)\n   - Annual Recurring Revenue (年間経常収益)\n4. Decline Stage\n   - 新規サービス移行率 (新規サービスの投入)\n\n#### その他見直し時期\n\n- 会社の戦略変更\n- 会社の統廃合\n- 単純に上手く運用できていない時\n  - まだ、PMF に至らない状況\n  - 成長しない\n  - 成長しても、ビジネスの帰結が改善しない\n  - その場合、3, 6, 12ヶ月程度毎にヘルスチェックすべき\n\n#### 他指標の兼ね合い\nNSM が増加に伴い、他の指標が下げる事例はよくあること。\nその際は、NSM が最優先指標として取り扱うこと。\nただし、影響度をモニターする必要はある。\n\n## User Retention 詳説\n\n### User Retention とは\n\n現代では、競合サービス数が多い。\nそのため、ユーザ獲得のみならずユーザ定着率も非常に重要となる。\n\n### ユーザ定着率の算出方法\n\n業界やプロダクトにより、定義が変わることに留意すること。\n簡便な算出方法であるため、厳密な方法でないことに留意すること。\n\n- `UR <= Daily Active User / Monthly Active User`\n- `UR <= DayN / Daily Active User`\n- `UR <= Day(N | Later) ユーザ数 / DAU`\n- `UR <= Day(N to N+α) / DAU`\n\n### User Retention Curve (ユーザ定着率曲線)\n...\n\n### Retention Life Cycle\n#### 概要\nユーザのステージ毎に分割される。\n新規から現行へ、再起から現行へ移行させるソリューションが重要となる。\n\n- User Engagement により５つの種類に分割\n  - 新規ユーザ: プロダクト使い始め\n  - 現行ユーザ: 一定期間使用している\n  - パワーユーザ: ヘビロテする\n  - 休眠ユーザ: 一定期間後、使わなくなった\n  - 再起ユーザ: 休眠ユーザから再度使う\n\n#### ステージの定義方法\n\n| タイプ               | 例                                                                 |\n| -------------------- | ------------------------------------------------------------------ |\n| ユニーク             | X 機能を使用したユニークユーザ                                     |\n| 総イベント数         | X, Y, Z 3種類のイベントが、アカウント登録から延べ100回以上のユーザ |\n| アクティブ%          | DAU における X イベントが発生したユーザ割合                        |\n| 平均                 | X 機能を Weekly で平均何回使用されたか                             |\n| 頻度                 | X 機能を Weekly で Y 回以上使用するユニークユーザ                  |\n| 特定プロパティの総計 | X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ数         |\n| 特定プロパティの割合 | X 機能の使用ユーザのうち、特定のデバイスや言語毎のユーザ割合       |\n\n#### パワーユーザに注目\n- Heavy User\n  - プロダクトの使用頻度が多いのみならず、現行ユーザが普段使用しない機能も使用する\n- Core User\n  - プロダクトを「期待通り」に使用する\n- Passive User\n  - プロダクトを頻繁に使用するが、サービス提供方法と意図しない方法で使用する\n  - 新機能発見の源泉\n\n### Behavioral Persona\n#### 概要\n- ペルソナとは、ユーザ群に共通する属性等の情報群をまとめた姿\n- Behavioral Persona は、静的情報(地域、言語)より、動的情報(プロダクトの使用方法)を元にユーザ属性を抽出したもの\n- 明確にすると、ペルソナに対するベスト体験を考えやすくなる\n- 1%ルール\n  - 1%のユーザが、コンテンツを作成\n  - 9%のユーザが、コンテンツに対して反応\n  - 90%のユーザが、閲覧のみ\n\n#### Instagram と Twitter の事例\n\n- Instagram\n  - 最初は、ロケーションアプリだった\n  - 現行ユーザの継続率が低くて伸び悩む。。\n  - ペルソナ分析の結果、パワーユーザは `写真のシェアとコメント` を評価して使用していた\n  - Photo Sharing に特化し、他全ての機能を停止 (= 事業のピボット)\n- Twitter\n  - 最初は、簡易ブログプラットフォームだった\n  - 次第に、ユーザが様々なプロダクトやサービスの文句をツイートするようになる\n  - ペルソナ分析の結果、この使用方法が多かった\n  - ツイートから直接メッセージを送信可能になった\n\n## A/Bテストによる KPI 測定\n\n### 具体例\n[AB Testing Case Studies from the world’s data driven marketeers \\| CRO cases](https://www.abtestcases.com/)\n\n### A/Bテスト手順\n1. Step1: 問題設定\n   - データドリブンで理由付け ( ユーザ滞在時間数が少ない、DAUあたりアップロード数が少ない )\n2. Step2: 仮説を立てる\n   - ユーザ体験を損なう仮説を設定 ( トップ画像でプロダクト価値を伝えられてない？、アップロード部分が面倒？ )\n3. Step3: ゴールを決める\n   - どの KPI を増加させるか１つ決定\n   - 一度のテストで変更箇所を増やさない\n4. Step4: ユーザを分割\n   - Test Group: 新しい施策を体験するユーザ群\n   - Control Group: 既存の状態を体験するユーザ群\n5. Step5: テストバージョン投入\n   - 投入前にA/Aテストで、ユーザが分割しているか確認する時もあり\n6. Step6: 他部署のA/Bテストや、ノイズが入らないよう調整\n   - テスト期間中に避けるべきこととして、バックエンドのアップデートやマーケティングキャンペーンを実施しないこと\n7. Step7: テストバージョンの動作確認\n8. Step8: テスト開始\n\n### 確証バイアスに注意！\n- 新情報に対して、自分の都合の良い結果として主観的に捉えてしまう\n- 対策\n  - A/B テストの3要素(Why, What, How) をドキュメント化して、何を目的とするか事前に備える\n  - A/Bテストのメトリックとして、`％` に拘らず、絶対数も確認する\n  - ユーザインタビューは、多様なバックグラウンドを持つ人に聞く\n\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T17:12:27+09:00","updated_at":"2021-03-28T17:12:27+09:00"},{"url":"https://qiita.com/kyoyah/items/a13d27421b1301b42674","title":"２年かけて個人で全く新しいSNSアプリを作ったお話し","body":"こんにちは。歴１０年のアプリエンジニア（Best of AppStore🏅受賞歴あり）です。\n\n**neeboor🗯**という位置情報を使った新しいSNSアプリを作りました。\ntoC向け＆コンテンツ系＆モバイルアプリというサービスの特性上、**最初からある程度高い完成度のサービスを提供しないとユーザーの手に取ってもらえないな**と思い、UI/UX中心にかなりこだわって開発した結果、**開発に２年以上**かかってしまいました。\n\n今回はサービスの紹介をしつつ、開発で苦労した点や工数をかけた点について記事にしたいと思います。\n\n# サービスの紹介\nneeboor🗯は、「**あなたの生活圏をもっとおもしろくするSNS** (Make your living area hackable)」というコンセプトの位置情報系SNSアプリです。従来のローカル系サービス（＝地域情報サイト、半径◯メートルでお店や友達探す系、出会い系、ナビ系、トラッキング系など）とは異なり、**場所を演出要素としてオープンでカジュアルなコミュニティを作れる**ところがユニークな点になっています。\n\n### 機能 / こんな使いかた\n**シャウト🗯** - **今いる場所で発信**する。Twitterでいうところのtweet＋位置情報みたいな機能\n![Shout🗯](https://storage.neeboor.link/qiita-shout.gif)\n![Shout🗯](https://storage.neeboor.link/qiita-shout.png)\n\n**ルーム🏠** - **地図上にバーチャルな部屋**をたてる（◯◯区住民の部屋、◯◯ヒルズで働いている人の部屋、今日神宮球場で野球観戦してるやつの部屋など）。既存SNSでよくあるフォローフォロワーなどの関係性ではなく、**地理的に共通点ある人・同じ場所で同じ体験を共有している人同士**で気軽に楽しめます。マスク（完全匿名）設定して他のサイトでリンクをシェアすると、アタッチメント（twitter上の質問箱みたいな感じの機能）として、**アプリDL不要の即席サロン**が作れます。\n![Room🏠](https://storage.neeboor.link/qiita-room.gif)\n![Room🏠](https://storage.neeboor.link/qiita-room.png)\n\n**スポット📍** - ユーザーが自由に作成編集できる場所情報です（例：◯丁目の野良猫スポット、など）。シャウト🗯やルーム🏠に紐づけて、まとめ機能っぽくも使えます。\n![Spot📍](https://storage.neeboor.link/qiita-spot.png)\n\n### こんな人向け\n\n#### 新しい街に引っ越したばかりの人\n進学や就職、転勤などで新しい街に移り住んだとき、その街の地域情報はもちろん、**人間関係も一時的にリセット**されますよね。場所ベースで新しいつながり、見つけてみませんか👀？\n\n#### コロナで人に会えない、むしろ新しいつながりを見つけたい\nアナタが普段歩いている街や通りすがる人、本当はおもしろくてステキな発見があるかも❓\n\n#### カジュアルでフラットなコミュニティが欲しい人\ntwitter,インスタその他もろもろ既存のオープン系SNSって、どうしても「**パフォーマンサー⚡️オーディエンス**」の関係になっちゃいませんか？（**気軽に対等なコミュニケーションしづらい**）。neeboorのルーム🏠機能では、場所に紐づけて部屋を建てて友達を呼ぶだけでカジュアルなコミュニケーションを楽しむことができます♪\n\n### もう少し詳しく\nこちらの資料をご覧ください。\nご案内　https://www.docswell.com/s/kyoyah/15R8JZ-neeboor-intro-2020\nキャプチャ動画（加工・演出なし） https://www.youtube.com/watch?v=KTAWo7kUT9Y\n\nとりあえずアプリDLしてみていただきたいです！\nhttps://neeboor.com\n\n# 開発したときのお話し\n\n### メンバー構成\n・ぼく：iOS/Android/Backend/Frontend/運営ツール\nもちろんプロデュース、企画、サービス設計、ディレクション、雑用込みです。\n１日の作業時間の６〜７割程度割いていました。残りの時間はお仕事\n\n・えぬなお(@nnao45)：インフラ/分析\nスポットで開発ヘルプお願いしました。サービス仕様やビジネスロジックが直接絡まないところ全般担当\n\n・フリーのデザイナさん：UIデザイン\n\n### 採用技術\n\n・**iOS**：Swiftネイティブ\n・**Android**：Kotlinネイティブ\n・**Backend**：GolangでAPI用の軽量フレームワークとマイグレーションツールその他サポート系のOSS入れてます（※DBはインハウスでMySQLとRedis、一部Firebase）。基本APIに加えて、画像の加工とストレージ保存、動画の変換とストレージ保存、サーバサイドでのロギング、外部メール送信ツールとの連携、プッシュ通知サービス(OneSignal)との連携、Firebase連携、Slack連携など各関連機能を実装\n・**Frontend**：PHPとVue.jsでの実装。コンテンツのWebページ版のみの簡単な作りになります\n・**運営ツール**：Vue.jsで実装\n・**分析**：ログデータを加工＆集計してBIツールで表示というオーソドックスな運用\n\n### 開発方針\n**みんなが知っているインターネット企業の新規サービス並みのクオリティにする**というのが大前提でした。\n具体的には、以下を重視して行いました。\n\n・iOS/Androidともに**ネイティブ開発**（UI/UXの表現力重視のため）\n・**UI/UX**部分に関してはアニメーションなども含めて**フルスクラッチ開発**。オリジナリティ重視のためOSSは使わない\n・外部サイト/SNSとの連携はAPIを利用できる場合はそちらを使ってスクラッチで作る。**サードパーティのSDKなどは使わない**\n・初期の段階であってもできるだけ細かいログ設計を行う（今は計測しなくてものちの運用に耐えられるように）\n・インフラは、**最初からスケーラブルになることを前提**とした（多数ユーザーに利用してもらってもすぐ対応できる）構成にしています。※リリースした時点ではユーザー少ないからといって簡単なやつ・安いやつにしない。**グロース目指すならかえってマイグレーションコストかかる**ので\n・開発はじめた時点では、iOSのSwiftUIやAndroidのArchitecture Componentsはリリースされたばかり（またはリリース前）だったので、それら抜きの**枯れた技術ではじめた**。最近マイグレーションはじめています。\n\n### 工数かけた（こだわった）ところ\nリリース時点で、書いたコードは**累計30万行近く**なりました😱 もちろんOSSなど抜きでのLOCです。さらに、考える限りベストなインフラ設計をしたら、**最初からサーバ代が月額20万円超え**てしまいました😱（**僕らの設計での最小構成でこの金額**です orz）\n\n#### アニメーション\niOSはCoreAnimation、AndroidはPaintで**直接定義してプログラマティックに全部書き下ろし**ました。\nバリエーション持たすためにローディングアニメーションでは７パターン定義して、iOS/Android両方用意して、表示箇所に実装という流れです。仕組みや他のアニメーション箇所含めてこれだけでiOS/Android合わせて1ヶ月近くかかりました。\n\n#### アイコン類は全部デザイナーによる描き下ろし\nFontAwesomeなど使っても、商用ならどこかでオリジナルにしなくてはならなくなるので描き下ろしてもらいました。フリー系にはないアイコンもあるので。\n\n#### 画面間遷移もフルスクラッチ\niOSなら`present` `dismiss` Androidなら`startActivity` `finish`するだけで基本的な**画面間遷移**できますが、これも**全部スクラッチ**しました。iOSは**dismissを途中でキャンセルできる**のでそこらへんの対応も時間がかかりました。Androidはアニメーションの定義だけになりますが、多数ある画面のすべてにハメなければいけないので手間でした。neeboorでは現在４種類の独自遷移アニメーションがあります。\nこれだけでiOS/Android合わせて１ヶ月以上かかりました。\n\n#### 吹き出し状のヘルプ（ガイド）\nうちらは「コンポーネントガイド」と呼んでいましたが、こちらも全て自作です。初回だけ表示したり、XXの要件を満たすと表示したりなど**チュートリアル的な条件設定**が必要なのでそれも苦労しました（昔ソシャゲ作ってた経験が活きました＾ー＾；）。\nこれだけでiOS/Android合わせて１ヶ月以上かかりました。\n\n#### モーダルポップアップ\nこちらも０からのフルスクラッチです。ユーザー許可が必要な機能（カメラアクセスなど）や、「XXしませんか？」系のデザイン込みのプロモーションダイアログになります。\n１０種類程度あって、こちらもiOS/Android合わせて１ヶ月程度かかりました。\n\n#### 独自UX\nシャウト🗯機能の長押し投稿時のエフェクト、ルーム🏠機能のカスタマイズ性や入室時のドラッグ開閉アクション、タイムラインと地図画面のシームレスな切り替え、ボタンを押したときのバウンスアニメーションのギミックなど、**UI/UX上の演出だけで**iOS/Android合わせてトータル２ヶ月近く工数かかりました。\n\n#### 細かいプッシュ通知\n数十種類あるプッシュ通知の定義と設定、アプリ起動時の通知受信はカスタムUIを用意するなど、１ヶ月程度かかりました。ここはさらに改善の余地アリです。\n\n#### 動画機能\nライブストリーミング非対応ですが、ファイルアップロードでの動画の表示に対応しています。ここも細かい調整が多数必要だったのでiOS/Android合わせて２ヶ月程度かかりました。\n\n#### DB以外はフルコンテナで実装\nフロントエンドからサーバサイドに至るまで、フルコンテナでスタートアップのスピード感に併せたリリースを実現できるようにしました。\nリリースはgitをベースにタグの更新をされると自動的にブルーグリーンデプロイされるよう構築しました。\n\n#### ステートレス x マイクロサービス\nコンテナを中心としたサービス群で基本状態はDBに寄せて、リリース単位を小さくし、リリースの影響範囲を少なくする事で複雑なwebアーキテクチャをバグを最小限に開発する事ができました。\n\n\n# まとめ\n振り返ってみると、**アプリサイドのUI/UX関連のこだわりだけで半年以上追加工数**かかりました。\n\n近年は経験が少ない人であっても、より簡単にWebサービスやアプリを開発できる環境が整ってきました。でも、それは裏を返せば、**似たようなアプリを粗製濫造しやすい状況になった**ということでもあると思います。\n\n現在では、**エベレスト山もベースキャンプまでなら観光客向けのツアーがある**そうです。でも、**それより上の領域**では、鍛錬を詰んだ登山家が命懸けで挑まなくてはならない領域であることに変わりありません。\n\nテストで言ったら７０点までなら比較的簡単にとれるけど、そこからは１点積み上げるだけでも多大な労力がかかる、そんな状況なのかなと思います。\n\n最後になりますが、そんな思想の下でこだわり抜いて作った僕らのサービス**neeboor🗯**、楽しんでもらえると思いますのでぜひぜひストアからインストールして使ってみてください！土偶のアイコンしたやつ（筆者）がアナタのことお待ちしています！\n\nhttps://www.neeboor.com/invite/h8KLn26T\n\n最後までご視聴ありがとうございました✌️\n","user":"kyoyah","created_at":"2021-03-28T17:11:23+09:00","updated_at":"2021-03-28T19:02:15+09:00"},{"url":"https://qiita.com/tomokitamaki/items/b3bd746701b3648133af","title":"minioのベンチマークを公式ツールなwarpを使って取ってみる。","body":"# 概要\nhttps://qiita.com/tomokitamaki/items/5ef2ef4cc72f5b70e241\n\n上記の記事で作った構成のベンチマークを公式ベンチマークツール？の\nwarpを使って取得してみる。\n\n# 何でこの記事を書いたのか\n\nwarpがさらっと使えて便利だったので、シュッとまとめようと思った。\nあんまり記事も無いみたいだし。\n\n\n# warpってどんなツール？\n\n[公式リポジトリ](https://github.com/minio/warp) に書いてある。\n注意事項とかも書いてあるからそっちを読んだほうがいい。\n\nざっくりまとめるなら、\n単に1台のホストからとあるminoに対して負荷をベンチマークテストを実行するだけじゃなくて、\n複数台のホストからとあるminioに対して実行したり、\n1台のホストもしくは複数台のホストからminio **群**に対してベンチマークテストを実行できて、\nベンチマークテスト同士の結果を比べてくれたりするツール。\nDDOSになってしまわないようにしよう。\n\n# 前提\n\n- 構成は以下  \n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86853/49f58cdd-f357-f3d3-e342-e63dc5be20cb.png)\n- インターネット側は100Mbpsベストエフォート\n- HAProxy配下は1Gbpsまで\n- 1台のminioに対してと複数のminoで分散した場合のそれぞれ行う。\n- 使っているVMは全て1コア1GBメモリの一番小さいやつ\n- minioのIPは192.168.5.21 〜 25まで。\n\n# まずはじめに\n\n[warpのイメージのDockerfile](https://github.com/minio/warp/blob/master/Dockerfile)見ているとentrypointに./warpがあるので、docker container run時に色々引数を渡せばいいのだなと分かる。\n\n# インターネット越しにベンチマークテストしてみる\n\n## HAProxyを介すけどバランシングせず、1台のminioに対して実施してみる\n\nHAProxyの設定でバランスしないようにするだけで、warpは関係ない。\n\n```shell\nsudo docker run --rm docker.io/minio/warp:latest \\\n  mixed --host=HAProxyのIP:9000 \\\n  --access-key=AKIAIOSFODNN7EXAMPLE \\\n  --secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY \\\n  --objects 100 --obj.size 1MiB --autoterm\n\n# 例\nsudo docker run --rm docker.io/minio/warp:latest \\\n  mixed --host=proxy.tmktmk.tmk:9000 \\\n  --access-key=AKIAIOSFODNN7EXAMPLE \\\n  --secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY \\\n  --objects 100 --obj.size 1MiB --autoterm\n```\n\n## HAProxyを介してroundrobinでバランシングして、5台のminioに対して実施してみる\n\nHAProxyの設定でバランスするだけなので、warpは関係ないので前項のコマンドと一緒(ry\n\n# minioに直接ベンチマークテスト実施してみる\n\n前提の図にはないけどSWに繋がるインスタンスを1つ作ってそこから実行した。\n\n## 1台のminioに対して実行して実行結果をアタッチしたディレクトリに保存する\n\n192.168.5.21 のminioに対して実行するぞ！\n`--benchdata` でベンチマークテスト結果を出力する場所を指定できる。\nコンテナの `/test_dir/`ってところに `from_inside_node1`ってファイル名で作成する感じ。\n拡張子は自動でつく。\nローカルの `/home/ubuntu/result_tank/` は コンテナに `/test_dir` としてアタッチされる。\n\n\n```shell\nsudo docker run -it \\\n  -v /home/ubuntu/result_tank/:/test_dir \\\n  docker.io/minio/warp:latest mixed --host=192.168.5.21:9000 \\\n  --access-key=AKIAIOSFODNN7EXAMPLE \\\n  --secret-key=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY \\\n  --objects 1250 --obj.size 10MiB --autoterm \\\n  --benchdata /test_dir/from_inside_node1\n```\n\n## 5台のminioに対して実行して実行結果をアタッチしたディレクトリに保存する\n\n変更点は `--host=192.168.5.21:9000` だった前項の部分を\n\n```shell\n--host=192.168.5.2{1...5}:9000\n```\n\nに変えるだけ。これで5.21 ~ 25のminioに対してベンチマークテストを実行することになる。\nあ、あとファイル名は `from_inside_node1` から\n\n```shell\nfrom_inside_node1to5\n```\n\nに変えました。次の項でそれぞれの結果を比較したいのです。\n\n# 実行結果を比較する\n\n引数cmp を使って比較する。\n時系列順ではなく指定した順に比較される。(公式の[この辺](https://github.com/minio/warp#comparing-benchmarks)に書いてる。)\n\n以下の場合は、from_inside_node1.csv.zstが前, from_inside_node1to5.csv.zstが後として比較される\n\n```\nsudo docker run -it \\\n  -v /home/ubuntu/result_tank/:/test_dir \\\n  docker.io/minio/warp:latest \\\n  cmp /test_dir/from_inside_node1.csv.zst /test_dir/from_inside_node1to5.csv.zst\n```\n\n以下の感じで結果が表示される。\n\n```shell\n-------------------\nOperation: DELETE\nOperations: 385 -> 722\nEndpoints: 1 -> 5\n* Average: +87.90% (+1.1) obj/s\n-------------------\nOperation: GET\nOperations: 1753 -> 3228\nEndpoints: 1 -> 5\n* Average: +84.67% (+49.2 MiB/s) throughput, +84.67% (+4.9) obj/s\n* First Byte: Average: -86.766995ms (-27%), Median: -35.278689ms (-15%), Best: -4.446406ms (-45%), Worst: -355.010915ms (-25%)\n-------------------\nOperation: PUT\nOperations: 587 -> 1076\nEndpoints: 1 -> 5\nDuration: 4m59s -> 5m0s\n* Average: +84.06% (+16.3 MiB/s) throughput, +84.06% (+1.6) obj/s\n-------------------\nOperation: STAT\nOperations: 1164 -> 2145\nEndpoints: 1 -> 5\n* Average: +84.17% (+3.3) obj/s\n```\n\n全体的に分散したほうがパフォーマンスが上がっていることが分かる。(だよね？)\n\n# 終わりに\n\n今回はベンチマークテストの手法をmixedにしたけども、getだけとかputだけとかも出来るし、\n以下みたいなwarpを実行するクライアントを増やして協調してベンチマークテストを実行する事もできる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86853/c62cde5b-7ba4-9aec-0732-a2f67e4f203e.png)\n(画像は公式のREADMEから抜粋)\n\n\n\n","user":"tomokitamaki","created_at":"2021-03-28T17:09:18+09:00","updated_at":"2021-03-28T17:09:18+09:00"},{"url":"https://qiita.com/Neko7sora/items/0bed4b89257ab8210d17","title":"DiscordとGuildedのライブラリーの違いとGuildedのBOT作成の準備の説明 (追記: 2021/03/28)","body":"#概要\nDiscordとGuildedのライブラリーの違いと、GuildedというチャットツールのBOT作成の準備の手順を書きました。\n\n#DiscordとGuildedのライブラリーの違い\n| 画像 | 名称 | いつ誕生 | 使用するAPI |公式サイト|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/946490/4ff0dc0c-2f01-a12c-2ba2-263cbaddc4e4.png\" width=\"100px\"> | Discord | 2015/5/13 | Discord公式が用意したBOT API | https://discord.com |\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/946490/92f3e3c0-6977-c93e-e542-73e779c65129.png\" width=\"100px\"> | ﻿Guilded | 2017/3/27(たぶん?) | セルフアカウントのAPI or Guilded公式が用意したBOT API | https://www.guilded.gg/ |\n**追記(2021/03/28):** Guilded Bot APIが登場し、早期アクセスパートナーのみが現在使用できます。 https://www.guilded.gg/blog/guilded-bot-api-is-coming?r=pmbkg2aA\n\n#Discord.jsとGuilded.jsの違い\n| 画像 | 名称 | いつ誕生 | 機能 |リンク|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/f9d9328c-b7df-6f37-867b-507489bcdc61.png\" width=\"100px\"> | Discord.js | 2015/08/05 | 多機能 |ドキュメント: https://discord.js.org <br>[GitHub(discordjs/discord.js)](https://github.com/discordjs/discord.js)|\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/73215f4e-25c3-caed-51d5-421a394cb079.png\" width=\"100px\"> | ﻿chixel/guilded.js | 2020/08/01 (維持不可能) | (非推奨) | [GitHub(Chixel/guilded.js)](https://github.com/Chixel/guilded.js) |\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/73215f4e-25c3-caed-51d5-421a394cb079.png\" width=\"100px\"> | Guilded.js　(﻿guildedjs/guilded.js)  | 2020/10/19 | Discord.jsと使い方がほぼ同じぐらい 機能がまだDiscord.jsに追いついない |ドキュメント: https://guilded.js.org/ <br> [GitHub(guildedjs/guilded.js)](https://github.com/guildedjs/guilded.js)　|\n| ? | discord.gg.js | ? | ? | GitHub(?) <br>https://www.npmjs.com/package/discord.gg|\n| ? | ﻿guilded.gg.js | 2020/11/22 | ? | [GitHub(Sxmurai/guilded.gg.js)](https://github.com/Sxmurai/guilded.gg.js) |\n| ? | ﻿gapi(Guilded) | 2021/02/18 | ? | [GitHub(Skillz4Killz/gapi)](https://github.com/Skillz4Killz/gapi) |\n| ? | ﻿Eris(Discord) | 2016/06/01 | ? |ドキュメント: https://abal.moe/Eris/ <br> [GitHub(abalabahaha/eris)](https://github.com/abalabahaha/eris) |\nもしかしたら、Discordライブラリーの維持ができなくなり、検索してもでてこない古いライブラリーがあるかもしれません。\n\nいつか、Guildedライブラリーの維持が出来なくなり使えなくなる可能性もあります。(example: chixel/guilded.js)\n\n\n#Discord.pyとGuilded.pyの違い\n| 画像 | 名称 | いつ誕生 | 機能 | 使用するAPI |リンク|\n|:-:|:-:|:-:|:-:|:-:|:-:|\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/bf70333e-36d6-bf28-60f5-ad72e3bd5dfe.png\" width=\"100px\"> | Discord.py | 2015/08/25 | 多機能 | Discord公式が用意したBOT API |ドキュメント: https://discordpy.readthedocs.io/ja/latest/ <br>https://github.com/Rapptz/discord.py|\n| <img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/480250/46dc3efb-9cda-3b8b-b1cc-041ac472adf9.png\" width=\"100px\"> | Guilded.py  | 2020/07/29 | 機能がまだDiscord.pyに追いついない | セルフアカウントのAPI or Guilded公式が用意したBOT API |ドキュメント: https://www.guilded.gg/guilded-api/groups/WD56qLmd/channels/b43d6028-8277-4a1f-93be-ba5f8af128a8/docs <br>https://github.com/shayypy/guilded.py|\n\n\n\n#Guildedのセルフアカウントについて\nGUildedは、公式が用意したBOT APIがないので、自分でセルフアカウント作成して、使います。(ずいぶん前のDiscordみたいにセルフアカウントを作成する)\nGuilded運営の人たちは、いろんな人たちがセルフアカウントでBOTを作っていることは認知されています。\nGuilded.jsやGuilded.pyにメールとパスワードを入れてログインすればセルフアカウントのAPIが使えます。(Discordは、ずいぶん前はOK!だったらしいけど、現在は、利用規約で禁止されています。)\n\n**追記(2021/03/28):** Guilded Bot APIが登場し、早期アクセスパートナーのみが現在使用できます。 https://www.guilded.gg/blog/guilded-bot-api-is-coming?r=pmbkg2aA\n今後、利用規約でセルフアカウントを禁止される可能性があります。\n\n#準備の仕方\n1, まず、https://www.guilded.gg でボット用のセルフアカウントを作成します。\n2. ボットを動作させたいサーバーに参加させます。\n\n## Guilded.js(guildedjs/guilded.js) (Node.js V14をインストールされている前提)\n3. `npm install  @guildedjs/guilded.js`を実行してインストールします。\n4. プログラミングします。\n5. 以上\n\n## Guilded.py (python 3をインストールされている前提)\n3. `pip install guilded.py`を実行してインストールします。\n4. プログラミングします。\n5. 以上\n\n# 注意事項\nできたホヤホヤなので、場合によっては動作しなかったりすることがあります。\n\n# 補足\nGuilded APIのサーバーリンク\n\nhttps://www.guilded.gg/guilded-api?i=pmbkg2aA&cid=1168057f-8b4e-4211-8847-5eb840840682&intent=announcement&r=pmbkg2aA\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/946490/d4205201-1ce4-ed95-3cc8-dfd7fa701875.png)\nいろんな言語で書かれたライブラリーのサポートはここから問い合わせることができます。\n\n# 報告事項\n記事の編集者を @Neko7sora に転送しました。 \n( @7yultukuri7 --> 転送 --> @Neko7sora )\n\n元のリンク\n\nhttps://qiita.com/7yultukuri7/items/3165a142da819ce9749e\n","user":"Neko7sora","created_at":"2021-03-28T17:09:08+09:00","updated_at":"2021-03-28T21:40:18+09:00"},{"url":"https://qiita.com/yassanabc/items/7871354ba5f8541fc9a1","title":"【環境構築】Macでpythonの学習環境を作ろう！【Git+Docker+VSCode】","body":"こんな一丁前に言ってますが、まだバチバチの初学者です。\n初学者向けですが、Macでpython環境を作るナレッジです。\n\n# 用意するもの\n1. GihHub\n1. Docker\n1. VSCode\n\n## 1.Gihub\n[GitHub](https://github.com/)に登録して、アカウントを作成しましょう。\nメールアドレスがあればアカウントを作成することができます。\n\n他の会員制サービスと同じように、普通に登録すればOKです。\n\n登録が完了したら、まずはリポジトリを作成しましょう。\n\n自分のプロフィールページにRepositoriesタブがあるので開きます。\n右上のNewボタンをクリックすると、リポジトリ作成画面に遷移します。\n\nRepository Name：任意の名前\nDescription:任意の説明（なくてもOK）\nPublic / Private:Publicにチェック\n\n記入を終えたら、Create Repositoryをクリックすると、Repositoryの作成は完了です。\n\n<!--\n## 2.Sourcetree\n[Sourcetree](https://www.sourcetreeapp.com/)のページから、Mac用のSourcetreeをダウンロード＆インストールします。\n\nインストールしたら、アプリを開き、右上の「・・・」マークをクリックし、アカウントを開きます。\n\n![スクリーンショット 2021-03-28 14.59.13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/b09e3ad6-a855-feae-8eab-3b97ca4471b3.png)\n\n「アカウントの追加」から、GitHubのアカウントを連携します。\n[詳しくはこちらの記事参照](https://qiita.com/suzutatsu/items/817f58cfb6e69f56d134)\n\n以降の作業も、上記のリンクと同じです。\n![スクリーンショット 2021-03-28 15.07.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/d251bf8b-35dc-49e4-212d-5f8c6c6a529e.png)\n\nURLからクローンを選択して、作成したリポジトリのURLを入力します。\nURLは、リポジトリのページのCodeから取得できます。\n\n![スクリーンショット 2021-03-28 15.09.01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/8b9e8bca-8884-9912-3a33-f487e13c96f4.png)\n\nこんな感じのウィンドウが開ければOKです。\n\n![スクリーンショット 2021-03-28 15.15.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/b409917a-a37d-fb3a-cb33-ea66a0266b4c.png)\n-->\n\n## 2.Docker\n[Docker](https://www.docker.com/)のページから、Docker for Macをダウンロード＆インストールします。\n\nこちらも、通常のアプリケーションのように、インストール作業をしてもらえたらOKです。\nターミナルを開いて、docker versionと入力して、バージョン情報が帰ってこれば完了です。\n\n```\n$ docker version\nClient: Docker Engine - Community\n Cloud integration: 1.0.9\n Version:           20.10.5\n（以下略）\n```\n\nここから、python用の環境づくりです。\n以下コマンドを実行して、pythonのdockerイメージを取得します。\n\n```\n$ docker pull python:latest\nlatest: Pulling from library/python\n8bf9c589d5f9: Pull complete \n4c70e46d8b5f: Pull complete \nea848ad42f0d: Pull complete \n48fe137f8d26: Pull complete \n4b13f6ed9b0c: Pull complete \nba85279f50e0: Pull complete \n59a18d8c3680: Pull complete \nc610993f70c6: Pull complete \na9afc028cd66: Pull complete \nDigest: sha256:8bd2e361ad8575ae80a6a3e556a524d44421cb5fa6b55ba6309be52efd08a578\nStatus: Downloaded newer image for python:latest\ndocker.io/library/python:latest\n```\n\npullしたdockerイメージがあるか確認しましょう。\n\n```\n$ docker images\nREPOSITORY   TAG       IMAGE ID       CREATED        SIZE\npython       latest    b1aa63f57d3c   12 hours ago   885MB\n```\n\nでは、イメージからコンテナを起動してみましょう。\n\n```\n$ docker run -it python:latest /bin/bash\n/#\n```\n\nコンテナの中に入れましたね。\npythonのバージョンとmoduleを確認しておきましょう。\n\n```\n/# python --version\nPython 3.9.2\n/# pip list\nPackage    Version\n---------- -------\npip        21.0.1\nsetuptools 54.2.0\nwheel      0.36.2\n```\n\nついでに、作業ディレクトリも作成しておきましょう。\n\n```\n/# mkdir home/waorkspace\n```\n\n## 3.VSCode\n[VSCode](https://azure.microsoft.com/ja-jp/products/visual-studio-code/)のページから、Mac用のVSCodeをダウンロード＆インストールしましょう。\n他のアプリケーション同様、普通に進めればOKです。\n\n[こちらの記事](https://qiita.com/nanamesincos/items/5c48ff88a4eeef0a8631)を参考に、VSCodeの日本語化をおこないます。\n\n拡張機能メニューで、Remote-Containersをインストールします。\n![スクリーンショット 2021-03-28 15.46.16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/3606ae3e-49a7-420a-7084-57439813fac3.png)\n\n左下に、＞＜みたいなマークが出たらOKです。\n![スクリーンショット 2021-03-28 15.47.54.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/ff6d4f7a-b453-3ba8-2866-ee71081c994c.png)\n\n左のメニューから、モニターに＞＜の着いたマークをクリックし、\npython環境の+ボタンをクリックすると、新しいウィンドウが開きます。\n※コンテナが起動していないと、入ることができないので注意してください。\n![スクリーンショット 2021-03-28 16.22.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/bb72d21f-2133-cfda-7e53-feee91503820.png)\n\nウィンドウの下に、Container python:latestと出てれば接続完了です。\n![スクリーンショット 2021-03-28 16.23.36.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/ccc6b04c-6e52-a237-2e6a-f494ca25aa0d.png)\n\nコンテナ側のウィンドウで、Clone Repositoryをクリックします。\n![スクリーンショット 2021-03-28 16.31.41.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/a1d60563-7703-82cd-290d-86f883f9f57d.png)\n\n\n先ほど作成した作業ディレクトリを指定します。\n![スクリーンショット 2021-03-28 16.36.09.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/37de498e-3e51-d647-1585-ff9db0bb692a.png)\n\nGitの拡張機能をインストールするか聞かれるので、installを選択します。\nCloneが完了したらREADME.mdを作成して、pushしてみましょう。\n「・・・」　のメニューの中に、commitとpushがあるので、やってみます。\n![スクリーンショット 2021-03-28 16.40.23.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/3ec5ff1a-f635-8e01-6cb0-89a4f8518cc5.png)\n\ngithubで確認すると、更新されています。\n![スクリーンショット 2021-03-28 16.41.11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/fb5407d4-1f76-0522-267c-0f796a88368f.png)\n\n次に、pythonの拡張機能をインストールしましょう。\n![スクリーンショット 2021-03-28 16.55.38.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/b7e74574-06f4-9bf2-08b2-099fa5d88b46.png)\n\n完了したら、test.pyというファイルを作成して、実行してみましょう。\n![スクリーンショット 2021-03-28 16.57.19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1178764/71658cd9-fb9e-cf61-1a53-7a0740ad47f9.png)\n\nこんな感じで、実行できました。\n\n## 最後に\nファイルの管理 -> GitHub\nエディター・コーディング　-> VSCode\npython環境の作成・管理 -> Docker\nこんな感じの棲み分けになります。\n\n何かmoduleを追加したい時は、Docker上でpipをします。\npythonの実行環境は、VSCodeの拡張機能で実現します。\nコードは、VSCodeとGitの拡張機能で管理します。\n\n\n本当は、dockerfileでpythonの環境を作れるようにして、\n管理もgitでやったほうが良いんだろうなとは思いますが、とりあえず動かしたかった気持ちが先走りこのようになりました。\nまたそのうち記事にしていきます。\n","user":"yassanabc","created_at":"2021-03-28T17:08:45+09:00","updated_at":"2021-03-28T17:08:45+09:00"},{"url":"https://qiita.com/lemonade_dot_log/items/999b2a6a0332d2163a28","title":"【Swift】UIStackViewを使って回転時のレイアウト変更を楽にする","body":"# 導入\n今回は、アプリの向きを縦・横で切替える時に、レイアウト変更を行う場合に便利なTipsを書いていきます。\n縦画面と横画面でレイアウトを変えたいという事はよくあると思いますが、その度に制約の切替をたくさん行うのは面倒くさいし、思わぬレイアウト崩れの原因にもなるので、できれば制約の変更は最小限にしておきたいところです。\n\n**そこで、今回は`UIStackView`を使って縦・横のレイアウト切替を楽に終わらせる実装を記事にしました。**\n\nこの記事を書こうと思ったのも、自分が上記のような実装をする時に、最初は制約の変更でゴリ押ししようとしていましたが、「`UIStackView`が使える！」と途中で気づいたためです。\n\nそんなわけで、読んでいただいた方の参考になればと思います。\n\n# やりたい事\n五十音の「あいうえお」ラベルを画面の縦横の向きによって、「横並び」or「縦並び」を切替えます。\n\n**縦レイアウトの場合**\n<img width=\"280\" alt=\"portrate.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/580445/c7dc1e83-de4a-9404-f6a2-8726ad0d57c5.png\">\n**横レイアウトの場合**\n<img width=\"480\" alt=\"landscape.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/580445/cd2db439-246e-e29a-31a7-efa4e5f0c94b.png\">\n\nこのようなレイアウト変更を`UIStackView`を使って、なるべく楽に実装していきます。\nおそらくこのようなレイアウト変更を普通に制約の変更だけでゴリ押しするとかなり面倒くさいと思います。\n\n# 実装\n`UIStackView`についての詳しい解説は、この記事では省略させていただきますが、Qiitaや技術ブログでわかりやすい記事が沢山あるので、`UIStackView`を使ったことがない方は、ググってみていただければと思います。\n\n### StoryBoard側の設定\n\n#### UIのイメージ\n縦の場合を想定\n![layout_sample.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/580445/33729ea9-7781-6f36-9151-2d9ab52f52a5.png)\n\nアプリの縦横を替えた時に、StackViewそのもののレイアウトを変更したいので、高さと幅の制約は、優先度を900と750に設定して動的に切り替えるようにしています。\n\n#### StackViewの設定\n<img width=\"240\" alt=\"landscape.png\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/580445/a441f39e-5b03-4400-95e6-6641c8e32b5f.png\">\n\n\n### ソースコード\nStackView自体のレイアウト変更は、制約を変更することで実現しています。\n\n```swift\n\nimport UIKit\n\nclass StackViewPreview: UIViewController {\n\n    @IBOutlet weak var contentView: UIView!\n    @IBOutlet weak var stackView: UIStackView!\n    @IBOutlet weak var stackViewLeadingConst: NSLayoutConstraint! // StackViewの先頭を親ビューの先頭の制約 \n    @IBOutlet weak var stackViewBottomConst: NSLayoutConstraint!  // StackViewのボトムと親ビューのボトムの制約\n    @IBOutlet weak var stackViewHeightConst: NSLayoutConstraint!  // StackViewの高さ\n    @IBOutlet weak var stackViewWidthConst: NSLayoutConstraint!   // StackViewの横幅\n    \n    // アプリ（画面）の向きを判断\n    var isPortrait: Bool {\n        return UIApplication.shared.windows.first?.windowScene?.interfaceOrientation.isPortrait ?? true\n    }\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        updateConstraint()\n    }\n    \n    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {\n        super.viewWillTransition(to: size, with: coordinator)\n        coordinator.animate(alongsideTransition: { _ in\n            self.updateConstraint()\n        }, completion: nil)\n    }\n    \n    func updateConstraint() {\n        if isPortrait {\n            // StackViewが横長になるように、制約を切替\n            stackViewBottomConst.isActive = false\n            stackViewLeadingConst.isActive = true\n            // stackViewの高さの優先度を上げて、高さを有効。横幅を無効。\n            stackViewHeightConst.priority = UILayoutPriority(900)\n            stackViewWidthConst.priority = UILayoutPriority(750)\n            // ★ Point ★\n            stackView.axis = .horizontal\n        } else {\n            // StackViewが縦長になるように、制約を切替\n            stackViewLeadingConst.isActive = false\n            stackViewBottomConst.isActive = true\n            // stackViewの横幅の優先度を上げて、高さを無効。横幅を有効。\n            stackViewHeightConst.priority = UILayoutPriority(750)\n            stackViewWidthConst.priority = UILayoutPriority(900)\n            // ★ Point ★\n            stackView.axis = .vertical\n        }\n    }\n}\n```\n\n制約によるレイアウトの変更は、今回の記事の目的とは異なるので、割愛します。\n\nここでは、★Point★とコメントしたところについて解説します。\nといっても、`UIStackView`について理解している方であれば、ソースコードの意味については、説明不要かもしれませんが、\nアプリの縦横が切り替わる瞬間に、StackViewの`axis`も同時に切替えて、X軸方向に並べる（横並び）か、Y軸方向に並べるかを（縦並び）を指定しています。\n\n**どちらかといえば、こういったレイアウト変更時には、`UIStackView`が使えるというアイディアの部分が伝わればと思います。**\n\n\n","user":"lemonade_dot_log","created_at":"2021-03-28T17:07:37+09:00","updated_at":"2021-03-28T17:07:37+09:00"},{"url":"https://qiita.com/qiiteinai/items/dfeb79632231f3c8fbd4","title":"Nuxt.js（Vue.js）でサムネイル画像のトリミング機能を実装した","body":"## はじめに\n\nNuxt.js ベースのプロダクトに、ユーザーが画像をアップロードして、ユーザーアイコン（サムネイル）を設定するという機能を付けようと思いました。\n\n![ 2021-03-27 14.57.37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/331607/5969a7a8-7ceb-3350-bd70-4b4e1ded0c9b.png)\n\n\nここでの要件は一般的なもので、\n\n1. ユーザーが画像をアップロード（拡張子の制限あり）\n1. 画像の範囲を指定（トリミング）\n1. サーバーに画像をアップロード・サーバー側での処理\n1. サムネイルが更新される\n\nというものです\n\n環境は以下の通りです。\n- Nuxt.js v2.12.2 (SSR / TypeScript)\n\n私は Nuxt.js ベースでの導入でしたが、 Vue.jsでも本質的には何も変わりません。\n\n## 使用した技術\n\n結論から言うと、新しく導入したパッケージは以下の二つです。\n\n\n- [croppie](https://www.npmjs.com/package/croppie)\n- [@types/croppie](https://www.npmjs.com/package/@types/croppie)\n\n画像トリミングはよく要求される技術なだけあって、すでに `croppie` という素晴らしいプラグインが存在していました。\n\n公式ページは[こちら](https://foliotek.github.io/Croppie/)で、おそらくほとんどの要件・要求に応えてくれるような設計となっています。\n\nまた `@types/croppie` は `croppie` の型定義をしてくれるファイルです。Nuxt.js with TypeScript に取り組まれている方にはお馴染みのパッケージですね。\n\n`croppie` が素晴らしいパッケージであることには違いないのですが、公式ドキュメントは jQuery での使用方法ばかりで、  Vue.js / Nuxt.js でどう使えばいいんだろうというのがあまり見えてきませんでした（少なくとも私には）。\n\nそこで「Vue croppie」などとググるわけですが、そうすると次のパッケージに出会います\n\n- [vue-croppie](https://www.npmjs.com/package/vue-croppie)\n\n「これだ」と思いました。\n\nですが、実際にパッケージをインストールして使ってみたりプラグインのコードを読んだ上で、私は `vue-croppie` は使わないと言う選択をしました。\n\nその理由は以下の通りです。\n\n- 公式ドキュメントの `Sample` に誤りが散見され、やる気が削がれる（閉じタグ `</script>` がないなどの基本的な誤り）\n- コードをよくみると、型の定義がかなり適当で非常に怖い\n- Nuxt.jsのSSRに対応していない（少なくとも私の環境では一発でエラーが出ました）\n- そもそも、中身がほとんど `croppie` そのものなので、自分で書き直せる\n\n以下のように、SSRだと`window`が`undefined`だとのエラーが出てしまいます。\n![ 2021-03-26 20.58.15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/331607/cda3f072-9b4b-569e-4af3-123d3e37f385.png)\n\n\n以上のような理由で、\n\n\n① 以下の二つのパッケージをインストールして、\n\n- [croppie](https://www.npmjs.com/package/croppie)\n- [@types/croppie](https://www.npmjs.com/package/@types/croppie)\n\n② `vue-croppie`のアイデアを参考にしつつ、自分でコンポーネントを作成する\n\n\nという方向性に決めました。\n\n※ただし、Vue.js　(あるいはNuxt.jsのSPA)を使用していて、型も気にならないと言う場合は、さくっと `vue-croppie` をインストールして使ってみるのも良いかもしれません（未検証です）。この場合は①にあげたパッケージはいずれもインストールしなくて大丈夫です。\n\n\n## 構成\n\nということで、`vue-croppie`をリスペクトしつつ、なるべく型を失わないようなコンポーネントを作りました。\n\nコンポーネントの構成は以下の通りです。\n\n- `components/atoms/ACrop.vue`\n- `components/organisms/OCrop.vue`\n\n`ACrop.vue` は `croppie` を Vue 向けに使用できるようにしたコンポーネントで、この記事の本質と言えるでしょう。\n\n`OCrop.vue` はその `ACrop.vue` を呼び出すコンポーネントです。`OCrop.vue` にも必要な記述は多々ありあすが、コンポーネントである必要はありません。`pages/` 以下で直接 `ACrop.vue` を呼び出してもらっても大丈夫です。\n\n## 作ってみた\n\nまずは、パッケージのインストールからいきましょう。\n\n```\n$ yarn add croppie @types/croppie\n```\n\nあとは、コンポーネントを作ってしまうだけです。\n\n```ACrop.vue\n<template>\n  <!-- ref=\"ACrop\" は必須です. 名前はACropである必要はありません -->\n  <div id=\"ACrop\" ref=\"ACrop\" :class=\"['a--crop', customClass]\" />\n</template>\n\n<script lang=\"ts\">\n// デフォルトのCSS, croppieと型定義を読み込みます\nimport 'croppie/croppie.css'\nimport Croppie, { CroppieOptions } from 'croppie'\nimport Vue, { PropType } from 'vue'\n\ninterface BindOptions {\n  url: string\n  points?: number[]\n  orientation?: number\n  zoom?: number\n  useCanvas?: boolean\n}\n\ninterface Data {\n  model: Croppie | null\n}\n\nexport default Vue.extend({\n  name: 'ACrop',\n\n  // propsの型や初期値はcroppieの公式ドキュメントに準拠しています\n  props: {\n    boundary: {\n      type: Object as PropType<CroppieOptions['boundary']>,\n      default: null,\n    },\n    customClass: {\n      type: String,\n      default: '',\n    },\n    enableExif: {\n      type: Boolean,\n      default: false,\n    },\n    enableOrientation: {\n      type: Boolean,\n      default: false,\n    },\n    enableResize: {\n      type: Boolean,\n      default: false,\n    },\n    enableZoom: {\n      type: Boolean,\n      default: true,\n    },\n    enforceBoundary: {\n      type: Boolean,\n      default: true,\n    },\n    mouseWheelZoom: {\n      type: [Boolean, String] as PropType<CroppieOptions['mouseWheelZoom']>,\n      default: true,\n    },\n    showZoomer: {\n      type: Boolean,\n      default: true,\n    },\n    viewport: {\n      type: Object as PropType<CroppieOptions['viewport']>,\n      default: () => ({ width: 100, height: 100, type: 'square' }),\n    },\n    minZoom: {\n      type: Number,\n      default: 0,\n    },\n    maxZoom: {\n      type: Number,\n      default: 1.5,\n    },\n  },\n\n  data: (): Data => ({\n    model: null,\n  }),\n\n  mounted(): void {\n    // mounted()の中で、new Croppieを呼び出します\n    this.initialize()\n  },\n\n  methods: {\n    initialize(): void {\n      // DOMを読み込みます\n      const el = this.$refs.ACrop as HTMLElement\n\n      const options = {\n        enableExif: this.enableExif,\n        enableOrientation: this.enableOrientation,\n        enableZoom: this.enableZoom,\n        enableResize: this.enableResize,\n        enforceBoundary: this.enforceBoundary,\n        mouseWheelZoom: this.mouseWheelZoom,\n        viewport: this.viewport,\n        showZoomer: this.showZoomer,\n        minZoom: this.minZoom,\n        maxZoom: this.maxZoom,\n      } as CroppieOptions\n\n      if (this.boundary !== null) {\n        options.boundary = this.boundary\n      }\n\n      // Croppieモデルを作ります\n      this.model = new Croppie(el, options)\n    },\n\n    // 以下の関数は親コンポーネント（OCrop.vue）から呼び出されます\n    // croppieの公式ドキュメントに準拠しています\n\n    bind(options: BindOptions): Promise<void> {\n      return (this.model as Croppie).bind(options)\n    },\n    setZoom(zoom: number): void {\n      ;(this.model as Croppie).setZoom(zoom)\n    },\n    rotate(degrees: 90 | 180 | 270 | -90 | -180 | -270): void {\n      ;(this.model as Croppie).rotate(degrees)\n    },\n    get(): Croppie.CropData {\n      return (this.model as Croppie).get()\n    },\n    result(options: Croppie.ResultOptions): Promise<HTMLCanvasElement> {\n      return (this.model as Croppie).result(options).then(output => output)\n    },\n    destroy(): void {\n      ;(this.model as Croppie).destroy()\n    },\n    refresh(): void {\n      this.destroy()\n      this.initialize()\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.a--crop /deep/ {\n  // デフォルトのCSSを上書きすることができます\n  // お好みに合わせてどうぞ\n\n  // スライダーの横幅\n  .cr-slider-wrap {\n    width: 100%;\n  }\n\n  // スライダーのデザイン\n  .cr-slider[type='range'] {\n    appearance: none;\n    background-color: #fff;\n    height: 5px;\n    width: 100%;\n    border-radius: 6px;\n\n    &:focus,\n    &:active {\n      outline: none;\n    }\n\n    &::-webkit-slider-thumb {\n      appearance: none;\n      cursor: pointer;\n      position: relative;\n      margin-top: -8px;\n      border: 2px solid #0c948d;\n      width: 22px;\n      height: 22px;\n      display: block;\n      background-color: #fff;\n      border-radius: 50%;\n    }\n\n    &:active::-webkit-slider-thumb {\n      box-shadow: 0 0 0 2px rgba(#4dbac4, 0.1);\n      transition: 0.3s ease;\n    }\n  }\n}\n</style>\n\n```\n\n```OCrop.vue\n<template>\n  <div class=\"o--crop\">\n    <div class=\"o--crop__wrapper\">\n      <div>\n        <!-- ref=\"OCrop\"は必須 -->\n        <a-crop\n          ref=\"OCrop\"\n          enable-orientation\n          :boundary=\"{ width: 150, height: 150 }\"\n          :viewport=\"{ width: 100, height: 100, type: 'circle' }\"\n        />\n      </div>\n\n      <!-- この後ろはボタン類などの飾り・非本質 -->\n      <div class=\"o--crop__items\">\n        <label for=\"o--crop__input\" class=\"o--crop__label mb-16\">\n          画像をアップロード\n          <input\n            id=\"o--crop__input\"\n            class=\"o--crop__input\"\n            type=\"file\"\n            :accept=\"allowedExtensions.join(',')\"\n            @change=\"handleChange\"\n          />\n        </label>\n\n        <div class=\"flex align-center mb-16\">\n          <span class=\"mr-12\">画像の回転:</span>\n          <fa class=\"o--crop__rotate undo mr-4\" :icon=\"faUndo\" @click=\"handleRotate(90)\" />\n          <fa class=\"o--crop__rotate redo\" :icon=\"faRedo\" @click=\"handleRotate(-90)\" />\n        </div>\n\n        <div class=\"flex align-center\">\n          <span class=\"mr-12\">リセット:</span>\n          <div class=\"o--crop__reset\" @click.prevent=\"handleRefresh\">初めに戻す</div>\n        </div>\n      </div>\n    </div>\n\n    <button @click.prevent=\"handleCrop\">切り取る</button>\n    <button @click.prevent=\"handleClick\">更新</button>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { ResultOptions } from 'croppie'\nimport { faRedo, faUndo } from '@fortawesome/free-solid-svg-icons'\nimport ACrop from '../atoms/ACrop.vue'\nimport Vue from 'vue'\n\ninterface HTMLInputEvent extends Event {\n  target: HTMLInputElement & EventTarget\n}\n\ninterface Data {\n  croppedImage: string | null\n  allowedExtensions: string[]\n  initialZoomPoint: number\n  faRedo: typeof faRedo\n  faUndo: typeof faUndo\n  submitting: boolean\n}\n\nexport default Vue.extend({\n  name: 'OCrop',\n\n  components: {\n    ACrop,\n  },\n\n  data: (): Data => ({\n    croppedImage: null,\n    allowedExtensions: ['image/jpeg', 'image/png'],\n    initialZoomPoint: 0, // 初期状態でのスライダーの位置\n    faRedo,\n    faUndo,\n    submitting: false,\n  }),\n\n  mounted(): void {\n    this.initialize()\n  },\n\n  methods: {\n    initialize(): void {\n      // 一番最初にセットする画像のURL / 本来ならばユーザーのサムネイルなど\n      const url = 'http://i.imgur.com/fHNtPXX.jpg'\n\n      ;(this.$refs.OCrop as any)\n        .bind({\n          url,\n        })\n        .then(() => {\n          // ここでスライダーの初期値をセットする（bindのあとにセットするのがポイント）\n          ;(this.$refs.OCrop as any).setZoom(this.initialZoomPoint)\n        })\n    },\n    handleChange(e: HTMLInputEvent): void {\n      const files = e.target.files\n      if (!files || !files.length) return\n\n      const reader = new FileReader()\n      reader.onload = (ev: ProgressEvent<FileReader>) => {\n        ;(this.$refs.OCrop as any).bind({\n          url: ev.target?.result as string,\n        })\n      }\n      reader.readAsDataURL(files[0])\n    },\n    handleCrop(): void {\n      const options = {\n        type: 'base64',\n        size: { width: 300, height: 300 },\n        format: 'jpeg',\n      } as ResultOptions\n\n      ;(this.$refs.OCrop as any).result(options).then((output: string) => this.handleResult(output))\n    },\n    handleResult(output: string): void {\n      this.croppedImage = output\n\n      // 親要素に result イベントを発火する（任意）\n      this.$emit('result', this.croppedImage)\n    },\n    handleRotate(degree = 90): void {\n      // 画像の回転\n      ;(this.$refs.OCrop as any).rotate(degree)\n    },\n    handleRefresh(): void {\n      // 初期状態に戻す\n      ;(this.$refs.OCrop as any).refresh()\n      this.initialize()\n    },\n    handleClick(): void {\n      // ここにaxiosなどのサーバーへの処理を書いたら良いでしょう！\n    },\n  },\n})\n</script>\n\n<style lang=\"scss\" scoped>\n.o--crop {\n  &__wrapper {\n    display: flex;\n    justify-content: space-evenly;\n    align-items: center;\n    flex-direction: column;\n    margin-bottom: 48px;\n  }\n\n  &__label > &__input {\n    display: none;\n  }\n\n  &__label {\n    padding: 1rem 1.5rem;\n    color: #fff;\n    background: #0c948d;\n    border-radius: 4px;\n    cursor: pointer;\n  }\n\n  &__items {\n    display: flex;\n    flex-direction: column;\n  }\n\n  &__rotate {\n    font-size: 2rem;\n    color: #0c948d;\n    padding: 4px;\n    cursor: pointer;\n  }\n\n  &__reset {\n    border: 1px solid #bbb;\n    color: colors(black);\n    background: #fafafa;\n    padding: 2px 8px;\n    border-radius: 4px;\n    font-size: 0.9rem;\n    cursor: pointer;\n  }\n}\n</style>\n```\n\n\n## 終わりに\n\n`as any`で型キャストした点は少しサボってしまいました。\n\n今回の機能は[資格TimesのQA掲示板](https://shikakutimes.jp/qa)のために実装しました。資格TimesのQA掲示板は日本初の資格特化のQA掲示板です。もしよろしければ覗いてみてください😀\n\n\n","user":"qiiteinai","created_at":"2021-03-28T17:04:26+09:00","updated_at":"2021-03-28T17:29:43+09:00"},{"url":"https://qiita.com/tagosakubeya/items/b29c069d972fb48febb1","title":"CodeceptJSでE2Eテストコード書いてみた","body":"# ある日\nE2Eテスト書きたい。でもE2Eテストめんどい。一度SeleniumIDE使ってみたけど、キャプチャリプレイを通して出力するコードは何してるかわからなくって挫折した。すごく簡単にかけて実行できるやつないかなー、、と。\n\nあ　り　ま　し　た\n\nその名は[CodeceptJS](https://codecept.io/)。独特な書き方だけど読みやすそうだし、ラクできそうかも？と思い使ってみました。\n\n# やってみたこと\n\nこの[サイト](http://example.selenium.jp/reserveApp_Renewal/#)をサンプルにCodeceptJS(Puppeteer)でE2Eテストコードを実装しました。予約フォーム、予約詳細、予約確認の3画面で構成されているテスト用デモサイトです。\n[サンプルコード](https://github.com/codeceptjs/examples)を一通り読んでみて、以下の内容をテストするE2Eテストコードを書いてみました。\n\n#### 異常系テスト\n- 処理日>=宿泊日の場合エラー\n- 名前がない場合エラー\n\n#### 正常系テスト\n- 予約フォーム入力登録→予約登録確認→予約完了\n    - 正常データは2種類\n\n\n# 作成コード\n<details><summary>詳細なコードはこちらをご覧ください</summary><div>\n# ディレクトリ構成概要\n\n```bash\n.\n├── codecept.conf.js \n├── output/                     # エラー時のスクショを保存\n└── reserve_app_renewal-tests/  \n    ├── fixture\n    │   └── reserve_resist.yml  # テストデータ\n    ├── pages                   # page情報\n    │   ├── error.page.js\n    │   ├── final_confirm.page.js\n    │   ├── reserve_check.page.js\n    │   └── top.page.js\n    └── resist_test.js          # キックするプログラム \n```\n\n\n```javascript:resist_test.js\nconst yaml = require(\"js-yaml\");\nconst fs = require('fs');\nconst path = require('path');\nconst moment = require(\"moment\");\n\n//fixtureデータ\nconst fixtureYmlData = fs.readFileSync(path.join(__dirname, \"fixture/reserve_resist.yml\"), 'utf8');\nconst fixture = yaml.load(fixtureYmlData);\n\nFeature('reserve resist test');\n\nBefore(async ({ I, TopPage }) => {\n    TopPage.goto()\n});\n\n//異常系テスト\nScenario('invalid resist', ({ I, TopPage, ErrorPage }) => {\n    for (let idx in fixture.invalidData) {\n        TopPage.inputReserveForm(\n            //FIXME:eval()を使わずにfixtureに日付データを記載する方法\n            eval(fixture.invalidData[idx].reserveDate),\n            fixture.invalidData[idx].reserveTerm,\n            fixture.invalidData[idx].peopleCount,\n            fixture.invalidData[idx].breakfastFlg,\n            fixture.invalidData[idx].planAFlg,\n            fixture.invalidData[idx].planBFlg,\n            fixture.invalidData[idx].guestName\n        )\n        TopPage.enterAgreeAndGotoNext()\n\n        ErrorPage.checkError(fixture.invalidData[idx].expectError)\n        ErrorPage.returnTop()\n\n        TopPage.checkHeader()\n    }\n});\n\n//正常系テスト\nScenario('valid resist', ({ I, TopPage, ReserveCheckPage, FinalConfirmPage }) => {\n    for (let idx in fixture.validData) {\n        TopPage.inputReserveForm(\n          fixture.validData[idx].inputData.reserveDate,\n          fixture.validData[idx].inputData.reserveTerm,\n          fixture.validData[idx].inputData.peopleCount,\n          fixture.validData[idx].inputData.breakfastFlg,\n          fixture.validData[idx].inputData.planAFlg,\n          fixture.validData[idx].inputData.planBFlg,\n          fixture.validData[idx].inputData.guestName\n        )\n        TopPage.enterAgreeAndGotoNext()\n\n        ReserveCheckPage.checkReserveDetail(\n            fixture.validData[idx].checkData.reserveDateFrom,\n            fixture.validData[idx].checkData.reserveDateTo,\n            fixture.validData[idx].checkData.totalPrice,\n            fixture.validData[idx].checkData.reserveTerm,\n            fixture.validData[idx].checkData.PeopleCount,\n            fixture.validData[idx].checkData.breakfast,\n            fixture.validData[idx].checkData.plan_a_order,\n            fixture.validData[idx].checkData.plan_b_order,\n            fixture.validData[idx].checkData.guestName\n        )\n        ReserveCheckPage.goToCommit()\n\n        FinalConfirmPage.checkReserveFinalCommit()\n        TopPage.goto()\n    }\n});\n```\n\n```javascript:reserve_check.page.js\n\nconst assert = require('assert');\n\nconst I = actor();\n\nmodule.exports = {\n    // locators\n    check_fields: {\n        h1:                 \"div.container > h1\",\n        totalPrice:         \"#price\",\n        reserveDateFrom:    \"#datefrom\",\n        reserveDateTo:      \"#dateto\",\n        reserveTerm:        \"#dayscount\",\n        reservePeopleCount: \"#hc\",\n        breakfast:          \"#bf_order\",\n        plan_a_order:       \"#plan_a_order\",\n        plan_b_order:       \"#plan_b_order\",\n        guestName:          \"#gname\"\n    },\n    btn_fields: {\n        return: \"#returnto_iｓndex\",\n        commit: \"#commit\"\n    },\n\n    // 予約情報を検証する\n    checkReserveDetail(\n      reserveDateFrom,\n      reserveDateTo,\n      totalPrice,\n      reserveTerm,\n      PeopleCount,\n      breakfast,\n      plan_a_order,\n      plan_b_order,\n      guestName\n    ) {\n        I.waitForVisible('.container')\n        I.see('予約内容', this.h1)\n        I.see(totalPrice, this.totalPrice)\n        I.see(reserveDateFrom, this.reserveDateFrom)\n        I.see(reserveDateTo, this.reserveDateTo)\n        I.see(reserveTerm, this.reserveTerm)\n        I.see(PeopleCount, this.reservePeopleCount)\n        //朝食のラジオボタン\n        I.see(breakfast, this.bf_order)\n        if (plan_a_order === null) {\n            I.dontSeeElement(this.plan_a_order)\n        } else {\n            I.see(plan_a_order, this.plan_a_order)\n        }\n        if (plan_b_order === null) {\n            I.see(this.plan_b_order)\n        } else {\n            I.see(plan_b_order, this.plan_b_order)\n        }\n        I.see(guestName, this.guestName)\n    },\n\n    //topページへ戻る\n    returnTop() {\n        I.click(this.btn_fields.return)\n    },\n\n    goToCommit() {\n        I.click(this.btn_fields.commit)\n    }\n}\n\n```\n\n```javascript:resist_test.js\nconst I = actor();\n\nmodule.exports = {\n    // locators\n    h1: \"div.container > h1\",\n    errorMassage: \"#errorcheck_result\",\n    btnReturn: \"#returnto_index\",\n\n    // 予約情報を入力する\n    checkError(errorMassage) {\n        I.waitForVisible('.container')\n        I.see('予約エラー', this.h1)\n        I.see(errorMassage, this.errorMassage)\n    },\n\n    //topページへ戻る\n    returnTop() {\n        I.click(this.btnReturn)\n    }\n}\n```\n\n```javascript:final_confirm.page.js\nconst I = actor();\n\nmodule.exports = {\n    // locators\n    h1: \"div.container > h1\",\n    btnReturn: \"#returnto_checkInfo\",\n\n    // 予約完了であるか確認\n    checkReserveFinalCommit() {\n        I.waitForVisible('.container')\n        I.see('予約を完了しました', this.h1)\n    },\n\n    //一つ前のページにに戻る\n    returnCheckInfoPage() {\n        I.click(this.btnReturn)\n    }\n}\n```\n\n```reserve_resist.yml\n# TODO:変数を使う\nvalidData:\n  - inputData:\n      reserveDate:   \"2021/04/01\"\n      reserveTerm:   \"2\"\n      peopleCount:   \"4\"\n      breakfastFlg:  \"1\"\n      planAFlg:      \"1\"\n      planBFlg:      \"0\"\n      guestName:     \"guest1\"\n    checkData:\n      reserveDateFrom:    \"2021年4月1日\"\n      reserveDateTo:      \"2021年4月3日\"\n      totalPrice:         \"60000\"\n      reserveTerm:        \"2\"\n      PeopleCount:        \"4\"\n      breakfast:          \"なし\"\n      plan_a_order:       null\n      plan_b_order:       \"お得な観光プラン\"\n      guestName:          \"guest1\"\n  - inputData:\n      reserveDate:   \"2021/04/17\"\n      reserveTerm:   \"3\"\n      peopleCount:   \"1\"\n      breakfastFlg:  \"0\"\n      planAFlg:      \"0\"\n      planBFlg:      \"0\"\n      guestName:     \"guest2\"\n    checkData:\n      reserveDateFrom:    \"2021年4月17日\"\n      reserveDateTo:      \"2021年4月20日\"\n      totalPrice:         \"29500\"\n      reserveTerm:        \"3\"\n      PeopleCount:        \"1\"\n      breakfast:          \"あり\"\n      plan_a_order:       \"昼からチェックインプラン\"\n      plan_b_order:       \"お得な観光プラン\"\n      guestName:          \"guest2\"\n\ninvalidData:\n  - reserveDate:   'moment().format(\"YYYY/MM/DD\")'\n    reserveTerm:   \"2\"\n    peopleCount:   \"7\"\n    breakfastFlg:  \"1\"\n    planAFlg:      \"0\"\n    planBFlg:      \"1\"\n    guestName:     \"guest_today\"\n    expectError:    \"翌日以降の日付を指定\"\n  - reserveDate:   'moment().add(\"days\", 1).format(\"YYYY/MM/DD\")'\n    reserveTerm:   \"2\"\n    peopleCount:   \"4\"\n    breakfastFlg:  \"3\"\n    planAFlg:      \"1\"\n    planBFlg:      \"1\"\n    guestName:     \"\"\n    expectError:    \"名前が指定されていません\"\n\n```\n### リポジトリ\nhttps://github.com/talasago/test-selenium-test-site-with-codeceptjs\n\n</div></details>\n\n\n\n# コードを実装時に意識した点\n#### PageObjectモデルとして記載  \n\n- pages/配下の*.page.jsにページオブジェクトとして各ページのロケータと振る舞いを記述\n- resist_test.jsでテストの流れを記述  \n\n主に[サンプルコード](https://github.com/codeceptjs/examples)をもとに実装しました。\n各ページの情報を別ファイルに格納することで、そうしなかった場合と比較して可読性と保守性を上げることができました。\n\n#### fixtureを作成してデータ駆動テスト\n- テストデータとしての入力値と検証値を別ファイル化\n  \nテストスクリプト読めない人でも、テストデータ(fixture)で何をやっているのかをすぐわかるようにしました。データ駆動として[DataTable](https://codecept.io/advanced/#data-driven-tests)を使う案もあったのですが、別ファイル化しづらそうだなと思い使いませんでした。  \n冷静に考えるとこういったファイルをfixtureと名乗ってよいかはちょっとわかっていないです...\n\n\n# このソースのイケてないとこ\n#### CI/CDに対応できてない\n[テストサイト](http://example.selenium.jp/reserveApp_Renewal/)は宿泊日、曜日、宿泊期間などの因子によって、合計金額が変わる仕様なのですが、**合計金額を変えるロジックを作っていません**。\n作ったほうが良いと思いますが、~~今回そこまでやるのがめんどくさかったし~~計算ロジックをプロダクションコードと別にテストコード作り込むことに抵抗がありました。テストスクリプトを極力作らないことでテストスクリプトの余計なバグを入れないようにしました。\nまた、fixtureとして保存しているテストデータを見るだけでどのようなテストを行っているかわかるようにする点も重視したのも理由の一つです。\nそのため**テストを実行する際にはテストデータを手動で変更する**必要があるため、CI/CDに対応できていません。\n\n\n#### evalを使用している点\nfixtureに、 今日の日付を示す```moment().format(\"YYYY/MM/DD\")```のために使用しています。evalは非推奨であることは承知しているのですが、筆者の技術力不足によりeval以外で実装できませんでした。\n\n\n# CodeceptJSを使ってみて良かった点\n- seleniumよりも読みやすく、コード量が少ない  \n→面倒なことをよしなにやってくれる感じでした。要素が見つからないときにn秒待つなど。\n- デフォルトでテスト実行エラー時にスクリーンショットを保存してくれる点  \n→ 特に設定しなくてもエラー発生時にどこがおかしいかすぐわかるので良い。\n- Iは最初気持ち悪かったけど、慣れたら普通  \n→ ```I.click()```で```私は クリックする```と実行時に表示されるので何をやっているのかわかりやすいです。\n\n# おわりに\nCodeceptJSたのしい！！！！！！\n\n\n# 参考サイト\nhttps://www.selenium.dev/documentation/ja/guidelines_and_recommendations/page_object_models\nhttp://www.selenium.jp/test-site\nhttps://github.com/selenium-jp/example\nhttps://qiita.com/tsuemura/items/56ba9942565963858d8f\nhttps://qiita.com/tsuemura/items/70b156baecfbcffb03fb\n\n\n","user":"tagosakubeya","created_at":"2021-03-28T17:00:40+09:00","updated_at":"2021-03-28T17:00:40+09:00"},{"url":"https://qiita.com/takanattie/items/36272e0af1b7b20713c7","title":"CKS (Certified Kubernetes Security Specialist) 合格体験記","body":"# はじめに\n\nCKS (Certified Kubernetes Security Specialist) の合格体験記です！\n\n# 受験した資格\n\n* [Certified Kubernetes Security Specialist](https://training.linuxfoundation.org/ja/certification/certified-kubernetes-security-specialist/)\n* 主催: [The Linux Foundation](https://www.linuxfoundation.org/)\n* 費用: 300ドル（USD）※ 私はこの値段ではなく、後述するバンドル（セット）で安く購入しました。\n\n# 内容\n\n[公式サイト](https://training.linuxfoundation.org/ja/certification/certified-kubernetes-security-specialist/)に以下のように書かれています。\n\n> CKSを取得することで、コンテナベースのアプリケーションやKubernetesプラットフォームの構築、デプロイ、ランタイム時のセキュリティを確保する能力を持っていること、およびプロフェッショナルな環境でこれらのタスクを実行する資格があることを証明できます。\n\n以上のような内容ですが、KubernetesにおけるRBACによる認可の設定やネットワークポリシーの設定によるいわゆるHardeningのスキル、監査（audit）の設定、脆弱性の発見などのスキルを試される試験となっています。\n\n# 受験方法\n\n* 試験時間 120分\n* リモートでの実技試験。\n    * Google Chromeを使い、試験用のPluginにあるコンソールを用いて、ネットワークの向こうにある事前に用意されたKubernetesクラスタ（複数）にアクセスして、実際に設定等を行なっていくという試験です。\n* 英語（日本語の対応は現在のところしていないようです）\n\nなお、今回受験したCKSのテストを受ける（スケジュールする）ためには、[CKA(Certified Kubernetes Administrator)](https://training.linuxfoundation.org/ja/certification/certified-kubernetes-administrator-cka/)に合格して、その有効期限内である必要があります。要するに、CKAの認定が前提となっています。\n\nなお、準備事項・注意事項・禁止事項があるので、それらは[Candidate Handbook](https://docs.linuxfoundation.org/tc-docs/certification/lf-candidate-handbook)をきちんと確認して理解しないといけません。\n\nその中ならいくつか書くと、以下の事項が主な注意点だと思います。\n\n* カメラ（PCに内蔵あるいはUSB等で接続できるもの）が必要。\n    * 試験中にカメラで試験官に監視されることになります。（PCの画面共有も必要です。）\n* ID（パスポート等の身分証明書）が必要\n* 静かな隔離された場所（部屋）が必要\n    * 試験中に他の人が立ち入らない場所である必要があります。\n    * 試験開始前に机の上や部屋の中をカメラを使用して試験官に見せる必要があります。\n* 試験中に参照して良いWebサイトがいくつかある（具体的にはCandidate Handbookを参照）。\n\nなお、合格基準は 67%の正解です。\n\n# 受験のきっかけ・目的\n\nThe Linux Foundationから[Kubernetes Security Essentials（LFS260）](https://training.linuxfoundation.org/ja/training/kubernetes-security-essentials-lfs260/)というe-LearningのコースとCKSの受験チケットのバンドル（セット）を、199ドル(USD)で購入しないかというメールが送られてきたのが、きっかけでした。[CKA](https://training.linuxfoundation.org/ja/certification/certified-kubernetes-administrator-cka/)と[CKAD](https://training.linuxfoundation.org/en/certified-kubernetes-application-developer-ckad/)には、2020年1月に既に合格しており、そのCKAの合格者にメールが送られてきたものだと推測しています。\n前職では、Kubernetesに関連してコンテナ・セキュリティやコンテナ・ランタイムについて取り組むこともあったので、それらの知識・スキルを試したいと思い、そのセットを購入して受験しました。\n\n# 学習方法\n\nせっかく学習コースとのセットを購入したということと知識の最新化を図るために、学習コース（LFS260）を一通り学習しました。期間は約1ヶ月です。\n\n設定などを試す環境（Kubernetesクラスタ）は、AWSで構築しました。EC2のt3.largeインスタンスをスポットインスタンスで2つ起動して、それぞれmasterとworker nodeとしました。料金は、1インスタンス1時間当たり数セントですので、ほとんど利用料金をかけずに試すことができました。なお、学習コース（LFS260）には、masterとworker nodeを構築するためのスクリプトが付属していますので、それを使うと簡単に構築できると思います。\n\n# 結果\n\n**合格**\n\n試験の結果は、受験から36時間以内にメールで通知されることとなっており、実際にその時間内に通知が来ました。\n\n# 所感\n\n私はなんとか合格しましたが、正直にいうと難しい試験だと思います。\n　学習コース（LFS260）はあるのですが、その学習範囲を超えるような出題がされていると感じました。つまり、学習コースを一通りやるだけでは不充分だと思います。普段から構築・運用や操作を行ない、少し広い範囲の知識を身に付ける必要があるのではないかと思います。\n　また、問題の中にはどうやって設定すれば良いのか分からないような悩むものもありました。そういう場合は、その問題は諦めて別の問題を解くなどの判断が必要とされると感じました。\n　あと、CKAが前提となっているので、CKAで問われるようなスキルは当然できるものという前提で設問がされています。CKAの範囲も復習しておくと良いのではないかと思います。\nCKA、CKADと共通で言えることだと思いますが、それぞれ試験中に参照しても良いWebサイト（Kubernetes公式サイトのドキュメント等）があるので、こういうことをやりたい場合にはどのページを参照すべきか調べておくといった事前準備を必ずするべきだと思います。\n　CKSの資格の有効期間は2年間となっています。CKAやCKADの3年間と違い、少し短いのが残念ですが、セキュリティ関係の機能やコンポーネントは、まだまだ発展が見込まれて、いろいろと変化が予想されるので仕方がないと感じています。\n\n※ 2021年3月現在の情報に基づいて記載しております。受験の際は必ず公式サイト等で最新の情報をご確認ください。\n","user":"takanattie","created_at":"2021-03-28T16:59:52+09:00","updated_at":"2021-03-28T17:10:49+09:00"},{"url":"https://qiita.com/ji-miya/items/b401a71fd8c917bbc06d","title":"JavaとJavaScriptの違い","body":"#JavaとJavaScriptの違い\n\nまずJavaとJavaScriptは全く違うプログラミング言語です。そもそもこの二つの言語は違う目的で使われます。\n\n#Javaとは\n\njavaは環境に依存せずに開発を行えます。そしてJavaはシステム開発、Web開発、アプリケーション開発と、使える場面が多岐にわたり、さまざまな開発に利用されています。\n\n#JavaScriptとは\n\nWebページの見栄えをよくしたいユーザーが使用して、主にデザインや簡易的な処理をブラウザ上のみで行えるようにした言語。\n\nJavaScriptの特徴は、あまりプログラミングの知識もなく、開発環境がそろっていなくても手軽に始めることができる点です。\n\n# 具体的にどう違うか？\n\n#1 開発した会社が違う\n\nそもそも開発した会社は違うのでその目的や文法、利用される分野も異なります。\n\n#2 目的が違う\n\nJavaは「Write Once, Run Anywhare（一度プログラムを書けば、どんなハードウェアでも動作する）」ことを目指して開発されました。\n\nJavaScriptは、容易に開発できる手軽さと素早さを求めて開発されています。\n\n#3 文法が違う\n\nJavaは、コンパイル（コンピュータが処理できる形に翻訳）が必要ですが、JavaScriptはコンパイルが必要ありません。\n\n#4 利用される分野が違う\n\nJavaは業務システムやTwitterなどのWebサービス、スマートフォン用（Android）向けアプリなどを開発することができます。\n\nJavaScriptは、Webブラウザ上で色を変えたり、ポップアップ表示をさせるといった動きがあるWebページを開発する際に主に使われています。\n\n\n#どちらの言語を選べばいいのか\n\n業務システムやアプリ開発をしたいならJava、WebサイトやWebサービスを作りたいならJavaScriptです。また、JavaもJavaScriptも難しいプログラミング言語になるので安易に手を出すのではなく、その他自身の用途にあった言語を学ぶことをおすすめします。\n","user":"ji-miya","created_at":"2021-03-28T16:59:09+09:00","updated_at":"2021-03-28T16:59:09+09:00"},{"url":"https://qiita.com/ndj/items/296b53fbf37b3200dec7","title":"Gatsby.js で material-ui を使用する際は、プラグインを設定する必要がある。","body":"# Gatsby.js で material-ui を使用する際の手順\n\nこんにちは、@ndj です。\n現在、Gatsby.js でブログみたいなものを作成しています。\nデザインをすべて自前の CSS で作ると、無限に時間がかかってしまうことがこの間判明したので、UIフレームワークとして material-ui を使用することにしました。\n\nいろいろ調べたところ、Gatsby.js で material-ui を使用する際は、単に `yarn add @material-ui/core` すればよいわけではなさそうなことが分かったので、備忘録的に記事に残しておきます。\n\n## 結論\n\n- material-ui をインストールする\n- gatsby-plugin-material-ui をインストールする\n- gatsby-config.js に記述を追加する\n\n## material-ui をインストールする\n\nまずは、material-ui をインストールします。\n\n```\nyarn add -D @material-ui/core\n```\n\n## gatsby-plugin-material-ui をインストールする\n\n次に、gatsby-plugin-material-ui をインストールする必要があるみたいです。\n\n```\nyarn add -D gatsby-material-ui \n```\n\n## gatsby-config.js に記述を追加する\n\n最後に、gatsby-config.js の plugin に以下のように記述を追加します。\n\n```gatsby-config.js\nmodule.exports = {\n    plugins: [`gatsby-plugin-material-ui`],\n}\n```\n\n以上で、導入は完了です。\n最後にテストとして、ヘッダーを作ってみます。\n\n## テスト\n\n```header.js\nimport React from 'react';\nimport { AppBar, Toolbar, Typography } from '@material-ui/core';\n\nconst Header = () => {\n    return (\n        <AppBar position=\"static\">\n            <Toolbar>\n                <Typography>TEST</Typography>\n            </Toolbar>\n        </AppBar>\n    );\n}\n\nexport default Header;\n```\n\n```index.js\nimport React from \"react\"\nimport Header from '../components/header';\n\nexport default function Home() {\n  return (\n    <React.Fragment>\n      <Header />\n    </React.Fragment>\n  );\n}\n```\n\n![スクリーンショット 2021-03-28 165635.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/485313/6f164fc9-9022-4091-0d97-803e8268556a.png)\n\nできてるっぽいです。\n意外と導入簡単だったかもしれない。\n\n## 参考\n[GajiLabo++ blog: GatsbyJS でUIフレームワーク Material-UI を使用する](https://blog.gaji.jp/2020/10/26/5405/)\n\n## さいごに\n閲覧ありがとうございました。\n誤字脱字、間違いご指摘などございましたら、コメントでご指摘くださるとありがたいです。\nフレームワークってべんり。\n\n[twitter: ndj](https://twitter.com/teqndj)\n","user":"ndj","created_at":"2021-03-28T16:57:42+09:00","updated_at":"2021-03-28T16:57:42+09:00"},{"url":"https://qiita.com/shogoden/items/82bd82d4583a36ff9491","title":"Rubyのyieldとtapとthen","body":"## はじめに\nこないだrubyの`then`(`yield_self`のエイリアス)を使ったら、\n「`then`が良くわからない」と質問がありました。\n自分も昔、躓いた気がするので\nrubyの`yield`と`tap`と`then`をまとめておきます。\n\n## yieldとは？\n簡単に言うと、「メソッドに渡されたブロックを実行できる」ものです。\n(ブロックは `do ~ end`の処理の塊です)\n\n### yieldのサンプル\n簡単なサンプルを作ってみました。\n\n```ruby\n# 適当なメソッドを定義。中でyieldを実行\ndef execute_yield\n  yield\nend\n\n# ブロックをメソッドに渡す\nexecute_yield do\n  puts \"Hello World\"\nend\n```\nirbなどで実行すると、以下のような出力がされます。\n\n```ruby\nHello World\n=> nil\n```\nこれは`execute_yield`メソッドに渡されたブロック(do ~ endの塊)が、\n`yield`によって呼び出されたためです。\n\nなので、メソッドの中でyieldがあったら、\n**「あ、このメソッドに渡されてるブロックを実行してるんだな」**と思ってください。\n:warning: 記事が理解できたら、公式ドキュメントとか他のものも見てください。\n\n### block_given?\nちなみに、メソッドでyieldを使ってるのに、メソッドにブロックが渡されていないと、怒られます\n\n```ruby\n# さっき作ったメソッドをブロック(do~endの塊)なしで呼び出してみる\nexecute_yield\nLocalJumpError (no block given (yield))\n```\n時々、「ブロックが渡されているか」で分岐させたいときがあります。\nそんなときは、`block_given?`メソッドが使えます。\nさっき作ったメソッドを、以下のように書き換えてみましょう\n\n```ruby\ndef execute_yield\n  if block_given?\n    yield\n  else\n    puts \"No block!!\"\n  end\nend\n```\nそれぞれ、以下のような出力がされるはずです。\n\n```ruby\n# ブロックあり\nexecute_yield do\n  puts \"Hello World\"\nend\n# ブロックがあるときは、ブロックのputs \"Hello World\"が実行される\nHello World\n=> nil\n\n# ブロックなし\nexecute_yield\n# No block!!が表示される\nNo block!!\n=> nil\n```\n\n## tap\n### 公式ドキュメント\nとりあえず、まずは公式ドキュメントです。\n\nhttps://docs.ruby-lang.org/ja/latest/method/Object/i/tap.html\n\n### tapとは？\n公式ドキュメントより抜粋\n>self を引数としてブロックを評価し、self を返します。\n\n良く分からなくなってきましたね！\n実装のイメージはこんな感じのハズです。\n\n```ruby\ndef tap(&block) # selfを引数\n  yield(self) # ブロックを評価(実行)\n  self # selfを返す\nend\n```\n(他の記事や、Cで書かれたRubyを、Rubyで再実装している、[rubiniusのコード](https://github.com/rubinius/rubinius/blob/387c488798d8b911f160d36278710474e526d73f/core/kernel.rb#L924-L927)的にも合っているはずです)\n\n日本語はややこしいですが、してることは単純で、\n「yield(渡されたブロックを実行)して、self(レシーバ)を返す」です。\n\n### サンプル\ntapの小さめのサンプルを作ってみました。\n\n```ruby\n\"hoge\".tap do |string| \n  # 小文字を大文字に変換\n  p string.upcase\nend\n\"HOGE\" # pで出力される \"HOGE\"\n=> \"hoge\" # メソッドの返り値\n```\n\n`tap`は中で`yield`を呼び出します。\n`yield`なので、ブロック(do~endの間)で渡している`string.upcase`を実行。「\"HOGE\"」が出力されます。\nただし、tapの返り値はselfなので、メソッドで返されるのは\n`\"hoge\".tap`の「\"hoge\"」です。\n\n### 使いみち\nメソッドチェーンするときのデバッグなどに使えます。\n公式ドキュメントのサンプルをそのまま流すと、途中でputsされているのが分かって\n分かりやすいですね。(公式ドキュメントが正義)\n\n```ruby\n# tapで長くなってますが、していることは、\n# 配列にして、偶数だけ取って、二乗してるだけです。\n(1..10).tap {|x| puts \"original: #{x}\" }.\n        to_a.tap {|x| puts \"array:    #{x}\" }.\n        select {|x| x.even? }.tap {|x| puts \"evens:    #{x}\" }.\n        map {|x| x*x }.tap {|x| puts \"squares:  #{x}\" }\n# 出力結果と返り値\noriginal: 1..10\narray:    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nevens:    [2, 4, 6, 8, 10]\nsquares:  [4, 16, 36, 64, 100]\n=> [4, 16, 36, 64, 100]\n```\n\n## then(yield_self)とは？\n実はここまで理解してれば超簡単です。\n:warning: ruby2.5以降。エイリアスの`then`は2.6以降でしか使えません。\n以下を参照\n\nhttps://bugs.ruby-lang.org/issues/6721\n\n`tap`はyieldして、selfを返していましたが、`then`はyieldの結果を返します。\n### サンプル\n同じようなサンプルを使います。\n\n```ruby\n\"hoge\".then do |string| \n  # 小文字を大文字に変換\n  p string.upcase\nend\n\"HOGE\" # pで出力される \"HOGE\"\n=> \"HOGE\" # メソッドの返り値\n```\n返り値がブロックの実行結果(\"HOGE\")になっています。\n凄い手抜きぽくなっていますが、\n`tap`との違いは、\n- レシーバを返すか？\n- ブロックの実行結果を返すか？\nです。\n\n## 最後に\n「何番煎じなんだ？」という記事ですが、\n「yieldとは？」「tapとthenの比較」とかあるのに、まとめたものはイマイチない(気がした)\n業務では、唐突に出てきた`then`を調べるが、そもそも`yield`が分からなくて詰む。\n\nということが、昔の自分はあったのでまとめてみました。\nそれぞれの良さは、別の記事を見てみてください。\n個人的には、どれも多用すべきじゃないと思う...\n","user":"shogoden","created_at":"2021-03-28T16:56:03+09:00","updated_at":"2021-03-28T17:12:27+09:00"},{"url":"https://qiita.com/kilalabu/items/f3aa8d18298ac34075f3","title":"【続】Codelabsの通知機能の実装をViewModelを使って書き換えてみた","body":"[前回](https://qiita.com/kilalabu/items/ca420f2346635efe19a8)の続き\n[タスク2：通知を更新またはキャンセルする](https://developer.android.com/codelabs/android-training-notifications#3)を参考に通知機能を実装してみた。\n\n|update|cancel|\n|----|----|\n|![update.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/670405/ddf7246f-4f77-603f-5f7c-55e59e389192.gif)|![cancel.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/670405/8e69d8c0-2261-e0aa-f122-5104baf70390.gif)|\n\n## 実装\n### layout\n`android:enabled`でボタン操作をコントロール\n`true`のときボタンが押せる\n`false`のときボタンが押せない\n\n```xml:activity_main.xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<layout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    tools:context=\".MainActivity\">\n\n    <data>\n        <variable\n            name=\"viewModel\"\n            type=\"com.example.samplenotification.NotificationViewModel\" />\n    </data>\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\">\n\n        <Button\n            android:id=\"@+id/notify\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Notify Me!\"\n            app:layout_constraintBottom_toTopOf=\"@+id/update\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            android:enabled=\"@{viewModel.sendButtonEnabled}\"\n            android:onClick=\"@{(v) -> viewModel.sendNotification()}\"/>\n\n        <Button\n            android:id=\"@+id/update\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Update Me!\"\n            app:layout_constraintBottom_toTopOf=\"@+id/cancel\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@+id/notify\"\n            android:enabled=\"@{viewModel.updateButtonEnabled}\"\n            android:onClick=\"@{(v) -> viewModel.updateNotification()}\"/>\n\n        <Button\n            android:id=\"@+id/cancel\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:text=\"Cancel Me!\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toBottomOf=\"@+id/update\"\n            android:enabled=\"@{viewModel.cancelButtonEnabled}\"\n            android:onClick=\"@{(v) -> viewModel.cancelNotification()}\"/>\n\n    </androidx.constraintlayout.widget.ConstraintLayout>\n</layout>\n```\n### ViewModel\n#### ボタンコントロールの設定\n```java:ViewModel抜粋\npublic class NotificationViewModel extends BaseObservable {\n    \n    public boolean sendButtonEnabled = true; // 起動時はsendボタンのみ押せるようにする\n    public boolean updateButtonEnabled;\n    public boolean cancelButtonEnabled;\n\n    @Bindable public boolean isSendButtonEnabled() {\n        return sendButtonEnabled;\n    }\n\n    public void setSendButtonEnabled(boolean sendButtonEnabled) {\n        this.sendButtonEnabled = sendButtonEnabled;\n        notifyPropertyChanged(BR.sendButtonEnabled);\n    }\n\n    @Bindable public boolean isUpdateButtonEnabled() {\n        return updateButtonEnabled;\n    }\n\n    public void setUpdateButtonEnabled(boolean updateButtonEnabled) {\n        this.updateButtonEnabled = updateButtonEnabled;\n        notifyPropertyChanged(BR.updateButtonEnabled);\n    }\n\n    @Bindable public boolean isCancelButtonEnabled() {\n        return cancelButtonEnabled;\n    }\n\n    public void setCancelButtonEnabled(boolean cancelButtonEnabled) {\n        this.cancelButtonEnabled = cancelButtonEnabled;\n        notifyPropertyChanged(BR.cancelButtonEnabled);\n    }\n\n}\n```\n#### 更新通知の定義\n```java:ViewModel抜粋\n    public void updateNotification() {\n        // 画像ファイルをビットマップに変換。 \n        // 外部に既に存在している画像ファイルを読み込むには「BitmapFactory」クラスを利用する。\n        Bitmap androidImage = BitmapFactory.decodeResource(view.getContext().getResources(), R.drawable.mascot_1);\n\n        NotificationCompat.Builder notifyBuilder = getNotificationBuilder();\n        // 通知ビルダーの設定内容を上書きする\n        // BigPictureStyleは、NotificationCompat.Styleのサブクラス。通知の代替レイアウトを提供する。\n        notifyBuilder.setStyle(new NotificationCompat.BigPictureStyle()\n                .bigPicture(androidImage)\n                .setBigContentTitle(\"通知更新！\"))\n                .setContentText(\"本文が更新されました\");\n\n        // 通知を送信する\n        mNotifyManager.notify(NOTIFICATION_ID, notifyBuilder.build());\n        // updateボタンを押せなくさせる\n        setUpdateButtonEnabled(false);\n    }\n```\n#### キャンセルの定義\n```java:ViewModel抜粋\n    public void cancelNotification() {\n        // IDに紐づく通知をキャンセルする\n        mNotifyManager.cancel(NOTIFICATION_ID);\n\n        // 各ボタンのコントロール\n        setSendButtonEnabled(true);\n        setUpdateButtonEnabled(false);\n        setCancelButtonEnabled(false);\n    }\n```\n#### ViewModel全文\n```java:NotificationViewModel.java\npublic class NotificationViewModel extends BaseObservable {\n\n    // チャネル ID　全てのチャネルはパッケージ内で一意のIDに関連付ける\n    private static final String PRIMARY_CHANNEL_ID = \"primary_notification_channel\";\n    // PendingIntentに渡す通知id(requestCode)。 通知作成,更新または削除する場合に必要になるため、通知IDは必ず保存する。\n    private static final int NOTIFICATION_ID = 0;\n    // 通知処理を管理してくれるオブジェクト\n    private NotificationManager mNotifyManager;\n    private NotificationView view;\n\n    public boolean sendButtonEnabled = true;\n    public boolean updateButtonEnabled;\n    public boolean cancelButtonEnabled;\n\n    public void setView(NotificationView view) {\n        this.view = view;\n    }\n\n    @Bindable public boolean isSendButtonEnabled() {\n        return sendButtonEnabled;\n    }\n\n    public void setSendButtonEnabled(boolean sendButtonEnabled) {\n        this.sendButtonEnabled = sendButtonEnabled;\n        notifyPropertyChanged(BR.sendButtonEnabled);\n    }\n\n    @Bindable public boolean isUpdateButtonEnabled() {\n        return updateButtonEnabled;\n    }\n\n    public void setUpdateButtonEnabled(boolean updateButtonEnabled) {\n        this.updateButtonEnabled = updateButtonEnabled;\n        notifyPropertyChanged(BR.updateButtonEnabled);\n    }\n\n    @Bindable public boolean isCancelButtonEnabled() {\n        return cancelButtonEnabled;\n    }\n\n    public void setCancelButtonEnabled(boolean cancelButtonEnabled) {\n        this.cancelButtonEnabled = cancelButtonEnabled;\n        notifyPropertyChanged(BR.cancelButtonEnabled);\n    }\n\n    // 通知チャネル作成（ユーザーが通知設定をカスタマイズできるようにする）\n    public void createNotificationChannel() {\n        mNotifyManager = (NotificationManager) view.getContext().getSystemService(NOTIFICATION_SERVICE);\n\n        // Android 8.0（APIレベル26）より古いデバイスはカスタマイズできない。逆にAndroid8.0（APIレベル26）以上は作成しないとクラッシュする。\n        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {\n            NotificationChannel notificationChannel = new NotificationChannel(PRIMARY_CHANNEL_ID, \"お知らせ\", NotificationManager.IMPORTANCE_HIGH);\n\n            // 通知機能の初期設定\n            notificationChannel.enableLights(true);\n            notificationChannel.setLightColor(Color.RED);\n            notificationChannel.enableVibration(true);\n            notificationChannel.setDescription(\"お知らせの説明\");\n\n            mNotifyManager.createNotificationChannel(notificationChannel);\n        }\n    }\n\n    // 送信する通知内容を定義\n    private NotificationCompat.Builder getNotificationBuilder() {\n\n        PendingIntent notificationPendingIntent = view.getNotificationContentIntent(NOTIFICATION_ID);\n\n        // 通知ビルダー(チャネル ID の指定を必要とするコンストラクタ)の初期設定をする\n        NotificationCompat.Builder notifyBuilder = new NotificationCompat.Builder(view.getContext(), PRIMARY_CHANNEL_ID)\n                .setContentTitle(\"通知されました\")\n                .setContentText(\"ここは本文です\")\n                .setSmallIcon(R.drawable.ic_android)  // 通知アイコンの設定\n                .setContentIntent(notificationPendingIntent) // ユーザーが通知をタップしたときに起動するインテント\n                .setAutoCancel(true) // ユーザーが通知をタップしたときに通知を閉じる\n                // 以下、Android 8.0（APIレベル26）より古いデバイスに対しての設定\n                .setPriority(NotificationCompat.PRIORITY_HIGH) // 通知の優先度を設定。通知が複数あったとき優先度の高い通知から上に並べられる\n                .setDefaults(NotificationCompat.DEFAULT_ALL); // 通知の音、バイブレーション、LEDの色パターンをデフォルト値に設定\n        return notifyBuilder;\n    }\n\n    public void sendNotification() {\n        NotificationCompat.Builder notifyBuilder = getNotificationBuilder();\n        mNotifyManager.notify(NOTIFICATION_ID, notifyBuilder.build());\n        setSendButtonEnabled(false);\n        setUpdateButtonEnabled(true);\n        setCancelButtonEnabled(true);\n    }\n\n    public void updateNotification() {\n        // ビットマップに変換。 外部に既に存在している画像ファイルを読み込むには「BitmapFactory」クラスを利用する。\n        Bitmap androidImage = BitmapFactory.decodeResource(view.getContext().getResources(), R.drawable.mascot_1);\n\n        NotificationCompat.Builder notifyBuilder = getNotificationBuilder();\n        // 通知ビルダーの設定内容を上書きする\n        // BigPictureStyleは、NotificationCompat.Styleのサブクラス。通知の代替レイアウトを提供する。\n        notifyBuilder.setStyle(new NotificationCompat.BigPictureStyle()\n                .bigPicture(androidImage)\n                .setBigContentTitle(\"通知更新！\"))\n                .setContentText(\"本文が更新されました\");\n\n        mNotifyManager.notify(NOTIFICATION_ID, notifyBuilder.build());\n        setUpdateButtonEnabled(false);\n    }\n\n    public void cancelNotification() {\n        mNotifyManager.cancel(NOTIFICATION_ID);\n        setSendButtonEnabled(true);\n        setUpdateButtonEnabled(false);\n        setCancelButtonEnabled(false);\n    }\n}\n```\n### Interface（前回と同じ）\n```java:NotificationView\npublic interface NotificationView {\n\n    PendingIntent getNotificationContentIntent(int notificationId);\n\n    Context getContext();\n}\n```\n\n### Activity（前回と同じ\b）\n```java:MainActivity.java\npublic class MainActivity extends AppCompatActivity implements NotificationView{\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        ActivityMainBinding binding = DataBindingUtil.setContentView(this, R.layout.activity_main);\n        NotificationViewModel notificationViewModel = new NotificationViewModel();\n\n        // ViewModelにActivityのViewを紐付ける\n        notificationViewModel.setView(this);\n        // xmlのviewModelにNotificationViewModelを紐付ける\n        binding.setViewModel(notificationViewModel);\n\n        // 通知チャネル作成\n        notificationViewModel.createNotificationChannel();\n\n    }\n\n    // PendingIntentを使用すると、Android通知システムがコードに代わって割り当てられたアクションを実行してくれる。\n    @Override\n    public PendingIntent getNotificationContentIntent(int notificationId) {\n        Intent notificationIntent = new Intent(this, MainActivity.class);\n        // PendingIntentの作成にはコンテンツインテント(アクティビティを起動するインテント)と通知idが必要\n        PendingIntent notificationPendingIntent = PendingIntent.getActivity(this,\n                notificationId, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);\n        return notificationPendingIntent;\n    }\n\n    @Override\n    public Context getContext() {\n        return this;\n    }\n}\n```\n\n## 参考サイト\nhttps://developer.android.com/codelabs/android-training-notifications?index=..%2F..%2Fandroid-training#3\n","user":"kilalabu","created_at":"2021-03-28T16:54:23+09:00","updated_at":"2021-03-28T16:54:23+09:00"},{"url":"https://qiita.com/Tomonorarari/items/84f4342ea3f07b37c018","title":"ECSを使って3D弾幕シューティングを作ろうとした際に詰まったところと解決方法","body":"#目次\n**1.環境**\n**2.作っているもの**\n**3.詰まったところと解決方法**\n**4.参考URL**\n \n##1.環境\nUnityVersion:2019.4.17f1\n導入Package\n-Burst 1.3.0\n-Entities 0.11.1\n-Jobs 0.2.10\n-Hybrid Renderer 0.5.2\n-Unity Physics 0.4.1\n\n\n##2.作っているもの\n東方Projrctの2D弾幕シューティングを3Dにしてみよう！って感じで製作中です。\n今は最大約9万個の弾を制御しFPSを60以上を保ちながら実行できるようになっています。\n![2w.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1210726/a50b2d0d-b9d9-8f34-80cf-29f8b1bfd4c0.png)\n![4w.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1210726/b792612e-7100-719c-3a67-5b511b586552.png)\n\n\n##3.詰まったところと解決方法\n**1.Entityに変換したオブジェクトが出ない！**\n└`Hybrid Renderer` の導入を忘れていた！\n**2.Unity Physicsで当たり判定を実装したら動作が重すぎた！**\n  └1.`Physics Shape`の`CollisionResposns`を `Raise Trigger Events`に変更\n※私の作っているものでは当たったかどうかだけでよかったので`Trigger Events`にしました。\n![スクリーンショット (99).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1210726/990f6d76-27d5-c6c9-db73-8532130ef65b.png)\n　2.CollisionResposns 変更に伴いスクリプトの変更 \n　下の画像の赤丸の部分を `ICollisonEventsJob`から`ITriggerEventsJob`に変更し、`CollisonEvents`から`TriggerEvents`に変更。\n![スクリーンショット (101).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1210726/556d6677-1dd3-e539-b963-462e8880f3cd.png)\n　3.`Physics Shape`の`Collision Filter`設定\n![スクリーンショット (100).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1210726/3e1836bc-d7e5-66db-f908-23beace255fe.png)\n　`Belongs To`・・・そのオブジェクトの所属するコライダーグループ\n　`Collides With`・・・そのオブジェクトと衝突するコライダーグループ\n　これらを設定することで30FPSも出なかったものが90FPSで動くようになりました。\n\n**3.シーン遷移時にEntityが残ってしまう!**\n　└遷移前にEntityManagerクラスの `public void DestroyEntity(NativeArray<Entity> entities)`でEntityをすべて破棄することで解決。同クラスの`public NativeArray<Entity> GetAllEntities(Allocator allocator = null)`ですべてのEntityを取得することができるので組み合わせて全部破棄できました。\n\n**4.参考URL**\n[Unity Scripting API:Unity.Entities](https://docs.unity3d.com/Packages/com.unity.entities@0.0/api/Unity.Entities.html)\n[Unity Manual:Unity Physics](https://docs.unity3d.com/Packages/com.unity.physics@0.4/manual/index.html)\n\nDOTSを触り始めて1,2カ月ほどの初心者なので間違っていることろなどがあると思いますので、指摘いただけると助かります！\n何かの参考になれば幸いです。\n","user":"Tomonorarari","created_at":"2021-03-28T16:46:31+09:00","updated_at":"2021-03-28T16:46:31+09:00"},{"url":"https://qiita.com/mahoutsukaino-deshi/items/5c61d6ab8e7fd6a4a1d8","title":"日経平均株価の変化率の分布を調べる","body":"# はじめに\n\n前回の投稿でScipyを使用してpingの応答時間の分布を確認しました。\n結果として、指数分布だと思っていた分布が対数正規分布によりフィットする結果となりました。どの分布に従うかは、見た目だけで判断できないことがわかります。\n[Scipyで処理時間の分布を確かめる](https://qiita.com/mahoutsukaino-deshi/items/f2059883f4ee5c32a362)\n\n本来は理論から「これこれこうだからこの分布に従うはず」と仮説を立て、実測値と比較して検証できれば良いのですが、そのような知識を残念ながら持ち合わせていません。どうすればよいのか調べていたところ、下記の記事を見つけました。これなら理論を導き出す知識がなくても、フィットする分布を見つけられそうです。\n[とりあえず経験分布になんらかのモデルをフィットさせたい Python/Scipy](https://qiita.com/AtomJamesScott/items/bcc0f8836b07be7ba8f9)\n\n本記事では、日経平均株価の変化率の分布を調べてみようと思います。\n\n# 日経平均株価の取得\n\nまずは日経平均株価の取得です。\n株価の取得はpandas_datareaderを使用して米国のYahoo!Financeから取得しています。\n2011年から2020年の10年分の株価を取得してみます。\n\n```python\nimport pandas_datareader\nimport datetime\n\nticker = \"^N225\"\nstart_date = datetime.date(2011, 1, 1)\nend_date = datetime.date(2020, 12, 31)\n\ndf = pandas_datareader.data.DataReader(\n    ticker, 'yahoo', start_date, end_date)\n```\n調整済み終値を使って10年間の株価の推移をグラフにしてみます。\n\n```python\nimport matplotlib.pyplot as plt\n\ndf[\"Adj Close\"].plot()\nplt.show()\n```\n2011年は10000円くらいだった株価が、2020年には27500円くらいまであがってます。\n\n![N225.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1106967/f07f889a-6400-1316-2e36-b33b0ea62f78.png)\n\n# 変化率の分布\n\nでは、変化率のヒストグラムを作成してみます。\n\n```python\ndf[\"pct_change\"] = df[\"Adj Close\"].pct_change()\ndf[\"pct_change\"].plot.hist(bins=50)\nplt.show()\n```\n![stock_distribution.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1106967/e676d337-f781-f98b-10d7-123ac9c0364b.png)\n\n左右対称の釣り鐘型のグラフになりました。正規分布よりも尖度が大きそうです。\nさて、これは何分布でしょうか？\n\n# 分布のフィッティング\n\nでは、下記記事を真似して分布の種類を一つずつフィッティングしてきます。\n[とりあえず経験分布になんらかのモデルをフィットさせたい Python/Scipy](https://qiita.com/AtomJamesScott/items/bcc0f8836b07be7ba8f9)\n\nまずはbest_fit_distribution関数です。オリジナルから少し修正しています。\n\n```python\nimport numpy as np\nfrom scipy import stats\nimport warnings\n\ndef best_fit_distribution(data, bins=50, ax=None):\n    \"\"\"Model data by finding best fit distribution to data\"\"\"\n    # データからヒストグラムを作成する\n    y, x = np.histogram(data, bins=bins, density=True)\n    x = (x + np.roll(x, -1))[:-1] / 2.0\n\n    # 以下の分布でフィッティングする\n    DISTRIBUTIONS = [\n        stats.alpha,\n        stats.anglit,\n        stats.arcsine,\n        stats.beta,\n        stats.betaprime,\n        stats.bradford,\n        stats.burr,\n        stats.cauchy,\n        stats.chi,\n        stats.chi2,\n        stats.cosine,\n        stats.dgamma,\n        stats.dweibull,\n        stats.erlang,\n        stats.expon,\n        stats.exponnorm,\n        stats.exponweib,\n        stats.exponpow,\n        stats.f,\n        stats.fatiguelife,\n        stats.fisk,\n        stats.foldcauchy,\n        stats.foldnorm,\n        stats.frechet_r,\n        stats.frechet_l,\n        stats.genlogistic,\n        stats.genpareto,\n        stats.gennorm,\n        stats.genexpon,\n        stats.genextreme,\n        stats.gausshyper,\n        stats.gamma,\n        stats.gengamma,\n        stats.genhalflogistic,\n        stats.gilbrat,\n        stats.gompertz,\n        stats.gumbel_r,\n        stats.gumbel_l,\n        stats.halfcauchy,\n        stats.halflogistic,\n        stats.halfnorm,\n        stats.halfgennorm,\n        stats.hypsecant,\n        stats.invgamma,\n        stats.invgauss,\n        stats.invweibull,\n        stats.johnsonsb,\n        stats.johnsonsu,\n        stats.ksone,\n        stats.kstwobign,\n        stats.laplace,\n        stats.levy,\n        stats.levy_l,\n        # stats.levy_stable, ← 計算が終わらないのでコメントアウト\n        stats.logistic,\n        stats.loggamma,\n        stats.loglaplace,\n        stats.lognorm,\n        stats.lomax,\n        stats.maxwell,\n        stats.mielke,\n        stats.nakagami,\n        stats.ncx2,\n        stats.ncf,\n        stats.nct,\n        stats.norm,\n        stats.pareto,\n        stats.pearson3,\n        stats.powerlaw,\n        stats.powerlognorm,\n        stats.powernorm,\n        stats.rdist,\n        stats.reciprocal,\n        stats.rayleigh,\n        stats.rice,\n        stats.recipinvgauss,\n        stats.semicircular,\n        stats.t,\n        stats.triang,\n        stats.truncexpon,\n        stats.truncnorm,\n        stats.tukeylambda,\n        stats.uniform,\n        stats.vonmises,\n        stats.vonmises_line,\n        stats.wald,\n        stats.weibull_min,\n        stats.weibull_max,\n        stats.wrapcauchy,\n    ]\n\n    # [分布名,分布パラメータ,誤差]を格納するためのリスト\n    l = []\n\n    # 分布毎にそれぞれパラメータを推測してみる\n    for i, distribution in enumerate(DISTRIBUTIONS):\n        print(f\"{i+1}/{len(DISTRIBUTIONS)} {distribution.name: <20}\", end=\"\")\n\n        # 分布によってはフィットできないこともあるので、\n        # フィットできなければ、passする\n        try:\n            with warnings.catch_warnings():\n                warnings.filterwarnings('ignore')\n\n                # 分布をフィットさせる\n                params = distribution.fit(data)\n\n                # わかりやすい用にパラメータをばらばらにする\n                arg = params[:-2]\n                loc = params[-2]\n                scale = params[-1]\n\n                # フィットさせた確率密度関数を計算して、分布にフィットさせる\n                pdf = distribution.pdf(x, loc=loc, scale=scale, *arg)\n\n                # 残差平方和を誤差として計算する\n                sse = np.sum(np.power(y - pdf, 2.0))\n\n                print(f\"done sse={sse}\")\n\n                # l\n                l.append([\n                    distribution,\n                    params,\n                    sse,\n                ])\n        except Exception:\n            print(\"not fit\")\n\n    l.sort(key=lambda x: x[2])\n    return l\n```\n\nフィッティングします。\n\n```python\nx = df[\"pct_change\"].dropna().values \nfit_list = best_fit_distribution(x)\n```\nでは、順位の発表です。\n\n```python\nfor i, fit in enumerate(fit_list): \n    print(f\"{i+1} {fit[0].name}\")\n```\n\n```text:結果\n1 dweibull\n2 dgamma\n3 gennorm\n4 laplace\n5 johnsonsu\n6 t\n7 nct\n8 hypsecant\n9 tukeylambda\n10 burr\n11 genlogistic\n12 logistic\n13 foldcauchy\n14 cauchy\n15 exponnorm\n16 powerlognorm\n17 powernorm\n18 exponweib\n19 loggamma\n20 johnsonsb\n21 pearson3\n22 beta\n23 lognorm\n24 foldnorm\n25 norm\n26 gengamma\n27 rice\n28 fatiguelife\n29 chi\n30 nakagami\n31 invgamma\n32 alpha\n33 recipinvgauss\n34 invgauss\n35 chi2\n36 frechet_r\n37 weibull_min\n38 frechet_l\n39 weibull_max\n40 gumbel_l\n41 gompertz\n42 invweibull\n43 gumbel_r\n44 exponpow\n45 betaprime\n46 fisk\n47 loglaplace\n48 kstwobign\n49 triang\n50 maxwell\n51 gausshyper\n52 rayleigh\n53 halfgennorm\n54 genhalflogistic\n55 genexpon\n56 powerlaw\n57 mielke\n58 ksone\n59 uniform\n60 bradford\n61 wald\n62 truncexpon\n63 gilbrat\n64 levy_l\n65 halfnorm\n66 halflogistic\n67 lomax\n68 halfcauchy\n69 levy\n70 pareto\n71 expon\n72 ncf\n73 genpareto\n74 anglit\n75 cosine\n76 rdist\n77 semicircular\n78 vonmises_line\n79 genextreme\n80 ncx2\n81 arcsine\n82 erlang\n83 gamma\n84 f\n85 reciprocal\n86 truncnorm\n87 vonmises\n88 wrapcauchy\n```\n\nベスト5は下記となりました。\n\n1. dweibull\n2. dgamma\n3. gennorm\n4. laplace\n5. johnsonsu\n\npdf(確率密度)を計算する関数を準備して、56位までをグラフ化してみます。\n\n```python\ndef make_pdf(distribution, params, start, end, size=500):\n    arg = params[:-2]\n    loc = params[-2]\n    scale = params[-1]\n    x = np.linspace(start, end, size)\n    y = distribution.pdf(x, loc=loc, scale=scale, *arg)\n    return x, y\n```\n\n```python\nCOL_NUM = 4\nfl = fit_list[0:56]\nfig, axes = plt.subplots(math.ceil(len(fl) / COL_NUM), COL_NUM,\n                         figsize=(10, 30), sharex=True, sharey=True, dpi=300)\nplt.subplots_adjust(top=0.95, bottom=0.05, hspace=0.5)\nfor i, fit in enumerate(fl):\n    distribution, params, sse = fit\n    x_fit, y_fit = make_pdf(distribution, params, min(x), max(x), bins)\n    ax, ay = divmod(i, COL_NUM)\n    axes[ax, ay].hist(x, bins=bins, density=True)\n    axes[ax, ay].plot(x_fit, y_fit)\n    axes[ax, ay].set_title(f\"No.{i+1} {distribution.name}\")\nplt.savefig(\"stock_distribution_result.png\")\n```\n\n![stock_distribution_result.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1106967/ef371d23-eda3-f235-6185-989fce8fb940.png)\n\n# 最後に\n\n今回の結果では、ベスト5は下記のようになりました。\n\n1. dweibull\n2. dgamma\n3. gennorm\n4. laplace\n5. johnsonsu\n\nここでは詳細を書きませんが、私の好きなAppleで同じ事を行ったところ、結果は\n\n1. tukeylambda\n2. johnsonsu\n3. t\n4. nct\n5. hypsecant\n\nとなりました。\n\n銘柄によってフィットする分布は違ってくるようです。\n\nソースは [GitHub](https://github.com/mahoutsukaino-deshi/stock-distibution) に置いています。\nこちらのソースでは柄名を引数で指定できるようにしています。\n","user":"mahoutsukaino-deshi","created_at":"2021-03-28T16:45:56+09:00","updated_at":"2021-03-28T16:59:57+09:00"},{"url":"https://qiita.com/mine820/items/c9d08a61a0fc15db2916","title":"Arduino Nano EveryでOLEDに文字を表示してみる","body":"# はじめに\nすでにそこらじゅうに情報はありますが、先日[Arduino Nano Every](https://store.arduino.cc/usa/nano-every-with-headers)を購入したので、環境構築を含め、OLEDに文字を表示するまでの手順を記録として残しておきます。\n\n# 準備\n使用する機材は以下の通り。\n- [Arduino Nano Every](https://store.arduino.cc/usa/nano-every-with-headers)\n- [0.96インチ　128x64ドット有機ELディスプレイ（OLED）](https://akizukidenshi.com/catalog/g/gP-12031/)\n- ブレッドボード\n- ジャンパーケーブル（4本）\n- PC（今回はWindows 10）\n- USBケーブル（Type-A（オス）～Type-C（オス））\n\n# 環境構築\n## ボードマネージャ\nまずArduinoIDEに環境を構築します。\n\nArduino Nano EveryはArduino Nanoから改良されているため、別途ボードを認識させる必要があります。\n「ツール」→「ボード」→「ボードマネージャ」から「Arduino megaAVR Boards」をインストールします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/136bebe8-12f1-8177-8e8c-5f55f53855e2.png)\n\nインストール後、Ardiono Nano EveryをPCと繋ぎ、「ボード」「Registers emulation」「シリアルポート」を設定します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/74e7e244-f241-48e2-d6fd-607a51d59440.png)\n\n## ライブラリマネージャ\n続いて、OLEDに文字を表示するため、ライブラリをインストールします。\n今回使用するOLEDのICはSSD1306なので、「スケッチ」→「ライブラリをインクルード」→「ライブラリを管理」から「Adafruit GFX Library」と「Adafruit SSD1306」をインストールします。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/eb0417a3-fe38-f253-3025-3e75e51ab70a.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/05e7095c-590a-2d35-00a7-afed59b21202.png)\n\n# 結線\nブレッドボードにArdiono Nano EveryとOLEDを挿し、結線します。\nとりあえず電圧は5Vを繋ぎ、あとはGNDとSCA、SCLをそれぞれ繋ぎます。\n\n| Ardiono Nano Every | OLED |\n|:---:|:---:|\n| +5V | VCC |\n| GND | GND |\n| SCA | SCA |\n| SCL | SCL |\n\n![pin assign](https://content.arduino.cc/assets/Pinout-NANOevery_latest.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/5b749fe0-801e-c4ca-5b7f-480a536a87a9.png)\n\n# サンプルプログラム\n「Hello World!」と表示するプログラムを実行してみます。\n\n```c\n#include<Wire.h>\n#include<Adafruit_GFX.h>\n#include<Adafruit_SSD1306.h>\n\nAdafruit_SSD1306 display(-1);\n\nvoid setup() {\n  // initialize\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n}\n\nvoid loop() {\n  // clear display\n  display.clearDisplay();\n\n  // set text parameter\n  display.setTextSize(1);\n  display.setTextColor(WHITE);\n\n  // set text position\n  display.setCursor(0, 0);\n\n  // display text\n  display.println(\"Hello\");\n  display.println(\"World!\");\n\n  // draw\n  display.display();\n  delay(1000);\n}\n```\n\nこれを実行すると、以下のように表示されます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/130771/6a5d55a9-780d-cfbe-db2e-36860048cf72.png)\n\n# まとめ\n非常に簡単に文字を表示することが出来ました。これで運用中（PCに繋いでいないとき）も値の確認が出来ます。\nこのOLEDは画像も表示できるのですが、その場合はちょっと工夫が必要になります。\nそれらもネット上に情報がありますので、そちらを参考にするのが良いかと思います。\n","user":"mine820","created_at":"2021-03-28T16:45:54+09:00","updated_at":"2021-03-28T17:28:19+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/7b1cef1fbbf65e6f6f90","title":"Udemyメモ「データサイエンティストを目指すあなたへ〜データサイエンス25時間ブートキャンプ〜」","body":"## 概要\n\n[【世界で34万人が受講】データサイエンティストを目指すあなたへ〜データサイエンス25時間ブートキャンプ〜 \\| Udemy](https://www.udemy.com/course/datascience365/)\n\n\n## データサイエンスとは\n\n### 分析と分析論の違い\n- 分析\n  - 過去に発生したデータについて、なぜ、どのように発生したかを説明\n- 分析論\n  - 過去の事象に対して、合理的な説明をすること\n    - 定性分析: 直感やビジネス上の経験を通じて説明\n    - 定量分析: 公式とアルゴリズムを通じて説明\n\n## データサイエンスのテクニック\n\n### 1: 従来データの扱い\n\n1. 生データ\n   - そのままの事実や初期データを示す処理前のデータ\n   - 分析用のデータとして扱わない\n   - サーバーに保存する前に加工してはいけない\n   - データコレクションとも呼ばれる\n2. データの前処理\n    - ラベリング ( アクセス数等の量的、都道府県等のカテゴライズ )\n    - クレンジング ( 入力ミス等の修正 )\n    - 欠損データの決め ( レコードを削除？、平均値で代替え？ )\n3. 特定ケース: データのバランシング\n    - 属性に着目してデータのバラツキを 50:50 へ\n    - ランダムに抽出 ( レコード全体から満遍なく )\n\n### 2: ビッグデータの扱い\n\n1. 生データ\n    - 従来データに準じるが、画像やオーディオデータなどリッチなデータも含む\n2. 特定ケース: データマイニング\n - excel,ブログ..様々なデータ形式からデータを抽出する技術\n3. 特定ケース: 個人情報に触れず分析するデータマスキング\n - ランダム又はダミーデータで生データを隠蔽して分析\n - 重要な情報は安全な場所に保管\n\n### 3: ビジネスインテリジェンスの取り扱い\n\n1. 目的\n   - ビジネス上において、経過や進捗を測定すること\n   - 指標 <= 測定値 + ビジネス上の意味\n2. 従来データとビッグデータから分析\n   - 「データスキル + ビジネス上の知識経験」により過去のデータを解析\n   - どれくらい商品販売できたか、どの地域で最も商品販売出来たか\n\n### 4: 統計手法の取り扱い\n\n1. 手法\n   - 回帰分析 ( ２次元上にデータをプロットして、2次関数的に線形の傾向を導出 )\n   - ロジスティック回帰 ( ２次元上にデータをプロットして、ロジスティック関数的に傾向を導出 )\n   - クラスター分析 (２次元上にデータをプロットして、グループ毎の集合を導出 )\n   - 因子分析 ( アンケート時において、類似質問を一つの変数にまとめる )\n\n### 5: 機械学習の取り扱い\n\n1. 基本\n    - メリット: 人よりも効率的に目的に向けた手段を導出可能\n    - 活用法: 複雑な数学モデルを改善\n2. 種類 ( 教師あり学習 )\n    - ターゲット: データの意味を事前に明瞭化されている\n    - 目的関数: 正確性を測定する\n    - 最適化アルゴリズム: 手段を改善可能である\n3. 種類 ( 教師なし学習 )\n    - データの意味がわからない場合に行われる\n    - 教師あり学習前に、データのカテゴリ分けして意味を把握する\n4. 種類 ( 強化学習 )\n    - 損失を最小化し、報酬を最大化する\n    - 教師あり学習に類似\n\n## データ分析業界における職種\n- データアーキテクト\n  - データをどのように取得するかを構築する\n  - データをどのように処理して、活用可能にする\n- データエンジニア\n  - 分析に活用可能とするためデータを処理する\n- データベースアドミニストレーター\n  - データを管理する\n  - 主に従来のデータを担当\n- BI アナリスト\n  - データ分析してレポートを作成\n- BI コンサルタント\n  - 外部の BI アナリスト\n- BI デベロッパー\n  - プログラミングを通じて、会社特有の問題を解消\n- データサイエンティスト\n  - 従来の手法や、機械学習の手法を通じて将来を予測\n- データアナリスト\n  - より高度な分析を行う\n- 機械学習エンジニア\n  - 機械学習の高度なモデルを構築する\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:45:09+09:00","updated_at":"2021-03-28T16:45:09+09:00"},{"url":"https://qiita.com/ren0826jam/items/cf766a6fd43049b3cff4","title":"Gitを知りたいすべてのエンジニアに捧ぐ。。。","body":"# はじめに\nエンジニアには欠かせないもの。たくさん必要なものがある中の一つに「Git」があるかと思います。駆け出しエンジニアには「何それ？」といった人は多いと思います。現役エンジニアでも、Gitについては知っていても使い方でこんな使い方も出来るんだ！ということもあるほど奥が深いです。\nGitを制するものはエンジニアを制するということで、最低限、基本知識は身に付けましょう！！\n(※最後の方にGitの用語一覧も用意しているので、活用してみてください！)\n\n## Gitとは？\nまずGitとは、分散型バージョン管理システムのことです。\nもう少し分かりやすく言うと、ファイルのバージョン管理を簡単に行えるツールです。\n使い方の例としては、コードを編集した際に何か不具合が発生したので、元のバージョンへ戻す。といったことが出来ます。\n\n### 特徴\n- 古いバージョンに簡単に戻すことが出来る。\n\n- ファイルを一元管理することができる\n\n- 編集した履歴を複数人で共有できる\n\n- 複数人で修正した部分を一つに統合できる\n\n## Gitプラットフォームについて\nGitを効率よく使うためには、ほとんどの場合プラットフォームを利用します。\nそこで、有名なものを上げると、3つあります。\n\n### [GitHub](https://github.co.jp/)\nハブ(Hub)とは、「拠点・中心・集まり」と言う意味で、Gitの仕組みを利用し、世界中の人々が自分のプログラムコードやデザインデータなどを保存、公開できるようにしたWebサービスの名称です。\n\n### [GitLab](https://about.gitlab.com/)\nオープンソースのGitリポジトリ管理ソフトウェアです。2014年に創業。最新の資金調達も含めて、4500万ドル以上の資金調達を成功させるなど、Gitリポジトリ管理の分野においてはGitHubに次ぐ「ナンバーツー」の存在です。\n\n\n### [BitBucket](https://bitbucket.org/)\nタスク管理のJIRA、社内Wikiなどでよく用いられるConfluenceなどのベンダーでもあるAtlassianが提供しているGitプラットフォームです。日本ではマイナーではありますが、アメリカなどでは非常に多くの企業がBitBucketを用いています。\n\n## 特徴\n大体は似たり寄ったりなのですが、個人的には今勢いがあるGitLabがおすすめですかね〜。\n簡単にCI/CDを使えたり、プライベートリポジトリが無料で利用できたりと、優れている部分が多くあるので！\n(※とは言っても、使い慣れているのはGitHubなので使いがちなのですが、、笑)\n\n#### 共通\n- フォーク(Fork)\n    - 一つのプロジェクトが複数に分派していくのを食器のフォークの先端に例えが名称の所以です。\n    - 誰かのリポジトリをほかの人がコピーすることが出来る機能。\n- プルリクエスト(Pull Request)・マージリクエスト(Merge Request)\n    - 自分が行った変更をオリジナルのものに反映したい時に使います。\n    - ここで、レビューをしてもらったりします。\n- マージ(Merge)\n    - 特定のブランチに指定したブランチの内容を統合させる機能。\n    - 主に、メインブランチにプルリクエストで修正したトピックブランチの内容をマージします。\n- イシュー(Issues)\n    - プロジェクトやソースコードの課題を管理するための機能。\n    - リポジトリ単位に管理されている。\n\n- ウィキ(Wiki)\n    - ビルド時の手順や注意事項、調査結果や引き継ぎなど、チームメンバーと共有したい情報を記載する。\n    - 基本は自由に記載する。\n\n#### GitHub特有\n- アクション(Actions)\n    - GitHub上で動作するサーバレス実行環境。\n    - 複数のActionを組み合わせ、実行する順番を定義することで独自のワークフローを構築できます。\n- プロジェクト(Projects)\n    - アジャイル開発や、プロジェクトマネジメントという視点で、カンバン式のタスク管理が出来る機能。\n\n#### GitLab特有\n- CI/CD\n    - GitHubは外部のCIサービスと、CIのベースとするDockerのコンテナレジストリサービスと連携して行うが、GitLabはいずれも無料で標準搭載している。\n\n## メリット\n- ソースコードのコラボレーション開発・コードレビュー機能\n- WebUIで様々ながことが行える高いユーザビリティ\n- チケット管理機能などの開発に関わる重要な付随機能や、そういった機能・サードパティサービスとの連携機能\n\n\n## 基本的なコマンド使い方一覧\nまず、ここに載っているものは頭に入れておくと開発がスムーズに進みます！！\n\n#### version\n\n```ruby\n\n$ git --version # バージョンの確認\n```\n\n#### init\n\n```ruby\n\n$ git init # ディレクトリにリポジトリを作成\n$ git init --bare # ベアリポジトリの作成\n$ git init --shared # グループ書き込み権限の有効\n```\n\n#### config\n\n```ruby\n\n$ git config --list # 設定の確認\n$ git config キー名 # 設定の確認\n$ git config キー名 設定値 # ローカルリポジトリに登録・更新\n$ git config --global キー名 設定値 # すべてのローカルリポジトリに登録・更新\n$ git config --unset # キー名削除\n$ git config -l # 使用されるリポジトリの設定を表示\n$ git config --global user.name ユーザー名 # ユーザ名の設定\n$ git config --global user.email メールアドレス # メールアドレスの設定\n$ git config --global color.ui auto # 出力結果を色付け\n```\n\n#### add\n\n```ruby\n\n$ git add ファイル名\n$ git add *.html.erb # 「〇〇.html.erb」をステージングに上げる\n$ git add -A # すべての変更を含むワークツリーの内容をインデックスに追加\n$ git add -u # 以前コミットしたことがあるファイルだけインデックスに追加\n$ git add . # すべてのファイルをステージングに上げる\n```\n\n#### commit\n\n```ruby\n\n$ git commit # インデックスに追加されたファイルをコミット\n$ git commit -m “コミットメッセージ” # コミットと同時にメッセージを指定\n$ git commit -a # 変更されたファイル(新規を除く)をインデックスに追加・コミット\n$ git commit --amend # 直前のコミットを修正\n```\n\n#### push\n\n```ruby\n\n$ git push リモートリポジトリパス ブランチ名 # リモートリポジトリに変更を書き込む\n$ git push リモートリポジトリ名 --tags # リモートリポジトリにすべてのタグをアップロード\n$ git push リモートリポジトリ名 タグ名 # リモートリポジトリに指定したタグをアップロード\n$ git push リモートリポジトリ名 :ブランチ名(タグ名) # 指定したブランチ,もしくはタグをリモートリポジトリから削除\n$ git push -f # ローカルブランチの内容で強制的に上書き\n$ git push -n # 実行せずに実行する内容だけを表示\n```\n\n#### merge\n\n```ruby\n\n$ git merge ブランチ名 # 現在のブランチをほかのブランチとマージする\n```\n\n#### status\n\n```ruby\n\n$ git status # 前回のコミットと比較したファイルの変更点を表示\n$ git status -s # 短い書式で表示\n$ git status -sb # 現在のブランチ情報を表示\n```\n\n#### checkout\n\n```ruby\n\n$ git checkout ファイル名 # HEADと同じ状態に戻す\n$ git checkout . # 全ファイル、HEADと同じ状態に戻す\n$ git checkout コミットID ファイル名 # # 指定したコミットIDと同じ状態に戻す\n$ git checkout ブランチ名 # ブランチ移動\n$ git checkout -b ブランチ名 # 新たにブランチを作成して移動する\n$ git checkout --ours ファイル名 # マージでコンフリクトした際、上方を指定してファイル内容を採用する.\n$ git checkout --theirs ファイル名 # マージでコンフリクトした際、下方を指定してファイル内容を採用する.\n```\n\n#### log\n\n```ruby\n\n$ git log # コミットログを参照\n$ git log --oneline # コミットログの先頭７桁のコミットIDを表示\n$ git log --decorate # コミットログのHEADの位置を明示\n$ git log --graph # コミットログを縦グラフで表示\n$ git log --grep [filter] # 指定した文字がコミットログに含まれるコミットを表示\n```\n\n#### diff\n\n```ruby\n\n$ git diff # インデックスとワーキングツリーの差異を表示\n$ git diff --cached # HEADとインデックスの差分を表示\n$ git diff コミットID1 コミットID2 # コミット間の差異を表示\n```\n\n#### show\n\n```ruby\n\n$ git show # 最新のコミット内容を表示\n$ git show タグ名 # タグを指定してコミット内容を表示\n```\n\n#### tag\n\n```ruby\n\n$ git tag # タグの一覧を表示\n$ git tag -n[number]@ # タグとそのメッセージ[行数指定]の一覧を表示\n$ git tag -l フィルター # タグをフィルターをかけて表示\n$ git tag タグ名 # 現在のコミットIDにタグを関連付け\n$ git tag タグ名 コミットID # コミットIDを指定してタグを関連付け\n$ git tag -a タグ名 # 現在のコミットIDにメッセージ付きのタグを関連付け\n$ git tag -d タグ名 # 指定したタグを削除\n```\n\n#### rm\n\n```ruby\n\n$ git rm ファイル名 # ワークツリーとインデックスからファイルを削除\n$ git rm --cached ファイル名 # インデックスのファイルを削除\n```\n\n#### mv\n\n```ruby\n\n$ git mv 旧ファイル名 新ファイル名 # ファイル名を変更\n```\n\n#### stash\n\n```ruby\n\n$ git stash # 現在の状態を保存\n$ git stash save “メッセージ” # メッセージ付きで現在の状態を保存\n$ git stash list # 保存した状態の一覧を表示\n$ git stash pop # 最新の保存状態を復元\n$ git stash pop stash@{numbar} # 番号を指定して保存状態を復元\n$ git stash apply # 保存状態をリストに残したまま最新の保存状態を復元\n$ git stash apply stash@{number} # 保存状態をリストに残したまま指定した番号の保存状態を復元\n$ git stash drop stash@{[number]} # 指定した番号の保存状態を削除\n$ git stash clear # 保存状態をすべて削除\n```\n\n#### clone\n\n```ruby\n\n$ git clone git@github.com:ユーザー名/リポジトリ名.git # リポジトリをコピー\n```\n\n#### reflog\n\n```ruby\n\n$ git reflog # 過去にHEADが指していたコミット一覧を表示\n$ git reflog ブランチ名 # ブランチを指定して過去にHEADが指していたコミット一覧を表示\n```\n\n#### cherry-pick\n\n```ruby\n\n$ git cherry-pick コミットID # 別のブランチのコミットを現在のブランチにコピー\n```\n\n#### branch\n\n```ruby\n\n$ git branch &[new branch] # 現在のブランチの確認&新しいブランチを作成\n$ git branch -a # すべてのブランチを確認\n$ git branch -r # リモートブランチを確認\n$ git branch -d ブランチ名 # ブランチを削除\n$ git branch -m 旧ブランチ名 新ブランチ名 # ブランチ名を変更\n$ git branch --set-upstream [my branch] [other branch] # 他のユーザーのブランチと自分のブランチを関連付ける\n```\n\n#### revert\n\n```ruby\n\n$ git revert コミットID # コミットIDのコミットを取り消す\n```\n\n#### pull\n\n```ruby\n\n$ git pull リモートリポジトリパス ブランチ名 # リモートリポジトリの変更を取り込む\n```\n\n#### fetch\n\n```ruby\n\n$ git fetch リモートリポジトリ名 # リモートリポジトリの最新情報を追加\n$ git fetch --prune # リモートリポジトリの削除情報をローカルに更新\n```\n\n#### rebase\n\n```ruby\n\n$ git rebase -i コミットID # コミットIDの古い順にコミットが表示され、コミットの取り消しやコミットメッセージなどの編集が出来る\n$ git rebase --abort # 直前のgit rebaseの編集を中止\n$ git rebase --continue # git rebaseの変更を適応\n```\n\n#### remote\n\n```ruby\n\n$ git remote # リモートリポジトリの一覧表示\n$ git remote add ユーザー名 リモートリポジトリパス # リモートリポジトリの追加\n$ git remote rename リモートリポジトリ名 新リポジトリ名 # リモートリポジトリの名前変更\n$ git remote show リモートリポジトリ名 # リモートリポジトリの情報参照\n$ git remote prune リモートリポジトリ名 # リモートリポジトリで排除されたブランチをローカルからも削除\n```\n\n#### reset\n\n```ruby\n\n$ git reset # 全ファイルをステージングから取り除き、ファイルの変更は残す\n$ git reset ファイル名 # 指定したファイルをステージングから取り除き、ファイルの変更は残す\n$ git reset --hard # 全ファイルをステージングから取り除き、ファイルの変更した箇所も削除\n$ git reset HEAD^ # 直前のコミットの取り消し\n```\n\n\n## こんな時どうする？(トラブルシューティング)\n「こんな時どうしたらいいの〜〜〜〜〜」と言った場面に対応できる作業手順をいくつか記載しているので、困った際の参考にしてみてください！\n\n### ブランチを作りたい時\n\n```ruby\n\n$ git checkout develop\n↓\n$ git checkout -b 作成するブランチ名\n↓\n$ git push -u origin 作成したブランチ名\n```\n\n### プルリクエスト作成したい時\n\n1.以下のコマンドを実行する。\n\n```ruby\n\n$ git add .\n\n$ git commit -m \"コミットメッセージ\"\n\n$ git push origin ブランチ名\n```\n\n2.GitHub(GitLab等)に移動し、右上の緑色のCompare & pull requestボタンをクリック。\n\n3.プルリクエスト内容を記入する。\n\n4.どのブランチからどのブランチにpull requestするかを確認する。\n\n-例-\ndevelopブランチからsampleブランチへのpull request\n\nsample ... develop\n\n5.「Create pull request」ボタンを押して、Pull Requestを作成。\n\n### 最新情報を特定のブランチに反映させたい時\n\n1.add 〜 pushまで終わらせた状態で以下のコマンドを実行する。\n\n```ruby\n\ngit checkout メインブランチ名\n\ngit pull origin メインブランチ名\n\ngit checkout 開発用ブランチ\n\ngit merge origin メインブランチ名\n```\n\n2.もし、コンフリクトが発生した場合は、以下を実行する。\n\n```ruby\n\n# コンフリクト内容を解消した上で、、\n$ git add .\n\n$ git commit -m \"コミットメッセージ\"\n\n$ git push origin 開発用ブランチ\n\n$ git merge origin メインブランチ名\n```\n\n### ローカルをリモートに合わせたい時(強制的に)\n\n```ruby\n\n# リモートの最新を取ってくる\n$ git fetch origin\n\n# ローカルのmainを、リモート追跡のmainに強制的に合わせる\n$ git reset --hard origin/メインブランチ名\n```\n\n### 間違えたコミットを取り消したい時\n\n```ruby\n\n# 直前のcommitの取り消し\n$ git reset --hard HEAD^\n\n# n個前のcommitの取り消し\n$ git reset ---hard HEAD~n\n```\n\n### 間違えたリセットを取り消したい時\n\n```ruby\n\n# ログを出す\n$ git reflog\n\n# 任意のところでリセットする\n$ git reset --hard HEAD@{number}\n```\n\n### コミット履歴を綺麗にしたい時\n\n```ruby\n\n# 必要な部分までのcommitを解除\n$ git reset HEAD~n\n\n# 必要な部分の修正を退避させておく\n$ git stash\n\n# 余計なコミットを削除\n$ git reset HEAD~n --hard\n\n# 退避しておいた修正部分を戻す\n$ git stash pop \n```\n\n# 終わりに\nここに書いていないコマンドや、トラブルシューティングはありますが、この記事を見れば割と色んなことに対応できる知識が身につくと思います。\nGitとはエンジニアという職業上、切っても切り離せないサービスなので、いつでも見返せるようにストックしておいてください！\n\n## Git用語一覧\n- リポジトリ(repository)\n    - ファイルやディレクトリを入れて保存しておく倉庫のようなもの。\n- リモートリポジトリ(remote repository)\n    - 特定のサーバー上に設置して複数人で共有するためのリポジトリ。\n- ローカルリポジトリ(local repository)\n    - ユーザーごとに配置される手元のマシン(自身のPC環境)で編集できるリポジトリ。\n- コミット(commit)\n    - ファイルやディレクトリの編集作業をローカルリポジトリに記録するための操作のこと。\n- ワークツリー(work tree)\n    - ユーザーが編集している作業中のディレクトリのこと。\n- インデックス(index)\n    - 作業場所であるワークツリーと、保存場所であるローカルリポジトリの中間領域\n- クローン(clone)\n    - リモートリポジトリをまるごと自分のローカル環境（ローカルリポジトリ）に保存する機能。\n- プッシュ(push)\n    - ローカルリポジトリにあるファイルをリモートリポジトリに送信して保存する機能。\n- ブランチ(branch)\n    - ファイルの編集履歴を分岐させて記録していく機能。並行して同時に行われる作業を正確に管理出来る。\n- マスターブランチ\n    - メインのブランチのこと。変更等はこのブランチに統合される。\n- トピックブランチ\n    - マスターブランチから切り取られたブランチ。ここで、編集や修正等を行い、完了するとマスターブランチに統合される。\n- マージ（merge）\n    - トピックブランチをマスターブランチに統合すること。\n- プル（pull）\n    - 共有されているリモートリポジトリに保存されているファイルの内、ローカルリポジトリに無いファイルや他のユーザーが更新したファイルのみをダウンロードする機能。\n- フェッチ（fetch）\n    - リモートリポジトリからファイルの最新情報を取得してくる操作。(ローカルのファイルは更新されない)\n- リモートリポジトリパス\n    - 通常は「origin」としている。\n\n## 参考\n\n[【初心者向け】Gitとは何なのか。基本用語やその仕組みをまとめています。]\n(https://tcd-theme.com/2019/12/what-is-git.html?gclid=Cj0KCQjwjPaCBhDkARIsAISZN7QYDwzHljAD1jyE5ePybputNISAhyqfMUWzb3qwCUam54z1hHNfeEcaAhbYEALw_wcB)\n\n[GitとGitプラットフォームについてと、GitHubかGitLabかBitBucketの3大Gitプラットフォーム紹介]\n(https://siderlabs.com/blog/ja/3-major-git-platforms/)\n\n[GitHubとは何かわかりやすく解説！機能やメリットも簡単に紹介]\n(https://www.sejuku.net/blog/7901)\n\n[GitLabとは？GitHub買収で10倍のインポート数。使い方を解説]\n(https://tech-camp.in/note/technology/44434/)\n\n[GitHubの新機能「GitHub Actions」でワークフローを自動化しよう]\n(https://codezine.jp/article/detail/11450)\n\n[VSCodeでのGitの基本操作まとめ]\n(https://qiita.com/y-tsutsu/items/2ba96b16b220fb5913be)\n","user":"ren0826jam","created_at":"2021-03-28T16:42:50+09:00","updated_at":"2021-03-28T16:45:26+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/9dcd950049ab5493c395","title":"ERROR: Table has no partition for value from ...","body":"## 概要\nテーブルにレンジパーティションを貼る時、終端まで定義しないと、最後のレンジを超えた時に insert できなくてエラー発生する。\n\nそのため、「キャッチオール」を定義して、パーティションの終端を用意する。\n\n## 対策\n\n```sql\nPARTITION pmax VALUES LESS THAN MAXVALUE\n```\n\n- 参考URL\n    - [mysql \\- ERROR 1526 \\(HY000\\): Table has no partition for value 1426566990 \\- Stack Overflow](https://stackoverflow.com/questions/29694539/error-1526-hy000-table-has-no-partition-for-value-1426566990/29695312)\n    - [MySQLのパーティショニング \\- 祈れ、そして働け ～ Ora et labora](https://tetsuyai.hatenablog.com/entry/20110308/1299569576)\n    - [MySQL : 第15章 パーティショニング \\- LANDHERE](https://landhere.jp/docs/manual/mysql/partitioning.html#partitioning-range)\n    - [MySQL :: MySQL 5\\.6 リファレンスマニュアル :: 19\\.2\\.1 RANGE パーティショニング](https://dev.mysql.com/doc/refman/5.6/ja/partitioning-range.html)\n    - [pdf | 実践！パーティションの基本から実装例まで](https://www.oracle.com/technetwork/jp/ondemand/database/db-technique/d-12-disk-1484778-ja.pdf)\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:42:04+09:00","updated_at":"2021-03-28T16:42:04+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/c9840db01b20c3a2abdb","title":"rsync --delete でサーバを壊した時の原因","body":"\n## 概要\nrsync --delete をシェルスクリプトに仕込んでサーバ壊滅した。\n\n## 事象\n\nbashCMS2 中の ./deploy コマンド実行で、サーバを吹っ飛ばした。\n[ryuichiueda/bashcms2: a little CMS system written with bash](https://github.com/ryuichiueda/bashcms2)\n\n原因は、コード手入力により不可視文字が入り込んだようで、 bin/conf ファイルを読み込めてなかったこと。\n\n./deploy 中の rsync は、bin/conf ファイルで設定された変数を元にして、実行される。\nそのため、引数が空になって、残った `/` が指定されてしまい、サーバを吹っ飛ばした。\n\n## 対策\n\n今から思えば、VSCode で ./deploy を開いていた時、txt ファイルのシンタックスカラーだったので、そこで違和感を持つべきだった。\n\nrsync --delete で引数を使用する時は、気をつけるべき。\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:40:39+09:00","updated_at":"2021-03-28T16:40:39+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/75b7138b9346c2486451","title":"ドメインの初期設定とHTTPS化","body":"## 概要\nドメイン初期設定と HTTPS 化 ( さくらの VPS　× Let's Encrypt )\n\n## サーバの IP を確認\n\nさくらの VPS は、デフォルトでドメインが割り当てられている。\n\nそのため、デフォルト値を使用する。\n\nなお、ドメインは、以下 URL の管理画面における `ホスト名` の箇所で確認できる。\n\nhttps://secure.sakura.ad.jp/vps-beta/servers/:id/info\n\n## サーバのドメイン設定\n\n```bash\n$ echo ${ホスト名} | sudo tee /etc/hostname\n$ sudo reboot\n```\n\n## HTTPS 化 ( Let's Encrypt )\n\n### 設定ファイルの調整\n\n```bash\n$ cd /etc/apache2/sites-available/\n$ sudo cp 000-default.conf ${新設定ファイル}.conf\n$ vim ${新設定ファイル}.conf\n```\n\n```diff:${新設定ファイル}.conf\n- <VirtualHost *:80>\n+ <VirtualHost ${ドメイン名}:80>\n```\n\n```bash\n$ cd /etc/apache2/sites-enabled\n\n$ sudo rm 000-default.conf\n\n$ sudo ln -s ../sites-available/${新設定ファイル}.conf ./\n\n$ sudo service apache2 restart\n```\n\n### Let's Encrypt のインストール\n\n```bash\n$ sudo apt install letsencrypt python-certbot-apache\n```\n\n### サーバ証明書を取得\n\n```bash\n$ sudo letsencrypt --apache\n```\n\nQuestion | Answer\n---|---\nEnter email address | 自分のメールアドレス ( 証明書更新時期に連絡あるかも？ )\nPlease read the Terms ... | 規約に同意できる場合は、Agree\nWould you be willing to share your email address... | 任意\nWhich names would you like to activate https for ? | HTTPS 化したいドメインを選択\nPlease choose whether or not to redirect HTTP traffic to HTTPS | 2\\. Redirect\n\n### 終了\n\nLet's Encrypt におけるサーバ証明書の有効期限は、`90 日間` である。\n\n証明書の更新時は、以下のコマンドを実行すること。\n\n```bash\nsudo letsencrypt renew\n```\n\n- 参考 URL\n    - [よくある質問 \\(FAQ\\) \\- Let's Encrypt \\- フリーな SSL/TLS 証明書](https://letsencrypt.org/ja/docs/faq/#:~:text=Let's%20Encrypt%20%E3%81%AE%E8%A8%BC%E6%98%8E%E6%9B%B8%E3%81%AE%E6%9C%9F%E9%99%90%E3%81%AF%E3%81%A9%E3%81%AE%E3%81%8F%E3%82%89%E3%81%84%E3%81%A7%E3%81%99,%E6%9C%9F%E9%99%90%E3%81%AF%2090%20%E6%97%A5%E9%96%93%E3%81%A7%E3%81%99%E3%80%82)\n\n\n## メモ: 無料ドメインの取得\n\n使用期限が 1 年未満となるが、無料ドメインの選択肢が存在する。\n\n- 参考 URL\n    - [Freenom](https://my.freenom.com/clientarea.php)\n    - [freenomで無料ドメインを取得する｜ふじい｜note](https://note.com/dafujii/n/n406f385651e2)\n    - [よくある質問 \\- KAGOYA Internet Routing サポートサイト \\- DNS設定が反映したか確認したい](https://support.kagoya.jp/kir/faq/index.php?action=artikel&cat=22&id=377&artlang=ja)\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:37:54+09:00","updated_at":"2021-03-28T16:37:54+09:00"},{"url":"https://qiita.com/nakada-web/items/4029f9c4c31be5aa78ab","title":"フロントエンド開発者のための刺激的なプロジェクト10選　1選目考察【後編】","body":"https://qiita.com/nakada-web/items/25ff6287a04470afb1b3\n\n前編に続き、\n\nhttps://qiita.com/baby-degu/items/e720c2007716811c8b30\n\nを、考察していきます。プロジェクト1選目は、下記リンクにて確認できます。\n\nhttps://codepen.io/bnhovde/pen/OJLYGKx\n\n#getBoundingClientRect()\n任意の要素の大きさ(height,width)と、ビューポートに対する位置を返す。\n\n#clientX clientY\nイベント発生時のマウスの座標を返す。\nこのプロジェクトでは`mousemove`イベントが発生した時にカーソルの位置を取得しています。\n\n```JS\n// Mouse position\nconst useMousePosition = () => {\n  const [position, setPosition] = useState({ x: 0, y: 0 });\n\n  useEffect(() => {\n    const setFromEvent = e => setPosition({ x: e.clientX, y: e.clientY });\n    window.addEventListener(\"mousemove\", setFromEvent);\n\n    return () => {\n      window.removeEventListener(\"mousemove\", setFromEvent);\n    };\n  }, []);\n\n  return position;\n};\n```\n\n#Math.atan2(y,x)\n指定した座標を元に平面上の角度を取得できる。第1引数にy座標、第2引数にx座標を指定するのに注意。このプロジェクトでは上記の`getBoundingClientRect`と`clientX clientY`で取得した座標を元に、画面右下のマウスをキャッチしてくるおじさんから角度を計算しています。\n\n```JS\n\nconst Grabber = ({ state, gameOver, extended, onCursorGrabbed }) => {\n  const mousePos = useMousePosition();\n  const [ref, position] = usePosition();\n  const hasCursor = false;\n\n  // Calculate rotation of armWrapper\n  const x = position.left + position.width * 0.5;\n\n  const y = position.top + position.height * 0.5; \n\n  const angle = gameOver ? 0 : Math.atan2(mousePos.x - x,-(mousePos.y - y)) * (180 / Math.PI);\n\n  // Ensure value is within acceptable range (-75 to 75)\n  const rotation = Math.min(Math.max(parseInt(angle), -79), 79);\n  \n  const grabberClass = `grabber grabber--${state} ${extended && \"grabber--extended\"}`;\n  const wrapperStyle = { transform: `rotate(${rotation}deg)` };\n\n  let handImageSrc = ASSETS[state];\n\n  return (\n      \n    <div className={grabberClass}>\n      <div className=\"grabber__body\"></div>\n      <img className=\"grabber__face\" src={ASSETS.head} />\n      <div className=\"grabber__arm-wrapper\" ref={ref} style={wrapperStyle}>\n        <div className=\"grabber__arm\">\n          <img\n            className=\"grabber__hand\"\n            src={handImageSrc}\n            onMouseEnter={onCursorGrabbed}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n```\n\nMath.atan2で計算した角度はラジアンなので、度数法に変換するために、`(180 / Math.PI)`を乗じています。\nここまでは理解できたのですが、本来ならy座標を指定する第1引数にx座標、x座標を指定する第2引数にy座標を指定している点や、変数rotationの計算式で出てくる`79`と`-79`いう数字の意味が理解できませんでした。\nどなたか解説頂けると幸いです。\n\n\n#アウトプット\nこの前編、後編の考察で学んだことをアウトプットしてみました。\n下のリンクをクリックすると柴犬をなでなでできると思うので、なでていってやってください。(スマホ対応してないです。)\n\nhttps://daikidaiki1583.github.io/dogear/\n\nhttps://github.com/daikidaiki1583/dogear\n","user":"nakada-web","created_at":"2021-03-28T16:37:53+09:00","updated_at":"2021-03-28T16:40:15+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/10ba30530a8f12d3ab29","title":"Web サーバの初期設定 ( Ubuntu × Apache )","body":"## 概要\nWeb サーバの初期設定 ( Ubuntu × Apache )\n\n## 手順\n### インストール\n\n```bash\n$ sudo apt install apache2\n```\n\n### エラーにサーバ情報を隠蔽\n\nエラー画面において、デフォルトでは、フッターに Apache の情報が表示される。\n\nそのため、最低限の対策として、当該情報を隠蔽する。\n\n\n```bash\n$ sudo vim /etc/apache2/apache2.conf\n```\n\nApache の設定ファイルの下部に以下の設定を追加する。\n\n```diff:/etc/apache2/apache2.conf\n+ ServerSignature Off\n+ ServerTokens ProductOnly\n```\n\n```bash\n$ sudo service apache2 restart\n```\n\n- 参考 URL\n    - [たった2行でできるWebサーバ防御の「心理戦」 \\(2/3\\)：セキュリティ対策の「ある視点」（1） \\- ＠IT](https://www.atmarkit.co.jp/ait/articles/0707/19/news141_2.html)\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:35:43+09:00","updated_at":"2021-03-28T16:35:43+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/c06c74027fb1e13d0e0f","title":"ubuntuの初期設定","body":"## 概要\n\nUbuntu の手順\n\n## 手順\n\n### OS インストール後\n\n#### Set up users and passwords\n\nQuestion | Answer\n---|---\nFull name for the new user | ${自分の名前を入力}\nUsername for  your account | ${アカウントのユーザ名を入力}\nChoose a password for the new user | ${パスワード入力}\nRe-enter password to verify | ${パスワード再入力}\n\n\n#### Partiton disks\n\nQuestion | Answer\n---|---\nPartitioning method | Guided - use entire disk\nSelect disk to partition | Virtual disk 1 (vda)\nWrite the changes to disks? | Yes\n\n### Finish the installation\n\n1. `Continue` 選択\n1. 再起動後に再接続\n\n\n### 好みのサーバ設定\n\n```bash\n# 好みのテキストエディタ\n$ sudo apt install vim\n\n# 日本語設定\n$ sudo apt install manpages-ja manpages-ja-dev language-pack-ja\n$ sudo update-locale LANG=ja_JP.UTF-8\n```\n\n### SSH認証設定\n\nid_rsa 生成が初回の場合、`ssh-keygen` のみでよし。\n\n既存の id_rsa と別管理にしたい場合、以下の手順とする。\n\n```bash\n# ローカル\n## 新サーバ用の SSH Key を生成\n$ cd ~/.ssh/\n\n$ ssh-keygen -t rsa -b 4096 -f id_rsa_${別名用の suffix}\n> 全部リターンでも良い （ 強度高めたい場合は追加調査 ）\n\n## 公開鍵を新サーバに送信\n$ scp ./id_rsa_${別名用の suffix}.pub ${ユーザ名}@${IPアドレス}:~/\n```\n\n```bash\n# リモートサーバ\n## SSH接続元に対して接続を許可する公開鍵を設置する `.ssh/authorized_keys` 設定\n\n$ mkdir .ssh\n\n$ mv ${公開鍵} ./.ssh\n\n$ chmod 700 .ssh/\n\n$ cat ${公開鍵} >> .ssh/authorized_keys\n\n$ chmod 600 .ssh/authorized_keys\n\n$ rm ${公開鍵}\n```\n\n### SSH接続時の設定ファイル\n\nここまでの設定では、SSH接続時に `ssh ${ユーザ名}@${IPアドレス}:~/ -i ${秘密鍵のファイル名}` と入力する必要がある。\n\nそのため、~/.ssh/config を設定することにより、入力を省略可能にする。\n\n```bash\n$ vim .ssh/config\n```\n\n```txt:~/.ssh/config\nHost ${ssh コマンドで使用する任意のサーバ名}\n  User ${接続先のユーザ名}\n  Hostname ${接続先のIPアドレス}\n  IdentityFile ~/.ssh/${生成した秘密鍵名}\n```\n\n- 参考URL\n    - [ssh\\-keygenでファイル名を指定して鍵を生成する \\- Qiita](https://qiita.com/goldbook@github/items/575981f3ec0bc582ea24)\n    - [SSH で複数の秘密鍵を使い分けるいくつかの方法 \\- Ellinikonblue\\.com Weblog](http://www.ellinikonblue.com/blosxom/UNIX/20150721SSH.html)\n    - [インフラエンジニアじゃなくても押さえておきたいSSHの基礎知識 \\- Qiita](https://qiita.com/tag1216/items/5d06bad7468f731f590e)\n    - [~/\\.ssh/configについて \\- Qiita](https://qiita.com/passol78/items/2ad123e39efeb1a5286b)\n\n\n### パスワードログインを無効化\n\n```bash\n$ sudo vim /etc/ssh/sshd_config\n```\n\n```diff:/etc/ssh/sshd_config\n- #PasswordAuthentication yes\n+ PasswordAuthentication no\n```\n\n```bash\n$ sudo service ssh restart\n```\n\n## 断念したこと\n### IP 制限\n\n固定 IP が必要になるが、家庭用回線において、基本的に別途オプションが必要である。\n\nnuro 光の場合は、ビジネス契約が必要になるから、設定不可だった。\n\n- 参考 URL\n    - [さくらのVPS パケットフィルタで「許可する送信元IPアドレス」設定追加のお知らせ – さくらのVPSニュース](https://vps.sakura.ad.jp/news/vps-pf-ph3/)\n    - [NURO 光で固定IPアドレスを使う方法を解説！変動型との違いは？ \\| NURO 光](https://www.nuro.jp/article/koteigata-ip/)\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:33:24+09:00","updated_at":"2021-03-28T16:33:24+09:00"},{"url":"https://qiita.com/bunta_gamamaru/items/9667d2172d3edf04117a","title":"bashrcの環境変数が使えなくて困っていた件","body":"# 3行でまとめると\n- Bashのシェルスクリプトを実装した。\n- ~/.bashrcに定義しておいた環境変数をシェルの中で使おうとしても存在していない。\n- なるほど、~/.bashrcに`export`がいるのか！！\n\n# 背景\nこんなコードをつくった。\n`$work_root`が~/.bashrcに記述してある環境変数。\n\n```Bash:main.sh\n#!/bin/sh\n\nwork_dir=${work_root}/yyy/ddd/mmm/work;\n\ncp -r $HOME/work/* ${work_root};\n```\n動かした結果\n\n```\ncp: cannot create regular file `/yyy/ddd/mmm/work': No such file or directory\n```\n`$work_root`の部分がない・・・だと・・・\nちなみに対話型シェルでは\n\n```\necho $work_root\n```\nで\n\n```\n/home/xxx/hoge\n```\nと出てくる。\n\n# 改善点\n`.bashrc`の中身の部分の記述がよろしくなかったようです。\n\n```Bash:~/.bashrc（改善前）\nwork_root=/home/xxx/hoge\n```\n\nこれを、こうする。\n\n```Bash:~/.bashrc（改善後）\nwork_root=/home/xxx/hoge;\nexport work_root;\n```\n\nこれでシェルスクリプト内で`$work_root`が使えるようになる。\n\n# まとめ\n- 対話型シェルを使うときは`export`なしでも環境変数が使える。\n- シェルスクリプトでは`export`が必要。\n","user":"bunta_gamamaru","created_at":"2021-03-28T16:33:23+09:00","updated_at":"2021-03-28T17:08:40+09:00"},{"url":"https://qiita.com/seshat/items/80bc2c20761a547a3996","title":"RustをUbuntuにインストールしてプログラムを走らせる","body":"# はじめに\n\nRust（ラスト）は、C言語、C++に代わるシステムプログラミング言語と言われています。OSや言語を記述するのに適した言語というわけです。\n\nWindows上にLinux環境を構築する方法にWSLがあります。WSL（Windows Subsystem for Linux ) とは、Linuxのバイナリ実行ファイルをWindows 10およびWindows Server上で実行できるようにしたものです。本稿では、WSL上のUbuntu20.04にRustをインストールし、簡単なプログラムを実行するまでを紹介します。\n\n### 参考URL\nWSLでWindows上にUbuntu環境を構築する方法は、下記リンクの記事に詳しいので、よかったら参考にしてください。\n[LinuxとWindowsの欲張りな環境を手にする](https://daimaohsx.dip.jp/wordpress/2020/05/10/linux-windows-wsl2-ubuntu2004/)\n\nWindows, macOSでのインストール方法などは下記リンクを参照ください。\n[RustをWindows／Ubuntu／macOSにインストールしてサンプルプログラムを走らせる](https://daimaohsx.dip.jp/wordpress/2021/03/28/install-rust-on-windows-ubuntu-macos-and-run-the-sample-program/)\n本稿は自身のブログから転載しました。\n\n\n# Rustのインストール\n\nUbuntuの場合は、まずCコンパイラ（gcc）をインストールします。\n\n```bash\n$ sudo apt install gcc\n```\n\n次にターミナルからcurlコマンドを実行してrustをインストールします。プロンプト”＞”が表示されたら、「１」を入力します。\n\n```bash\n$ curl https://sh.rustup.rs -sSf | sh\ninfo: downloading installer\nWelcome to Rust!\n ＜ 略 ＞\n1) Proceed with installation (default)\n2) Customize installation\n3) Cancel installation\n>1\n```\n\nここで一旦、Ubuntuを終了し、起動しなおします。「exit」と入力し、スタートメニューからUbuntuを起動します。\n\n![2021-03-28_08h09_21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1185720/88c2fa06-976e-347c-22ba-268a0c838375.png)\n\nUbuntuの再起動が完了したところで、rust関連のコマンドが実行できることを確認します。すでにPATH環境変数の設定も実施されています。\n\n```bash\n$ rustc -V\nrustc 1.51.0 (2fd73fabe 2021-03-23)\n$ cargo -V\ncargo 1.51.0 (43b129a20 2021-03-16)\n```\n\n# Hello Worldを表示してみよう\n\n任意の場所に「rust」フォルダを作成します。\n次に、「cargo new プロジェクト名」でプロジェクトを作成します。下ではプロジェクト名を「show_os_ver」としました。\n\n```bash\n$ mkdir rust\n$ cd rust\n$ cargo new show_os_ver\n     Created binary (application) `show_os_ver` package\n```\n\nプロジェクトのディレクトリ構成をtreeコマンドで表示したのが下の図です。\n\n```bash\n$ sudo apt install tree\n$ tree\n.\n└── show_os_ver\n    ├── Cargo.toml\n    └── src\n        └── main.rs\n```\n\nshow_os_ver/src/main.rsがソースコードです。\n\n```bash\n$ cd show_os_ver/src\n$ cat main.rs\nfn main() {\n    println!(\"Hello, world!\");\n}\n```\n\nすでに、「Hello World」を出力するプログラムがおかれているので、これをビルドして実行します。\ncargo runコマンドが便利です。ビルドと実行を一気に行ってくれます。\n\n```bash\n$ cargo run\n   Compiling show_os_ver v0.1.0 (/home/linux/works/rust/show_os_ver)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.17s\n     Running `/home/linux/works/rust/show_os_ver/target/debug/show_os_ver`\nHello, world!\n```\n\n# OSのバージョンを表示してみる\n\nここまでではプログラムを何も作っていません。そこで、OSのバージョンを表示する簡単なプログラムを作ってみます。\nエディタでmain.rsを編集します。\n\n```rust\nuse std::process::Command;\nfn main() {\n    let proc = Command::new(\"/usr/bin/cat\")\n        .args(&[\"/etc/lsb-release\"])\n        .output()\n        .expect(\"Failed to start `cat`\");\n    println!(\"{}\", String::from_utf8_lossy(&proc.stdout));\n}\n```\n\nプログラムから\n”/usr/bin/cat /etc/lsb-release”\nを実行し、catから受け取った出力結果を表示します。lsb-releaseファイルは、Ubuntuのバージョンが記載されているテキストファイルです。\n\n- let proc = Command::new　の行でcatコマンドを実行します。\n- .args　でcatに与える引数を指定します。\n- .output()　でcatの実行完了を待つと同時に出力を受け取ります。\n- .expect　で例外処理を登録します。\n- println!(“{}”,・・・);　でcatの実行結果を表示します。\n\nさっそく実行してみます。\n\n```bash\n$ cargo run\n   Compiling show_os_ver v0.1.0 (/home/linux/works/rust/show_os_ver)\n    Finished dev [unoptimized + debuginfo] target(s) in 0.24s\n     Running `/home/linux/works/rust/show_os_ver/target/debug/show_os_ver`\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=20.04\nDISTRIB_CODENAME=focal\nDISTRIB_DESCRIPTION=\"Ubuntu 20.04.2 LTS\"\n```\n\nOSのバージョンを表示することができました。\n\n# おわりに\n\nmacOSやWindowsから上記同様のことをやってみたい方は、下の記事をどうぞ！\n[RustをWindows／Ubuntu／macOSにインストールしてサンプルプログラムを走らせる](https://daimaohsx.dip.jp/wordpress/2021/03/28/install-rust-on-windows-ubuntu-macos-and-run-the-sample-program/)\n","user":"seshat","created_at":"2021-03-28T16:33:01+09:00","updated_at":"2021-03-28T16:33:01+09:00"},{"url":"https://qiita.com/Haru141/items/edf222b9d6cb0a856f77","title":"Vueの使い方指南（cdn, vue-cli, nuxt.js）","body":"#tltr\n<img width=\"200\" alt=\"Vue\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/534453/64763d52-2ae0-3fa1-5817-68d0233fc8e4.png\" />\n###Vueってどう使えばいいんじゃー\nこの反応をする人は実は少なくないんじゃないかと思っている。\nというのも、Vueは、公式がさまざまな使い方を紹介している反面、決定的な使い方が存在しない。\n\nそのため、大きく分けて3種類の使い方が「__トリプルスタンダード__」に存在しているという、__カオス極まりない状態__になっているのが現状。\n\nこの記事では、「__そもそもVueとは何か、それぞれの使い方で何が違うのか__」を解説する。\n\n#ざっくりVueとは\n###JSフレームワーク\nブラウザ上でJavaScriptをたくさん利用するようになったので、楽にJavaScript扱うために作られたしくみ。\n__Vue__や__React__という種類がある。これを利用すると、開発が__めっちゃ楽__になる。\n\n###Reactとの違い\n書き方とかルールとか難しさとかが違うけれど、JavaScriptを楽に扱いたいという目的は同じ。日本では現在(2021.3)、Vueの方が人気な印象がある。\n\n詳しくは\n\n+ [ReactとVueのどちらを選ぶか](http://qiita.com \"Qiita Home\")\n+ [完全に独断と偏見だけどReact vs Vue してみた](https://qiita.com/102Design/items/ae018dc80a4d879d92a8)\n\nといった有志の方の比較を見て欲しい\n\n#Vueの使い方\n###Vue利用法(1): CDN利用法（サイト埋め込み）\n１つ目の利用法は、サイトにscriptタグを埋め込むことによって利用する方法。jQueryなどと同様に、ヘッダーなどに下のようなスクリプトタグを埋め込む。\n\n```\n<script src=\"https://cdn.jsdelivr.net/npm/vue@2.6.12\"></script>\n```\n\nこの利用法はサイトの一部にVueを利用したい場合に使われる。このタグを埋め込みさえすれば__すぐにVueが利用できる__ので、すでに作成されているサイトの一部変更などでも利用することができる。\nこの利用法は、npmなどの大規模な__環境整備が必要ない__点が後者の２つの方法より優れている。\n\nこの利用法については\n\n+ [30分でわかるVue.js入門](https://qiita.com/ohno888/items/44d7a3153ed2d74c60a5)\n+ [Vue公式](https://jp.vuejs.org/v2/guide/index.html)\n\nで解説してくださっている方々がいる。\n\n###Vue利用法(2): vue-cli（npm, yarn使用法）\nVueの利用法と聞いて最も（当社比）メジャーな方法。これは開発環境を必要とし、Ruby on Rails や Laravelといった__バックエンドフレームワークのような__使い方をする。\n\n(1)の利用法と大きく違うのが、ファイルとして拡張子が「__.vue__」のファイルを使うというところ。例えば、「ボタン」という機能を持ったファイルを「Button.vue」と行った具合に作成する。\nこの「.vue」のファイルからコンパイル（厳密にはトランスパイル）を行い、html, css, jsといったファイルに変換する。\nこのように変換を挟むことで、__パーツの再利用や責務の分離__といったことができるようになる。大規模システムを作るときに嬉しい機能。\n<img width=\"400\" alt=\"button.vue\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/534453/357d77d7-c402-3c58-983f-55aa8f89c0e5.png\" />\n\n\nこの変換を行うために、node.jsやnpmをはじめとした__環境構築__が必要となる。また、開発の際に開発用のサーバーを立てることも特徴的で、これによりページをリロードせずとも__修正のリアルタイム反映__を行ってくれるという嬉しい機能もある。\n\nrubyのgemやphpのcomposerなど、パッケージ管理システムの利用に慣れている人であればこちらの方が楽だったりするのかもしれない。\n\nこの利用法については\n\n+ [Vue CLI スタートガイド](https://qiita.com/kiyokiyo_kzsby/items/5e27a25b358e82dd408f)\n+ [超入門 vue-cli プロジェクト作成](https://qiita.com/naotoritty/items/77bef5021cad5feba00d)\n\nなどで解説してくださっている方々がいる。\n\n###Vue利用法(3): Nuxt.js(Vueのフレームワーク)\n<img width=\"400\" alt=\"Nuxtjs\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/534453/6d404de2-0d80-8a4f-decc-0ce897a9e15e.png\" />\n\nNuxt.jsという「__JSフレームワークであるVueのフレームワーク__」というものが存在している。\nフレームワークというには少し大袈裟で、実態はVueを利用するにあたって必要な機能が簡単にまとまっているスターターセットのようなもの。\n(2)の利用法を発展させたような形で利用し、そのため開発環境が必要になる。\n\nVueをNuxt.jsが用意するやり方どおりに利用しなくてはならないというデメリットはある。しかし、Vueとそれに関連する__一連の機能のセットがそのまま利用__できる形で提供されている、というメリットはかなり大きい。\n\nこの利用法では、(2)に比べて設計やプラグインなどの__選択肢がやや制限させられる__。どういうことかというと、Nuxt.jsを利用すると、Nuxt.jsによって決められた通りにアプリケーションを作るということが必要になる。\nしかし、開発の期間が限られていたりする時には、__むしろ設計に時間をかける必要がなくなる__など、この制限は状況によっては嬉しい方向に働くこともある。\n\n加えて、本記事では詳しくは触れないが、Nuxt.jsは「__サーバーサイドレンダリング(SSR)__」という機能をデフォルトで備えているということにも言及しておく。（実装が難しい上に利用できる状況は限られるが、SEOに有用とされる機能のこと）\n\nこの利用法については\n\n+ [Nuxt.js使ってみた](https://qiita.com/_takeshi_24/items/224d00e5a026dbb76716)\n+ [Nuxt公式](https://ja.nuxtjs.org/)\n\nなどで解説してくださっている方々がいる。\n\n#総括\nVueの使い方に関して簡単な内容説明を行い、詳しくは先人の別Qiitaの記事や公式へ投げた。\n３つの利用法はそれぞれ使いたくなる場面が違うので、競合するというものでもない。プロジェクトの要件などに合わせてどれを利用するかを選択するのが賢い方法だと思う。\n\nまた、実際にVueを利用する・しないは抜きにしても、現代のフロントエンドにおける技術的な内容と状況を知っておくのは何かと役に立つんじゃなかろうかという言葉で締める。\n\n誤字脱字、間違い指摘、感想、反論や別の例など、何かしらのコメントを下さると、筆者としては真面目にまとめた甲斐あったなあと喜びます。\n","user":"Haru141","created_at":"2021-03-28T16:32:35+09:00","updated_at":"2021-03-28T16:32:35+09:00"},{"url":"https://qiita.com/NaoSekig/items/ec1b12d877dae134c079","title":"iOS: Speech Frameworkで音声ファイルから文字起こしを行う","body":"今回はSpeech Frameworkを使用して音声ファイルから文字起こしを行ってみます。\n\n環境: Xcode 12.4、Swift 5\n\n#Info.plist\nまずSpeech Frameworkを使用する許可をユーザーから得る為にInfo.plistにNSSpeechRecognitionUsageDescriptionを追加します。\n\n```Info.plist\n<key>NSSpeechRecognitionUsageDescription</key>\n<string>This permission is required to use voice analysis.</string>\n```\n\nその上でSFSpeechRecognizerのrequestAuthorizationを実行することでユーザーにSpeech Frameworkを使用する許可を求めるダイアログが表示されます。\n\n```Swift\nSFSpeechRecognizer.requestAuthorization { (authStatus) in\n}\n```\n![Simulator Screen Shot - iPhone 12 Pro - 2021-03-28 at 14.52.31.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/362719/c5aecdd3-1cc8-7a9a-6f60-658f23fee91f.png)\n\n\n#音声ファイルの分割\nさて、早速音声ファイルをSpeech Frameworkで読み込ませたいところですが、ここで一つ留意しなくてはならないことがあります。\nこの記事の執筆時点(2021年3月28日)ではSpeech Frameworkの使用時間は60秒までに制限されています。\nその為、音声ファイルをただ単にSpeech Frameworkに読み込ませるだけだと最初の60秒分しか文字起こしが行われません。\n音声ファイルの長さが60秒以上ある場合は、あらかじめ60秒単位で音声ファイルを分割して、それぞれのファイル毎にSpeech Frameworkへの読み込みを行わせる必要があります。\n音声ファイルの分割はAVAssetExportSessionで行うことができます。\n\n```Swift\nprivate var avAudioFile: AVAudioFile!\nprivate var croppedFileInfos: [FileInfo] = []\nprivate var croppedFileCount: Int = 0\n    \nprivate struct FileInfo {\n    var url: URL\n    var startTime: Double\n    var endTime: Double\n}\n\nprivate func cropFile() {\n    // sample.m4aを60秒単位でcroppedFile_連番.m4aというファイルに分割しLibraryディレクトリ下に配置\n    if let audioPath = Bundle.main.path(forResource:\"sample\" , ofType:\"m4a\") {\n        let audioFileUrl = URL(fileURLWithPath : audioPath)\n        do {\n            self.avAudioFile = try AVAudioFile(forReading: audioFileUrl)\n        }catch let error{\n             print(error)\n        }\n        let recordTime = Double(self.avAudioFile.length) / self.avAudioFile.fileFormat.sampleRate\n        let oneFileTime: Double = 60\n        var startTime: Double = 0\n            \n        while startTime < recordTime {\n            let fullPath = NSHomeDirectory() + \"/Library/croppedFile_\" + String(self.croppedFileInfos.count) + \".m4a\"\n             if FileManager.default.fileExists(atPath: fullPath) {\n                 do {\n                     try FileManager.default.removeItem(atPath: fullPath)\n                 }catch let error {\n                     print(error)\n                 }\n            }\n            let url = URL(fileURLWithPath: fullPath)\n            let endTime: Double = startTime + oneFileTime <= recordTime ? startTime + oneFileTime : recordTime\n             self.croppedFileInfos.append(FileInfo(url: url, startTime: startTime, endTime: endTime))\n             startTime += oneFileTime\n         }\n            \n         for cropeedFileInfo in self.croppedFileInfos {\n             self.exportAsynchronously(fileInfo: cropeedFileInfo)\n         }\n    }\n}\n\nprivate func exportAsynchronously(fileInfo: FileInfo) {\n    let startCMTime = CMTimeMake(value: Int64(fileInfo.startTime), timescale: 1)\n    let endCMTime = CMTimeMake(value: Int64(fileInfo.endTime), timescale: 1)\n    let exportTimeRange = CMTimeRangeFromTimeToTime(start: startCMTime, end: endCMTime)\n    let asset = AVAsset(url: self.avAudioFile.url)\n    if let exporter = AVAssetExportSession(asset: asset, presetName: AVAssetExportPresetPassthrough) {\n        exporter.outputFileType = .m4a\n        exporter.timeRange = exportTimeRange\n        exporter.outputURL = fileInfo.url\n        exporter.exportAsynchronously(completionHandler: {\n            switch exporter.status {\n            case .completed:\n                self.croppedFileCount += 1\n                if self.croppedFileInfos.count == self.croppedFileCount {\n                    // 音声ファイルの分割完了 -> Speech Frameworkによる文字起こし開始\n                    DispatchQueue.main.async {\n                        self.initalizeSpeechFramework()\n                    }\n                }\n             case .failed, .cancelled:\n                if let error = exporter.error {\n                    print(error)\n                }\n             default:\n                break\n             }\n        })\n    }\n}\n\nprivate func self.initalizeSpeechFramework() {\n```\n\n#Speech Frameworkによる文字起こし\nでは、いよいよ文字起こしを行ってみたいと思います。\n音声ファイルから文字起こしを行う場合はSFSpeechURLRecognitionRequestで音声ファイルを読み込ませます。\n\n```Swift\nprivate let textView: UITextView = UITextView()\nprivate var speechRecognizer: SFSpeechRecognizer?\nprivate var recognitionRequest: SFSpeechURLRecognitionRequest?\nprivate var recognitionTask: SFSpeechRecognitionTask?\nprivate var speechText: String = \"\"\nprivate var croppedFileInfos: [FileInfo] = []\nprivate var currentIndex: Int = 0\n\nprivate func initalizeSpeechFramework() {\n    self.recognitionRequest = SFSpeechURLRecognitionRequest(url: self.croppedFileInfos[self.currentIndex].url)\n    let location = NSLocale.preferredLanguages\n    self.speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: location[0]))!\n    self.recognitionTask = self.speechRecognizer?.recognitionTask(with: self.recognitionRequest!, resultHandler: { (result: SFSpeechRecognitionResult?, error: Error?) -> Void in\n        if let error = error {\n            print(error)\n        } else {\n            if let result = result {\n                // 文字起こし文をUITextViewに表示\n                self.textView.text = self.speechText + result.bestTranscription.formattedString\n                    \n                if result.isFinal {\n                    // 音声ファイルの読み込みが終了\n                    self.finishOrRestartSpeechFramework()\n                }\n            }\n        }\n    })\n}\n    \nprivate func finishOrRestartSpeechFramework() {\n    // Speech Frameworkを停止\n    self.recognitionTask?.cancel()\n    self.recognitionTask?.finish()\n    self.speechText = self.textView.text\n    self.currentIndex += 1\n    if self.currentIndex < self.croppedFileInfos.count {\n        // まだ音声ファイルが残っている場合は次の音声ファイルの文字起こしを開始\n        self.initalizeSpeechFramework()\n    }\n}\n```\n\n60秒単位に分割した音声ファイルを一つずつSpeech Frameworkに読み込ませています。\n音声ファイルの読み込みが終了するとresult.isFinalがtrueになりますので、次の音声ファイルの読み込みに移っています。全ての音声ファイルの読み込みが終わると終了です。\n実際に動かすと以下の様に文字起こしが行われました。\n![Simulator Screen Shot - iPhone 12 Pro - 2021-03-28 at 15.42.58.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/362719/f9098ea0-0aa7-ef8c-f0c5-2d7ae88df1c6.png)\n\n#サンプルプログラム全文\nこのサンプルプログラムはGitHubで公開しています。\n[https://github.com/naosekig/SpeechFrameworkSample](https://github.com/naosekig/SpeechFrameworkSample)\n\n```Info.Plist\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\">\n<plist version=\"1.0\">\n<dict>\n---------------(中略)---------------\n<key>NSSpeechRecognitionUsageDescription</key>\n    <string>This permission is required to use voice analysis.</string>\n</dict>\n</plist>\n```\n\n```swift:ViewController.swift\nimport UIKit\nimport AVFoundation\nimport Speech\n\nclass ViewController: UIViewController {\n    private let textView: UITextView = UITextView()\n    private let startButton: UIButton = UIButton()\n    private var speechRecognizer: SFSpeechRecognizer?\n    private var recognitionRequest: SFSpeechURLRecognitionRequest?\n    private var recognitionTask: SFSpeechRecognitionTask?\n    private var avAudioFile: AVAudioFile!\n    private var speechText: String = \"\"\n    private var croppedFileInfos: [FileInfo] = []\n    private var croppedFileCount: Int = 0\n    private var currentIndex: Int = 0\n    \n    private struct FileInfo {\n        var url: URL\n        var startTime: Double\n        var endTime: Double\n    }\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        self.textView.backgroundColor = UIColor.white\n        self.textView.layer.borderWidth = 1\n        self.textView.layer.borderColor = UIColor.black.cgColor\n        self.view.addSubview(self.textView)\n        \n        self.startButton.setTitle(\"Start\", for: .normal)\n        self.startButton.setTitleColor(UIColor.black, for: .normal)\n        self.startButton.addTarget(self, action: #selector(self.touchUpStartButton(_:)), for: .touchUpInside)\n        self.view.addSubview(self.startButton)\n        \n        SFSpeechRecognizer.requestAuthorization { (authStatus) in\n        }\n    }\n    \n    override func viewDidLayoutSubviews() {\n        super.viewDidLayoutSubviews()\n        \n        let width: CGFloat = self.view.frame.width\n        let height: CGFloat = self.view.frame.height\n        \n        self.textView.frame = CGRect(x: 10, y: 80, width: width - 20, height: height - 200)\n        self.startButton.frame = CGRect(x: width / 2 - 40, y: height - 100, width: 80, height: 80)\n    }\n    \n    @objc private func touchUpStartButton(_ sender: UIButton) {\n        self.textView.text = \"\"\n        self.speechText = \"\"\n        cropFile()\n    }\n    \n    private func cropFile() {\n        if let audioPath = Bundle.main.path(forResource:\"sample\" , ofType:\"m4a\") {\n            let audioFileUrl = URL(fileURLWithPath : audioPath)\n            do {\n                self.avAudioFile = try AVAudioFile(forReading: audioFileUrl)\n            }catch let error{\n                print(error)\n            }\n            let recordTime = Double(self.avAudioFile.length) / self.avAudioFile.fileFormat.sampleRate\n            let oneFileTime: Double = 60\n            var startTime: Double = 0\n            \n            while startTime < recordTime {\n                let fullPath = NSHomeDirectory() + \"/Library/croppedFile_\" + String(self.croppedFileInfos.count) + \".m4a\"\n                if FileManager.default.fileExists(atPath: fullPath) {\n                    do {\n                        try FileManager.default.removeItem(atPath: fullPath)\n                    }catch let error {\n                        print(error)\n                    }\n                }\n                let url = URL(fileURLWithPath: fullPath)\n                let endTime: Double = startTime + oneFileTime <= recordTime ? startTime + oneFileTime : recordTime\n                self.croppedFileInfos.append(FileInfo(url: url, startTime: startTime, endTime: endTime))\n                startTime += oneFileTime\n            }\n            \n            for cropeedFileInfo in self.croppedFileInfos {\n                self.exportAsynchronously(fileInfo: cropeedFileInfo)\n            }\n        }\n    }\n\n    private func exportAsynchronously(fileInfo: FileInfo) {\n        let startCMTime = CMTimeMake(value: Int64(fileInfo.startTime), timescale: 1)\n        let endCMTime = CMTimeMake(value: Int64(fileInfo.endTime), timescale: 1)\n        let exportTimeRange = CMTimeRangeFromTimeToTime(start: startCMTime, end: endCMTime)\n        let asset = AVAsset(url: self.avAudioFile.url)\n        if let exporter = AVAssetExportSession(asset: asset, presetName: AVAssetExportPresetPassthrough) {\n            exporter.outputFileType = .m4a\n            exporter.timeRange = exportTimeRange\n            exporter.outputURL = fileInfo.url\n            exporter.exportAsynchronously(completionHandler: {\n                    switch exporter.status {\n                    case .completed:\n                        self.croppedFileCount += 1\n                        if self.croppedFileInfos.count == self.croppedFileCount {\n                            DispatchQueue.main.async {\n                                self.initalizeSpeechFramework()\n                            }\n                        }\n                    case .failed, .cancelled:\n                        if let error = exporter.error {\n                            print(error)\n                        }\n                    default:\n                        break\n                    }\n            })\n        }\n    }\n    \n    private func initalizeSpeechFramework() {\n        self.recognitionRequest = SFSpeechURLRecognitionRequest(url: self.croppedFileInfos[self.currentIndex].url)\n        let location = NSLocale.preferredLanguages\n        self.speechRecognizer = SFSpeechRecognizer(locale: Locale(identifier: location[0]))!\n        self.recognitionTask = self.speechRecognizer?.recognitionTask(with: self.recognitionRequest!, resultHandler: { (result: SFSpeechRecognitionResult?, error: Error?) -> Void in\n            if let error = error {\n                print(error)\n            } else {\n                if let result = result {\n                    self.textView.text = self.speechText + result.bestTranscription.formattedString\n                    if result.isFinal {\n                        self.finishOrRestartSpeechFramework()\n                    }\n                }\n            }\n        })\n    }\n    \n    private func finishOrRestartSpeechFramework() {\n        self.recognitionTask?.cancel()\n        self.recognitionTask?.finish()\n        self.speechText = self.textView.text\n        self.currentIndex += 1\n        if self.currentIndex < self.croppedFileInfos.count {\n            self.initalizeSpeechFramework()\n        }\n    }\n}\n```\n\n#参考文献\n[Speech | Apple Developer Documentation](https://developer.apple.com/documentation/speech)\n[SFSpeechURLRecognitionRequest | Apple Developer Documentation](https://developer.apple.com/documentation/speech/sfspeechurlrecognitionrequest)\n[Qiita | 【iOS】Speech Frameworkの実装](https://qiita.com/KentaKudo/items/8473146d5d596069b857)\n[Qiita | Swiftでの音声ファイルトリミング(Crop)と結合(Concat)](https://qiita.com/mag-chang/items/f5ef9f99c5a0ea294ad5)\n","user":"NaoSekig","created_at":"2021-03-28T16:28:41+09:00","updated_at":"2021-03-28T16:40:37+09:00"},{"url":"https://qiita.com/Miyayan/items/452053b6a530b3cf517c","title":"deviseのログインフォームをトップページにも実装したい","body":"# 概要\nこんにちは。\n\n現在Docker×Rails×MySQLでアプリを開発中です。\nわざわざログイン画面に遷移しなくても、ユーザー登録が済んでいればトップページからでもメールやパスワードを入力してログインできるようなサイトをよく見かけます。\n自分の開発しているアプリにもぜひ取り入れたいと思い実装をしたのですが、少し難儀したのでまとめたいと思います。\n\nもっとも伝えたいことが、**ビューのコピペだけではログインできなかった**という点の解消です。\n\n# 前提条件\n\n・ユーザー管理機能には**devise**を使用しています。\n・ログイン画面にてログインができることを確認の上、別のページでもログインフォームを作るのが目的です。\n・ログインフォームのみ。新規登録画面（サインアップ）は実装しません。\n\n# 実装（ビューファイルのみ）\n\n#### ログイン画面におけるビューはこのような形です。\n\n```ruby\n\n<%= form_with model: @user, url: user_session_path, class: 'registration-main', local: true do |f| %>\n<div class='form-wrap'>\n  <div class='form-header'>\n    <h1 class='form-header-text'>\n      ログイン\n    </h1>\n  </div>\n  <div class='login-flash-message'>\n    <%= flash[:notice] %>\n    <%= flash[:alert] %>\n  </div>\n  <div class=\"form-group\">\n    <div class='form-text-wrap'>\n      <label class=\"form-text\">メールアドレス</label>\n      <span class=\"indispensable\">必須</span>\n    </div>\n    <%= f.email_field :email, class:\"input-default\", id:\"email\", placeholder:\"PC・携帯どちらでも可\", autofocus: true %>\n  </div>\n  <div class=\"form-group\">\n    <div class='form-text-wrap'>\n      <label class=\"form-text\">パスワード</label>\n      <span class=\"indispensable\">必須</span>\n    </div>\n    <%= f.password_field :password, class:\"input-default\", id:\"password\", placeholder:\"\" %>\n  </div>\n  <div class='login-btn'>\n    <%= f.submit \"ログイン\" ,class:\"login-red-btn\" %>\n  </div>\n  <div class=\"info-text-signup\">\n    会員登録がまだの人は<span><%= link_to \"こちら\", new_user_registration_path %></span>\n  </div>\n</div>\n<% end %>\n\n```\n\n##### 参考画像\n※CSSコーディングしています。\n\n[![Image from Gyazo](https://i.gyazo.com/8b4149b39a96d34e29287a692f8d80e1.png)](https://gyazo.com/8b4149b39a96d34e29287a692f8d80e1)\n\n#### ここからemailとpasswordの入力フォーム及び、サインインボタンを切り取ります。\n\n```ruby\n   <% unless user_signed_in? %>\n      <%= form_with model: @user, url: user_session_path, class: 'top-session', local: true do |f| %>\n        <%= f.email_field :email, class:\"top-input-signin\", id:\"email\", placeholder:\"email\" %>\n        <%= f.password_field :password, class:\"top-input-signin\", id:\"password\", placeholder:\"password\" %>\n        <div class='top-signin-btn'>\n          <%= f.submit \"sign in\" ,class:\"top-signin-white-btn\" %>\n        </div>\n        <div class=\"top-info-text-signup\">\n          会員登録がまだの人は<span><%= link_to \"こちら\", new_user_registration_path %></span>\n        </div>\n      <% end %>\n    <% end %>\n```\n\n##### 参考画像\n※CSSコーディングしています。\n[![Image from Gyazo](https://i.gyazo.com/0b874efc670ba98a15e059fc53e13022.png)](https://gyazo.com/0b874efc670ba98a15e059fc53e13022)\n\nこのフォームをトップページに設置することができました！！\n\n#　問題点\n\nこれで登録されているemailとpasswordを入力してもサインインはできません。\n入力後、**sign in**ボタンを押しても、強制的にサインイン画面に遷移し、エラーメッセージが表示されます。\n\n##### /users/sign_in の画面\n[![Image from Gyazo](https://i.gyazo.com/9e7ebd8e77bf8da6be9e0993842a4035.png)](https://gyazo.com/9e7ebd8e77bf8da6be9e0993842a4035)\n\nログのパラメーターをみてみましょう。\nこれが現時点でのトップページに設置したログイン画面よりログインした時に送られたパラメーターの詳細です。\n\n```\nweb_1  | Started POST \"/users/sign_in\" for 172.28.0.1 at 2021-03-28 06:47:33 +0000\nweb_1  | Cannot render console from 172.28.0.1! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nweb_1  | Processing by Devise::SessionsController#create as HTML\nweb_1  |   Parameters: {\"authenticity_token\"=>\"[FILTERED]\", \"email\"=>\"test@test.com\", \"password\"=>\"[FILTERED]\", \"commit\"=>\"sign in\"}\nweb_1  | Completed 401 Unauthorized in 1ms (ActiveRecord: 0.0ms | Allocations: 502)\nweb_1  | \n```\n\n次にログイン画面より通常通りログインした時のログです。\n\n```\nweb_1  | Started POST \"/users/sign_in\" for 172.28.0.1 at 2021-03-28 07:11:37 +0000\nweb_1  | Cannot render console from 172.28.0.1! Allowed networks: 127.0.0.0/127.255.255.255, ::1\nweb_1  | Processing by Devise::SessionsController#create as HTML\nweb_1  |   Parameters: {\"authenticity_token\"=>\"[FILTERED]\", \"user\"=>{\"email\"=>\"test@test.com\", \"password\"=>\"[FILTERED]\"}, \"commit\"=>\"ログイン\"}\nweb_1  |   User Load (1.2ms)  SELECT `users`.* FROM `users` WHERE `users`.`email` = 'test@test.com' ORDER BY `users`.`id` ASC LIMIT 1\nweb_1  | Redirected to http://localhost:3000/\nweb_1  | Completed 302 Found in 229ms (ActiveRecord: 3.4ms | Allocations: 3620)\nweb_1  | \n```\n\nパラメーターの中身に注視すると、\nうまくいく時のパラメーターが\n\n```\nweb_1  |   Parameters: {\"authenticity_token\"=>\"[FILTERED]\", \"user\"=>{\"email\"=>\"test@test.com\", \"password\"=>\"[FILTERED]\"}, \"commit\"=>\"ログイン\"}\n```\nに対して、\nトップページからのログインのパラメーターは\n\n```\nweb_1  |   Parameters: {\"authenticity_token\"=>\"[FILTERED]\", \"email\"=>\"test@test.com\", \"password\"=>\"[FILTERED]\", \"commit\"=>\"sign in\"}\n```\n\nと、**user**というハッシュの中にまとめられていない**ことがわかります。\nそのため入力された値がどのテーブルから探しているのかわからず、エラーとなったのだと考えます。\nこれの解消にやや難儀したのですが、基本的なことでした。\n\nどちらもログインにあたって、Devise::SessionsController#createが働いていますが、\nそもそもトップページで働くコントローラーはメインのコントローラーのindexアクションがほとんどです。\n従いまして、コントローラーにuserのインスタンス変数を定義しなければなりませんでした。\n\n# 実装(コントローラー)\n\n```ruby\nclass HomesController < ApplicationController\n  def index\n    @user = User.new\n  end\nend\n```\n\nこれで無事トップページからもログインができました。\n\n# まとめ\nこの実装のために色々と的外れなことを調べたり試行錯誤していました。\n今一度基本に立ち戻り、コードを見直すことの重要性を痛感しました。\nMVCモデルのRailsにおいて、\n「今自分が実装しているところで動くコントローラーはなんだろう？」\n「ルーティングはどの流れで動いているだろう？」\n「このビューにおいて設定するインスタンス変数はどこで定義されているだろう？またすべきだろう？」\nそんな常に疑問視しながらコードを書いていこうと感じました。\n\nまた、この度初めてTeratailにて質問を投じさせていただきました。\nご回答いただいたエンジニアさんには感謝です。\nいつか自分が逆に他の人のエラーを助けれるようなエンジニアになるべく精進していきます。\n\nご覧いただきありがとうございました。\n","user":"Miyayan","created_at":"2021-03-28T16:26:50+09:00","updated_at":"2021-03-28T16:26:50+09:00"},{"url":"https://qiita.com/Moo_Moo_Farm/items/5691f3084654d73346a0","title":"REMOTE HOST IDENTIFICATION HAS CHANGED!","body":"## 概要\nssh 接続時にエラー発生\n\n## エラー内容\n\n発生手順\n\n1. サーバ吹っ飛ぶ\n1. OS 再インストール\n1. ssh 接続を試みる\n1. 以下の通りエラーが発生\n\n```bash\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n...snip...\n```\n\n## 原因\n\nSSH接続先の情報について、接続元が以下のファイルに保存される。\n\nそのため、OS再インストール等により接続先の情報が変わったため、不整合が生じた様子。\n\n保存場所: `cat ~/.ssh/known_hosts`\n\n> SSHでは、安全な接続を行うために接続先サーバの情報(RSA公開鍵のフィンガープリント)を、クライアントは保存する。SSH接続時には、以前保存したこの情報と、いままさに接続しようとしているサーバの情報が一致しているかを確認する。こうすることで、ユーザ（クライアント）が知らない間に、別のサーバへ接続してしまうことを防ぐ。よりセキュアになるってわけだ。\n>> [SSH接続エラー回避方法：\\.ssh/known\\_hostsから特定のホストを削除する/削除しないで対処する3つの方法 \\- Qiita](https://qiita.com/grgrjnjn/items/8ca33b64ea0406e12938)\n\n\n\n## 対策\n\n`vim ~/.ssh/known_hosts` により、以前の接続情報を削除した。\n","user":"Moo_Moo_Farm","created_at":"2021-03-28T16:24:21+09:00","updated_at":"2021-03-28T16:24:21+09:00"},{"url":"https://qiita.com/hiro-tech1192/items/367453f51fa26e4233b1","title":"AWSでControl Towerを使わずにマルチアカウントを実装してみた（③CloudTrail編）","body":"# はじめに\n前回記載した概要編、Organizations編の続きとなります。今回はCloudTrailを有効化して、セキュリティアカウントにログを収集するところまでを書きます。\n※前回記事はこちらを参照ください\n\nhttps://qiita.com/hiro-tech/items/b9f88efe542ac534637e\n\nhttps://qiita.com/hiro-tech/items/d7ebd7783e7fbfbc5cbb\n\n\n# 全体構成\n概要図はこんな感じです。Organizations内に複数のアカウントがありますが、これらメンバーアカウントで生成されたCloudTrailnoログを、セキュリティアカウント内のS3バケットに集約して保存する形になります。\n![構成図v2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/500bb51c-bc1b-636f-6623-d6a18b9e52b4.png)\n\n\n# 対応手順\n以下、対応手順を記載します。Organizationsコンソールは現時点では画面デザインが新しいものと古いものの両方を使えますが、今回は新しい方を使っていきます。\n\n## ログ集約用のS3バケット作成\nメンバーアカウント（セキュリティアカウント）での操作となります。まずは今回必要になるS3バケットを作成します。コンソールからポチポチするだけなので詳細は割愛しますが、バケットポリシーは以下の通り設定ください。\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"AWSCloudTrailAclCheck20150319\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:GetBucketAcl\",\n            \"Resource\": \"arn:aws:s3:::バケット名\"\n        },\n        {\n            \"Sid\": \"AWSCloudTrailWrite20150319\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:PutObject\",\n            \"Resource\": \"arn:aws:s3:::バケット名/AWSLogs/管理アカウントID/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"\n                }\n            }\n        },\n        {\n            \"Sid\": \"AWSCloudTrailWrite20150319\",\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"Service\": \"cloudtrail.amazonaws.com\"\n            },\n            \"Action\": \"s3:PutObject\",\n            \"Resource\": \"arn:aws:s3:::バケット名/AWSLogs/組織ID/*\",\n            \"Condition\": {\n                \"StringEquals\": {\n                    \"s3:x-amz-acl\": \"bucket-owner-full-control\"\n                }\n            }\n        }\n    ]\n}\n```\n上記ポリシー内の置き換え文字は以下の通りです。\n\n- バケット名：今回作成するバケットの名前\n- 管理アカウントID：Organizatinsの管理アカウントのIDを指定。例）123456789\n- 組織ID：Orgenizationsを有効化した際に割り当てられるID。Organizationコンソールから確認可能。\n\n\n## 管理アカウントでのCloudTrail有効化\nここから先は管理アカウントで操作を行います。上に記載した通り、Organizaitonsでは新旧デザインのコンソール画面が使えます。旧コンソールの場合、CloudTrailの有効化はOraganizations画面から行えましたが、新コンソールで同じ操作を行おうとすると以下の警告メッセージが表示されます。少なくとも2021年3月現在はCloudTrailコンソールから設定を行うことが推奨されているようなので、今回の手順でもこれに従います。\n![010.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/4955bcaa-63f2-108d-1979-b4bd04fc1434.png)\n\n\n\nというわけで管理アカウントでCloudTrailのコンソールを開きます。画面内の「証跡の作成」をクリックします。\n![020.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/618e8d81-e3a7-21cd-4bf3-c7477cec2cb5.png)\n\n\n\n必要な情報を入力して「次へ」をクリックします。「組織内の全てのアカウントについて有効化」がポイントです。必ずチェックしましょう。\nストレージの場所は「既存のS3バケットを使用する」を選び、先ほど作成したS3バケット名を指定します。SSE-KMSの有効化は任意ですが、セキュリティが向上するのでONにしておいた方がいいと思います。\n![030.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/cb640c49-c75f-7334-95e4-5ae708537247.png)\n\n\n\n\n次の画面はデフォルトのまま、管理イベントのみ取得するようにしました。このあたりは運用の要件に応じて随時見直してください。設定したら「次へ」をクリックします。\n![040.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/9d9a8c5e-ea6e-6b6e-4aab-896e43d03966.png)\n\n\n\n続いて確認画面が表示されるので、「証跡の作成」ボタンをクリックします。無事作成されると以下の画面が表示されます。\n![050.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/697408bc-d88d-7c43-5145-d6d33a73cafb.png)\n\n\n\nOrganizations側の設定も確認してみます。左メニューから「サービス」を開くと、CloudTrailの「信頼されたアクセス」が有効になっているのが分かります。\nこのように、新しコンソールでは各サービス側でOrganizationsのサービスを有効化する手順に変更になっているようです。\n![060.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/73be5782-10c7-9510-a501-a57b6c7c4640.png)\n\n\n\nメンバーアカウント（セキュリティアカウント）のS3バケットも確認してみます。下記の通り、正しくログ出力が行われることが確認できました。\n※メンバアカウントにスイッチして確認してください\n![070.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234157/afed8f1a-9ffa-e824-8d4e-9727d043f5dc.png)\n\n\n\n\n# 最後に\n今回はCloudTrailの有効化方法を説明しました。バケットはメンバーアカウントのものを使用していますが、CloudWatchなどでイベント処理を行う場合は、管理アカウント側で設定を行う必要がありますのでご注意ください。\nAWS ConfigやGuardDutyはメンバーへの委任機能があるので、CloudTrailでも同様なことができるようアップデートに期待しています。\n\n今回の記事が誰かのお役に立てると幸いです。\n\n\n\n\n","user":"hiro-tech1192","created_at":"2021-03-28T16:23:02+09:00","updated_at":"2021-03-28T16:29:52+09:00"},{"url":"https://qiita.com/herishiro/items/60bb52fe93ff42ee3cb0","title":"[Next.js]動的ルーティングページ間で外部データが更新されない問題","body":"## 問題\n\n動的ルーティング（dynamic routing）で生成されるページ内で、パス情報に依存したデータを外部取得している。\n他のページから移動したときは正常にデータを取得できるのに、動的パスのページ間で移動すると前のデータが残ってしまう！\n\n## TL;DR\n\n_app.tsxファイルをこの状態から\n\n```tsx:_app.tsx\nfunction MyApp({ Component, pageProps}: AppProps) {\n\treturn (\n\t\t\t...省略...\n\t\t\t<Component {...pageProps} />\n\t);\n}\n```\n↓下記のように、**router.asPathを元にkey属性を指定**すればOK\n\n```tsx:_app.tsx\nfunction MyApp({ Component, pageProps, router }: AppProps) {\n\treturn (\n\t\t\t...省略...\n\t\t\t<Component {...pageProps} key={router.asPath} />\n\t);\n}\n```\n\n## 解説\n\nこちらの[issue](https://github.com/vercel/next.js/issues/9992)で話し合われている内容です。\n根本的な原因は、動的ルーティングで生成されるページコンポーネントにkey属性がデフォルトで付いてないため、ルーティングされてもその内容が上手く更新されない事のようです。\nなので_app.tsxにあるグローバルなコンポーネントにkeyを付ければ解決するという、分かってみれば非常に分かりやすい解決策でした。\n\n[解決してくれたコメント] (https://github.com/vercel/next.js/issues/9992#issuecomment-784133959) 先月末のコメント、ツイてるな～\n\n\n### in my case\n\nちなみにissueはgetStaticPropsなどの外部データロード用の関数についてでしたが、自分の場合は別ファイルにあるサンプル日記データを、動的パスに含まれる日付をもとに検索して、その日の日記を取得し、useReducer()のinitialValueにセットして過去の日記を見るページを作っているときにこの問題にぶつかりました。\nある日の日記から別の日の日記に移動しようとすると、日記の内容が前のままになってしまう状態でした。\n\n上記の方法でreducerのstateを直接反映する部分はスマートに解決できたのですが、\n一点、stateのプロパティの内容を判定して日記の記入状態(empty or filled)を表示する部分は、useEffectのdependancyListに「stateに一意の値」（この場合は日記の日付）を指定する必要がありました。\n\n```tsx:.tsx\n    const [status, setStatus] = useState<Status>(\"empty\");\n\tuseEffect(() => {\n\t\tinitStatus({\n\t\t\tinputText1: field1.inputText,\n\t\t\tinputText2: field2.inputText,\n\t\t\tsetStatus,\n\t\t});\n\t}, [state.log.date]); //以前は[]にしていた\n\n... //2種類の入力欄がある日記が全部空かどうか判定してstatusを更新する関数\nconst initStatus = ({ inputText1, inputText2, setStatus }) => {\n\tconst allEmpty = [inputText1, inputText2].every((value) => !value);\n\tif (!allEmpty) {\n\t\tsetStatus(\"filled\");\n\t} else {\n\t\tsetStatus(\"empty\");\n\t}\n};\n\n```\n","user":"herishiro","created_at":"2021-03-28T16:20:18+09:00","updated_at":"2021-03-28T17:05:32+09:00"},{"url":"https://qiita.com/Unimaru/items/7a57fb52870c496dd52b","title":"Route53 トラフィックフローでルーティングポリシーを組み合わせてみた","body":"#目次\n[1.はじめに](#はじめに)\n[2.前提](#前提)\n[3.トラフィックフローとは](#トラフィックフローとは)\n[4.トラフィックフローの設定](#トラフィックフローの設定)\n[5.ルーティング状況の確認](#ルーティング状況の確認)\n[6.まとめ](#まとめ)\n\n#はじめに\nRoute53とはAWSで提供されているDNSサービスであり、ユーザからのリクエスト通信でドメイン名とIPアドレスの変換を行った上、効率的に通信先のインフラストラクチャにルーティングをします。ルーティングの方法としていくつか種類がありますので、以下の表にまとめますが、複数のルーティングポリシーを組み合わせる等、複雑なルーティングを実装する場合は設定や管理が煩雑になります。そこで今回、「トラフィックフロー」という複雑なルーティングの設定/管理をサポートする機能を使ってみましたので、概要と設定の流れを簡単に整理します。\n\n<table>\n<tr>\n <td><b>項番</b></td>\n  <td><b>ルーティングポリシー<b></td>\n  <td><b>内容</b></td>\n</tr>\n<tr>\n  <td><b>1</b></td>\n  <td>シンプルルーティング</td>\n　<td>単一のリソースへトラフィックをルーティングする</td>\n</tr>\n<tr>\n  <td><b>2</b></td>\n  <td>フェイルオーバールーティング</td>\n  <td>プライマリとセカンダリでリソースを指定し、プライマリのリソースが正常でない場合はセカンダリへトラフィックをルーティングする</td>\n</tr>\n<tr>\n  <td><b>3</b></td>\n  <td>位置情報ルーティング</td>\n　<td>ユーザの地理的場所(DNSクエリの送信元の場所)に基づいて、リソースを選択し、ルーティングする</td>\n</tr>\n<tr>\n  <td><b>4</b></td>\n  <td>地理的近接性ルーティング</td>\n　<td>ユーザ(DNSクエリの送信元)とリソースの地理的場所に基づいて、トラフィックをルーティングする<br>※トラフィックフローの機能を用いる必要がある</td>\n</tr>\n<tr>\n  <td><b>5</b></td>\n  <td>レイテンシールーティング</td>\n　<td>複数のAWSリージョンでアプリケーションがホストされている場合、ネットワークレイテンシーが最も低いAWSリージョンに基づいて、トラフィックをルーティングする</td>\n</tr>\n<tr>\n  <td><b>6</b></td>\n  <td>複数値回答ルーティング</td>\n　<td>ルーティング先として複数のリソースを設定できる(最大8つ)<br>\n※各リソースに対して、正常かどうかの確認をし、正常なリソースに対してルーティングする</td>\n</tr>\n<tr>\n  <td><b>7</b></td>\n  <td>加重ルーティング</td>\n　<td>ルーティング先として複数のリソースを設定し、各リソースへのルーティングの割合を指定してトラフィックを分散させる</td>\n</tr>\n</table>\n\n\n\n\n#前提\n今回は上表にある項番2「フェイルオーバールーティング」と項番7「加重ルーティング」をトラフィックフロー機能を用いて、組み合わせてみました。トラフィックフローを設定する上で構築したAWS構成は以下の通りとなります。\n![インフラ3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/4877c6ee-057c-7bc9-b19b-70a423cbb484.png)\n\n\n構築における補足は次の通りです。\n\n- 無料で使用できるドメインプロバイダ「Freenom」で独自ドメイン「aws-uni.ga」を取得しました。\n- Freenomのマイドメイン管理画面でNameServerにAWS Route53のDNSサーバを指定しました。\n- フェイルオーバールーティングで、通常時はALBへトラフィックをルーティングし、EC2インスタンスからWebページを返します。\n- フェイルオーバールーティングで、EC2インスタンス障害時等はS3バケットに保存されたSorryページを返します。\n- S3バケットでは静的Webサイトホスティング機能の有効化、読み取り専用のバケットポリシーを設定しました。\n- 加重ルーティングを使用し、通常時のトラフィックを2つのVPCに7:3の割合で分散します。\n- 構築したVPC/サブネット/EC2インスタンス/ALB/S3バケット/Route53の基本設定をまとめます。\n\n■ VPC\n![VPC.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/796ca3cc-73c1-c5c3-b9fa-c93df1b9a14a.png)\n■サブネット\n![サブネット.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/56703017-7600-be31-87fa-0fdf28f8f1a0.png)\n■EC2インスタンス\n![EC2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/aa05afde-c0dc-c11a-3b94-ff264ada28df.png)\n■ALB\n![ALB.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/8f0ae8ad-5815-47cf-ba72-61723a496ea2.png)\n■S3 　\n![S3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/90e99429-552a-fdfc-6274-7a5883dd2284.png)\n■Route53\nFreenomで取得したドメイン「aws-uni.ga」に対するパブリックホストゾーンの作成\n![53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/59643597-58bb-6016-8780-79953436bbb7.png)\n\n\n上記のような構成のもと、トラフィックフローを設定していきましたので、以降、概要と設定の流れをまとめておきたいと思います。\n\n#トラフィックフローとは\nRoute53でのDNSレコード設定について、レイテンシー、フェイルオーバー、加重などの複数のルーティングポリシーを組み合わせて使用する場合、複雑な階層構造となり、レコードの管理が難しくなることがあります。このような複雑なルーティングのサポートをしてくれるのがトラフィックフローであり、主に次のような機能を提供します。\n![トラフィックフロー.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/1f0a42ab-5fc0-0d48-e176-1ed7b7df454c.png)\n\n\n###ビジュアルエディタ\nトラフィックフロービジュアルエディタを使用すると、簡単なGUI操作でレコードの複雑な階層構造をトラフィックポリシーとして定義し、レコード間の関係を視覚的に管理することができます。また、トラフィックポリシーの作成数に上限はありません。\n\n###バージョニング\n作成したトラフィックポリシーはバージョン管理をすることができます。そのため、ポリシーに変更が発生した際も最初から作成し直す必要もありません。また、デフォルトでは1つのトラフィックポリシーに対し、1000バージョンまで管理することができます。\n\n###地理的近接性ルーティングポリシー\nRoute53の地理的近接性ポリシーはトラフィックフローを使用する場合のみに使用できます。\n\n※AWS公式によると、トラフィックフローの料金は「50.00USDポリシー記録ごと/月」でした。割と高めの料金かなと思いますので、設定した場合、不要であれば削除を忘れないようにしましょう。\n\n#トラフィックフローの設定\nそれでは、「前提」で記載したAWS構成を構築するにあたり、トラフィックフローの設定の流れをまとめていきます。\n\n- Route53の管理画面から「トラフィックポリシー」を押下します。\n![Route53管理画面.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/397cb2f1-a40f-9e60-7ebe-4de6008bfab4.png)\n- 「トラフィックポリシーの作成」を押下します。\n![トラフィックフロー.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/2745323b-cd44-8159-f1bc-52bdceca27d2.png)\n- 「ポリシー名」と適宜「バージョンの説明」を入力し、「次へ」を押下します。\n![ポリシー名.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/a93c5102-1283-0e24-ae0d-cdf96c06cd7d.png)\n- 次のようなエディタ画面が表示されます。DNSタイプはいくつかの選択肢から選べますが、今回はAレコードを指定します。\n![選択肢.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/ef608d5a-ecd8-7e69-9281-fc9fcee196ef.png)\n- 「＋...に接続」を押下します。\n![エディタ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/bed53f70-a784-f9e5-17af-698b64008adf.png)\n- 「フェイルオーバールール」を選択します。\n![フェイルオーバー.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/5f5ab946-82e4-76bd-c499-f75fcb76c0af.png)\n- プライマリとセカンダリに分岐されるので、プライマリの方で「加重ルール」を選択します。\n![加重.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/98ba510b-1e39-50ed-a181-faf1170b3c91.png)\n- 分散させるウェイトを入力した上で、加重70%の方の「新しいエンドポイント」を選択します。\n![ウェイト.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/a2942782-8e2f-2dfd-f47a-4a1a23d08a62.png)\n- 様々なエンドポイントを指定できますが、今回は「ELB Applicationロードバランサー」を選択します。\n![ELB.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/bd0e5466-f690-4f10-f23f-acef070a846f.png)\n- 既に作成済のALBを指定します。\n![ELB選択.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/41cb8631-da8b-6c58-32b7-38dda02e7e1b.png)\n- 同様の手順で加重30%の方のエンドポイントも指定します。\n![30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/fad4d993-8682-7541-0e93-edd0dd285206.png)\n- 続いて、フェールオーバールーティングのセカンダリの方のエンドポイントとして「S3ウェブサイトエンドポイント」を選択します。\n![セカンダリ.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/382f7bb7-90b8-02d0-d0d4-45c27200cd79.png)\n- 「値」の欄で既に作成済のS3バケットを指定します。\n![バケット.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/1b1c21f7-7b5e-07d1-4ea3-fb75408d2d13.png)\n- トラフィックフローの全体図を作成できましたので、右下の「トラフィックポリシーの作成」を押下します。\n![フロー全体.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/50b6eabd-b923-1d28-eb41-ab02910db262.png)\n- トラフィックポリシーがバージョン番号1として作成されましたので、続いて「ポリシーレコードの作成」を押下します。\n![ポリシーレコード.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/f36b1133-9800-349d-d444-a0e16a39f697.png)\n- 「ホストゾーン」にFreenomで取得したドメイン名を入力、またポリシーレコードDNS名を入力し、「ポリシーレコードの作成」を押下します。\n![レコード作成.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/1a455599-e149-0223-0d93-1d258c415c0a.png)\n- ポリシーレコードが作成されたことを確認します。\n![ポリシーレコードDNS.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/f69c3a79-fd4f-ad43-5b2f-7132d1d7e606.png)\n\n以上により、ポリシーレコードDNS名「blog.aws-uni.ga」を用いたフェイルオーバールーティング、加重ルーティングの組み合わせをトラフィックフローによって設定することができました。\n\n#ルーティング状況の確認\n\n最後に、上記で設定したルーティング状況の確認をしてみます。\n\n###加重ルーティング\nブラウザにて「blog.aws-uni.ga」で接続したところ、2つのVPCへトラフィックが分散され、EC2インスタンス内のWebページが表示されることを確認できました。\n○加重70%の方のEC2インスタンスから返されたWebページ\n![bluea.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/a4fcb003-1c44-176a-f24b-07360011651e.png)\n![bluc.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/5be2cd13-3ebb-19af-eb8d-4ea417583e5a.png)\n○加重30%の方のEC2インスタンスから返されたWebページ\n![greena.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/f8b4c4b0-8868-81c7-1f07-93ed6200a762.png)\n![greenc.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/9080c21f-2547-e38e-2b2d-f76aecba00fb.png)\n\n###フェイルオーバールーティング\n「前提」で記載した構成図上のEC2インスタンス4台を全て停止し、擬似的な障害を発生させた上で、ブラウザにて「blog.aws-uni.ga」で接続したところ、S3バケットに格納したSorryページが表示されることを確認できました。\n![sorry.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1067765/8e0d5106-b4e4-b17c-1bcb-af3c714a24ec.png)\n\n#まとめ\n以上より、Route53のトラフィックフローを使用して、フェイルオーバールーティングと加重ルーティングの組み合わせを体験してみました。ルーティングポリシーの連携を簡単なGUI操作で設定でき、かつ視覚的にも管理できるため、非常に便利でした。\n\nまた今回はトラフィックフローの概要、設定にフォーカスをあてた為、以下の点については妥協しておりますので、また別の記事としてまとめていけたらなと思います。\n\n- フェイルオーバールーティングのプライマリから返されるWebページが静的であり、S3バケットに格納したSorryページと同等なものがレスポンスされている。<br>\n⇨今後、オリジナルアプリを作成し、EC2インスタンスへのデプロイを試したいなと思っています。\n- HTTPS通信での暗号化\n- 加重ルーティングのBlue/Greenデプロイメントでの利用。 Elastic Beanstalk やCodePipeline 等を組み合わせたBlue/Greenデプロイメント環境の構築も面白そうです。\n\n\n以上、最後まで読んで頂きありがとうございました！\n\n※この記事はAWS初学者を導く体系的な動画学習サービス「AWS CloudTech」の課題カリキュラムで作成しました。\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","user":"Unimaru","created_at":"2021-03-28T16:17:04+09:00","updated_at":"2021-03-28T16:17:04+09:00"},{"url":"https://qiita.com/masakinihirota/items/2cb74d6db561fc7109de","title":"Figma to React ＜無料のウェブデザインツールFigmaのデザインをReactコードに変換するウェブアプリ＞","body":"# 何が嬉しいの？\nFigmaという無料*1のウェブデザインツールのデータをReactのコードに変換してくれます。\n\n*1 個人利用の場合\n\nhttps://figma-to-react.vercel.app/\n\nこれはtwitterで見かけたFigmaからReactコードにコンバートしてくれるウェブアプリです。\n\nhttps://twitter.com/tomsoderlund/status/1375826499438264324\n\nNext.jsかReact Nativeのどちらかのコードを排出してくれます。\n\n# 使い方\n\n準備する２つのモノ\n\n* コンバートしたいFigmaのURL\n* FIGMA ACCESS TOKEN\n\n##FIGMA ACCESS TOKENの取得の仕方\n\n![figma setting.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/44761/0f58c41e-2e49-de87-8535-a74e37448042.png)\n\n上図のAcount settingから\n\n![figma access token加工済み.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/44761/31ac13b8-6065-0431-21cd-17a4cea5c207.png)\n\nPersonal access tokensでACCESS TOKENを取得します。\n\n取得の仕方は\n＋Create a new personal access token\nを押下するとEnter a description for your token\nと出るので、ここにURLを貼り付けると発行されます。\n\n## EXPORT FORMAT\nREACT NATIVEとNEXT.JS (REACT WEB + STYLED-JSX)のどちらかを選んでGenerate React codeボタンを押下するとコードが生成されます。\n\n\n","user":"masakinihirota","created_at":"2021-03-28T16:08:34+09:00","updated_at":"2021-03-28T22:17:05+09:00"},{"url":"https://qiita.com/House-lovers7/items/b215dde840f478169e19","title":"はじめて共同開発にトライする方へ向けた便利TIPS","body":"\n初めて共同開発を体験して、昔の自分がこれを知っておいたら便利だろうと思えることを備忘録をかねて書き記します。\n\n##slackの情報共有はとっても便利\n\n下記記事をご参考ください。\nhttps://qiita.com/unsoluble_sugar/items/e42ac352400598a24915\n\n連携するとGitHubの変更履歴がSlackと同期するのでSlackの掲示板で進捗確認できて便利です。\n![スクリーンショット 2021-03-28 15.34.24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/455521/6c92eca6-8ee9-8f81-3731-ae6e62a27a12.png)\n\n\n\n\n##まずはブランチを作成しよう\n```Ruby:ブランチの作成\ngit checkout -b ブランチ名\n```\n\n```Ruby:ついでに覚えておくと便利\ngit switch \"ブランチ名\"\n#↓\n#ブランチの切り替えができます。\ngit branch -d \"ブランチ名\" \n#↓\n#ブランチの削除ができます。\n```\n\n##事前準備\n```Ruby:事前に確認すること\n\n% git branch\n  guest_login\n* like-post\n  master\n  model-test\n```\n※がついているコードが現在使っているbranchです。\n基本的に**master**ブランチを使うことはまずありません。\n\n\n##いまあるローカルブランチにリモートブランチをもってくるケース\n前回のコミットからの進捗をgit pushしてアップデートしてください。\n\n```Ruby:pushの手順\ngit add -A\n#-AはALLの略なので差分が全てコミットとされて困る場合は、更新したい特定のファイルだけを指定する。\ngit commit -m \"コミットメッセージ\"\ngit push\n```\n\n##リモートブランチ(GitHubのブランチ)をローカルへ持ってくる\nリモートブランチをpull(プル）するっていいます。\n例は以下の設定はです。\nあたりまえかもしれませんが、半角ブランクをブランチ名とURLの前にあけてください。\n\nブランチ名：maser\n同期したいURL:https://github.com/kyodo/development.git\n\n```Ruby:リモートから指定のBranchをローカルへ持ってる時\ngit pull URL master\ngit pull \"同期したいアカウントのURL\" \"同期したいBRANCH名\"\n\n例\ngit pull https://github.com/kyodo/development.git master\n\n#1例としての以下のような表示がでます。\n\nwarning: Pulling without specifying how to reconcile divergent branches is\ndiscouraged. You can squelch this message by running one of the following\ncommands sometime before your next pull:\n\n  git config pull.rebase false  # merge (the default strategy)\n  git config pull.rebase true   # rebase\n  git config pull.ff only       # fast-forward only\n\nYou can replace \"git config\" with \"git config --global\" to set a default\npreference for all repositories. You can also pass --rebase, --no-rebase,\nor --ff-only on the command line to override the configured default per\ninvocation.\n\nremote: Enumerating objects: 36, done.\nremote: Counting objects: 100% (36/36), done.\nremote: Compressing objects: 100% (10/10), done.\nremote: Total 18 (delta 13), reused 12 (delta 8), pack-reused 0\nUnpacking objects: 100% (18/18), 2.27 KiB | 154.00 KiB/s, done.\nFrom https://github.com/koudaikumazaki/team-development\n * branch            master     -> FETCH_HEAD\nUpdating 3b43c45..8af03e2\nFast-forward\n Gemfile.lock                        |  2 +-\n app/controllers/posts_controller.rb | 34 +++++++++++++++++++++++++++++++---\n app/views/posts/edit.erb            | 28 ++++++++++++++++++++++++++++\n app/views/posts/index.html.erb      |  4 ++--\n app/views/posts/show.html.erb       |  2 +-\n 5 files changed, 63 insertions(+), 7 deletions(-)\n create mode 100644 app/views/posts/edit.erb\n```\n\n##ローカルで更新した情報をリモートへアップデートする。\n\n```Ruby:リモートへローカルの更新情報を反映する。\ngit add -A\n#-AはALLの略なので差分が全てコミットとされて困る場合は、更新したい特定のファイルだけを指定する。\ngit commit -m \"メッセージ名\"\n\n\ngit push origin \"現在のブランチ名\"\n#または\ngit push origin HEAD\n\n#HEADは現在のブランチなので、\n#git branch\n#で現在のブランチを特定して調べてから\n#git push origin \"現在のブランチ名\"\n#と入力する手間が省けて便利。\n\n※git push後に下記が表示されたケースでは、誤って、git push origin HEAD:masterを選択してはイケません!!!!\n#筆者はやってしまったことがあるのでくれぐれもご注意を。\n\nfatal: The upstream branch of your current branch does not match\nthe name of your current branch.  To push to the upstream branch\non the remote, use\n\n    git push origin HEAD:master\n\nTo push to the branch of the same name on the remote, use\n\n    git push origin HEAD\n\nTo choose either option permanently, see push.default in 'git help config'.\n\n```\n\n\n余談ですが。\nGitで共同開発を知ってみるとCoding以外の分野で応用ができそうに思えてきます。参考例です。\n\nhttps://qiita.com/ktkraoichi/items/f6ad43c2da0b3136d6be\n\n**TBDです!!!**\n現在、共同開発中なので随時更新します!!!!\n\ngit push --set-upstream origin ブランチ名\n","user":"House-lovers7","created_at":"2021-03-28T16:07:46+09:00","updated_at":"2021-03-28T20:33:02+09:00"},{"url":"https://qiita.com/fukudayoshitsugu/items/ee5558c8c0ba6049bb96","title":"市場に価値を提供できるエンジニアになる","body":"初めまして、中島聡さんの様な伝説のエンジニアになりたく、これからエンジニアを目指すことに決めました。\n\nこれからの目標はこんな感じです。\n\n1〜3年目\nエンジニアとして経験を積みながら、システム開発に必要な知識を習得し、顧客の要望に応えられる能力を身に付け、機械学習を学び、レコメンド機能などを使ったサービスを考える。\n\n4〜5年目\nプロジェクトリーダーになり、チーム全体の進捗管理など、前職で培ったマネジメント能力を活かす。\n\n6年目以降\n予算の収支を意識しながら、プロジェクトを成功に導けるプロジェクトマネジャーとして活躍。\n\n\n最終目標は市場に価値を提供できるエンジニア、自分の作ったサービスを多くの人に使ってもらうです！！\n皆様、よろしくお願い致します。\n\n","user":"fukudayoshitsugu","created_at":"2021-03-28T16:07:25+09:00","updated_at":"2021-03-28T16:09:43+09:00"},{"url":"https://qiita.com/zaburo/items/27b5b819fae2bde97a3b","title":"WSL2 + Ubuntu + VSCodeでの開発環境構築","body":"\n日常的にはMacを利用していますがWSLを利用する機会がありそうなのでメモ。\n\n## やりたいこと\n\n* WSL2をインストール\n* Ubuntu(20.02 LTS)をインストール\n* (Win側の)VSCodeでUbutu内のファイル編集、実行\n\n## 準備\n\n### 個人的環境依存（MacのParallelsでWindowsを利用してる人向け）\n\n私は基本的にMacを利用していてWindowsはParallels上で利用しています。\nPrallelsではデフォルトでVMのネストはOFFになっているので作業前にONにしておく必要があります。\n\n\n\n![スクリーンショット_2021-03-28_8_24_05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/30de4d9b-a3e7-e4b4-c2e8-562ae3bd62dd.png \"スクリーンショット_2021-03-28_8_24_05.png\")\n\n\n>もしかするとネストできるのはParallelsのPro以上かもしれません。もしメニューがない人はそれが原因かも。FustionもProじゃないとネストできないみたいです。さらに、このメニューがでるのはWindowsのVMのときだけみたいです。ゲストOSがMacだと出ません。。。\n\nそうしてないと\n\n```bash\nWslRegisterDistribution failed with error: 0x80370102 \n```\n\nというエラーでLinuxがうまく起動しません（インストールはできます）。\n\n>Windowsの実機でもBIOS等でVirtualization TechnologyがOFFになっていると同じエラーがでます。\n\n\n### Windows Updateの実行\n\nWindowsのビルドバージョンによりインストールできないことがあるようなのでひどまず最新のWindows Updateをかけておくのが無難です（私がやったのは2021年3月15日）。\n\n### 環境の確認\n\n念の為winverコマンドを実行してバージョンを確認しておきましょう。\nWSL2の要求はビルド18362以上だそうです。私の環境は、19042.867でした。\n\n![スクリーンショット 2021-03-28 15.27.40.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/e1dcdb23-894a-c0cd-1c87-c1ebeb7fde03.png \"スクリーンショット 2021-03-28 15.27.40.png\")\n\n\n>検索でwinverと入れれば見つかります。\n\n### その他\n\nhostname等はwindowsのものがそのまま反映されるので不都合があるようなら変更したりします（しなくてもいいです）。\n\n\n## WSL2のインストール\n\n### WSLとは？\n\nWSLはWindows Subsystem for Linuxの略で、端折って言えば「WindowsでLinuxを実行するための基盤」という感じです。\n記事等ではUbuntuの利用がよく紹介されていますが、当然その他のディストリビューションも利用できます。\n\nWSLはWindows 20H1でアーキテクチャが変更されWSL2となり、Docker等も利用可能になったようです。アーキテクチャの差は[こちらの記事](https://www.atmarkit.co.jp/ait/articles/1906/14/news019.html)など見てはいかがでしょうか。WSL1を利用する理由は特に無いのでWSL2をセットアップしていきます。\n\n\nWS2の利用手順は基本的には[ここ](https://docs.microsoft.com/ja-jp/windows/wsl/install-win10)の（手動）手順の通りで大丈夫です。\n\n>Windows Insider Programに参加してごにょごにょすればwsl --installコマンド一発でインストールできるらしいのですが、今回は普通？のWindowsにインストールすることを想定して手動インストールをします。\n\n\n## WSLのセットアップ\n\nPowerShellを管理者権限で起動し、以下のコマンドを実行していきます。\n\n![スクリーンショット 2021-03-28 15.28.04.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/311de8dc-2eea-a697-26ce-372c8bd14910.png \"スクリーンショット 2021-03-28 15.28.04.png\")\n\n\n>スタートボタンを右クリックで出ます。\n\n### WSLの有効化\n\n```bash\ndism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart\n```\n\n### 仮想マシンプラットフォームの有効化\n\n```bash\ndism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart\n```\n\nここで一旦マシンを再起動しておきます。じゃないと次のLinuxカーネル更新プログラムがコケます。\n\n>/norestartオプションを付けなければ再起動するか聞いてきます。\n\n### Linuxカーネル更新プログラムのインストール\n\nWSLで利用するLinuxカーネル部の更新でしょうか。普通にダウンロードしてインストール。\n\nhttps://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi\n\n### WSL2を規定のバージョンに設定\n\n```bash\nwsl --set-default-version 2\n```\n\nここまでの作業でLinuxが動く基盤環境はできました。\n\n## Linux(Ubuntu)のセットアップ\n\n### Ubuntuのダウンロードとインストール\n\nMicrosoft Storeを開く。\n\n![スクリーンショット 2021-03-28 15.34.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/3540f85b-1289-6f75-e5dd-9df1b08692f3.png \"スクリーンショット 2021-03-28 15.34.34.png\")\n\n\n検索画面でUbuntu 20.04を見つけてインストール。\n\n\n![スクリーンショット 2021-03-28 15.35.17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/b88ceacf-707b-d521-9dbc-3a1fcc2c12cb.png \"スクリーンショット 2021-03-28 15.35.17.png\")\n\n\nubuntuを起動させます。\nこのときVirtualization Technology(VT-X)がONになっていないと準備で説明した0x80370102エラーがでます。\n正常だとユーザー名、パスワードを聞いてきます。\n\n![スクリーンショット 2021-03-28 15.41.45.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/878bbe76-170b-c5e8-bbe3-a992d8122481.png \"スクリーンショット 2021-03-28 15.41.45.png\")\n\nユーザーの登録が完了するとプロンプトが表示されます。\n\n![Kobito.bfN2r1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/d9f52488-beac-0e17-8482-68a513b21134.png \"Kobito.bfN2r1.png\")\n\n\nこれでUbuntuのインストールは完了しました。\n\n\n## Windowsとの連携による開発環境構築（VSCode)\n\nWindows側にインストールしたVSCodeと拡張機能を通してシームレスに連携しながら開発ができます。\n\n### VSCodeのインストール\n\nまだならVSCodeをインストールしてください。\nMicrosoft storeには無いので、ネットで検索してダウンロードしてください。\n\nhttps://code.visualstudio.com/Download\n\n\n私はオプションを全文ONにしました。\n\n\n![Kobito.0KgtVT.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/a5dd65f9-16e2-8b33-b9f8-6ce13b6aa847.png \"Kobito.0KgtVT.png\")\n\n\n### VSCode拡張機能(Remote WSL)のインストール\n\nVSCodeを起動するとRemote WSL拡張をインストールするか？と聞いてくるのでここでOKでもいいです。\n\n![Kobito.jMgN9v.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/2d9ff46e-389e-5162-dc6c-faa6e19ccd61.png \"Kobito.jMgN9v.png\")\n\n\n後から拡張機能のところからRemote WSLを選択してインストールすることももちろんできます。\n\n![Kobito.Arnz5H.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/9dc61cd1-14f9-fa34-72fd-ee52c5dc67c1.png \"Kobito.Arnz5H.png\")\n\nこのときUbuntuが起動していたら一度終了させてください（ctr + D）。そうじゃないとうまく動作しません。\n\n### 連携動作確認\n\nubuntuを起動させログインします（しています）。\n適当な作業ディレクトリを作成し（しなくてもいいです）、vscodeを起動させます。\n\n```bash:ubuntu側での処理\nmkdir test\ncd test\ncode .\n```\n\nすると拡張機能がインストールされ、Windows側でvsocdeが起動します。\nTerminalを開くとubuntu側の作業ディレクトリにマッピングされているのがわかります。あとは開発するだけです。\n\n![スクリーンショット 2021-03-28 15.54.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/e0bcd838-f1b2-0068-2766-0ca74a944e4e.png \"スクリーンショット 2021-03-28 15.54.51.png\")\n\n\n\n## 開発メモ\n\nいくつかメモ。\n\n### ubuntu側の（Web)サーバにアクセスする\n\nhttp://localhost:3000 等、localhostとしてアクセス可能です。127.0.0.1はダメみたいでlocalhostにリダイレクトされます。\n\n### シャットダウン\n\nubuntu上でrebootやshutdownが効きません。そのためには\n\nWindows側で\n\n```bash\n wsl --shutdown\n```\n\nとするか、ctr + Dをすればよいいようです。\n\n### ubuntuの最低限の設定\n\n#### update\n\n```bash\nsudo apt update\nsudo apt upgrade -y\n```\n\n#### locale\n\n```bash\nsudo apt install language-pack-ja -y\nsudo update-locale LANG=ja_JP.UTF8\n```\n\n>再度コンソールを開いてlocaleコマンドで確認してください。日本語にもなっています。\n\n#### timezone\n\n標準でJSTみたい。\n\n### rootになる\n\n```bash\nsudo su -\n```\n\n### リセット\n\nubuntuはインストール時の状態（user作成前）に戻すことができる（スナップショットも取れるがあまり実用的ではない）。\n環境がぐちゃぐちゃになったらリセットするのもあり。\n\n[設定]->[アプリ]->[アプリと機能]->[Ubuntu]-[詳細オプション]->[リセット]\n\n![Kobito.A1R3US.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/55188/3070411a-21e6-8b8d-e04e-28cf979cf3fc.png \"Kobito.A1R3US.png\")\n\n### Windows Terminalの設定\n\nstoreからWindows Terminalを追加インストール。いらないといえばいらないが、コピペとかができるのでまあ便利。\n標準はPowerShellになっているので標準をUbuntuかつログインディレクトリを/home/usernameに設定。\n\n\n```json:setting.json\n\n{\n    \"$schema\": \"https://aka.ms/terminal-profiles-schema\",\n    \"defaultProfile\": \"{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}\", //ubuntu profileのgidをコピー\n    \"copyOnSelect\": false,\n    \"copyFormatting\": false,\n    \"profiles\":\n    {\n        \"defaults\":\n        {\n        },\n        \"list\":\n        [\n            {\n                // Make changes here to the powershell.exe profile.\n                \"guid\": \"{61c54bbd-c2c6-5271-96e7-009a87ff44bf}\",\n                \"name\": \"Windows PowerShell\",\n                \"commandline\": \"powershell.exe\",\n                \"hidden\": false\n            },\n            {\n                // Make changes here to the cmd.exe profile.\n                \"guid\": \"{0caa0dad-35be-5f56-a8ff-afceeeaa6101}\",\n                \"name\": \"コマンド プロンプト\",\n                \"commandline\": \"cmd.exe\",\n                \"hidden\": false\n            },\n            {\n                //ubuntu 20.04 profile\n                \"guid\": \"{07b52e3e-de2c-5db4-bd2d-ba144ed6c273}\",\n                \"hidden\": false,\n                \"name\": \"Ubuntu-20.04\",\n                \"source\": \"Windows.Terminal.Wsl\",\n                \"startingDirectory\": \"//wsl$/Ubuntu-20.04/home/demouser\" //start directory\n            },\n            {\n                \"guid\": \"{b453ae62-4e3d-5e58-b989-0a998ec441b8}\",\n                \"hidden\": false,\n                \"name\": \"Azure Cloud Shell\",\n                \"source\": \"Windows.Terminal.Azure\"\n            }\n        ]\n    },\n\n\n    \"schemes\": [],\n    \"actions\":\n    [\n        { \"command\": {\"action\": \"copy\", \"singleLine\": false }, \"keys\": \"ctrl+c\" },\n        { \"command\": \"paste\", \"keys\": \"ctrl+v\" },\n        // Press Ctrl+Shift+F to open the search box\n        { \"command\": \"find\", \"keys\": \"ctrl+shift+f\" },\n        { \"command\": { \"action\": \"splitPane\", \"split\": \"auto\", \"splitMode\": \"duplicate\" }, \"keys\": \"alt+shift+d\" }\n    ]\n}\n```\n\n\n\n\n\n","user":"zaburo","created_at":"2021-03-28T16:03:07+09:00","updated_at":"2021-03-28T16:53:02+09:00"},{"url":"https://qiita.com/horitomoyuki/items/ded25d465aa30c0c24db","title":"Formオブジェクト","body":"# Formオブジェクトとは\n\nフォームに関する処理を切り出す仕組みのこと\n\n## Formオブジェクトの詳細\n\n複雑なアプリケーションを実装する際、一度の投稿作業で、複数のテーブルの情報を更新したい場合、Formオブジェクトが有効。\n\n・フォームから入力された値が複数のモデルに関連するデータであり、一度に複数のモデルを操作して、それぞれのデータを更新したいとき\n\n・フォームから入力された値に対応するモデルは無いが、バリデーションをかけるとき\n\n## 使い方\n```ruby\nclass # クラス名\n  include ActiveModel::Model\nend\n```\nクラス名にActiveModel::Modelをincludeする\n","user":"horitomoyuki","created_at":"2021-03-28T16:03:04+09:00","updated_at":"2021-03-28T16:04:10+09:00"},{"url":"https://qiita.com/7note/items/290d18194fec89f087f7","title":"【初心者向け】もうz-indexの数字で迷うのはヤメにしたい！","body":"#どうも7noteです。z-indexのめちゃくちゃな指定はもうヤメにします！\n\n要素の前後の優先順位を決めることができる、`z-index`ですが便利です。\n便利だけど、適当に指定していると思わぬ順番になってしまい、ぐちゃぐちゃに。。。\n重ね順の指定ってムズカシイ。\n\n\nということで、**マイルールを決めます！**\n\n## その前に、z-indexについておさらい\n\n>CSS の z-index プロパティは、位置指定要素とその子孫要素、またはフレックスアイテムの z 順を定義します。より大きな z-index を持つ要素はより小さな要素の上に重なります。\n引用元：https://developer.mozilla.org/ja/docs/Web/CSS/z-index\n\n\n### 1. 「z-indexを何も指定しないと、後ろに書かれた要素が上にくる。」\n\n### 2. 「使えるのは整数のみ。（0やマイナスは可）」\n\nちなみに最大値「2147483647」、最小値「-2147483647」が限界。\n\n### 3. 「z-indexを有効にするためにはposition指定が必要」\n\n- `position: relative;`\n- `position: absolute;`\n- `position: fixed;`\n- `position: sticky;`\n\nこれらが指定されている要素にz-indexを指定することでz-indexが有効化されます。\n\n**※つまり`position: static;`（初期値）には効かない。**\n\n## 本題：z-indexのマイルールを決める\n（※以下は私のマイルールです。変更の可能性大。）\n\n\n|使用場所|数値～|補足|\n|:--|:--|:--|\n|背景的に使いたい大きな要素|-100||\n|背面に隠す要素|-1 ～ -99|疑似要素とか|\n|**基準値**|**0**|初期値|\n|普段使うもの|1 ～ 98|**バルーン**とか。|\n|リンクエリア拡大|99|「biggerlink」や「linkarea」などaタグのクリック範囲を広げるもの|\n|-|-|-|\n|モーダル①|999|※画面固定する要素を含まない|\n|**画面固定する要素**|**1000**|画面固定するヘッダーやフッターなど|\n|-|-|-|\n|固定ヘッダーの上にくるnavメニュー|1010|※ナビゲーションメニューが覆いかぶさるようなやつ|\n|-|-|-|\n|モーダル②|9999|すべてを覆いつくすモーダル|\n\n## 解説\n\n- 要素の後ろに隠したいもの⇒**マイナス値**\n- スクロールができる要素に対して⇒**1～998**\n- スクロールができる要素を覆う⇒**999**\n- 固定する要素に対して⇒**1000～**\n\nイメージとしてはこんな感じで設定しています。\n\n-背景-\n-基準-\n-コンテンツ-\n-固定コンテンツ-\n\n大きくこの4層に分けることで大体のレイアウトに対応できるようなイメージです。\nもちろんサイトのデザインによって変更が必要な場所も出てくると思うので、その際は予備で空いている間等に設定しなおすことでなんとかなるはず・・・\n\n\n### ▼運用イメージ\n\nたとえばスライドショーの矢印なんかはスクロールができる要素であることが多いので、10とかを設定しておきます。\n写真タップで、拡大写真を表示したいようなモーダルの動きは、固定ヘッダーも覆うような全画面のデザインなら9999。モーダルよりも固定ヘッダーを上にしておいておきたい場合は999を指定。もし変更したくなっても1桁変えるだけなので簡単！\n\n\n## まとめ\n\nまだ実運用経験が少ないルールですので、他にz-indexを使う場面を追加していく予定ではありますが、「私はこうしています！」みたいなルールがあればぜひ共有してください！\n\n参考：\nhttps://developer.mozilla.org/ja/docs/Web/CSS/z-index\nhttps://saruwakakun.com/html-css/basic/z-index\nhttps://tech.basicinc.jp/articles/170\n\n\n#### おそまつ！\n~ Qiitaで毎日投稿中!! ~\n[【初心者向け】WEB制作のちょいテク詰め合わせ](https://qiita.com/7note)\n","user":"7note","created_at":"2021-03-28T16:01:11+09:00","updated_at":"2021-03-28T16:01:11+09:00"},{"url":"https://qiita.com/Akiko3221/items/e2897a9713261e0bb792","title":"Heroku push CSS 反映されない","body":"##問題\nCSSを変更し、herokumにpushしたが、反映されていない\n\n##前提条件\nこのようにコマンドを実行したがうまく行かない\n\n```\n\n$git add .\n\n$git commit -m \"コミット名\"\n\n//githabにpushする↓\n$git push origin master\n\n$git push heroku master\n\n$heroku open\n\n```\n\n##結果\nブラウザの更新ボタンを右クリックし、\nキャッシュの削除とハード再読み込み　ボタンを押したら解決。\n\n\n\n\nキャッシュが残っていたみたい。。\n","user":"Akiko3221","created_at":"2021-03-28T15:59:03+09:00","updated_at":"2021-03-28T15:59:03+09:00"},{"url":"https://qiita.com/optimisuke/items/c21765f77344cc2d70f4","title":"3Dプリンター（Ender 3 v2）が動かなくなったけど、firmwareをアップデートしたら、復活した。","body":"# はじめに\n何ヶ月か前に、急に3Dプリンター（Creality Ender 3）が動かなくなった。。。\n電源をいれても、ディスプレイが黒い状態から進まなくなってた。\n当時、あまり情報が見つからなかったので、放置してた。\n最近また、3Dプリンター熱があがってきたので、思い立って、解決策探して、がんばった。\n\n# したこと\n## 事前調査\n調べてみると、firmwareをアップデートしたら治ったみたいな投稿を見つけた。\nOctoPrintつないでたので、そいつが悪さしたんじゃないか疑惑高し。\n\n[Ender 3 V2 FAQs - Marlin Firmware Service](https://marlin.crc.id.au/faq/Ender%203%20V2/)\n[How to fix blue screen of death on Ender 3 Pro - (Easy)](https://focalise.ie/fix-ender-3-pro-blank-screen/)\n[Bug whith the firmware Ender 3 V2 – Bug Reports – Creality 3D Resource Forum](https://forums.creality3dofficial.com/community/bug-reports/bug-whith-the-firmware-ender-3-v2/)\n\nfirmwareアップデートはここらが参考になりそう。\n[Ender 3 V2 Firmware Update: How to Update/Install Marlin | All3DP](https://all3dp.com/2/ender-3-v2-firmware-update/)\n[Creality Ender 3 V2 Firmware | V4.2.X Board - TH3D Studio LLC](http://support.th3dstudio.com/hc/downloads/unified-2-firmware/creality/creality-ender-3-v2-firmware-lcd-firmware-v4-2-x-board/)\n\n\n## フォーマット\nsdカードのフォーマットをまずやった。ここが一番ネック。\n4096 allocation sizeにしないといけないらしい。そのために、microsdカードは8GB以下じゃないといけないらしい。。。ほんとかなと思って調べたら、microsoftのサイトにも書かれてた。Default cluster sizes for FAT32は256 MB–8GB は4KB。\n[Default cluster size for NTFS, FAT, and exFAT](https://support.microsoft.com/en-us/topic/default-cluster-size-for-ntfs-fat-and-exfat-9772e6f1-e31a-00d7-e18f-73169155af95)\n\n家中探したら1つ見つかった。よかった。\n\n\nMacでする方法を調べて試してたけど、allocation block sizeがどうなったのかよくわからなかった。\nここら参考にしたけど、いまいちわからんかった。\n[macbook pro - Reformat exFat with specific Device Block Size and Cluster Size - Ask Different](https://apple.stackexchange.com/questions/213879/reformat-exfat-with-specific-device-block-size-and-cluster-size)\n\nなので、Windows使った。エクスプローラ上のsdカード認識したやつを右クリックしてフォーマットした。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/184221/f13dcfb3-8fec-33fe-bde6-e58f70daa933.png)\n\n## firmware\n何種類かfirmwareのバイナリを手に入れる方法がある。自分でビルドしたり、Marlinのサイトからバイナリをダウンロードしたり、TH3Dってサイトがビルドしたやつをダウンロードしたり、Crealityのサイトからバイナリをダウンロードしたり、色々ある。無難にCrealityのをダウンロードして使った。すこしバージョン古そうやったけど、動いたらいいかってことで、無難にそうした。Marlinのサイトからもダウンロード\n\n自分の3DプリンタのボードのバージョンはV4.2.2だったので、`14 August 2020 Ender-3 V2_4.2.2 Marlin-2.0.1 – V1.0.2 (Factory Firmware) Verified`を使った。\n\n[Ender-3 V2 Firmware & Files - Creality 3D Printing Resources Forum](https://forums.creality3dofficial.com/download/ender-series/ender-3-v2/)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/184221/b74f0a14-62d7-e0b4-ace4-ab4288d8de73.png)\n\n### その他\n[Creality Ender 3 V2 Firmware | V4.2.X Board - TH3D Studio LLC](http://support.th3dstudio.com/hc/downloads/unified-2-firmware/creality/creality-ender-3-v2-firmware-lcd-firmware-v4-2-x-board/)\n\n## ディスプレイのボードにfirmwareをやく\n下記手順で、ディスプレイのボードのfirmwareを更新した。\n\n0. sdカードにダウンロードしたfirmwareのファイル群の中の`DWIN_SET`フォルダをおく\n1. 電源ぬく\n2. ディスプレイのケーブルはずす\n3. ディスプレイのネジはずす\n4. ディスプレイのボードにsdカードを指す\n4. ケーブルさす\n4. 電源いれる\n4. ディスプレイが黒→青→オレンジ\n4. 30秒まつ\n4. ディスプレイがオレンジのまま、電源オフ\n4. sdカードぬく\n4. **電源オン→復活！！いつもの起動画面になって、設定画面になった。**\n4. 電源オフ\n4. ネジしめる\n\n## 動作確認\nためしに、プリントしてみた。無事動いた！やったー！！\nただ、久しぶりやから、台の高さ調整が微妙で何回かミスった。。。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/184221/94ed29c0-9ff6-0ea4-9f4c-2ae12f31ff5b.png)\n\n# しなかったこと\n上記手順で、期待通り動いたので、メインのボードのfirmwareは更新しなかった。\nダウンロードしたのが、Factory Firmwareやったし、変わってないかなと思うので。\n\n# おわりに\n急に死んだので、マザーボード死んだかなと思って、交換めんどいなと放置してた。\n今回、調べたらfirmware更新でなんとかなりそうな情報を得られて、ためしたらうまくいった。\n日本語の情報がほとんどないから、こういうとき、英語ちょっと読めると便利。\nそこそこ真面目に英語勉強しといてよかった。\n","user":"optimisuke","created_at":"2021-03-28T15:58:37+09:00","updated_at":"2021-03-28T16:05:35+09:00"},{"url":"https://qiita.com/Ru-PNP/items/b469ac1b907909a9d821","title":"RDKit入門⑤：データフレーム内の分子群に対する部分構造検索","body":"この記事は以下の記事の続きとなります。\n[RDKit入門④：複数分子の読み込み (後編)とデータフレームの加工][1]\n[1]:https://qiita.com/Ru-PNP/items/62a108d92c1ddd522e58\n今回はデータフレーム内の分子群に対して部分構造検索を実施します。\nいくつか方法があるので順に紹介していきます。\n###環境\n- windows 10\n- python 3.8.5\n- RDKit 2020.09.4\n\n---\n先にパッケージの読み込みを行います。\n\n```python\nfrom rdkit import Chem\nfrom rdkit.Chem import Draw\nimport pandas as pd\n#パッケージの読み込み\n```\n\n前回の記事の最後でデータフレームをpickleファイルとして保存しておきました。\nまずはそれを読み込んで作業を再開しましょう。\n\n```python\ndf_Pt = pd.read_pickle(\"platinum_dataset_2017.pkl\")\n#platinum_dataset_2017.pklを読み込み、得られたデータフレームをdf_Ptと定義した。\n```\n\n---\n\n###HasSubstructMatchを使う方法について\nまずは[1分子に対して部分構造検索をかけたときと同じように][2]HasSubstructMatchを使います。\nlambda式と組み合わせて使用します。\n以下で臭化アリール・ヨウ化アリールを拾う方法を紹介します。\n\n[2]:https://qiita.com/Ru-PNP/items/58d733ef327677d273fd\n\n```python\nquery_1 = Chem.MolFromSmarts(\"c[Br,I]\")\n#検索したい構造をSMARTS記法で表し、query_1というmolオブジェクトとして定義した。\ndf_1 = df_Pt[df_Pt['ROMol'].map(lambda x: x.HasSubstructMatch(query_1)) == True]\n#query_1の部分構造を有する化合物のデータフレームを作成し、df_1とした。\n```\n\nなお、== Trueの部分は省略しても同じdf_1が得られます。\nまた、末尾を== Falseに書き換えることで、指定した部分構造を持たない化合物群を得ることも。\n念の為、df_1に格納された分子のうち最初の20個を表示してみましょう。\n\n```python\nDraw.MolsToGridImage(df_1['ROMol'], molsPerRow = 5, maxMols = 20)\n#df_1のROMolの列に格納された分子のうち最初の20個を表示した。\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1144410/4b8f018a-149c-f85d-eca2-f9d3090a7ce0.png)\n\n---\n\n###ge比較演算子を使う方法について\n「>=(ge比較演算子)」を用いると、HasSubstructMatch関数を使うより短く書くことができます。\n試しにスピロ化合物をピックアップしてみます。\n\n```python\nquery_2 = Chem.MolFromSmarts(\"[*x4R2]\")\n#スピロ原子をSMARTS記法で表し、query_2と定義した。\ndf_2 = df_Pt[df_Pt['ROMol'] >= query_2]\n#query_2の部分構造を有する化合物をピックアップしたデータフレームをつくり、df_2と定義した。\n```\n\nこの方法を用いるとHasSubstructMatch関数を利用するより短いコードで検索が可能です。\n「>=(ge比較演算子)」の他には\n\n- 「==(eq比較演算子)」\n- 「!=(ne比較演算子)」\n- 「<=(le比較演算子)」\n\nが使用可能ですが、「>=(ge比較演算子)」以外は使用する機会がないと思われます。\n念の為、df_2に格納された分子のうち最初の20個を描画してみましょう。\n\n```python\nDraw.MolsToGridImage(df_2['ROMol'], molsPerRow = 5, maxMols = 20)\n#df_2のROMolの列に格納された分子のうち最初の20個を描画した。\n```\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1144410/5728f0a9-8abf-da4a-f947-c64392387dd2.png)\n\n\n---\n###GetSubstructMatchesを使う方法について\n[以前紹介したGetSubstructMatches関数とlen関数を組み合わせる][2]ことで、\n指定した部分構造を指定した数だけ有する化合物群を拾ってくることも可能です。\n\n```python\nquery_3 = Chem.MolFromSmarts(\"n1ccccc1\")\n#ピリジン骨格をSMARTS記法で表し、query_3と定義した。\ndf_3 = df_Pt[df_Pt['ROMol'].map(lambda x: len(x.GetSubstructMatches(query_3)) == 3)]\n#query_3の部分構造を3つ有する化合物をピックアップしたデータフレームをつくり、df_3と定義した。\n```\n\nこの場合は「==(eq比較演算子)」以外にも色々な比較演算子を使用することができます。\n念の為、df_3に格納された分子を全て描画してみましょう。\n\n```python\nDraw.MolsToGridImage(df_3['ROMol'], molsPerRow = 5)\n#df_3のROMolの列に格納された分子を全て描画した。\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1144410/d0372aae-b3d7-580e-5d4c-719b674ff012.png)\n\n\n---\n\n##おわりに\n今回はRDKitを用いて以下の内容を実施いたしました。\n\n- HasSubstructMatch関数を用いた部分構造検索\n- ge比較演算子を用いた部分構造検索\n- GetSubstructMatches関数とlen関数の組み合わせによる部分構造検索\n\n###参考\n今回の記事を書くにあたっては[化学の新しいカタチ](https://future-chem.com/)さんの以下の記事を参考にいたしました。\n- [RDKitのPandasToolsでデータ分析を加速する](https://future-chem.com/rdkit-pandastools/)\n","user":"Ru-PNP","created_at":"2021-03-28T15:56:03+09:00","updated_at":"2021-03-28T15:59:25+09:00"},{"url":"https://qiita.com/yaju/items/7fd169340e4f51e0c44f","title":"【SQLServer】CLR使用してリモートデスクトップ接続のユーザー情報を取得する","body":"# はじめに\nサーバーにリモートデスクトップで接続したら誰かが使用中だった形跡があります。\nデフォルトだと同時2セッションまでなので、誰が使用しているのか調べたいことがあります。\nその場合、リモート先で `query user /server:コンピューター名` を使用することで、ユーザー名、セッション名、ID、状態、アイドル時間、ログオン時間の情報を取得することができます。\n\nしかし、運用方法が適切に管理しておらずユーザー名は同一であるため、誰が使用しているか判断できません。クライアント名なら社員コードが含まれているため判断できるのですが、その情報がありません。\n\n参照記事によれば下記のレジストリからクライアント名を取得することができるようです。\n`HKEY_CURRENT_USER\\Volatile Environment\\[セッションID]\\CLIENTNAME`\n参照：[取得できない %CLIENTNAME% をなんとかする（batあり／タスクスケジューラで利用可能）](https://hrkworks.com/it/windows-tips/clientname/)\n\nそこで、ASP.NETで query userの情報とレジストリ情報のクライアント名を紐付けた一覧表のWebサイトを作ることを考えました。\n\n# ASP.NET上でレジストリにアクセスできない\nASP.NET上でRegistry.CurrentUserのGetSubKeyNames()でサブキーを全取得すると下記の通りで、肝心な`Volatile Environment`がありません。試しにコンソールアプリケーションにして試すと問題なく取得できます。\n\n```\nControl Panel\nEnvironment\nEUDC\nKeyboard Layout\nPrinters\nSoftware\nSYSTEM\n```\n\nASP.NET上だとセキュリティーの関連で取得できないようです。何かしらやり方はあるのでしょうが諦めました。\n\n# SQLServerのCLRで実装\nそのサーバーにはSQLServer 2014がインストールされていたので、CLRの勉強がてら作成してみることにしました。\nSQLServerには正規表現が標準で搭載されておらず、CLR統合機能(C#などの.NET言語を使ってユーザー定義関数)を使えば作成することができるので、何れCLRに挑戦するつもりでいました。\n\nhttps://qiita.com/kazuhisam3/items/3d4bbf44e59e31907ddf\n\n## ソースコード\n外部プロセス実行でコマンドの`query user`を実行し、セッションIDから該当のレジストリのクライアント名を取得して、テーブル値関数で戻り値をIEnumerableにています。\n\n```csharp\nusing System.Data.SqlTypes;\nusing System.Collections;\nusing Microsoft.SqlServer.Server;\nusing Microsoft.Win32;\nusing System.Collections.Generic;\n\npublic partial class GetRDPClient\n{\n    [SqlFunction(FillRowMethodName = \"FillRow\", \n     TableDefinition = \"userName nvarchar(max), sessionName nvarchar(max), id nvarchar(max), \" +\n        \"state nvarchar(max), idleTime nvarchar(max), logonTime nvarchar(max), clientName nvarchar(max)\")]\n    public static IEnumerable InitMethod()\n    {\n        string stdout = GetUserSessionInfo();\n        List<UserInfo> userInfoList = ConvertStdOutToDataTable(stdout);\n        AddClientName(userInfoList);\n\n        return userInfoList;\n    }\n\n    public static void FillRow(Object row, out SqlString userName, out SqlString sessionName, out SqlString id, \n                               out SqlString state, out SqlString idleTime, out SqlString logonTime, out SqlString clientName)\n    {\n        var userInfo = (UserInfo)row;\n        userName = new SqlString(userInfo.UserName);\n        sessionName = new SqlString(userInfo.SessionName);\n        id = new SqlString(userInfo.ID);\n        state = new SqlString(userInfo.State);\n        idleTime = new SqlString(userInfo.IdleTime);\n        logonTime = new SqlString(userInfo.LogonTime);\n        clientName = new SqlString(userInfo.ClientName);\n    }\n\n    private static string GetUserSessionInfo()\n    {\n        using (Process p = new Process())\n        {\n            string path = Environment.GetEnvironmentVariable(\"WINDIR\");\n            if (Environment.Is64BitOperatingSystem && IntPtr.Size == 4)\n            {\n                path = Path.Combine(path, @\"SysNative\\query.exe\");\n            }\n            else\n            {\n                path = Path.Combine(path, @\"System32\\query.exe\");\n            }\n\n            p.StartInfo.FileName = System.Environment.GetEnvironmentVariable(\"ComSpec\");\n            p.StartInfo.UseShellExecute = false;\n            p.StartInfo.RedirectStandardOutput = true;\n            p.StartInfo.RedirectStandardInput = false;\n            p.StartInfo.CreateNoWindow = true;\n            p.StartInfo.Arguments = \"/c chcp 437 && \" + path + \" user\";\n            p.StartInfo.Verb = \"RunAs\";\n            p.Start();\n\n            // 出力を読み取る\n            string results = p.StandardOutput.ReadToEnd();\n            p.WaitForExit();\n            p.Close();\n\n            return results;\n        }\n    }\n\n    private static List<UserInfo> ConvertStdOutToDataTable(string stdout)\n    {\n        string[] lines = stdout.Trim().Split('\\n');\n        bool isHeader = true;\n        List<UserInfo> userInfoList = new List<UserInfo>();\n\n        List<string> columnName = new List<string>();\n        var t = typeof(UserInfo);\n        foreach (var f in t.GetFields())\n            columnName.Add(f.Name);\n\n        foreach (string line in lines)\n        {\n            if (line.Trim().Length < 30) continue;\n\n            UserInfo info = null;\n            if (!isHeader)\n            {\n                info = new UserInfo();\n\n                info.UserName = line.Substring(1, 22).Trim();\n                info.SessionName = line.Substring(23, 19).Trim();\n                info.ID = line.Substring(42, 4).Trim();\n                info.State = line.Substring(46, 8).Trim();\n                info.IdleTime = line.Substring(54, 11).Trim();\n                info.LogonTime = line.Substring(65).Trim();\n            }\n            isHeader = false;\n\n            if (info != null)\n                userInfoList.Add(info);\n        }\n\n        return userInfoList;\n    }\n\n    private static void AddClientName(List<UserInfo> list)\n    {\n        const string REG_SUBKEY = \"Volatile Environment\";\n        const string REG_CLIENT = \"CLIENTNAME\";\n\n        foreach (UserInfo info in list)\n        {\n            info.ClientName = (string)Registry.CurrentUser.OpenSubKey(REG_SUBKEY + \"\\\\\" + info.ID).GetValue(REG_CLIENT);\n        }\n    }\n}\n\npublic class UserInfo\n{\n    /// <summary>\n    /// ユーザー名\n    /// </summary>\n    public String UserName;\n    /// <summary>\n    /// セッション名\n    /// </summary>\n    public String SessionName;\n    /// <summary>\n    /// セッションID\n    /// </summary>\n    public String ID;\n    /// <summary>\n    /// 状態\n    /// </summary>\n    public String State;\n    /// <summary>\n    /// アイドル時間\n    /// </summary>\n    public String IdleTime;\n    /// <summary>\n    /// ログオン時刻\n    /// </summary>\n    public String LogonTime;\n    /// <summary>\n    /// クライアント名\n    /// </summary>\n    public String ClientName;\n}\n``` \n\n## 余談\n当初は、DataTable型で作成していて、`query user` のヘッダー名を列名として採用する上で`chcp 437`で表示言語を英語に変換していました。それで、LINQの使用して抽出したりしていたのですが、SQLServer 2014のCLRのバージョンでは LINQが使用できなかったのです。\nLINQを使える方法があるのですが、そこまでしてやるのはやめて UserInfoクラスを作成してList型に切り替えました。\n[LINQ on a DataTable IN a CLR Stored Procedure - stackoverflow](https://stackoverflow.com/questions/3183559/linq-on-a-datatable-in-a-clr-stored-procedure)\n\n## CLRバージョン\n[SQL Serverのバージョン別の.NET Frameworkバージョン](https://sql-oracle.com/sqlserver/?p=238)\n\n|SQL Server|.NET Frameworkバージョン|\n|:--|:--|\n|SQL Server 2017|.NET Framework 4.6|\n|SQL Server 2016|.NET Framework 4.6|\n|SQL Server 2014|.NET Framework 3.5 SP1|\n|SQL Server 2012|.NET Framework 3.5 SP1|\n|SQL Server 2008 R2|.NET Framework 3.5 SP1|\n|SQL Server 2008|.NET Framework 3.5 SP1|\n\n[Which version of .NET framework SQL Server supports? - stackoverflow](https://stackoverflow.com/questions/41114147/which-version-of-net-framework-sql-server-supports)\n\n|SQL Server version|CLR version|.NET Framework version(s)|\n|:--|:--|:--|\n|2005|2.0|2.0, 3.0 **, and 3.5 **<br>To use any functionality within<br>System.Core or System.Xml.Linq libraries, they must be imported manually as UNSAFE.|\n|2008 and 2008 R2|2.0|2.0, 3.0, and 3.5|\n|2012, 2014, 2016, 2017, and 2019, (and should also be Azure SQL DB Managed Instance)|4.0|4.0+|\n\n# SQLServerにCLRの登録\n## アセンブリ（dll）の作成\n今回は、「RDPClinet.dll」を作成します。\n\n* VisualStudio 20XXで新規プロジェクトとして「SQL Server データベースプロジェクト」を作成します。\n* プロジェクトに「SQL CLR C# ユーザー定義関数」を追加します。\n* ソースコードを作成してビルドします。\n* プロジェクトのプロパティで権限のレベルを「UNSAFE」にします。\n\nhttp://shen7113.blog.fc2.com/blog-entry-58.html\n\n## CLRの有効化\nデフォルトでは.net framework でのユーザー コードの実行は無効となっているため、clr enabled 構成オプションを有効にしてください。\n\n```sql\nEXEC sp_configure 'clr enabled';\nEXEC sp_configure 'clr enabled' , '1';\nRECONFIGURE;\n```\n\n## アセンブリの登録\n権限セットですが、レジストリだけの使用だけだったら、`EXTERNAL_ACCESS`だけでも良かったのですが、今回は外部プロセスを使用するので、`UNSAFE`になります。\n\n[CLR Integration Code Access Security](https://docs.microsoft.com/en-us/sql/relational-databases/clr-integration/security/clr-integration-code-access-security?redirectedfrom=MSDN&view=sql-server-ver15)\n\n```sql\nCREATE ASSEMBLY RDPClient\nFROM 'C:\\Temp\\RDPClient.dll'\nWITH PERMISSION_SET = UNSAFE;\n```\n\n## TRUSTWORTHYの有効化\n権限セットを「UNSAFE」または「外部」に設定している CLR オブジェクトを実行するには、TRUSTWORTHY オプションを有効化しておく必要があります。\n\nhttp://www.sqlquality.com/ex2016/UpgradeTo2016_ex/Text/Step05-11.html\n\n```sql\nALTER DATABASE [DatabaseName] SET TRUSTWORTHY ON;\n-- [DatabaseName]の部分に設定するデータベースの名前を指定してください。\n```\n\n## ユーザー関数の登録\n\n```sql\nCREATE FUNCTION GetRDPClient()\nRETURNS TABLE (userName nvarchar(max), sessionName nvarchar(max), id nvarchar(max), state nvarchar(max), idleTime nvarchar(max), logonTime nvarchar(max), clientName nvarchar(max))\nAS EXTERNAL NAME RDPClient.GetRDPClient.InitMethod;\nGO\n\nSELECT * FROM dbo.GetRDPClient()\n```\n\n# ASP.NETで一覧表示\nASP.NETを使用してSQLServerの「dbo.GetRDPClient()」でアクセスし、リモートデスクトップ接続のユーザー情報を取得して一覧表示を実現しています。\n\n|ID|クライアント名|ユーザー名|セッション名|状態|アイドル時間|ログオン時間|\n|:--|:--|:--|:--|:--|:--|:--|\n|19|XXX-0001|administrator|  |Disc|5:34|2021/02/25 14:56|\n|23|XXX-0003|administrator|rdp-tcp#43|Active|.|2021/03/12 10:48|\n\n# 最後に\nそもそも、ユーザー名で管理すれば、リモート先から `query user /server:コンピューター名` で取得できるので、こんな面倒なことしなくてもいいんですけどね。\nあと、アイドル時間が一定時間経ったら、終了させてしまうなどしてしまえばいいでしょうね。\n\nhttps://ittrip.xyz/soft/windows/rdp-idle-cutoff\n\nhttps://ittrip.xyz/soft/windows/rpd-idle-logoff\n\n## 正規表現\nSQLServerのCLR統合機能で正規表現を作成できるだけの技術は学べたので、簡単な正規表現を作るか機能が充実しているオープンソースを使用するかですね。\n\nhttp://noudikara.jugem.jp/?eid=249\n\nhttps://github.com/DevNambi/sql-server-regex\n\n# 参照\n* [SQLServerのCLR統合を使用してCLR関数を作成する](https://johobase.com/sqlserver-clr-function/)\n* [SQL Server 実践「SQL Server 2016 への移行とアップグレードの実践」](http://www.sqlquality.com/ex2016/UpgradeTo2016_ex/Text/Step05-11.html)\n* [CLR テーブル値関数](https://docs.microsoft.com/ja-jp/sql/relational-databases/clr-integration-database-objects-user-defined-functions/clr-table-valued-functions?view=sql-server-ver15)\n\n\n\n","user":"yaju","created_at":"2021-03-28T15:48:14+09:00","updated_at":"2021-03-28T15:48:14+09:00"},{"url":"https://qiita.com/niconicocareer/items/e33031dc038081eb9254","title":"テーブルに新しいカラムを追加する方法","body":"#目次\n<b>①結論</b>\n<b>②カラムを追加するコマンド</b>\n<b>③マイグレーションの実行方法</b>\n\n##結論\nカラムを追加するコマンドを実行し、マイグレーションファイルを実行する。\n\n##②カラムを追加するコマンド\n\n```\nrails g migration Addカラム名Toテーブル名 カラム名:データ型\nまたは\nrails g migration add_カラム名_toテーブル名 カラム名:データ型\n\n```\n例えば、\npostテーブルにuser_idのカラムをinteger型で追加したいときには以下ののように記述する。\n\n```\nrails g migration add_user_id_to_posts user_id:integer\n```\n\n##③マイグレーションの実行方法\n\n```\nrails db:migrate\n```\n上記を実行する\n","user":"niconicocareer","created_at":"2021-03-28T15:46:47+09:00","updated_at":"2021-03-28T15:54:50+09:00"},{"url":"https://qiita.com/horitomoyuki/items/003acfbdbc8c28e11124","title":"オブジェクト指向について","body":"# オブジェクト指向とは\n\nデータと処理のまとまりごとに分けて実装する考え方\n\n## オブジェクト指向\n\nアプリケーションを作成するときに、データ処理を役割ごとに分けて実装する方針のことをいう。\n\nRubyにおけるオブジェクトとはクラスやインスタンス、その他の値のことを意味する。\n\n## オブジェクト指向のメリット\n\nオブジェクト指向のメリットについて\n\n・役割ごとにオブジェクトを分けることで、実装がしやすくなる\n・役割ごとにオブジェクトを分けることで、あとからコードを改変するときも、他のオブジェクトに影響しなくなる\n\n","user":"horitomoyuki","created_at":"2021-03-28T15:43:41+09:00","updated_at":"2021-03-28T15:43:41+09:00"},{"url":"https://qiita.com/kajikaji/items/0e68bc1fa75b01739216","title":"RailsでNewaAPIを使ってみる","body":"# はじめに\nNewsアプリを作成したいと思っていたところ、たまたまNewsAPIという面白いAPIを見つけたので少し遊んでみました。\n\n-環境\n・docker-compose\n・Ruby 2.6.5\n・Rails 6.0.3.4\n# 目次\n<!-- タイトルとアンカー名を編集 -->\n1. [NewsAPIとは](#Chapter1)\n1. [導入方法](#Chapter2)\n1. [導入作業](#Chapter３)\n1. [まとめ](#Chapter4)\n1. [参考](#reference)\n\n<!-- 各チャプター -->\n<a id=\"#Chapter1\"></a>\n# NewsAPIとは\n世界中のニュースが収集できるAPIです。\n世界中のニュースをキーワードや国名で絞り込んだりできる面白いAPIです。\n[こちらNewsAPIリンクになります](https://newsapi.org/)\n<a id=\"#Chapter2\"></a>\n# 導入方法\n導入方法は２種類あるようです。\n\n*１、JSONでデータを受け取ってパースして使用する*\n*２、ライブラリを取り込んで使用する（未対応の言語あり）*\n\n対応しているライブラリは以下になります\n![スクリーンショット 2021-03-28 13.33.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/641519/f90ebcb1-1628-3323-e876-df39f4bd71ac.png)\n現状はPHPやJAVAのライブラリは用意されていないようです。\n[詳しくはこちらをどうぞ](https://newsapi.org/docs/client-libraries)\n\n\n\n\n今回は、*１、JSONでデータを受け取ってパースして使用する*　を採用しました。\n理由としては公式ドキュメントに載っているRailsのGemが非公式だからです。\n（公式に載せてるのに非公式？汗）\n\n作成は以下の流れで行いました。\n\n①APIキーの取得\n②リクエストパラメーターの取得\n③HTMLに出力\n\n<a id=\"#Chapter3\"></a>\n# 導入作業\n①APIキーの取得\n\n\n![スクリーンショット 2021-03-28 13.55.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/641519/cee4f76a-65d8-e116-cd58-38266da89503.png)\nGet API Keyのボタンを押すと登録画面に移ります\n\n\n![スクリーンショット 2021-03-28 14.01.55.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/641519/7c76240b-cb48-2205-fdb7-f70efde52a0d.png)\n名前やメールアドレス、パスワードを聞かれます。個人利用の場合はI am an individualで問題ないです。\n\n登録を済ませてたらAPIキーを取得します。何度でも確認できるので、メモしなくても問題ないと思います。\n\n② リクエストパラメーターの取得\n\n```\nclass StaticPeagesController < ApplicationController\n  require \"open-uri\"\n  def home\n    api = Rails.application.credentials.news_api[:api_key]              #APIキーをcredentialsから取り出し\n    url = \"https://newsapi.org/v2/top-headlines?country=jp&apiKey=#{api}\" #ニュースAPIのURLを作成\n    article_serialized = open(url).read                                 #openでURLを開き、readで読み込み。readは文字列を返す\n    @articles = JSON.parse(article_serialized)                          #読み込んだJSONデータをパースしてハッシュに変換\n  end\n```\nRailsでControllerを作成したあと、URLを取得します。\nリクエストは自分の取得したい記事によって変更する必要があります。\n私の場合は日本の人気の記事上から20記事取得しています。\n[詳しくはこちらをどうぞ](https://newsapi.org/docs/endpoints)\n\ncredentials.news_api[:api_key]の箇所は自分で取得したAPIキーを記入します。\n今回はcredentials.ymlにAPIキーを保存しましたので変数展開をしています。\n\n③HTMLに出力\nここまで来たら自分の好きな情報を取り出してHTMLに出力するだけになります。\n\n\n```\n\t<div class=\"articles\">\n\t\t<% @articles[\"articles\"].each do |article| %>\n\t\t\t<div class=\"article\">\n\t\t\t\t<div class=\"title\">\n\t\t\t\t\t<%= link_to article[\"title\"], article[\"url\"] %>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"wrapper\">\n\t\t\t\t\t<div class=\"date\">\n\t\t\t\t\t\t<%= article[\"publishedAt\"] %>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"source\">\n\t\t\t\t\t\t<%= article[\"source\"][\"name\"]%>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"image\">\n\t\t\t\t\t<%if article[\"urlToImage\"].nil?%>\n\t\t\t\t\t\t\t\t<%=image_tag 'no_image.png'%>\n\t\t\t\t\t\t<% else %>\n\t\t\t\t\t\t\t\t<%=  image_tag article[\"urlToImage\"] %>\n\t\t\t\t\t\t<% end %>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"content\">\n\t\t\t\t\t\t<%= article[\"description\"] %>\n\t\t\t\t\t</div >\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t<% end %>\n\t</div>\n\n```\neachで取り出し自分の好きなトピックスを取得して表示しています。\nここに好みのCSSを組み合わせるだけでニュースサイトが出来上がります。\n\n\n\n取得したいニュースのトピックスなどをわかりやすくまとめてくれてるサイトがありました。\n[ニュースの配列の詳しい情報はこちらからどうぞ](https://laptrinhx.com/rails-newsapiwo-shittekurisumasunyusuwo-shou-jisuruapuriwo-zuoru-4288957525/)\n\n\n<a id=\"#Chapter4\"></a>\n#まとめ\nNewsAPIは画像なしの記事もあるので、エラーが発生してしまうことがありました。\nif文を使用して、自分で画像を要して対処しました。\n\n今回、苦労した点としてcredentials.yml.encファイルにAPIキーを保存するところでした。\nコンテナ内にvimをインストールしてなんとか解決することができました。\n\n\n\n\n<a id=\"#reference\"></a>\n# 参考文献\n- [【Rails】NewsAPIを使ってクリスマスニュースを収集するアプリを作る](https://laptrinhx.com/rails-newsapiwo-shittekurisumasunyusuwo-shou-jisuruapuriwo-zuoru-4288957525/)\n- [News API – Search News and Blog Articles on the Web](https://newsapi.org/)\n","user":"kajikaji","created_at":"2021-03-28T15:32:36+09:00","updated_at":"2021-03-28T15:32:36+09:00"},{"url":"https://qiita.com/ohisama@github/items/7098799aa81f50ebd589","title":"wemosでarduiscope","body":"#概要\n\narduinoでvcdファイルを生成する、arduiscopeをwemosでやってみた。\n\n#使用したライブラリー\n\nhttps://github.com/safchain/arduiscope\n\n#写真\n\n![無題.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/18104/9e89340b-694e-6ad5-cc4f-ef3ffb581764.jpeg)\n\n\n#手順\n\n１．wemosにarduiscope.inoを焼く。\n２．python3にpyserialをインストールする。\n３．arduiscopy.pyを起動し、scope.vcdを作る。\n４．gtkwaveで、scope.vcdを開く。\n\n以上。\n","user":"ohisama@github","created_at":"2021-03-28T15:31:49+09:00","updated_at":"2021-03-28T15:43:02+09:00"},{"url":"https://qiita.com/suzuki_sh/items/84806ce231ed9b0f2e6d","title":"Railsがmimemagic無くてbundle installできない","body":"## 概要\n2021年3月下旬、Ruby on Railsの依存していたmimemagicの0.3.5以下がyank（削除）されました。そのため以前は`bundle install`ができていたのに急にできなくなった、といった事が起こります。\n\n```\nFetching gem metadata from https://rubygems.org/........\nYour bundle is locked to mimemagic (0.3.5), but that version could not be found\nin any of the sources listed in your Gemfile. If you haven't changed sources,\nthat means the author of mimemagic (0.3.5) has removed it. You'll need to update\nyour bundle to a version other than mimemagic (0.3.5) that hasn't been removed\nin order to install.\n```\n\n### 対応\n本件については数日のあいだで状況が変わっているため、最新の情報をキャッチアップしてください。2021年3月28日時点では、Ruby on Railsの最新版である6.1.3.1にバージョンを上げることで解決できます。\n\nhttps://weblog.rubyonrails.org/2021/3/26/marcel-upgrade-releases/\n\n```diff:Gemfile\n-gem 'rails', '~> 6.1.1'\n+gem 'rails', '~> 6.1.3.1'\n```\n\n```bash\n$ bundle update rails\n```\n\n## 参考\nなぜこうなったか、その他の対処方法等は各所で議論されていますが、以下がきれいにまとまっています。\n[mimemagicの最新動向 \\- HackMD](https://hackmd.io/@mametter/mimemagic-info-ja)\n","user":"suzuki_sh","created_at":"2021-03-28T15:31:42+09:00","updated_at":"2021-03-28T15:31:42+09:00"},{"url":"https://qiita.com/honda28/items/34dceaeeb1cdddb4c9dd","title":"Djangoチュートリアル①（インストールとプロジェクトの作成）","body":"# はじめに\n\n巷で流行っている Django に手を出してみる。[現場で使える Django の教科書（基礎編）](https://www.amazon.co.jp/%E7%8F%BE%E5%A0%B4%E3%81%A7%E4%BD%BF%E3%81%88%E3%82%8B-Django-%E3%81%AE%E6%95%99%E7%A7%91%E6%9B%B8%E3%80%8A%E5%9F%BA%E7%A4%8E%E7%B7%A8%E3%80%8B-%E6%A8%AA%E7%80%AC-%E6%98%8E%E4%BB%81/dp/4802094744)、[Django | Document](https://docs.djangoproject.com/ja/3.1/intro/) を参考に進める。日本語記事があって助かる。実行環境は以下。\n- Python == 3.9.2\n- Django == 3.1.7\n\n# Django とは\n\nPython で Web アプリケーションを作成するためのフレームワークで、Web アプリケーションを作成するために必要な機能が揃っている。Instagram などにも使われていて、利用実績も非常に多い。\n\n# Django のインストール\n\n[Django のインストール方法](https://docs.djangoproject.com/ja/3.1/topics/install/#installing-official-release)を参考に公式リリースバージョンを以下コマンドでインストール。\n\n```\n$ pip install --upgrade pip  # pip 自体のアップデート\n$ python -m pip install Django\n```\n\n以下コマンドで、Django インストールされているかどうか（またどのバージョンがインストールされているか）を調べる。\n\n```\n$ python -m django --version\n# 3.1.7\n```\n\n# プロジェクト作成\n\n初めて Django を使う場合、最初にセットアップを行う必要がある。プロジェクトの雛形を以下コマンドで作成する。\n\n```\n$ django-admin startproject mysite\n# 以下のようなファイルが自動で作成される\nmysite       (<- ベースディレクトリ)\n|-- manage.py\n`-- mysite   (<- 設定ディレクトリ)\n    |-- __init__.py\n    |-- asgi.py\n    |-- settings.py\n    |-- urls.py\n    `-- wsgi.py\n```\n\nmysite はプロジェクトの名前で、任意の名前をつけられる。ここで使用されている django-admin は管理コマンドユーティリティであるが、基本的にはプロジェクトを作成時に1回使用するだけで、以降は startproject でプロジェクトを作成した際に自動で作成される manage.py で Django 管理コマンドを使う。\n\n上記構成を見ると、mysite というディレクトリが2つできているため、わかりにくい。そこで `$ django-admin startproject mysite` を実行するのではなく、以下のようにプロジェクトを作成する。\n\n```\n$ mkdir mysite\n$ cd mysite\n$ django-admin startproject config .  # 第2引数に . を指定\n# 以下のようなファイルが自動で作成される\nmysite       (<- ベースディレクトリ)\n|-- manage.py\n`-- config   (<- 設定ディレクトリ)\n    |-- __init__.py\n    |-- asgi.py\n    |-- settings.py\n    |-- urls.py\n    `-- wsgi.py\n```\n\nconfig は任意の名前を設定できる。このようにすることで同じ名前のディレクトリが作成されずわかりやすくなる。\n\n# 開発用サーバー\n\n作成したプロジェクトがうまく動作するかを確認する。（※データベースマイグレーションについての警告が出ているが、この場では一旦無視。）\n\n```\n$ cd mysite\n$ python manage.py runserver\n# 以下出力結果\nWatching for file changes with StatReloader\nPerforming system checks...\n\nSystem check identified no issues (0 silenced).\n\nYou have 18 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions.\nRun 'python manage.py migrate' to apply them.\nMarch 28, 2021 - 06:41:26\nDjango version 3.1.7, using settings 'config.settings'\nStarting development server at http://127.0.0.1:8000/\nQuit the server with CONTROL-C.\n```\n\n上記で Django 開発サーバーを起動。これは開発中の利用のみを考えて作られたサーバーであるため、__運用環境では絶対に使用するな__とのこと。[ http://127.0.0.1:8000/]( http://127.0.0.1:8000/) にアクセスすると、以下のようなページが表示されており、サーバーが起動されていることが確認できる。![runserver.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/769545/4c3fc743-40b7-5284-647d-8fe621e4c20f.png)\n\n便利なことに、このサーバーはコード変更の反映に再起動は必要ないらしい。（ファイルの追加のような変更時には再起動が必要。）\n\n# おわりに\n\nとりあえず Django のインストールとプロジェクトの作成、開発サーバーの起動まで。今後、アプリケーション作成などの詳細を書いていくこととする。\n","user":"honda28","created_at":"2021-03-28T15:30:23+09:00","updated_at":"2021-03-28T17:16:10+09:00"},{"url":"https://qiita.com/magahiro/items/17594e5aac4a08601e80","title":"C言語,C++の最新の環境の環境構築をしたので共有します。2021/3/28","body":"\n##自分の簡単な自己紹介（興味なければ飛ばしてください）\n現在新大学2年生でサイバー大学という通信制大学に通っている。\nもともとフロントエンドを勉強していて3/22よりC++を勉強し始めた\nC++を勉強し始めた理由としては競技プログラミングに興味を持ったからIoTに興味があるからです。\n質問があれば自分のtwitterのDMへhttps://twitter.com/HIRO52636022\n\n##前書き\n\nネットで色々調べても情報が多すぎてどれを参考にして環境構築をすればいいのか分からなくなりますよね。\nそうならないためにこの記事を読めば効率よく環境構築をできてすぐにC言語,C++のプログラムを書くことができます。\n\n##目次\nMinGWの簡単な説明\n\nMingGWの導入\n\nテキストエディタに書いていく\n\nコマンドプロンプトでのC言語　C++のコンソール方法\n\n##MinGWの簡単な説明\n\nMinGWとは\n\nGCCなどの開発環境をWindowsなどで整えてくれるツールです。\n\nGCCとは\n\nさまざまなプログラミング言語のコンパイラです。\n\nコンパイラとは\n\n書いたコードを機械語といわれる2進数の文字に変換してくれるものです。\n\n機械語でないとコンピューターは理解できないのです。\n\n##MinGWの導入\n\n下記のurlに行ってもらって\nhttps://ja.osdn.net/projects/mingw/\n\n赤色で囲ったところをクリックしてください。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/13eabc91-9448-40fe-c9c1-7a1eca3a1350.png)\n\nそうしたらインストーラーが左下に表示されるのでクリックしましょう。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/afc2650c-ceb8-edc4-f153-303614aa4439.png)\n\ninstallをクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/77700018-e772-0850-ad63-638d8bcd9370.png)\n\nディレクトリの指定ですが特に変更させる点もないのでcontinueをクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/a17e72eb-e408-4b62-717e-f1100593e85d.png)\n\nインストールが始まります。インストールが完了したらcontinueをクリックしてください。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/9240a86e-18a6-4464-0bb3-ad1c5b71f7e0.png)\n\nそしたらこのような画面が出てくると思うので左上のinstallationをクリックしてUpdate Catalogueをクリックして更新しましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/28b91d22-2491-11a6-a336-761b9e77649e.png)\n\nここからPackageを選択していくのですが、\n\nC言語のみを使用したい方は\n\n・mingw-developer-tookit-bin\n・mingw32-base-bin\n・msys-base-bin\nの３つを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/8e765988-f8d2-7dc0-e605-f78369cae4a9.png)\n\nC++を使用したい人は\n\n加えて\n・mingw32-gcc-g++-bin\nというのも選択してください\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/11fc8ca4-1cbe-7608-da34-7abdea9a39e1.png)\n\n選択方法はMark for Installationをクリックするだけです。\n\n![MinGW_install_05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/58bcce6c-3a1c-467a-fc83-43c03cad231c.png)\n\n目的のpackageをクリックできたらInstallationのApply Changesをクリック\n\n![MinGW_install_06.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/50518a50-e12d-3727-64f1-85794d29a654.png)\n\nその先のApplyをクリック\n![MinGW_install_07.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/63f89b01-d0f2-1dff-a706-435c0cb65f00.png)\n\nその先に進んだらチェック項目をクリックせずcloseしましょう。\n![MinGW_install_08.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/1a0b3ced-bb95-dff2-9979-76744945035a.png)\n\n##gccコマンドのパスを通す\n\n画面左下の検索するところにコントロールパネルと入力しましょう\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/0016a889-0b60-a381-e2eb-7d9cf5a6439b.png)\n\nそうしたら下のような画面が出てくると思うので”システムとセキュリティ”をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/190b9c70-522a-a959-69b6-b2b03021d84b.png)\n\nそして”システム”をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/82a32b72-d006-7cbf-3075-65f025352955.png)\n\n\"システムの詳細設定\"をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/b4a0723d-7380-8b9a-402b-39bb65fa352e.png)\n\nそしたらこのような画面が出てくるので\"環境変数\"をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/2abfc2fd-23da-b491-5e7d-29c9ccc3dbac.png)\n\n黒く塗りつぶしているのは念のため自分のパソコンの情報を塗りつぶしているだけです。\n下の\"システム環境変数(S)\"のPathというところをクリックして指定してから編集ボタンをクリックしてください。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/f71b4046-b810-1b9d-2db8-9ae479bdd7dd.png)\n\nそしたらこのような画面が出てくるので\"新規\"をクリックして参照をクリックしましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/0ab998cd-802a-ff83-de74-136eb4cf3c83.png)\n\n参照をクリックしたらPCというところをクリックしましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/38065364-b141-4979-99b6-502b4524344d.png)\n\nその次のところで下の方にいってOSというのをクリックしましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/bf13cc05-f756-33a7-ec2c-9e47580511ed.png)\n\nその次のところでMinGWというものがあるのでそれをクリックしましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/c6e88b4f-59de-1706-85d7-a9886b01c8ef.png)\n\nその次のbinをクリックしてOKを押したらpathが繋がれました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/5cd9c399-4035-21f0-06de-d72160b29a94.png)\n\nちなみに自分はもうすでにしてあったのでさっき作ったやつは削除しておきます。\n\n##テキストエディタに書いていく\n\nファイル名に気を付けなければいけません\n\nc言語の場合は　なんちゃら.c　例えば practice.cのpracticeの部分はなんでもいいです。自分の分かりやすい名前を入力\n同様にC++では　なんちゃら.cppと入力しましょう\n自分はC++なのでcppにしてます。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/71d7e9d2-f5f8-8222-deb9-61fc40a3c9d2.png)\n\nこの講座はcppを学習する講座ではないのでコードの書き方は割愛させていただきます。\nこのようなコードを書いたら LosAngelsとNewYorkが出力されるようなプログラムになっています。\n\n##コマンドプロンプトで出力する方法\n\n先ほどと同様に画面の左下でコマンドプロンプトと検索してください。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/f813bf14-02c2-9399-e9cb-db565eb89281.png)\n\nこのような画面が出てくると思いますが\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/f4c46127-86fa-df7c-ed29-9dca0941d31e.png)\n\nここでさっきのプログラムを実行していきたいと思います。\n\nさっきのファイルがどこに格納されているのかはそれぞれなので分からないのですが自分はドキュメントのfirst_cppというところに格納されていたのでそこを参照しようと思います。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/8977eb06-7948-be47-2222-bd9a72956e5c.png)\n\n参照方法は作ったファイルが格納されているフォルダをコマンドプロンプトにドラックアンドドロップしたいのですが\n\n```コマンドプロンプト\ncd //ラックアンドドロップしたフォルダの参照先\n\n自分のなら\ncd C:\\Users\\DELL\\Dropbox\\My PC (DESKTOP-DOP2ONS)\\Documents\\first_cpp\nになります。\n```\nできたら先ほども述べましたがプログラムを機械語に変換するためにgccまたはg++を使用しなければいけません。\n\nc言語を使用している人はgcc ファイル名\n\nc++を使用している人はg++　ファイル名\nを入力してください。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/86c2cd82-e9fd-31bf-094d-f17ce960e036.png)\n\nそしたらdirと入力してください。\n現在のディレクトリの情報が格納されているのですが、注目してほしいのが下線部のところです。\nここにはa.exeと書かれていますがそれを入力すればコンソールされます。試しにやってみましょう。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/faf3f05b-b880-d89f-c462-48e830495c1d.png)\n\nはい、できました。下にも書いてあると思いますが.exeを省略したaだけでもコンソールされるんですよね。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1234338/042724b5-da7b-5166-0e34-24a13387a903.png)\n\n##最後に\nお疲れさまでした。また何か分からない事があればぜひぜひ相談してください。\n\nよいプログラミング生活を送れますように\n","user":"magahiro","created_at":"2021-03-28T15:30:01+09:00","updated_at":"2021-03-28T21:16:11+09:00"},{"url":"https://qiita.com/kaya754/items/d6f2a5dba7d0f3a6b8b8","title":"[Laravel]キーワードが含まれて”いない”レコードをDBから取得する方法","body":"# キーワードが含まれていないレコードをDBから取得する方法\n```php\n\n//Eloquent Model を使用する形\n$users = User::where('column名', 'not like', '%'.$keyword.'%')->get();\n\n//Eloquent Model を使用しない形\n$users = DB::table('users')->where('column名', 'not like', '%'.$keyword.'%')->get();\n\n```\n\n# 一言\n[質問されて回答](https://teratail.com/questions/329171#reply-455330)した後に調べたところ、\n[Laravel公式ドキュメント](https://laravel.com/docs/8.x/eloquent)にも[日本語翻訳版ドキュメント](https://readouble.com/laravel/8.x/ja/eloquent.html)にもないため記事化しました。\nsql知ってる人からすると当然こうなるのでドキュメントにはないのでしょうね。\n\n","user":"kaya754","created_at":"2021-03-28T15:29:13+09:00","updated_at":"2021-03-28T15:36:00+09:00"},{"url":"https://qiita.com/Hamatus/items/b3e924cead18d910c2d3","title":"【Railsチュートリアル】第1章 ゼロからデプロイまで 演習と解答","body":"Ruby on Railsチュートリアル第1章の演習問題と解答をまとめました。\n[第1章 ゼロからデプロイまで - Railsチュートリアル](https://railstutorial.jp/chapters/beginning?version=6.0#cha-beginning)\n\n#演習\n\n##1.3.2 rails server\n\n###問題1\n\n> デフォルトのRailsページに表示されているものと比べて、今の自分のコンピュータにあるRubyのバージョンはいくつになっていますか? コマンドラインでruby -vを実行することで簡単に確認できます。\n\n```ruby:ターミナル\n$ ruby -v\nruby 2.6.3p62 (2019-04-16 revision 67580) [x86_64-linux]\n```\n\nRubyのバージョンは 2.6.3 です。\n\n\n###問題2\n\n> 同様にして、Railsのバージョンも調べてみましょう。調べたバージョンはリスト 1.2でインストールしたバージョンと一致しているでしょうか?\n\n```ruby:ターミナル\n$ rails -v\nRails 6.0.3\n```\n\nチャプター内の[リスト1.2](https://railstutorial.jp/chapters/beginning?version=6.0#code-installing_rails)でインストールしたバージョンと一致しています。\n\n\n##1.3.4 Hello,world!\n\n###問題1\n>リスト 1.9のhelloアクションを書き換え、「hello, world!」の代わりに「hola, mundo!」と表示されるようにしてみましょう。\n\n```application_controller.rb\nclass ApplicationController < ActionController::Base\n    \n  def hello\n    render html:\"hora,mundo!\" # ←ここを書き換えます\n  end\nend\n```\n\n###問題2\n>Railsでは「非ASCII文字」もサポートされています。「¡Hola, mundo!」にはスペイン語特有の逆さ感嘆符「¡」が含まれています（図 1.23）17 。「¡」文字をMacで表示するには、Optionキーを押しながら1キーを押します。この文字をコピーして自分のエディタに貼り付ける方が早いかもしれません。\n\n```application_controller.rb\nclass ApplicationController < ActionController::Base\n    \n  def hello\n    render html:\"¡Hora,mundo!\" # ←ここを書き換えます。問題文からコピペした方が楽です\n  end\nend\n```\n\n>リスト 1.9のhelloアクションを参考にして、２つ目のアクションgoodbyeを追加しましょう。このアクションは、「goodbye, world!」というテキストを表示します。リスト 1.11のルーティングを編集して、ルートルーティングの割り当て先をhelloアクションからgoodbyeアクションに変更します（図 1.24）。\n\n```application_controller.rb\nclass ApplicationController < ActionController::Base\n    \n  def hello\n    render html:\"goodbye,world\"\n  end\n\n  # アクションを追加\n  def goodbye\n    render html:\"goodbye,world!\"\n  end\nend\n```\n\n```routes.rb\nRails.application.routes.draw do\n  root 'application#goodbye'  # ルートルーティングの割り当て先をgoobyeアクションに変更\nend\n```\n\n##1.5.3 herokuにデプロイする(2)\n\n###問題1\n\n> 1.3.4.1と同じ変更を行い、本番アプリでも「hola, mundo!」を表示できるようにしてください。\n\napplication_controller.rbを変更後herokuへ際デプロイ\n\n```application_controller.rb\nclass ApplicationController < ActionController::Base\n    \n  def hello\n    render html:\"hora,mundo!\" # ←ここを書き換えます\n  end\nend\n```\n\n```ruby:ターミナル\n$ git add -A\n$ git commit -m \"Edit Controller file\"\n$ git push heroku master\n```\n演習ということなのでgithubにはpushしませんでした。\nコミットする際のコメントをどのように記述すれば良いのかまだよくわかりません。\n\n> 1.3.4.1と同様、ルートへのルーティングを変更してgoodbyeアクションの結果が表示されるようにしてください。またデプロイ時には、Git pushのmasterをあえて省略し、git push herokuでデプロイできることを確認してみてください。\n\n```routes.rb\nRails.application.routes.draw do\n  root 'application#goodbye'  # ルートルーティングの割り当て先をgoobyeアクションに変更\nend\n```\n```ruby:ターミナル\n$ git commit -am \"Edit Route file\"\n$ git push heroku\n```\n\n**git commit -a**で変更されたファイル(新規を除く)をインデックスに追加してコミットができます。\n\n既存のファイルを変更してコミットする場合は\n**git commit -am \"コメント\"**\n\nでOKだということですね。\n\n## 1.5.4 Herokuコマンド\n\n###問題1\n> heroku helpコマンドを実行し、Herokuコマンドの一覧を表示してみてください。Herokuアプリのログを表示するコマンドはどれですか?\n\n答え：_logs_\n\n```Ruby:ターミナル\n$ heroku help\n\nCLI to interact with Heroku\n\nVERSION\n  heroku/7.51.0 linux-x64 node-v12.21.0\n\nUSAGE\n  $ heroku [COMMAND]\n\nCOMMANDS\n.\n.\n.\nlogs            display recent log output\n.\n.\n.\n\n\n```\n\n###問題2\n> 上の演習で見つけたコマンドを使って、Herokuアプリの最近のログ（log）を調べてみましょう。直近に発生したイベントは何でしたか?（このログを調べるコマンドを覚えておくと、本番環境の不具合を見つけるときに役立ちます）\n\n答え：_heroku logs_\n\n\n#最後に\n学習内容の初アウトプットということで記事の作成に1時間以上かかりました。\n実際に記事を書いて感じたことは\n「間違ったことは書けない」ということです。\n\nそれは言いかえれば「学習した内容がしっかり身についたか」ということでもあり、\nアウトプットとしてQiitaやTwitterを活用するのはとても大切なことだと思いました。\n\nまだまだ至らない点がたくさんありますが、今後もアウトプットを意識した学習を続けていきます。\n","user":"Hamatus","created_at":"2021-03-28T15:25:39+09:00","updated_at":"2021-03-28T15:28:05+09:00"},{"url":"https://qiita.com/uncia/items/d14bd5fe38635199ad88","title":"競技プログラミングでよく使われるPython関数その他もろもろ（ABC問題）","body":"チートシートみたいなものなので一度理解した人用です。\n\n\n\n# 環境\n\n- Python 3.8.0\n\n\n\n# input () 系列\n\n#### 標準input()\n\n```python\nn = input()\nprint(n)\n# in:4 \n# out:4\n```\n\n#### 特定の文字区切りをinput()\n\n```python\na,b = map(int,input().split())    #input().split()でa,bに代入 それぞれをint型に変換\nA =list(map(int,input().split()))\nprint(a)\nprint(A)\n# in:4 9 \n# out:4\n# out:[4,9]\n```\n\n#### 二次配列をinput()\n\n```python\nSecondary = [list(map(int,input().split())) for i in range(3)]   #３は配列の長さ\nprint(Secondary)\n# in: \n1 2\n5 6\n9 10\n# out:\n[[1, 2], [5, 6], [9, 10]]\n\n```\n\n\n\n# 文字列操作\n\n#### 文字列を一文字に分けList化\n\n```python\ns=\"uncia002\"\ns_list = list(s[i:i+1] for i in range(len(s)))\nprint(s_list)\nprint(\"\".join(s_list))　#Listから文字列にする\n\n#['u', 'n', 'c', 'i', 'a', '0', '0', '2']\n#uncia002\n```\n\n#### 文字列を任意の数に分けList化\n\n```python\ns=\"uncia002\"\ni=3\ns_list = s[:i],s[i:]\nprint(list(s_list))\n#['unc', 'ia002']\n```\n\n#### 文字列の比較\n\n```python\ndefs=\"LOVINYOU\"\ndef judge_str(index):return \"V\" in index\nprint(judge_str(s))\n#True\n```\n\n# リスト系　append(),extend(),insert()\n\n#### 追加系\n\n```python\nA = [1,2,3,5,7]\nA.append(11)    #末尾に追加\nprint(A)\nA.extend(['松','竹','梅'])   #リストの結合\nprint(A)\nA.insert(0,0)  #任意の場所に追加（場所,値）\nprint(A)\n\n#[1, 2, 3, 5, 7, 11]\n#[1, 2, 3, 5, 7, 11, '松', '竹', '梅']\n#[0, 1, 2, 3, 5, 7, 11, '松', '竹', '梅']\n```\n\n#### 削除系\n\n```python\nA = ['Python','JavaScript','Python','C']\na3 = A.pop(3)  #指定した位置の要素を削除し、値を取得\nprint(A)\nprint(a3)\n\nA.remove('Python')  #指定した値の最初値を削除\nprint(A)\n\nA=list(range(10))\nA_fillted=[i for i in A if i % 2 == 0] #リストから条件式に基づいて削除する\nprint(A_fillted)\n\n#['Python', 'JavaScript', 'Python']\n#C\n#['JavaScript', 'Python']\n#[0, 2, 4, 6, 8]\n```\n\n# mathライブラリ\n\n#### 平方根\n\n```python\nimport math\nprint(math.sqrt(5))\n\n#2.23606797749979\n```\n\n#### 小数点切り捨て、切り上げ\n\n```python\nimport math\nprint(math.floor(10.123)) #切り捨て\nprint(math.ceil(10.123))　#切り上げ\n# 10\n# 11\n```\n\nint()は四捨五入\n\n\n\n# その他\n\n#### min()max()\n\n```python\na,b=5,6\nprint(min(a,b))\nprint(max(a,b))\n\n#5\n#6\n```\n\n#### 絶対値\n\n```python\nprint(abs(-1.22))\n#1.22\n```\n\n#### 約数を出力\n\n```python\ndef make_divisors(n):\n    divisors = []\n    for i in range(1, int(n**0.5)+1):\n        if n % i == 0:\n            divisors.append(i)\n            if i != n // i:\n                divisors.append(n//i)\n\n    divisors.sort()\n    return divisors\n\nprint(make_divisors(100))\n\n#[1, 2, 4, 5, 10, 20, 25, 50, 100]\n```\n\n#### 素数判定(近似)　\n\n```\nimport math\ndef is_prime(n):\n    if n == 1: return False\n\n    for k in range(2, int(math.sqrt(n)) + 1):\n        if n % k == 0:\n            return False\n\n    return True\n\nprint(is_prime(13))  \n```\n\n\n\n# 引用\n\n- 約数を高速で列挙するコード(Python) https://qiita.com/LorseKudos/items/9eb560494862c8b4eb56\n  2021/03/28閲覧\n- 【Python】素数を判別するプログラムを実装するhttps://www.suzu6.net/posts/70-prime-numbers/\n  2021/03/28閲覧\n","user":"uncia","created_at":"2021-03-28T15:24:23+09:00","updated_at":"2021-03-28T15:29:57+09:00"},{"url":"https://qiita.com/niconicocareer/items/29bd2b9730f92fdcb82c","title":"セッションについて","body":"#目次\n<b>①セッションとは</b>\n<b>②ステートフルとステートレス</b>\n<b>③セッションメソッドの使い方</b>\n\n##①セッションとは\nステートフルな通信を実現するための仕組みのこと\n##②ステートフルとステートレス\n普段閲覧しているWebサイトはクライアントとサーバー間でHTTPという形で通信をしていてデーターのやりとりをしている。HTTPのリクエストとレスポンスの仕組みは簡潔になっていて、クライアントとサーバーの1回のやりとりで処理が完結しますので、サーバーは状態を管理することができていない。この状態がステートレスという。逆に状態を維持する仕組みをステートフルという。ステートレスの状態だと、例えば、ログインをした後に、ページを閉じてしまったら毎回ログインをする必要があるので非常に不便になる。データを一定時間保持したければセッション機能を使う。\n\n\n##③セッションメソッドの使い方\n結論としては、sessionにデータを入れるだけ。あとは更新や削除もできる。\n\n◯データの入れ方\n\n```\n session[user_id]= @user.id\n```\n◯データの削除の仕方\n以下の3パターンがある。\n\n```\n session[user_id]= nil\n\n session[user_id].clear\n\n session.delete(:user_id)\n```\n","user":"niconicocareer","created_at":"2021-03-28T15:20:38+09:00","updated_at":"2021-03-28T15:20:38+09:00"},{"url":"https://qiita.com/yoshinyan/items/9a4eaa91991ab6c3f396","title":"30代未経験でPHPエンジニア(phper)になるなら","body":"## 著者の簡単な紹介\n- SESから自社サービスに転職したバックエンドエンジニア\n- Laravel好きからのRails好きへ\n- 30代で経理からの転職した\n\n## 本やネットで基本的なものを学ぶ\n\n- 変数\n- 配列\n- if\n- foreach...\n\nおすすめサイト\n詳しくわかりやすくさらに、サイト全体がかわいいのでとてもよいです。\n\nGRAYCODE\n[PHPプログラミング \\| GRAYCODE](https://gray-code.com/php/)\n\n## laravelを学ぶ\nこちらの本で僕は勉強しました。\nこちらを教科書により知りたいことをネットで調べました。\n\n[PHPフレームワーク Laravel入門 \\| 掌田津耶乃 \\|本 \\| 通販 \\| Amazon](https://www.amazon.co.jp/PHP%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF-Laravel%E5%85%A5%E9%96%80-%E6%8E%8C%E7%94%B0%E6%B4%A5%E8%80%B6%E4%B9%83/dp/4798052582)\n\n## JavaScriptを学ぶ\n本やネットで基本的なものを学ぶ\n\n[JavaScript \\| GRAYCODE](https://gray-code.com/javascript/)\n\n## html/cssを学ぶ\n本やネットで基本的なものを学ぶ\n\n[HTML CSS \\| GRAYCODE](https://gray-code.com/html_css/)\n\n## sqlを学ぶ\n本やネットで基本的なものを学ぶ\n以下略\n\n[PDOについて \\| GRAYCODE PHPプログラミング](https://gray-code.com/php/about-pdo/)\n\n## 理想の勉強順序\nできれば、基礎的な勉強と、laravelの勉強を行ったりきたりするとよい。\n\n## わからない単語があったら\nこちらのサイトで探してみましょう。\nすごくわかりやすいです。\n絵がかわいい。\n\n別件ですが、こちらのサイトのコラムも非常に参考になります。\n\n[「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典](https://wa3.i-3-i.info/index.html)\n\n## 転職\nできれば、自社サービスか、一次受けの受託が個人的にはよいと思います。\n難しければSESでも。可燃性があるので、これ以上は、書きません。\n\n## メンタルの保ち方\n- できなくてあたりまえ\n- 自分を許す\n- SESでつらい現場なら早めに退場する\n- 精神的にやられるとあとあと長引くので早めに休む\n\n## 質問\n質問は、自分で調べて仮説を持ってヒントをもらえるようにきく。\n\n## まとめというか感想\n30歳超えてエンジニアになってもうすぐ5年になります。\nだれかの役に立てばと思い、筆をとりました。\n\n僕もまだまだ勉強中です。\n勉強好きな方であれば、エンジニアは楽しいと思いますよ。\n","user":"yoshinyan","created_at":"2021-03-28T15:18:08+09:00","updated_at":"2021-03-28T15:19:04+09:00"},{"url":"https://qiita.com/Shellyhackinglab/items/f56aa0c5d0f585d6b048","title":"Python boot camp by Dr.Angela day8","body":"#Functions\n前回に引き続き、Functionについてまた勉強をしていきます。\n\n```python \ndef welcome(name):    #Definition function\n  print(f\"Welcome to my town, {name}.\")\n\nwelcome(\"Alex\")     #Calling function\n\n出力結果\nWelcome to my town, Alex.\n```\n上記ではname = Alex となっており、(パラメータ) = (実体：Argument)となっている。\nL4でCalling functionで呼び出す文字列は「\"\"」で囲むことを忘れないように！\n\n##パラメータを複数実装したいとき\n__1. 直接指定しないver.__\n→ Calling functionの引数に区切り文字「,」で複数指定可能。\n\n```python\ndef welcome(location, name):\n  print(f\"Welcome to {location}, {name}!!\")\n\nwelcome(\"George town\", \"Alexsa\")\n\n出力結果\nWelcome to George town, Alexsa!!\"\n```\nCalling functionで呼び出すときはパラメータの順序通りに引数を指定する必要がある。今回はlocationが1番目、nameが2番目なので、Calling functionで1番目にGeorge townを指定するとlocationにあてがわれる。\n\n＜引数が複数あって、順番通りに指定するのが面倒orできない場合＞\n__2. 直接指定するver.__\n→ Calling functionの引数にパラメータと実体を「=」で直接結び付けることで、順序関係なく意図したパラメータに実体を格納することが可能。\n\n```python\ndef welcome(location, name):\n  print(f\"Welcome to {location}, {name}!!\")\n\nwelcome(name=\"Mary\", location=\"George town\")    #各パラメータを「=」で直接指定\n\n出力結果\nWelcome to George town, Mary!!\"\n```\n\n###Mission!!>> Prime Number Checker\nPrime number：素数 かどうかを判定するプログラム作成\n\nぱっと思いついたアルゴリズムとしてはこちら\n・numberを2,3,4...と次々に割れるか試して、numberまでに割れる数がなければそいつは素数\n\nまぁ素数かどうかって素因数分解して考えることが一般的なのでアルゴリズムとしてはこれが最適なんじゃないかと思います。\n\n```python:pnc2.py\ndef PNC():\n  number = int(input(\"Put the number->> \"))\n  y = 0　         　#割り切れる回数の初期値\n  for x in range(1,number+1):\n      if number % x == 0 and y < 4:\n         y += 1     #割り切れるかつその回数が4回未満ならばインクリメント\n      else:\n        pass\n    if y ==2:       #割り切れる回数が「1とその数自身」の計2回のときが素数\n      print(f\"{x} is a prime number!!\") \n    else:\n      print(f\"{x} is Not a prime number...\")\n```\n上記の実装時間は__13.859012842...__\n\n__なぜ「y < 4」？__\nyが3になるかならないかで繰り返しを続けるかどうか判断できるからです。\n「y < 3」だと、yは2までインクリメントを許容するが、それ以上インクリメントするのかしないのかこの時点では判断できず、結果として素数/素数でない数どちらに対してもy=2が成立してしまうためNG。\n「y =< 3」でも良さそう。。。(そしてこちらの方が処理速度は3.00000..1～3.9999.....9までの計算をしないので速そう...え、でもrangeで1～number+1までの指定って整数の間の計算て裏でしてるのか？)→ 結果「y <= 3」の実装時間は__12.29203486...で最速__だったのでrangeで整数指定してても実装速度には関係あるっぽいことが証明されました。\n\nでも__もっとシンプルなプログラム__がこちら\n\n```python:pnc3.py\ndef PNC():\n  number = int(input(\"Put the number->> \"))\n  for x in range(2,number):\n      if number % x == 0:                         #1とそれ自身以外に割り切れる数がある場合\n        print(f\"{x} is NOT a prime number...\")    #それは素数ではない\n      else:\n        print(f\"{x} is a prime number!!\")\n\nPNC()\n```\nそもそもrangeの範囲を1からではなく、2～numberになる一つ前までの数(range()に入れるのはindexなので)を指定することで、1とnumber以外に約数を持つか持たないかで判別可能でしたね。\n\n\n###プログラムの実装時間の比較 (time.time() / time.perf_counter)\nプログラムの実装時間比較をするために各プログラムに追記した部分はこちら\n\n```python\nimport time\nStime = time.time()\n\ndef PNC():\n...\n...省略\n\nEtime = time.time()\nRuntime = Etime - Stime \nprint(Runtime)\n```\nこのように実装コードを挟み込む形で記述すると差分の実行時間が得られます。\n※ただし、この方法はPythonドキュメントによると1秒より細かい時刻は正確に取得できないそうで、大まかな処理時間の把握にはいいですが、正確に知りたいときは__time.perf_counter__の使用が推奨されます。詳細はこちら→ https://pg-chain.com/python-time-perf_counter\n\n###Mission>> Caesar Cipher (word ver.)\n従来の暗号は軍事目的でさまざまなものが考案されましたが、今回はその中でも最も基本となる__アルファベットをずらすことでことが暗号化や解読が簡単に行える__古代ギリシャ人のカエサル・シーザーが考案した「シーザー暗号」をプログラム。詳細はこちら→ https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%BC%E3%82%B6%E3%83%BC%E6%9A%97%E5%8F%B7\n\n```python:cipher.py\nkey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']*2\n\ndirection = input(\"Type [encode] or [decode]:\\n\")\ntext = input(\"Type your message:\\n\").lower()\nshift = int(input(\"Type the shift number:\\n\"))\n\ndef encrypt(plain_text, shift_amount):        #暗号化\n  cipher_text = \"\"\n  for letter in plain_text:\n    position = key.index(letter)\n    new_position = position + shift_amount\n    cipher_text += key[new_position]\n  print(f\"The encoded text is {cipher_text}\")\n\ndef decrypt(encoded_text, shift_amount):      #復号\n  cipher_text = \"\"\n  for letter in encoded_text:\n    position = key.index(letter)\n    new_position = position - shift_amount\n    cipher_text += key[new_position]\n  print(f\"The original text is {cipher_text}\") \n\ndef mode():                                   #モード選択\n  if direction == \"encode\":\n    encrypt(text, shift)\n  elif direction ==\"decode\":\n    decrypt(text, shift)\n\nmode()\n```\n\n暗号化のFunctionと復号のFunctionをcaesar()として一つにまとめると・・・\n\n```python:cipher2.py\nkey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']*2\n\ndirection = input(\"Type [encode] or [decode]:\\n\")\ntext = input(\"Type your message:\\n\").lower()\nshift = int(input(\"Type the shift number:\\n\"))\n\ndef caesar(input_text, shift_amount, cipher_direction):   #文章/シフト/モード全て引数に！\n  end_text = \"\"\n  for letter in input_text:\n    position = key.index(letter)\n    if cipher_direction == \"decode\":                \n      shift_amount *= -1                                  #復号なら後ろへシフトなので×-1\n    new_position = position + shift_amount\n    end_text += key[new_position]\n  print(f\"The {cipher_direction}d text is {end_text}\")\n\ncaesar(text, shift, direction)\n```\nできた！と思ったが、これだと、encodeでhelloとしたときに発生する文字列をdecodeしてもhelloにならない。__なぜか？__\n→ mode選択のdirectionがforループ内にあるため、inputした各文字に対してその都度encodeかdecodeを判断し、shift_amountに-1をかけるので、h:暗号化/e:復号/l:暗号化/l:復号/o:暗号化という操作をしているからだ。これを回避するには、directionの判断をfor文の外に出せばよいので、最終的にこのような感じになる。\n\n```python:cipher3.py\nkey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']*2                              \n#key=[...]*2とすることでとりあえずシフト範囲を広げたが、あくまで応急処置に過ぎない\n\ndirection = input(\"Type [encode] or [decode]:\\n\")\ntext = input(\"Type your message:\\n\").lower()\nshift = int(input(\"Type the shift number:\\n\"))\n\ndef caesar(input_text, shift_amount, cipher_direction):   #文章/シフト/モード全て引数に！\n  end_text = \"\"\n  if cipher_direction == \"decode\":\n    shift_amount *= -1                                    #復号なら後ろへシフトなので×-1\n  for letter in input_text:\n    position = key.index(letter)\n    new_position = position + shift_amount\n    end_text += key[new_position]\n  print(f\"The {cipher_direction}d text is {end_text}\")\n\ncaesar(text, shift, direction)\n```\nここまでは、単語において変換できるようなプログラムを書いてきましたが、暗号は通常__文章__として用いることが多いので・・・\n・数字/スペース/記号がある場合でも暗号化してほしい\n・もういいよ！というまで繰り返し暗号化/復号をし続けたい\n・shift数=26*2以上でも対応できるようにしたい\nというわけで、上記3点を満たすようなプログラムへ Let's 改修!!\n\n###Mission>> Caesar Cipher (strings ver.)\n\n```python:cipher4.py\nkey = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\nkey2 = ['\\\"','\\'','?','!',',','+','-','*','-','/','#','%','&','(',')','=']\n\ndef program():                              #whileを使うためprogram()を新たに定義\n    direction = input(\"Type [encode] or [decode]:\\n\")\n    text = input(\"Type your message:\\n\").lower()\n    shift = int(input(\"Type the shift number:\\n\"))\n    shift = shift % 26                      #26で割った余りでシフトを指定することで上限撤廃\n\n    def caesar(input_text, shift_amount, cipher_direction):\n        end_text = \"\"\n        if cipher_direction == \"decode\":\n            shift_amount *= -1\n        for letter in input_text:\n            position = key.index(letter)\n            new_position = position + shift_amount\n            end_text += key[new_position]\n        print(f\"The {cipher_direction}d text is {end_text}\")\n    caesar(text, shift, direction)\n\nprogram()\n\nwhile not input(\"Keep Caesar? [yes/no]\\n\") == \"no\":\n    program()\nelse:\n    print(\"THANKS (^^)V\")\n```\n＜改善点＞\n・アルファベット26文字で割った余りでシフト数を決めて、シフト数の上限をなくした\n・program() を新たに定義し、「no」を入力するまで永遠にprogram()をループさせる\n\nさてさて、最後は数字/記号/スペースに対応させる課題・・・\n","user":"Shellyhackinglab","created_at":"2021-03-28T15:13:10+09:00","updated_at":"2021-03-28T20:06:43+09:00"}]