[{"url":"https://qiita.com/mitsumizo/items/836ce2e00e91c33fcf95","title":"ProcessBuilderクラスの使い方","body":"スッキリわかるJava入門（実践編）を読んでいると、**ProcessBuilderクラス**の使い方がちらっと載っていた。\nJavaからコマンドプロンプトやターミナルを呼び出す処理は汎用性が高そうだったので、使い方をまとめるのがここでの目標である。\n\nこの文は最後に書いているが、ProcessBuilderクラスをまとめる上で、Processクラス、BufferReaderクラス、InputStreamReaderクラスなどとたくさんの出会いがあった。\n\n# ProcessBuilderとは\nProcessBuilderを一言でまとめると、下記である。\n> ProcessBuilderとは、Javaから外部プログラムを実行するために使用するクラス。\n\n\n[ProcessBuilderの使い方](https://techacademy.jp/magazine/19751)\n[ProcessBuilderの公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/lang/ProcessBuilder.html)\n\nつまり、このクラスはオペレーティング・システムのプロセスの作成に使用される。\n例えば、ある計算処理が完了したらメモ帳を起動を行ったり、今のパスに存在するファイル名などを取得したり、など使い方は広くありそうである。\n\n# ProcessBuilderクラスの使い方\n下記に使い方を簡単に書く。\n\n1. インスタンスの作成\n1. プロセスのスタート\n1. 結果を受け取る\n\n上記のように、３ステップに分割される。 １つずつ見ていく前に以下のコードをざっと読んでほしい。(私はMacユーザーなので、Mac使用で書くことを許してほしい。詳しく言うと、ProcessBuilderの中身が多少異なる。理由は後で述べる。）\nこのコードのことをアルファコードと呼ぶ。\n\n```java\nimport java.io.BufferedReader;\nimport java.io.InputStreamReader;\nimport java.nio.charset.Charset;\n\npublic class ProcessExecutor {\n    public static void main(String[] args) throws Exception {\n        // 1. ProcessBuilderインスタンスを生成する\n        ProcessBuilder p = new ProcessBuilder(\"ls\", \"./\");\n\n        // 2. プロセスを開始する\n        Process process = p.start();\n\n        // 3. 結果を受け取る\n        try (BufferedReader r = new BufferedReader(new InputStreamReader(process.getInputStream(), Charset.defaultCharset()))) {\n            String line;\n            while ((line = r.readLine()) != null) {\n                System.out.println(line);\n            }\n        }\n    }\n}\n\n```\nアルファコードは、カレントディレクトリに存在するファイル名を表示するプログラムである。(terminalに\"ls ./\"と入力したものと同じ。）\nterminalでは１行で済むのに、Javaを通じてとなるとタスクが増えるな・・・・。:frowning2:\n\nアルファコードを元に\n\n1. インスタンスの作成\n1. プロセスのスタート\n1. 結果を受け取る\n\nを１つずつ見ていきたい。\n\n### インスタンスの作成\nこの小節ではメインのProcessBuilderについて深める。\n詳しいことは[公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/lang/ProcessBuilder.html)を確認してほしい。\n\nProcessBuilderは何度も述べるが、Javaから外部プログラムを実行するために使用するクラスである。\n\n公式ドキュメントによると、ProcessBuilderのコンストラクタは\n\n```java\nProcessBuilder(List<String> command)\nProcessBuilder(String.. command)\n```\nの２種類があるよう。\n\nどちらにせよ引数の中身は、Windowsであれば**バッチプログラム**、MacやLinuxであれば**シェルスクリプト**への**命令**である。\n引数の内容がMacとWindowsで少し違うのはこれが原因である。コンストラクタは２種類存在し、どちらも同じ働きをする。\n\n引数にはシェルへの命令を記載するのであるが、違いはご覧の通り型の違いである。\nString型であれば、一度書いたら変更はインスタンスを作り直すしかないものに対して、List型であれば要素を更新すれば反映されるという違いがある。つまり、String型はList型の簡易メソッドとしても捉えることが出来る。\nまた、どっちの方式を取ったとしてもcommandが有効なオペレーティング・システム・コマンドに対応するかどうかはチェックされないので注意が必要である。\n\nちなみに、旧バージョンのJava(〜JDK1.4)では「Runtime」というクラスがProcessBuilderと同じ役割を担っていたが、現在はそれより新しいクラスである「ProcessBuilder」を使うのがよりよい作法とされているらしい。\n\n### プロセスのスタート\nProcessBuilderクラスはメソッドとして\"start()\"を持っている。\nこのメソッドは新規プロセスを起動するメソッドで、Processクラスを返す。\n\nProcessクラスの役割は\n>Processクラスは、プロセスからの入力、プロセスへの出力、プロセス完了の待機、プロセス終了状態の確認、およびプロセスの破棄(終了)を実行するための各メソッドを提供。\n[Process公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/lang/Process.html)\n\nである。つまり何かを処理している間のあれこれを提供するクラスである。先程のコードにおいては、\"ls ./\"の命令における処理のプロセス（全体）のあれこれの情報を持っているのである。例えば、上の命令で何が出力されるのか、正常に処理が完了したかなどである。\n\n下記でも紹介するが、Processクラスにおけるよく使われるメソッドは\n- exitValu()　（サブプロセスの終了コードを返す。返り値はint型。）\n- getInputStream()　（サブプロセスの通常の出力に接続された入力ストリームを返す。返り値は**InputStream型**。詳細は次の小節。）\n- isAlive()　（このProcessが表すサブプロセスが生存しているかどうかを判定する。返り値はBoolean型。）\n- etc ..\n\nである。\n\n### 結果を受け取る\n上記で述べたように、結果を受け取るにはProcessのgetInputStreamメソッドを使用する。このメソッドはInputStream型で返される。\nInputStreamクラスはバイト入力ストリームを表現するすべてのクラスのスーパー・クラスである。\n[InputStreamクラスの公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/io/InputStream.html)\n\n次に結果を読み込むために、バイト・ストリームから文字ストリームへの橋渡しの役目を持つInputStreamReaderクラスを使う。\n[InputStreamReaderクラスの公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/io/InputStreamReader.html)\n\nこのクラスは文字列を読み込む抽象クラスReaderの子クラスである。\nこのクラスの役割を簡単に言えば、バイトを読み込み、指定されたcharsetを使用して文字に**デコード**するクラスである。\n\nInputStreamReaderのコンストラクタ\n\n```java\nInputStreamReader(InputStream in)\nデフォルトの文字セットを使うInputStreamReaderを作成。\nInputStreamReader(InputStream in, Charset cs)\n与えられた文字セットを使うInputStreamReaderを作成。\nInputStreamReader(InputStream in, CharsetDecoder dec)\n与えられた文字セット・デコーダを使うInputStreamReaderを作成。\nInputStreamReader(InputStream in, String charsetName)\n```\n\nアルファコードは、2番目のコンストラクタを使って、\"ls ./\"から得たInputStream型の出力をデフォルトのcharsetでデコードするインスタンスを作成しているのである。\n\nちなみに、InputStreamReaderクラスのreadメソッドは、バイト入力ストリームから1つ以上のバイトを読み込む。\n\nアルファコードでは、バイトから文字への効率的な変換を可能にするために、BufferedReaderの内部にInputStreamReaderをラップしている。（最初からBufferReder使えよ。と思う方もいると思うが、Readerに対して読込み要求が出されると、それに対応するベースとなる文字型ストリームまたはバイト・ストリームへの読込み要求が発行されるのでこの処理が必要。）\n[BufferReaderの公式ドキュメント](https://docs.oracle.com/javase/jp/8/docs/api/java/io/BufferedReader.html)\n\nBufferについては、ここでは話題とは外れるので自分で調べてほしいが、Bufferを使うことで毎回バイトを読み込んでreadするよりも明らかに速度が速くなるのである。\n\nBufferReaderもReaderの子クラスであるので、read関数close関数を持つ。アルファコードでは、readline関数を使っている。\n> readline() : テキスト行を読み込む。\n\n\n上の３ステップによってProcessBuilderは利用される。このクラスを利用する上で様々な他クラスが出てきたが、いい勉強になった。\n今日はこの辺で。\n\nもしミスや質問があれば、コメントしていただけると幸いです。\n\n# 参考資料\n- https://techacademy.jp/magazine/19751\n- https://docs.oracle.com/javase/jp/8/docs/api/java/lang/ProcessBuilder.html\n- https://docs.oracle.com/javase/jp/8/docs/api/java/lang/Process.html\n- https://docs.oracle.com/javase/jp/8/docs/api/java/io/InputStream.html\n- https://docs.oracle.com/javase/jp/8/docs/api/java/io/InputStreamReader.html\n- https://docs.oracle.com/javase/jp/8/docs/api/java/io/BufferedReader.html\n\n\n\n","user":"mitsumizo","created_at":"2021-03-30T16:24:33+09:00","updated_at":"2021-03-30T16:24:33+09:00"},{"url":"https://qiita.com/gyuki/items/f80cb2e8bfcd6c912a3f","title":"1pxより細く","body":"border1pxをより細くしたい場合\n\nborder:1px solid black;\ntransform: scaleY(.5);\ntransform-origin: 100% 0;\n\n上記を追加\n","user":"gyuki","created_at":"2021-03-30T16:17:45+09:00","updated_at":"2021-03-30T16:17:45+09:00"},{"url":"https://qiita.com/akki-memo/items/81a57c7f29f12de81d05","title":"たまに使うページスクロール時にページトップからどれだけ移動したかを取得する方法","body":"ページスクロール時にページトップからどれだけ移動したかを取得する方法。\n\n```javascript\n    window.addEventListener('scroll', () => {\n      console.log(window.pageYOffset)\n    })\n```\n\n地味に使うのでメモ\n","user":"akki-memo","created_at":"2021-03-30T16:17:22+09:00","updated_at":"2021-03-30T16:17:22+09:00"},{"url":"https://qiita.com/7se_nanase/items/1023f1be12831adeca08","title":"Hello Worldを作りました","body":"# HelloWorldを作りました\n## 概要\nHelloWorldを作りました\n\n## ご挨拶\nみなさん初めまして。\nそろそろ4月ということで、新入生や新入社員の方がプログラミングを始めることもあるかと思います。\n最初に書くプログラムの定番といえばそう、\"HelloWorld\"ですね。\nHelloWorldのプログラムを作成したので、本記事でも紹介していこうと思います。\n\n※以下、出てくるコードはpaiza.ioで動作確認したので、トップレベルステートメントは使いません。\n\n## HelloWorld\n```CSharp\nclass Program\n{\n    static void Main()\n    {\n        System.Console.WriteLine(\"Hello World!\");\n    }\n}\n```\n\nオーソドックスですね。\n\n## マジックナンバー\nこのHelloWorld、シンプルでいいと思うのですがマジックナンバーが使用されていますね。\nマジックナンバーを使用せずに定数を使用する癖をつけておいたほうがいいかもしれません。\n\n```CSharp\nclass Program\n{\n    private static readonly string DisplayText = \"Hello World!\";\n\n    static void Main()\n    {\n        System.Console.WriteLine(DisplayText);\n    }\n}\n```\n\n## 文字列リテラル\n文字列リテラルもある意味マジックナンバーみたいなものなのでは？(暴論)\nそんなわけで文字列リテラルを排除してHelloWorldを作成してみました。\n\n```CSharp\nclass Program\n{\n    static void Main()\n    {\n        var O=sizeof(byte);\n        var T=sizeof(char);\n        var t=O+T;\n        var F=T*T;\n        var E=T*F;\n        var s=E*F;\n        var _=s+O;\n        var d=_*t+O;\n        var e=d+O;\n        var l=d+E;\n        var h=l-s-F;\n        var o=l+t;\n        var r=o+t;\n        var w=o-s+E;\n        foreach (char c in new[] { h, e, l, l, o, s, w, o, r, l, d, _ })\n        {\n            System.Console.Write(c);\n        }\n    }\n}\n```\n\n## 終わりに\nマジックナンバー(もとい、文字列リテラル)を排除したHelloWorldを作成してみました。\nコードゴルフ的に遊んだら面白いかもしれません。\n","user":"7se_nanase","created_at":"2021-03-30T16:15:38+09:00","updated_at":"2021-03-30T16:15:38+09:00"},{"url":"https://qiita.com/m-inada0408/items/d8d09f5369618bc99b48","title":"【Swift】シミュレータでもデバイスの種類を取得する","body":"## 環境\n- Xcode Version 12.4 (12D4e)\n\n\n## 実現したいこと\n- デバイスの種類毎にUIを微調整したい\n    - ex) iPhone SE(1st) より小さいデバイスでは CollectionView のレイアウトを2列に変更する\n\n\n## 問題点\n- 実機での種類は `hw.machine` で取得可能\n\n```swift\n            var size = 0\n            sysctlbyname(\"hw.machine\", nil, &size, nil, 0)\n            \n            var machine = [CChar](repeating: 0, count: Int(size))\n            sysctlbyname(\"hw.machine\", &machine, &size, nil, 0)\n        \n            let modelIdentifier = String(cString:machine)\n```\n\n- シミュレータでこのコードを動かすと一律で `modelIdentifier` が  `\"x86_64\"` になってしまう\n\n\n## 解決方法\n- シミュレータの場合には `ProcessInfo().environment[\"SIMULATOR_MODEL_IDENTIFIER\"]` を利用することでシミュレート中のデバイスのモデルを取得できる\n\n```swift\n// MARK: - UIDevice\n\npublic extension UIDevice {\n\n\n    // MARK: - DeviceType\n\n    enum DeviceType {\n\n        // サンプルコードの簡略化のため5種類にわける.\n        case simulator\n        case iPod\n        case iPhone\n        case iPad\n        case unknown\n\n        init(by value: String) {\n\n            if value.range(of: \"i386\") != nil { self = .simulator }\n            else if value.range(of: \"x86_64\") != nil { self = .simulator }\n            else if value.range(of: \"iPod\") != nil { self = .iPod }\n            else if value.range(of: \"iPad\") != nil { self = .iPad }\n            else if value.range(of: \"iPhone\") != nil { self = .iPhone }\n            else { self = .unknown }\n        }\n    }\n\n    func deviceType() -> DeviceType {\n\n            var size = 0\n            sysctlbyname(\"hw.machine\", nil, &size, nil, 0)\n            \n            var machine = [CChar](repeating: 0, count: Int(size))\n            sysctlbyname(\"hw.machine\", &machine, &size, nil, 0)\n        \n            let modelIdentifier = String(cString:machine)\n            let deviceType = DeviceType(by: modelIdentifier)\n\n            // シミュレータの場合には ProcessInfo からシミュレート中のデバイスのモデルを取得する\n            if case .simulator = deviceType {\n                    \n                    if let simulatorModelIdentifier = ProcessInfo().environment[\"SIMULATOR_MODEL_IDENTIFIER\"] {\n\n                        return DeviceType(by: simulatorModelIdentifier)\n                    }\n                    \n                    return .unknown\n            }\n\n            return deviceType\n    }\n}\n```\n\n\n## 参考\n- https://qiita.com/tomohisaota/items/f8857d01f328e34fb551\n- https://stackoverflow.com/questions/33493800/how-to-get-the-iphone-type-from-simulator-ios\n","user":"m-inada0408","created_at":"2021-03-30T16:11:55+09:00","updated_at":"2021-03-30T16:11:55+09:00"},{"url":"https://qiita.com/rice01010101/items/fa704b984c5a2e0d8ea8","title":"Google Chatのチャットルームへメッセージを投稿するLambda関数","body":"# 前提\n* Python 3.8\n* 標準ライブラリのみ\n* 対象チャットルームにて着信Webhook作成済み\n\n# コード\n【】は各自環境の値で修正\n\n```python\nimport json\nimport urllib.request\n\ndef lambda_handler(event, context):\n    # TODO implement\n    message_detail = 'from aws lambda'\n    \n    message = {'text': message_detail}\n    url = '【作成した着信WebhookのURL】'\n    headers = {'Content-Type': 'application/json; charset=UTF-8'}\n    byte_encoded = json.dumps(message).encode('utf-8')\n    \n    req = urllib.request.Request(\n        url=url\n        , data=byte_encoded\n        , headers=headers\n    )\n    \n    response = urllib.request.urlopen(req)\n    print(response.read())\n```\n\n\n# 役に立つかもリンク\n[Glue job -> EventBridge -> Lambda の構成でLambdaが受け取るJSON例](https://qiita.com/yoshii0110/items/5b2263a0cbd2afe0ec20)\n[eventの扱いについて](https://qiita.com/Yuki_BB3/items/7885e06f82bebfa8a3bb)\n[メッセージのカスタマイズについて](https://qiita.com/Shota_Fukuda/items/7cd94126b578fad81d27#hangouts-chat-%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%83%E3%83%88)\n","user":"rice01010101","created_at":"2021-03-30T16:08:23+09:00","updated_at":"2021-03-30T16:08:23+09:00"},{"url":"https://qiita.com/HanaleiMoon/items/2484db9fe85db5379167","title":"【Android】SDKバージョンごとのUNITテストを書く","body":"#はじめに\nAndroidを開発しているとSDKバージョン（OSバージョン）によって処理を分岐させる必要が出てきます。\nそういった処理はネット上に多く見つけることができます。\nその場合のテストもしっかり考えるべきと思います。\n今回はSDKバージョン別のUNITテストを紹介していきます。\n#OSごとに分岐が必要な処理例\n早速、SDKバージョンごとに分岐させるような実装を考えてみます。\nテストを書くことが目的なので、インスタンス化するパターンと静的(companionObject、static)なパターン2つを用意します（処理は同じにします）\n今回は実際に判定が処理の例としてネットワーク判定処理を実装します。trueでWIFI\nに接続されている判定になる処理です。\n判定を返す処理をしますが、その際、AndroidM(SDKバージョン23以上)と未満で使用するAPIを変えます。\n\n詳しくは公式サイトを見てください。\n\nhttps://developer.android.com/reference/android/net/ConnectivityManager\n\n```kotlin:Connectivity.kt\n/**\n * インスタンス化するパターン.\n * @param context コンストラクタでContextを渡す\n */\nclass Connectivity(val context: Context) {\n\n    fun isWiFiConnected(): Boolean {\n        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            isWiFiConnected(connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork))\n        } else {\n            isWiFiConnected(connectivityManager.activeNetworkInfo.type)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\n    private fun isWiFiConnected(networkCapabilities: NetworkCapabilities?): Boolean =\n            networkCapabilities != null && networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)\n\n    private fun isWiFiConnected(activeNetworkInfoType: Int): Boolean =\n            activeNetworkInfoType == ConnectivityManager.TYPE_WIFI\n}\n```\n\n```kotlin:ConnectivityUtil.kt\n/**\n * 静的(companionObject、static)なパターン.\n * インスタンス化せずメソッドでContextを渡す\n */\nobject ConnectivityUtil {\n\n    fun isWiFiConnected(context: Context): Boolean {\n        val connectivityManager = context.getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager\n        return if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {\n            isWiFiConnected(connectivityManager.getNetworkCapabilities(connectivityManager.activeNetwork))\n        } else {\n            isWiFiConnected(connectivityManager.activeNetworkInfo.type)\n        }\n    }\n\n    @RequiresApi(Build.VERSION_CODES.LOLLIPOP)\n    private fun isWiFiConnected(networkCapabilities: NetworkCapabilities?): Boolean =\n        networkCapabilities != null && networkCapabilities.hasTransport(NetworkCapabilities.TRANSPORT_WIFI)\n\n    private fun isWiFiConnected(activeNetworkInfoType: Int): Boolean =\n        activeNetworkInfoType == ConnectivityManager.TYPE_WIFI\n}\n```\n\nこれは分岐処理の1例ですが、AndroidはこういったSDKバージョンごとの分岐処理が必要な場合があります。\n\n#UNITテストを書く準備\nテストの為にgradleに定義を追加します。\n今回のテストには以下の定義が必要です。\n\n```gradle:build.gradle\ndependencies {\n    // ↓を追加(最新のバージョンにしてください)\n    testImplementation 'junit:junit:4.13'\n    testImplementation 'androidx.test:core:1.3.0'\n    testImplementation 'org.robolectric:robolectric:4.3.1'\n    testImplementation 'io.mockk:mockk:1.10.5'\n}\n```\n\n#シンプルにUNITテストを書く\nまずはSDKバージョンごとに分岐しないシンプルなテストを実装してみましょう。\nテストクラスはそれぞれ ConnectivityTest、ConnectivityUtilTest とします。\n\n```kotlin:ConnectivityTest.kt\n@RunWith(RobolectricTestRunner::class)\nclass ConnectivityTest {\n\n    private lateinit var context: Context\n\n    @Before\n    fun setup() {\n        // これでContextが取得できる\n        context = ApplicationProvider.getApplicationContext()\n    }\n\n    @Test\n    fun シンプルなテスト() {\n        val expected = false\n        val connectivity = mockk<Connectivity>()\n\n        every { connectivity.isWiFiConnected() } returns expected\n        val result = connectivity.isWiFiConnected()\n        Assert.assertEquals(expected, result)\n    }\n}\n```\n\n```kotlin:ConnectivityUtilTest.kt\n@RunWith(RobolectricTestRunner::class)\nclass ConnectivityUtilTest : TestCase() {\n\n    private lateinit var context: Context\n\n    //private lateinit var contextMock: Context\n\n    @Before\n    fun setup() {\n        // これでContextが取得できる\n        context = ApplicationProvider.getApplicationContext()\n\n        // Context取得方法はいくつかあります\n        //contextMock = mockk<Context>(relaxed = true)\n    }\n\n    @Test\n    fun companionObjectをmockするシンプルなテスト() {\n        val expected = false\n        mockkObject(ConnectivityUtil)\n        every { ConnectivityUtil.isWiFiConnected(any()) } returns expected\n        val result = ConnectivityUtil.isWiFiConnected(context)\n        Assert.assertEquals(expected, result)\n        unmockkObject(ConnectivityUtil)\n    }\n}\n```\n\nこれでテストは通ります。\n\n#SDKバージョンごとのUNITテストを書く\n次にSDKバージョンごとのUNITテストを追加しましょう。\nやりたいテストはSDKバージョンによって利用されるprivateメソッドが違うことを担保するテストです。\n\n```kotlin:ConnectivityTest.kt\n@RunWith(RobolectricTestRunner::class)\nclass ConnectivityTest {\n\n    private lateinit var context: Context\n\n    @Before\n    fun setup() {\n        // これでContextが取得できる\n        context = ApplicationProvider.getApplicationContext()\n    }\n\n    @Test\n    fun シンプルなテスト() {\n        val expected = false\n        val connectivity = mockk<Connectivity>()\n\n        every { connectivity.isWiFiConnected() } returns expected\n        val result = connectivity.isWiFiConnected()\n        Assert.assertEquals(expected, result)\n    }\n\n\n    @Test\n    fun SDK19の分岐テスト() {\n        // SDK19にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 19)\n        // コンストラクタにContextを渡してインスタンス化\n        // privateメソッドの呼び出しを有効\n        val connectivity = spyk(Connectivity(context), recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivity[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        connectivity.isWiFiConnected()\n\n        // AndroidM以上の分岐に入らない\n        verify(exactly = 0) { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入る\n        verify(exactly = 1) { connectivity[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n\n    @Test\n    fun SDK27の分岐テスト() {\n        // SDK27にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 27)\n        // コンストラクタにContextを渡してインスタンス化\n        // privateメソッドの呼び出しを有効\n        val connectivity = spyk(Connectivity(context), recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivity[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        connectivity.isWiFiConnected()\n\n        // AndroidM以上の分岐に入る\n        verify(exactly = 1) { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入らない\n        verify(exactly = 0) { connectivity[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n\n    @Test\n    fun SDK27の分岐テスト_2回実行() {\n        // SDK27にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 27)\n        // privateメソッドの呼び出しを有効\n        val connectivity = spyk(Connectivity(context), recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivity[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        connectivity.isWiFiConnected()\n\n        // AndroidM以上の分岐に2回入る\n        verify(exactly = 2) { connectivity[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入らない\n        verify(exactly = 0) { connectivity[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n}\n```\n\n```kotlin:ConnectivityUtilTest.kt\n@RunWith(RobolectricTestRunner::class)\nclass ConnectivityUtilTest : TestCase() {\n\n    private lateinit var context: Context\n\n    //private lateinit var contextMock: Context\n\n    @Before\n    fun setup() {\n        // これでContextが取得できる\n        context = ApplicationProvider.getApplicationContext()\n\n        // Context取得方法はいくつかあります\n        //contextMock = mockk<Context>(relaxed = true)\n    }\n\n    @After\n    fun teardown() {\n    }\n\n    @Test\n    fun companionObjectをmockするシンプルなテスト() {\n        val expected = false\n        mockkObject(ConnectivityUtil)\n        every { ConnectivityUtil.isWiFiConnected(any()) } returns expected\n        val result = ConnectivityUtil.isWiFiConnected(context)\n        Assert.assertEquals(expected, result)\n        unmockkObject(ConnectivityUtil)\n    }\n\n    @Test\n    fun SDK19の分岐テスト() {\n        // SDK19にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 19)\n        // privateメソッドの呼び出しを有効\n        val connectivityUtil = spyk<ConnectivityUtil>(recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        connectivityUtil.isWiFiConnected(context)\n\n        // AndroidM以上の分岐に入らない\n        verify(exactly = 0) { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入る\n        verify(exactly = 1) { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n\n    @Test\n    fun SDK27の分岐テスト() {\n        // SDK27にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 27)\n        // privateメソッドの呼び出しを有効\n        val connectivityUtil = spyk<ConnectivityUtil>(recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        connectivityUtil.isWiFiConnected(context)\n\n        // AndroidM以上の分岐に入る\n        verify(exactly = 1) { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入らない\n        verify(exactly = 0) { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n\n    @Test\n    fun SDK27の分岐テスト_2回実行() {\n        // SDK27にセット\n        ReflectionHelpers.setStaticField(Build.VERSION::class.java, \"SDK_INT\", 27)\n        // privateメソッドの呼び出しを有効\n        val connectivityUtil = spyk<ConnectivityUtil>(recordPrivateCalls = true)\n\n        // それぞれprivateメソッドが呼ばれた際に何を返すか定義\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) } returns mockk<Boolean>(relaxed = true)\n        every { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) } returns mockk<Boolean>(relaxed = true)\n\n        // 2回実行する\n        connectivityUtil.isWiFiConnected(context)\n        connectivityUtil.isWiFiConnected(context)\n\n        // AndroidM以上の分岐に2回入る\n        verify(exactly = 2) { connectivityUtil[\"isWiFiConnected\"](allAny<NetworkCapabilities>()) }\n        // AndroidM未満の分岐に入らない\n        verify(exactly = 0) { connectivityUtil[\"isWiFiConnected\"](allAny<Int>()) }\n    }\n}\n```\n\nこれでSDKによる分岐処理も網羅できました。\n\n#最後に\n応用すれば様々なSDKバージョンの分岐処理にも対応できると思います。\nみんなで不具合の少ないアプリを作っていきましょう。\n","user":"HanaleiMoon","created_at":"2021-03-30T16:06:28+09:00","updated_at":"2021-03-30T16:06:28+09:00"},{"url":"https://qiita.com/syamamura/items/57c529451b29cf532b38","title":"MicroK8s+MetalLBでロードバランサの動きを理解する","body":"## まえがき\n\n前回の記事で作成した3ノードのK8sクラスタをより実運用に向けとするため、ネットワークの勉強も兼ねて MetalLB を導入し、負荷分散と外部アクセス環境の構築を行う\n\nMetalLBには `Layer 2 mode` と `BGP mode` の2つのモードがあるが、 **BGP mode** で構築を行う\n※BGP mode を使用するには、上流にBGPを喋れるルータが必要\n\nhttps://qiita.com/syamamura/items/ab31ddfe4133dcf298bf\n\n何番煎じかはわからないが、MetalLB, BGP の仕組みも交えて解説をする\n\n## MetalLB (BGP mode) の仕組み\n\n### 1. 前提条件 - 構成\n\n前回クラスタ構築完了時点では、K8sノードはClientと同じセグメントに属していたが、新たにVLANを切り、別のネットワークセグメントへと切り出し、図の構成となった\n\n![bgp-nexthop-構成.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149815/1cd36674-b987-9c94-e29f-f323a23fdea9.png)\n\n\n### 2. 経路情報の広告\n\nMetalLB (BGP mode) では、[BGP (Border Gateway Protocol)](https://ja.wikipedia.org/wiki/Border_Gateway_Protocol) を使用して、`metallb:controller` が払い出す ExternalIP セグメントを `metallb:speaker` が BGP Router へ広告することで動的なルーティングを実現するミドルウェアである\nBGPをルーティングに使用することで特別な機器を必要とせず、L3のみでロードバランサのような振る舞いをさせることができる\n\n#### 経路広告の流れは以下の通りである\n\n1. controller が Service へ ExternalIP の払い出しを行う\n1. controller が speaker へ 払い出しを通知\n1. speaker が 上流の BGP Router へ 経路情報を広告\n\n![bgp-nexthop-bgp.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149815/743c0536-d364-0afe-7476-e0b34fd939d8.png)\n\n\n### 3. next hop による負荷分散\n\n経路情報が広告され、ExternalIP への接続要求があるとルータは BGP table (next hop) に記載されたノードへパケットを通す\n論理的には青い点線で描かれた、 `ipvs` へとセッションが張られる\nipvs は自ノードもしくは他ノードで Listen している pod へパケットを転送する\n\n2段構えのロードバランサとなっているが、この仕組みがあることで、 ノードレベルでの負荷分散とノードと BGP 間の経路情報を単純化している\nルータは next hup に指定された対向へパケットを通すだけなので、接続を受けたノードに pod が居ない可能性は十分に考えられる。そこで、 ipvs が接続を受け、クラスタ内の適切な pod へパケットを転送することで、pod レベルの負荷分散と障害耐性を実現する\n\n#### クライアントからの通信の流れは以下の通りである\n\n1. クライアントが service (`172.16.x.x`) へ接続要求\n1. BGP ルータが next hop に指示されたIPノードへパケットを通す\n1. ipvs がセッションを受け、いずれかのノードで動く pod へ転送\n1. 元の経路をたどり、 pod がクライアントへ接続を返す\n\n![bgp-nexthop-next hop.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149815/246fb15c-f4c6-dda3-8224-fc8e700fbf08.png)\n\n\n## MetalLB 導入\n\nMicroK8sの場合、 いずれかのノードで add-on を有効にするだけで使用可能な状態となる\n\n```shell\n$ sudo microk8s.enable metallb\n```\n\n## 設定を行う\n\n### ルータ側設定\n\nルータには Sophos XG Firewall を使用している\nVyOS を使用した構築例[^1]や EdgerouterX を使用した構築例[^2] なども参考とした\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149815/9c1fc24f-9834-bffb-ceb9-ea68dd30badc.png\" width=\"480px\">\n\nルータID にルータのIPアドレス、ローカルAS には `64512 - 65534` [^3] から採番し入力 `64512` とした。\nネイバーには対向(ノード)のIPアドレスとルータ同様、AS番号の採番を行うが ルータから1インクリメントした `64513` とした。\n\n\n### K8s側設定\n\n[MetalLB 公式ドキュメント](https://metallb.universe.tf/configuration/)の例をベースに、設定ファイルを作成した。\n\n最小構成としては、以下の内容で機能する\n\n```yaml:metallb-config.yaml\napiVersion: v1\nkind: ConfigMap\nmetadata:\n  namespace: metallb-system\n  name: config\ndata:\n  config: |\n    peers:\n    - peer-address: 10.227.0.1\n      peer-asn: 64512\n      my-asn: 64513\n    address-pools:\n    - name: default\n      protocol: bgp\n      addresses:\n      - 172.16.192.0/20\n```\n\n適用は `kubectl apply` で行う\n\n```shell\n$ kubectl apply -f metallb-config.yaml\n```\n\n#### yaml の内容について\n\n- `data.config.peers.peer-address` は 対向(上流ルータ)のIPアドレス\n- `data.config.peers.peer-asn` は 対向(上流ルータ)のAS番号\n- `data.config.peers.my-asn` は 自分(ノード)に割り当てるAS番号\n- `data.config.address-pools.protocol` は ロードバランシングに使用するプロトコル `\"layer2\"` または `\"bgp\"` を指定\n- `data.config.address-pools.address` は service に割り当てる IPアドレスのプール範囲指定\n\n\n## 動作確認\n\n### BGP セッションの確認\n\nXG Firewall に限らず、ルータにはBGPの状態確認ができるコマンドがある\n設定が正常に完了すると以下のような出力がされる\n\n```\nBGP router identifier 10.227.0.1, local AS number 64512\nRIB entries 7, using 448 bytes of memory\nPeers 3, using 7452 bytes of memory\n\nNeighbor        V    AS MsgRcvd MsgSent   TblVer  InQ OutQ Up/Down  State/PfxRcd\n192.168.11.11   4 64513    7352    7365        0    0    0 2d13h04m        3\n192.168.11.12   4 64513    6145    6174        0    0    0 16:34:39        3\n192.168.11.13   4 64513    7352    7368        0    0    0 2d13h04m        3\n\nTotal number of neighbors 3\n```\n\n`Up/Down` や `never` や `down`、 `MsgRcvd`, `MsgSent` が `0` となっている場合は、BGPセッションに失敗している\nAS番号やIPアドレスの確認、ゾーンポリシーやファイアウォールなどの確認を行う\n\n小生もルータ側のゾーンポリシー設定で、 dynamic routing を Allow にしておらず小一時間ハマった。\n(ノード側のサブネットも間違っていた…)\n\n\n#### 確認用サービス (nginx) を立ち上げる\n\n唐突だが、metallb:speaker の経路広告がルータの BGP Table に反映されるか、Clientからの疎通確認を行うために、nginx のサービスを立ち上げる\n\nhttps://metallb.universe.tf/usage/\n\n```yaml:nginx.yaml\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: nginx\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: nginx\n  template:\n    metadata:\n      labels:\n        app: nginx\n    spec:\n      containers:\n      - name: nginx\n        image: nginx:1\n        ports:\n        - name: http\n          containerPort: 80\n\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: nginx\nspec:\n  ports:\n  - name: http\n    port: 80\n    protocol: TCP\n    targetPort: 80\n  selector:\n    app: nginx\n  type: LoadBalancer\n```\n\n`spec.replicas` は適宜書き換える\n\n適用は `kubectl apply` で行う\n\n```shell\n$ kubectl apply -f nginx.yaml\n```\n\nservice と pods の状態は以下のコマンドで確認できる\n\n```shell\n$ kubectl get svc,po\n\nNAME                    TYPE           CLUSTER-IP       EXTERNAL-IP    PORT(S)        AGE\nservice/kubernetes      ClusterIP      10.152.183.1     <none>         443/TCP        3d13h\nservice/nginx           LoadBalancer   10.152.183.53    172.16.192.1   80:31778/TCP   3d11h\n\nNAME                        READY   STATUS    RESTARTS   AGE\npod/nginx-8c9df995d-j7w8t   1/1     Running   4          3d11h\npod/nginx-8c9df995d-d9djn   1/1     Running   4          3d11h\npod/nginx-8c9df995d-fwvbd   1/1     Running   6          3d11h\n```\n\nExternalIP には `172.16.192.1` が割り当てられ、`80/tcp` で Listen している\npods も `replicas` に設定した3つが立ち上がっている\n\n\n\n### BGP table (next hop) の確認\n\n`service/nginx` に ExternalIP が割り当てられる頃には、ルータのBGPテーブルに経路情報が反映されているはず\nルータによって確認方法や出力は異なるが、 `172.16.192.1/32` に対し、`Next Hop` が割り当てられていることが確認できる\n\n`kubectl get svc` で ExternalIP が割り当てられているにも関わらず、BGPテーブルへの反映が行われていない場合は、speaker pod の状態確認や、そもそも BGP セッション がコケている可能性が高いので確認して欲しい\n\n```\nBGP table version is 0, local router ID is 10.227.0.1\nStatus codes: s suppressed, d damped, h history, * valid, > best, i - internal,\n              r RIB-failure, S Stale, R Removed\nOrigin codes: i - IGP, e - EGP, ? - incomplete\n\n   Network          Next Hop            Metric LocPrf Weight Path\n*> 10.227.0.0/20    0.0.0.0                  0         32768 i\n*  172.16.192.1/32  192.168.11.12                          0 64513 ?\n*                   192.168.11.11                          0 64513 ?\n*>                  192.168.11.13                          0 64513 ?\n\nTotal number of prefixes 4\n```\n\n### クライアントからの疎通確認\n\nブラウザから `http://172.16.192.1/ `へアクセスして、おなじみの **Welcome to nginx!** が表示されれば動作確認は完了となる\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/149815/44a89384-91fb-7907-074e-0bd38328bc02.png)\n\nアクセスできない場合は、ルータ, ノードへ ping が通るかを確認し、 `traceroute` で経路を追ってみるとどこに原因があるかを探る\n\n\n## まとめ\n\n目的と手段が入れ替わっていそうな気がするが、ロードバランサが利用可能となり Kubernetes を使用した Homebridge の実運用へ一歩前進した。BGP とはなんぞや状態だったが、実際に構築して触れてみることで概要だけでも理解することが出来た。\n次回は、PersistentVolume の構築を予定しているが、NFSマウントするだけな気もするので、Ceph を使用した、分散ストレージ環境の構築と合わせて記事を公開する予定(いつになるかはわからないが)\n\nその頃には脱ESXiと脱XG Firewall計画が進んでるはず。\n\n仮説検証の結果、勘で書いている(要するに理解していない)部分もあるので、お気づきの点があればコメントで指摘お願いします。(開発エンジニアなので細かいことには目を瞑って欲しい)\n\n\n## 参考資料\n\n- [MetalLB, bare metal load-balancer for Kubernetes](https://metallb.universe.tf/configuration/)\n- [KubernetesロードバランサーのMetalLBを導入した話(Necoプロジェクト体験入部)](https://blog.cybozu.io/entry/2019/03/25/093000)\n- [BGP とは | 「分かりそう」で「分からない」でも「分かった」気になれるIT用語辞典](https://wa3.i-3-i.info/word12234.html)\n\n[^1]: [K8s on Vagrant, MetalLB BGP ECMP を利用したロードバランサーの検証](https://qiita.com/MahoTakara/items/a33c169b210fae2e8ec9)\n[^2]: [オンプレ Kubernetes に MetalLB を入れて EdgerouterX と BGP mode で接続し LoadBalancer 構築](https://qiita.com/suzuyui/items/c83554dd055ef0f4253a)\n[^3]: [AS番号 【Autonomous System number】 ASN - IT用語辞典 e-Words](https://e-words.jp/w/AS%E7%95%AA%E5%8F%B7.html)\n\n\n\n","user":"syamamura","created_at":"2021-03-30T16:04:01+09:00","updated_at":"2021-03-30T16:04:01+09:00"},{"url":"https://qiita.com/Aida1971/items/ea754345828b2613bce6","title":"Azure 仮想マシンを 106 日本語キーボード配列へ対応させる","body":"#概要\n\n　Azure Marketplace にある Windows 10, Windows Server 2016, Windows Server 2019 を展開すると初期状態で 101 US キーボード配列となっています。日本語キーボードの端末からリモートデスクトップでアクセスすると \" が @ になるなどキー入力にストレスを感じます。これを解消するのが以下のレジストリ設定となります。\n\n# レジストリ設定\n\n　仮想マシン側で Registry Editor (regedit.exe) を起動し HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts\\00000411 にある Layout File の値 KBDJPN.DLL を KBD106.DLL に変更します。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166732/b8f1d443-30cd-a0c9-54db-81e6991ff0bd.png)\n　上の KBDJPN.DLL 部分を下の KBD106.DLL に変えます。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166732/06a3b00f-421a-8443-8e0f-38cb5aa9d176.png)\n　仮想マシンを再起動します。これでキーボード配列が 106 日本語キーボード対応となります。\n\n#日本語入力の追加\n　レジストリを変更する事で日本語配列のキー入力になりましたが、日本語そのものを入力したい場合には、日本語の追加が必要です。\n\n１．設定の [ Time & Language ] を選択します。\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166732/7d4058cc-0a41-c790-5830-9bd3fcad5bd6.png)\n\n２．[ Language ] から [ Add a language ] を選択し、[ 日本語 ] を追加します。\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166732/de4fcda0-a0c9-63eb-7d0f-39382b1537ea.png)\n\n３．[ 日本語 ] 追加の際に [ Windows display language ] を日本語にするチェックを入れる事で、以下ように表示も日本語となります。優先する言語の一番上に日本語が来ている事を確認します。\n　![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/166732/fd808274-0d2f-4ca6-95d2-454f081bf6b0.png)\n\n　以上の設定で日本語の入力が出来るようになります。必要に応じて [ 日付と時刻 ] でタイムゾーンの変更や [ 地域 ] の設置で [システムロケールの変更](https://win-tab.net/misc/lang_change2_1511202/#2)などを行ってください。\n","user":"Aida1971","created_at":"2021-03-30T16:03:42+09:00","updated_at":"2021-03-30T16:03:42+09:00"},{"url":"https://qiita.com/d0ne1s/items/fbd216359e6582a5f7dc","title":"【Rails】Form  Objectを使ったログイン機能のサンプル","body":"## Form Objectとは\nFormで使うためのモデルみたいなやつ。\n\nRailsのフォームは基本的にActiveRecordのモデルに依存している。\n1つのフォームで複数モデルの操作をしたいときにForm Objectを使うと、処理がすっきりかける。\n\nまたログインに関する処理など、既存のモデルが使えない処理もForm Objectに書くと良い場合がある。\n\nあんまり使わない方が良いって意見もある。\n\nhttps://zenn.dev/yukito0616/articles/d3b7032e9f1e90\n\n## ログイン機能にform_objectを使う場合のサンプル\nhttps://qiita.com/d0ne1s/items/7c4d2be3f53e34a9dec7\n\nRailsチュートリアルとかで解説されてる、`bcrypt`等を使ったログイン機能にForm Objectをいれることを想定。\n\n### form_object\n```bash:\n$ mkdir app/forms\n$ touch app/forms/login.rb\n```\n```rb:app/forms/login.rb\nclass Login\n    include ActiveModel::Model \n\n    attr_accessor :email, :password #使うカラム\n\n    validates :email, presence: true \n    validates :password, presence: true \n\n    def save \n        return false if invalid?\n        true\n    end \nend\n```\n\n### controller\n```rb:app/controllers/sessions_controller.rb\nclass SessionsController < ApplicationController\n  def new\n    @login = Login.new\n  end\n\n  def create \n    @login = Login.new(login_params)\n    if @login.save && (@user = User.find_by(email: @login.email)) && @user.authenticate(@login.password)\n      login @user\n      redirect_to users_path\n    else \n      render :new \n    end \n  end \n\n  private\n\n  def login_params\n    params.require(:login).permit(%i[email password])\n  end\nend\n```\n\n### view\n```erb:app/views/sessions/new.html.erb\n<%= form_with model: @login, url: login_path, local: true do |f| %>\n  <%= f.text_field :email %>\n  <%= f.password_field :password %>\n  <%= f.submit \"ログイン\" %>\n<% end %>\n```\n\n### locale\n```bash:\n$ touch config/locales/models/login.ja.yml\n```\n```yml:config/locales/models/login.ja.yml\nja:\n  activemodel:\n    attributes:\n      login:\n        email: メールアドレス\n        password: パスワード\n```\n\n### カスタムバリデーションを追加\n```rb:app/forms/login.rb\nclass Login\n    include ActiveModel::Model \n\n    attr_accessor :email, :password\n\n    validates :email, presence: true \n    validates :password, presence: true \n    validate :valid_combination\n\n   # ユーザーが見つからない、またはパスワードに誤りがある場合にエラーを返す\n   def valid_combination\n      @user = User.find_by(email: email)\n      errors.add(:base, 'メールアドレスとパスワードの組み合わせが正しくありません。') unless @user&.authenticate(password)\n   end\n\n    def save \n        return false if invalid?\n        true\n    end \nend\n```\n","user":"d0ne1s","created_at":"2021-03-30T16:01:59+09:00","updated_at":"2021-03-30T16:01:59+09:00"},{"url":"https://qiita.com/wwalpha/items/f02a96204fce4bfedad4","title":"Mac M1での pod install エラーの簡単解決方法","body":"## エラー事象\n```sh\n% pod install\n\n...\nLoadError - dlopen(/Library/Ruby/Gems/2.6.0/gems/ffi-1.15.0/lib/ffi_c.bundle, 0x0009): missing compatible arch in /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.0/lib/ffi_c.bundle - /Library/Ruby/Gems/2.6.0/gems/ffi-1.15.0/lib/ffi_c.bundle\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/Library/Ruby/Gems/2.6.0/gems/ffi-1.15.0/lib/ffi.rb:6:in `rescue in <top (required)>'\n/Library/Ruby/Gems/2.6.0/gems/ffi-1.15.0/lib/ffi.rb:3:in `<top (required)>'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/Library/Ruby/Gems/2.6.0/gems/ethon-0.12.0/lib/ethon.rb:2:in `<top (required)>'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/System/Library/Frameworks/Ruby.framework/Versions/2.6/usr/lib/ruby/2.6.0/rubygems/core_ext/kernel_require.rb:54:in `require'\n/Library/Ruby/Gems/2.6.0/gems/typhoeus-1.4.0/lib/typhoeus.rb:2:in `<top (required)>'\n```\n\n## 解決方法\nアーキテクチャを指定すれば、問題なく実行できます。\n\n```sh\narch -x86_64 pod install\n```\n \n","user":"wwalpha","created_at":"2021-03-30T15:56:56+09:00","updated_at":"2021-03-30T15:56:56+09:00"},{"url":"https://qiita.com/r_ishimori/items/1cd295fe8dd084cb6aba","title":"BigQuery 正規表現で〜を含まないマッチング","body":"# REGEXP_CONTAINS を使う\n例えばアクセスログテーブルから、画像へのアクセスを省きたいときは以下のようにする・\n\n```sql\nSELECT\n    url\nFROM\n    access_log\nWHERE\n    REGEXP_CONTAINS(url, \".(png|jpg|jpeg||gif)\") = false\n```\n\n否定的先読み(?!pattern)、否定的後読み(?<!pattern)などを使わずできる。\n(そもそもBigQueryで先読み・後読みって使える?)\n","user":"r_ishimori","created_at":"2021-03-30T15:55:32+09:00","updated_at":"2021-03-30T15:55:32+09:00"},{"url":"https://qiita.com/ichi_zamurai/items/5758161f4d2523eabf2f","title":"【AWS Lambda+API Gateway】Pythonでslack通知アプリ作ってみた","body":"#はじめに\n我が社のCTOが、「エンジニアはみんな`Lambda`くらい使えるようになっていてほしいね〜」\nとのありがたいお言葉から、\n\n「自分もエンジニアになったからには、`Lambda`でAPI作ってみよう！」と、\n一念発起して、挑戦してみますた(⌒▽⌒)\n\n\n#LT;DR\n\n- Lambda関数の作成\n- Slack Api Incoming WebHooksの作成\n- Layerの作成 & 登録\n- API GatewayでAPIの作成\n- 実践と結果まとめ\n\n\n#Lambda関数の作成\n##Lambdaとは\n>AWS Lambda は、サーバーのプロビジョニングや管理の必要なしにコードを実行できるコンピューティングサービスです。\nAmazon API Gateway を使用すると HTTP リクエストに応答してコードを実行できます。\n参照元：[AWS Lambda とは](https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/welcome.html)\n\nほうほう、AWSに管理系は丸投げできるんですな。\n今回は、`HTTP`リクエストを投げるので、やりがいありそう。\n\n##Lambda関数を作ってみる。\n###AWSアカウントのLambdaのページに入って関数の作成を押す。\n![スクリーンショット 2021-03-30 10.01.43.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/4e66b3b2-b5bb-37e0-256e-6af7c2f5f7a3.png)\n\n###関数名：`myLambdaFunc`、ランタイム:`Python 3.8`で作成。\n\n![スクリーンショット 2021-03-30 10.15.51.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/55bdf2b5-15c4-ae04-453e-82f440ba2222.png)\n\n###コードソース（エディタ上）に書いた`Python`コード\n```python:lambda_function.py\nimport json\nimport os\nimport requests\n\ndef lambda_handler(event, context):\n\n    WEBHOOK_URL = os.environ['WEBHOOK_URL']\n    WEBHOOK_NAME = os.environ['WEBHOOK_NAME']\n    CHANNEL_NAME = os.environ['CHANNEL_NAME']\n    \n    data = {\n            'username': WEBHOOK_NAME,\n            'channel': CHANNEL_NAME,\n            'attachments': [{\n                'title': 'myLambdaFunc',\n                \"color\": 'danger',\n                'text': 'myLambdaFunc API was successful!!'\n            }]\n    }\n    requests.post(WEBHOOK_URL, json.dumps(data))\n    \n    return {\n        'statusCode': 200,\n        'body': json.dumps(data)\n    }\n```\n####<解説>\n環境変数から下記3つを受け取り、\n![スクリーンショット 2021-03-30 14.32.42.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/551c3f4a-fa1a-e552-a558-328f4643e7dd.png)\n[slack api](https://api.slack.com/apps)で作成した`Incoming Webhooks`のアプリ設定をしたトーク部屋に通知した後、`data`をフロント側に`JSON`で返す\nといったものすごくシンプルなやつです。\n\n※コードを編集したら`Deploy`を押さないとダメ\n※`import requests`は**レイヤー**が必要なので、後述\n\n\n#Slack Api Incoming WebHooksの作成\n###[slack api](https://api.slack.com/apps)に行って`Create New App`\n![スクリーンショット 2021-03-30 14.39.37.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/da2eaade-75b0-1c46-4b2f-2804300ddc0b.png)\n\n###`Incoming Webhooks`を新規追加して、環境変数登録用のURLを取得しておく。\n![スクリーンショット 2021-03-30 14.41.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/ae634ba8-20e1-bcac-f77c-01a1ce0a1364.png)\n![スクリーンショット 2021-03-30 14.41.36.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/52b8d71a-db4d-c060-9cf1-35d25931e2d0.png)\n\n#Layerの作成&登録\n自分の場合、上記関数をテストした時に、**requestsライブラリのimportで失敗した**ので、\nlayerとしてライブラリを取り込んでから実行する。\n\n##Layerとは\n>レイヤーは、ライブラリ、カスタムランタイム、その他の依存関係を含む .zip ファイルアーカイブです。レイヤーを使用することで、関数のライブラリを使用することができます。\n参照元：[Lambda レイヤー](https://docs.aws.amazon.com/ja_jp/lambda/latest/dg/configuration-layers.html)\n\nつまり、Lambdaでサードパーティ製のライブラリやモジュールを使用する時に、Layerに格納して各Lambda関数から呼び出して使用できるようになる仕組み。\n\n\n\n##Layer Zipの作成\n自分はローカルでZipファイルを作成しました。\n\n```bash\n$ mkdir ./python\n$ cd python\n$ pip install requests -t . \n$ cd ../ && zip -r Layer.zip python/\n```\n任意のフォルダを作って、そこに`requests`ライブラリをインストールして、Layer.zipという名前で**Zip化**。\nちなみに、\n[pipコマンドのインストール方法はこちら](https://qiita.com/ichi_zamurai/items/dcbac977c1ff367b9094)\n\nhttps://qiita.com/ichi_zamurai/items/dcbac977c1ff367b9094\n\n##Layerの追加&アップロード\n###サイドメニューの`レイヤー`を選択し、レイヤーの作成をする。\n先ほど作成した`Layer.zip`をアップロードする。\n![スクリーンショット 2021-03-30 14.50.52.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/d04283f0-3045-1012-e5de-7b5575160182.png)\n名前と説明は任意。ランタイムはLambda関数で`Python3.8`を選択したので、それに合わせる。\n\n###生成物はこんな感じ\n※ランタイム設定を忘れたから、一度削除して、同じ名前で作成し直したら、version2になっちゃいました、、悔やまれるw\n![スクリーンショット 2021-03-30 12.03.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/a358109c-a22b-77d8-a25f-deb7ef32da54.png)\n\n##Lambda関数にLayerの登録\n###`Layers (0)`をおすと、下部のレイヤーに移動、レイヤーの追加をする\n![スクリーンショット 2021-03-30 12.00.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/e84f366d-829e-8dd4-a718-e45316c803b1.png)\n![スクリーンショット 2021-03-30 12.00.48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/54f110cd-f754-4a48-eaca-3b3f7264ec52.png)\n###カスタムレイヤーを選択し、さっき登録した`myRequestLayer`を登録。\nversion2となってしまったのが悔やまれる。\n**※ランタイムが同じじゃないと選択肢に出てこない。**\n![スクリーンショット 2021-03-30 12.03.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/5171ab43-a0aa-9c86-fde4-3856ab5e211a.png)\n\n\n##一旦、関数のテスト実行\n成功しました◎ Lambda関数の単体的には、実行ができる状態。\n![スクリーンショット 2021-03-30 12.14.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/e3e16a1d-1b32-2d6b-3758-e31987c67240.png)\n\n\n\n#API GatewayでAPIの作成\n###Lambda関数の「トリガーを追加」から、`API Gateway`を選択して、下記キャプチャのように設定\n※テスト用なのでセキュリティはオープンにしてます。\n※ドメインを超えてAPIを叩く予定なので、CORSにチェックしました。\n※`HTTP API`と`REST API`の違いはこちら=> [HTTP API と REST API 間で選択する](https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/http-api-vs-rest.html)\n![スクリーンショット 2021-03-30 12.18.50.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/18600a62-b6ee-2e35-f00f-0864c56fc644.png)\n\n###トリガーが作成されました!!\n![スクリーンショット 2021-03-30 12.28.17.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/cecf6324-2630-a2d8-ceb0-3934db99a152.png)\n\n###エンドポイントを直で叩いてみる\nJSONの`data`の中身が返ってきましたな。\n![スクリーンショット 2021-03-30 12.27.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/75fcd968-e79e-e294-5c90-cc4f8ab4568f.png)\n\n###ここまで来れば、あとは、フロント側でAPIエンドポイント目掛けて叩きまくるのみ＼＼\\\\٩( 'ω' )و //／／\n※叩くたびに課金されてゆきます...\n\n#実践と結果まとめ\n##APIエンドポイントを叩いてみる。\nボタンを一つだけ用意したフロント側から\n![スクリーンショット 2021-03-30 12.35.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/26922fdd-4da2-aecf-02f1-c5cf0443f7d3.png)\n`Notify`ボタンをポチっとな、と。\n\n###slackの[スコスコスコッ♪]という音と共に通知された。\n![スクリーンショット 2021-03-30 12.15.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/ec1dc930-cdf6-cdcc-2ff9-90100f5299c7.png)\n\n###ディベロッパーツールで確認してみる\n####ちゃんとJSONのdataが返ってきてますねえ〜\n![スクリーンショット 2021-03-30 12.35.48.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/c4e59acc-1b47-1a24-0976-c90669e9375a.png)\n\n####HTTPヘッダーもみてみよう。\nちゃんと `GET 200` で成功してますな✨\n![スクリーンショット 2021-03-30 12.36.23.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1075243/116481fc-cb8c-ce05-eb21-ee90cb9e0477.png)\n\n\n\n#まとめ\nあまりハマりどころもなく、ボタンぽちぽちでほぼ行けたので、\n\nああ、Lambda\nなんと簡単なことでしょう。\n\nしかもサーバーレスかつ、保守管理等も気にすることがない。\n\n簡単なアプリ作るだけだったら、料金的にも安いから、フロントだけ作って、APIサーバー抜きで、\nLambdaさんに頼っちゃっても良さそう✨\n\n以上、ありがとうございました。\n","user":"ichi_zamurai","created_at":"2021-03-30T15:53:08+09:00","updated_at":"2021-03-30T15:53:08+09:00"},{"url":"https://qiita.com/mdgwshk2021/items/ccfe32173e144abb7630","title":"AWSでのデプロイ時によく使うコマンド","body":"# AWSでデプロイ時によく使うコマンドまとめ\n\n最近AWSのEC2でデプロイした際によく使ったコマンドを忘れないように記録します。\n\n・EC2インスタンスにログイン\n\n```\nssh -i キーペアの名前.pem ec2-user@EC2インスタンスと紐付けたElastic IP\n```\n\n・データベースの状態を確認（今回はMySQL,MariaDBを使用）\n\n```\nsudo systemctl status mariadb\n```\n\n・デプロイ予定の開発中アプリケーションへ移動\n\n```\ncd  /var/www/開発中アプリケーション\n```\n\n・railsの起動\n\n```\nbundle exec unicorn_rails -c config/unicorn.rb -E production -D\n```\n\n・Unicornのプロセスを確認\n\n```\nps aux | grep unicorn\n```\n\n・Unicornのエラーログを確認（shift + g で最新のログへ）\n\n```\nless log/unicorn.stderr.log\n```\n\n・EC2内でのエラーログ確認（shift + g で最新のログへ）\n\n```\nless log/production.log\n```\n\n自動デプロイ（Capistranoの導入後）\n\n```\nbundle exec cap production deploy\n```\n\n\n# まとめ\n\n個人的によく使うコマンドをまとめました。\nこういったコマンドは忘れやすいので、定期的に学習したことは投稿していきたいと思います。\n","user":"mdgwshk2021","created_at":"2021-03-30T15:52:53+09:00","updated_at":"2021-03-30T15:52:53+09:00"},{"url":"https://qiita.com/wwalpha/items/937f65cbf2e58770e7b3","title":"xed コマンドが使えない","body":"コマンド実行すると、エラーが出ましたので、一応解決方法書き残します。\n\n## エラー\n```sh\n% xed .\n\nxcode-select: error: tool 'xed' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instance\n```\n\n## 解決方法\n```sh\nsudo xcode-select -s /Applications/Xcode.app/Contents/Developer\n```\n","user":"wwalpha","created_at":"2021-03-30T15:46:40+09:00","updated_at":"2021-03-30T15:46:40+09:00"},{"url":"https://qiita.com/ohhara_shiojiri/items/497aaba989151fa84b3d","title":"Dockerで権威DNSサーバーのNSDを動かしてみた 2021年版","body":"# 前書き\n2017年に投稿した内容では古くてそのままでは動作しなくなっているので2021年版として改めて検証も兼ねてメモを残しておきます。\n\nhttps://qiita.com/ohhara_shiojiri/items/39cb9c3a632676c7b33d\n\n# 動作環境\n\n- ホストOS: Ubuntu Server 20.04 LTS\n- Docker CE: Docker version 20.10.5\n- Docker-Compose: docker-compose version 1.28.6\n\n# Dockerコンテナ環境で動かす理由\n\nNSDに限った事では無いのですが、Dockerコンテナの特徴と利点が有用であれば使ってみるのも有りだと思います。\n\n- ホストOS側とコンテナ分離する事でホストOS側への影響が少ない\n- 構築したコンテナ環境を他の別環境に移設やバックアップがしやすい\n- Kubernetesなどのクラウド・コンテナオーケストレーション環境に展開出来る\n\n# 背景\nDNSの実装と言えば古くからBINDが使われていますが、昨今では脆弱性が度々発覚してセキュリティ的に運用が難しい状況にあります。\nBINDに代わるDNSの実装が他にもあり主要なLinuxディストリビューションでも公式パッケージ化されて最新バージョンにも追随しています。\n\n# 権威DNSサーバー NSD\nコンテンツサーバーとも呼ばれる自組織や他組織のゾーンを管理しているDNSサーバーです。\n一般の利用者がドメイン検索で使用するキャッシュDNSサーバーと呼ばれるフルリゾルバーのDNSサーバーが権威DNSサーバーのルートサーバーから順繰りに問い合わせてドメイン検索する仕組みがDNSです。\n今回はBINDではなくNSDを使用します。世界に13箇所あるルートサーバーの一部でも採用されています。\n\nhttps://www.nlnetlabs.nl/projects/nsd/\n\n# ローカルホスト側のリゾルバ設定\n\nubuntuの場合、systemdでDNSの53番ポートがサービス起動していて、他のDNSサービスとは競合してしまうので、名前解決のローカルリゾルバは動作させたまま53番ポートのListenを無効化させます。\n\n```:/etc/systemd/resolved.conf\n[Resolve]\nDNSStubListener=no\n```\n\n```\n$ cd /etc\n$ sudo ln -sf ../run/systemd/resolve/resolv.conf resolv.conf\n$ sudo systemctl restart systemd-resolved\n```\n\nクラウドのインスタンス環境などの場合はローカルリゾルバを変更せずに、Dockerコンテナ側NSDを5353番ポートなどの別のサーピスポート番号で動作させて、クラウド側のセキュリティグループ設定でグルーバルIPアドレス側の53番ポートとNAT変換させる方法もあります。\n\n```:nsd/docker-compose.yml\nports:\n  - 5353:53/tcp\n  - 5353:53/udp\n```\n\n\n# NSDコンテナの設定\n\n前回投稿で使用したソースは既にメンテナンスがされていない為、新しくフォークされた別のソースを利用します。\n\nhttps://github.com/The-Kube-Way/nsd\n\n## docker-compose設定\n\n適当なディレクトリにDocker-composeファイルを作成します。\n\n```\n$ mkdir -p nsd\n$ cd nsd\n```\n\n```:nsd/docker-compose.yml\nversion: '3.7'\n\nservices:\n  nsd:\n    container_name: nsd\n    restart: always\n    image: ghcr.io/the-kube-way/nsd:latest\n    tmpfs:\n      - /tmp\n      - /var/db/nsd\n    volumes:\n      - ./conf:/etc/nsd:ro\n      - ./zones:/zones\n      - ./keys:/keys:ro\n      - /etc/localtime:/etc/localtime:ro\n    ports:\n      - 53:53/tcp\n      - 53:53/udp\n```\n\n各種設定ファイル類はカレントディレクトリ以下に配置してコンテナ側にマウントさせています。次に各設定ファイルを作成します。\n\n## NSD設定ファイルの作成\n\n```\n$ mkdir -p conf\n```\n\n```:conf/nsd.conf\nserver:\n  server-count: 1\n  ip4-only: yes\n  verbosity: 1\n  hide-version: yes\n  zonesdir: \"/zones\"\n\nremote-control:\n  control-enable: yes\n\npattern:\n  name: \"slave\"\n  zonefile: \"%s.zone\"\n  allow-notify: [Zone転送を許可するIPアドレス] NOKEY\n  request-xfr: [Zone転送を許可するIPアドレス] NOKEY\n\nzone:\n  name: example.jp\n  zonefile: example.jp.zone\n  notify: [Zone転送を許可するIPアドレス] NOKEY # Masterの場合\n  provide-xfr: [Zone転送を許可するIPアドレス] NOKEY # Masterの場合\n  allow-notify: [Zone転送を許可するIPアドレス] NOKEY # Slaveの場合\n  request-xfr: AXFR [Zone転送を許可するIPアドレス] NOKEY # Slaveの場合\n```\n\n権威DNSサーバーは１つのMasterサーバーと複数のSlaveサーバーで構成されますが、権威DNSサーバーの動作に違いは無くドメインのZone転送構成によります。\nなおドメインのZone転送はSlaveサーバー側に限定してZone情報が他に漏洩しないようにセキュリティを確保する必要があります。ここで設定ファイル内でそれを記述しています。\nまた外部のDNSキャッシュサーバーのフルリゾルバ側からの問い合わせに回答出来る必要がある為、DNSのTCP/53 UDP/53をセキュリティグループなどファイヤーウォールのフィルターで制限しないように。\n\nSlaveサーバーの場合、設定ファイルのpatternテンプレートを用意することで、いちいちZoneファイルを用意しなくてもMasterサーバーからドメインのZoneデータを作成してくれます。\nNSDのコンテナを起動した後で行いますので、後の方で記載しておきます。\n\n作成した設定ファイルの動作確認する方法があります。\n\n```\n$ docker run -it --rm -v $PWD/conf:/etc/nsd selfhostingtools/nsd nsd-checkconf /etc/nsd/nsd.conf\n```\n\nエラー表示されなければ設定ファイルの記述内容は合っています。\n\n## ドメインのZoneファイルの作成\n\nMasterサーバーの場合は、予めドメインのZoneファイルを作成します。\n記述方法はBINDと同じです。\n\n```\n$ mkdir -p zones\n```\n\n```:zones/example.jp.zone\n$ORIGIN example.jp.\n$TTL 86400\n\n@ IN SOA ns1.example.jp. hostmaster.example.jp. (\n                2021033101      ; serial\n                28800           ; refresh\n                7200            ; retry\n                86400           ; expire\n                86400           ; min TTL\n                )\n\n                NS              ns1.example.jp.\n                NS              ns2.example.jp.\n\n@               A               [IPアドレス]\nwww             A               [IPアドレス]\n```\n\n作成した設定ファイルの動作確認する方法があります。\n\n```\n$ docker run -it --rm -v $PWD/zones:/zones selfhostingtools/nsd nsd-checkzone example.jp /zones/example.jp.zone\n```\n\nエラー表示されなければ設定ファイルの記述内容は合っています。\n\n## nsdアカウントの設定\n\nNSDコンテナ環境ではアカウントnsdで動作させる必要があります。\nユーザーIDとグループIDを991でホストOS側にも用意します。\n\n```\n$ sudo groupadd -g 991 -r nsd\n$ sudo useradd -g nsd -s /sbin/nologin -M -u 991 -r nsd\n```\n\n## ディレクトリとファイルのオーナー権限を変更\n\n作成したnsdアカウントに、設定ファイルと使用ディレクトリのオーナー権限を変更します。\n\n```\n$ sudo chown nsd:nsd zones\n$ sudo chown nsd:nsd conf\n$ sudo chown nsd:nsd conf/nsd.conf\n$ mkdir -p keys\n$ sudo chown nsd:nsd keys\n```\n\n## リモートコントロール用鍵ファイルの作成\n\nリモート操作のnsd-controlコマンドの使用に自己証明書の鍵ファイルが必要になりましたので専用コマンドで作成します。\n\n```\n$ docker run -it --rm -v $PWD/conf:/etc/nsd ghcr.io/the-kube-way/nsd nsd-control-setup\n```\n\n作成した自己証明書の鍵ファイルのオーナー権限をアカウントnsdに変更しておきます。\n\n```\n$ sudo chown nsd:nsd conf/*\n```\n\n## NSDのコンテナ起動\n\n以上で必要な設定ファイルが用意出来たので、docker-composeコマンドでNSDコンテナを起動させます。\n\n```\n$ docker-compose up -d\n```\n\n\n## SlaveサーバーのZoneファイル作成\n\nSlaveサーバーの場合、設定ファイルのpatternテンプレートを用意することで、MasterサーバーからZone転送させてZoneファイルを作成出来ます。\n\n```:conf/nsd.conf\npattern:\n  name: \"slave\"\n  zonefile: \"%s.zone\"\n  allow-notify: [Zone転送を許可するIPアドレス] NOKEY\n  request-xfr: [Zone転送を許可するIPアドレス] NOKEY\n```\n\n```\n$ docker exec -i -t nsd /bin/sh\n# nsd-control reconfig\n# nsd-control addzone [ドメイン名] slave\n# nsd-control transfer [ドメイン名]\n# nsd-control zonestatus\n# nsd-control write\n# exit\n```\n\nこれでzonesディレクトリにMasterサーバーからZone転送されたドメインのZoneファイルが作成されています。\nまたnsd設定ファイルnsd.confにドメインのZone項目を忘れないように追記しておきます。これはnsdの再起動時にはZoneファイルからドメインのZoneデータが読み込まれる為です。\n\n# 動作確認\n\n権威DNSサーバーの一般的な動作確認をdigコマンドでサーバーホストの内部と外部の両方から行います。\nキャッシュ除外の為、digコマンドオプション+norecを付けます。\n\n- 正引き：dig +norec @[localhost] example.jp A\n- 逆引き：dig +norec @[localhost] -x [IPアドレス番号]\n- バージョン表示：dig +norec @[localhost] chaos version.bind txt\n- Zone転送：dig +norec @[localhost] axfr +multi\n\nバージョンは非表示で、Zone転送が許可されたSlaveサーバーのIPアドレス番号限定を確認します。\n","user":"ohhara_shiojiri","created_at":"2021-03-30T15:42:28+09:00","updated_at":"2021-03-30T15:47:30+09:00"},{"url":"https://qiita.com/kizumo25/items/75218a91d1a1555a0122","title":"bundle install できない！！","body":"#bundleができない時の対処法\n下記のエラー文が含まれていたら、この記事を読んでください。\n\n```\n$ xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun\n```\n\n##原因\n現在有効になっている開発者ツール用のpathが有効でないと、このエラーが発生します。macOSのメジャーバージョンアップ後によく発生するエラーです。Xcodeの開発者ツールが見当たらないのです。\n\nつまり、コマンドラインから開発者ツールを見つけたり、実行したりする``` xcrun ```というコマンドを使うためにpathを有効にする必要があります。\n\n##対処法\n###Xcode Command Line Tool のインストール\n```\n$ xcode-select --install\n```\nインストールを終えると、``` /Library/Developer/CommandLineTools ``` 以下に開発者ツールがインストールされ、xcrun から参照できるようになります。\n\nここではコマンドの意味を割愛させていただきます。\n気になる方はGoogleで調べてください。\n\nこれで ``` bundle install``` ができるようになります。\n","user":"kizumo25","created_at":"2021-03-30T15:40:27+09:00","updated_at":"2021-03-30T15:51:29+09:00"},{"url":"https://qiita.com/pi0329/items/6fc698f8bdb61f0a150e","title":"LSTMを用いたbitcoinのチャート予測","body":"##はじめに##\nこの記事ではpython初学者がkaggleのbitcoinのデータセットを使い過去２４時間のデータから次の１時間のチャートを予測するまでの過程をまとめました。\n自分なりの理解で学習を進めているので間違っている点あればご指摘ください。\n\n##参考文献##\n[LSTMの実装記事１](https://www.kaggle.com/jeongbinpark/lstm-can-we-predict-the-bitcoin-price)\n[LSTMの実装記事2](https://premium.aidemy.net/magazine/entry/2018/08/23/195247)\n[LSTMの実装記事3](https://towardsdatascience.com/using-recurrent-neural-networks-to-predict-bitcoin-btc-prices-c4ff70f9f3e4)\n[LSTMとは?RNNとは？](https://qiita.com/kazukiii/items/df809d6cd5d7d1f57be3)\n\n##データ取得・加工##\nまずデータの取得ですが、kaggleのデータセットとpoloniexのapiを使って取得する２パターンがありました。poloniexではあまりデータ量が取れなかったので(jupyternotebookでの実装だったから？）今回はkaggleのデータセットを使いました。\n\n```python \nimport pandas as pd\nimport numpy as np\nimport datetime\nimport time\nimport tensorflow as tf\nfrom tensorflow import keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Dropout\nfrom keras.layers import LSTM\n\ndef get_chart():\n    \n    df = pd.read_csv(\"/Users/nishiyamaippei/Downloads/bitstampUSD_1-min_data_2012-01-01_to_2020-12-31.csv\")\n    #データに使うTimestamp,Close以外を削除\n    df.drop(['Open','Volume_(BTC)','Volume_(Currency)', 'Weighted_Price','High','Low'],axis=1, inplace=True)\n     #unix時間から日本時間に変更\n    df['Timestamp'] = pd.to_datetime(df['Timestamp'], unit='s', utc=True).dt.tz_convert('Asia/Tokyo')\n    #インデックスにTimestampをセット\n    df = df.set_index('Timestamp')\n    #dfを1分区切りから1時間区切りに\n    df = df.resample('1H').mean()\n    df = df.dropna()\n#     print(df)\n    return df\n\ndf = get_chart()\n```\n今回はdfのClose（終値）を使って実装したためほかの項目は削除してます。\n最初はdf.groupbyを使いTimestampでグループ化して実装していたのですがうまく学習データを作ることができなかったのでdf.set_indexに変更しました。\n\n##学習データの作成##\n学習データを作成するにあたってscikit-learnのtrain_test_split()関数を使おうと思っていましたが自作で作ったことがなかったので自分で関数を作ることにしました。\n\n```python\ndef df_to_list(df):\n    #データを格納するリストを作成\n    x, y = [], []\n    dl = len(df)\n    hl = 24\n    #for文で取り出す\n    for i in range(dl - hl):\n        #24時間のデータ\n        x.append(df.iloc[i : i+hl])\n        y.append(df.iloc[i+hl])\n\n    x = np.array(x)\n    y = np.array(y)\n    \n    row = int(round(0.8 * dl))#データの区切る場所をrowに\n    \n    x_train, x_test = x[: row], x[row :]\n    y_train, y_test = y[: row], y[row :]\n    \n    return x_train, x_test, y_train, y_test\n\nx_train, x_test, y_train, y_test = df_to_list(df)\n```\n\n##標準化##\n\n```python\nmean = np.mean(x_train)           #平均値の保存\nstd = np.std(x_train)             #標準偏差の保存\nx_train = (x_train - mean) / std  \nx_test = (x_test - mean) / std\n\nymean = np.mean(y_train)\nystd = np.std(y_train)\ny_train = (y_train - ymean) / ystd\ny_test = (y_test - ymean) / ystd\n```\n\n##モデルの構築・学習##\n```python\n#モデルの構築\ndef model_build(neurons, output_size, activation=\"linear\", dropout=0.4, loss=\"mean_squared_error\", optimizer=\"rmsprop\", metrics=['mse']):\n    model = keras.Sequential()\n    model.add(LSTM(neurons, return_sequences=True, input_shape=(None, 1)))\n    model.add(Dropout(dropout))\n    model.add(LSTM(neurons, return_sequences=False))\n    model.add(Dense(units=output_size, activation=activation))\n    model.compile(loss=loss, optimizer=optimizer, metrics=metrics)\n    return model\n\n#学習\nmodel = model_build(neurons=50, output_size=1)\nmodel_history = model.fit(x_train, y_train, epochs=10, batch_size=30, validation_data=(x_test, y_test))\nmodel.summary()\n```\n回帰予測を行うので活性化関数はlinearを損失関数にMSEを指定し学習させました。\n![スクリーンショット 2021-03-30 14.32.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1056096/dc14f624-c12e-025d-2021-42172ae8f133.png)\n学習の経過はこんな感じです。\nlossがしっかり下がってきているのでちゃんと学習できていると思います。\nvallossに関しては最初から０に近い値なのが気になりますが、\n\n```python:epochとlossの可視化\nimport matplotlib.pyplot as plt\n\nfig, ax1 = plt.subplots(1, 1)\n\nax1.plot(model_history.epoch, model_history.history['loss'])\nax1.set_title('trainning-data')\nax1.set_xlabel('epochs')\nax1.set_ylabel('loss')\nplt.show()\n```\n![スクリーンショット 2021-03-30 14.36.53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1056096/1bbc413b-6773-a45d-c06a-2a26481c0ee8.png)\n\n##予測・可視化##\n```python\npred = model.predict(x_test)\n\npred = pred * std + mean　#標準化→元の数値に\ny_test = y_test * ystd + ymean\n# print(x_test.shape)\npred = np.array(pred)\n```\n\n```python:元データと予測値の可視化\nplt.figure(figsize=(15.0, 6.0))\nplt.plot(pred, color='b', label='predict')\nplt.plot(y_test, color='y', label='real', linewidth=1)\nplt.xlabel('minute')\nplt.ylabel('price')\nplt.grid(True)\nplt.legend()\nplt.show()\n```\n![スクリーンショット 2021-03-30 14.45.23.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1056096/b8094aab-3f0e-c96a-b4ce-db82d3bd0d98.png)\n遠目だと正解データとほとんど同じような動きをしてますね。\n\n![スクリーンショット 2021-03-30 14.47.46.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1056096/ffa971d8-eec3-48a8-b3ad-d19d24439a59.png)\n拡大したものを見ると正解データを一コマ遅れでプロットしたみたいになっています。\n\n##まとめ##\n今回のチャート予測では扱ったことのないLSTMの実装法や、kaggleのデータに触れるきっかけができたのでこれからも定期的に学習していきたいです。\n今後は可視化の手法としてmatplotlib以外のseabornやplotlyなども扱っていいけたらなと思います。\n","user":"pi0329","created_at":"2021-03-30T15:39:59+09:00","updated_at":"2021-03-30T15:39:59+09:00"},{"url":"https://qiita.com/arata0520/items/604edaa471837476e840","title":"備忘録 - ループ処理 【VBA】","body":"## For Each構文の文法\n\n```vb\nFor Each エレメント In グループ　' エレメントは繰り返す変数・グループはコレクション（配列）\n'処理は中に記述\nNext エレメント\n```\n\n##具体例\nVBAが書かれているワークブック内のワークシートをすべて保護する\n\n```vb\n    Dim Sh As Worksheet\n\n    For Each Sh In ThisWorkbook.Worksheets\n        Sh.Protect\n    Next Sh\n```\n","user":"arata0520","created_at":"2021-03-30T15:38:48+09:00","updated_at":"2021-03-30T15:38:48+09:00"},{"url":"https://qiita.com/rice01010101/items/057a74aea775b4956fef","title":"AWS Glue ジョブのステータス：Failedと例外処理について","body":"ジョブの実行ステータス：Failed **≠** ジョブのスクリプト：例外発生\n\n# 例外発生時にFailedにしたい場合はどうすんのか\n1. 例外処理しない\n2. except内で再度例外を発生させる。\n\n```python\nimport sys\n\ntry:\n    処理\nexcept Exception as e:\n    例外処理\n    sys.exit(1)\n```\n\nとか\n\n```python\ntry:\n    処理\nexcept Exception as e:\n    例外処理\n    raise e\n```\n","user":"rice01010101","created_at":"2021-03-30T15:38:34+09:00","updated_at":"2021-03-30T15:38:34+09:00"},{"url":"https://qiita.com/arata0520/items/484bab080c4607cba70c","title":"備忘録 - シートの保護 【VBA】","body":"##文法\n\nワークシートを保護する（編集できなくする）\n\n```vb\nワークシート.Protect\n\n'解除の際に必要なパスワードを設定\nワークシート.Protect Password:=\"password\"\n\n'セルの書式変更を可能に（文字の色や大きさ・フォントの変更）\nワークシート.Protect AllowFormattingCells:=True\n```\n\nワークシートの保護を解除する\n\n```vb\nワークシート.Unprotect\n\n'パスワードを入力して保護を解除\nワークシート.Unprotect \"password\"\n```\n","user":"arata0520","created_at":"2021-03-30T15:37:46+09:00","updated_at":"2021-03-30T15:37:46+09:00"},{"url":"https://qiita.com/kijitora-san/items/cee0c7f1acb27d6e03a1","title":"Androidでtcpdumpを取得する","body":"パケットログを取得する必要があったので、パケットログを取得するためのメモ。\nパケットログを取得させるには、emulatorでtcpdumpすると取得することができます。\n\n```bash\n$ emulator -tcpdump <出力先ファイルパス> -avd <emulator名>\n```\n\nemulator名は下記のコマンドで確認することができます。\n\n```bash\n$ emulator -list-avds\n```\n","user":"kijitora-san","created_at":"2021-03-30T15:36:13+09:00","updated_at":"2021-03-30T15:36:13+09:00"},{"url":"https://qiita.com/tan0/items/64a93b3fb449d72ca2b6","title":"QNAP NAS 機種変更","body":"# QNAPのNASを機種変更したメモ\n\n## 概要\n\n* 採用機種 TS-231P → TS-251D \n* HDDは変更なし 内蔵6T×2(RAID1) + 外付けUSB4T(バックアップ用) を旧機種からそのまま移行\n\n\n## 背景とこれまでの経緯\n\n* TS-231Pは2020年3月導入 自宅での初QNAP\n* 自炊書籍、写真、MP3等デジタル化した各種ファイルの管理がメイン用途\n* バックアップとスナップショットは以下で運用\n * スナップショット：メインのストレージプールに5%の領域を確保してスマートスナップショットを運用。ふだんは主にWindows EXplorerから接続しての操作が多く、あやまって上書きや削除した場合に「以前のバージョン」を取り出すために使っている\n * クラウドバックアップ：写真とMP3以外をMicrosoft OneDrive（容量1T）へ圧縮設定で一方向同期（ミラー・世代管理なし）。毎日深夜実施。\n  * （写真はGooglePhoto、MP3はYoutubeMusicに保存しているので OneDriveへは保存せず）\n * ローカルバックアップ：全ファイルを外付けUSB HDへ週に1度、世代管理・削除なし・圧縮ありでバックアップ。このジョブが最後に正常に完了できたのは2021/3/7であり、少し以前の状態。最新状態ではエラー落ちでジョブが正常終了しない状態に。。。\n\n* 機種変更にいたった理由\n * 全文検索QSearch を使いたい（TS-231Pは動作対象外）\n * 重い処理で止まることが増えた（週次バックアップがエラー落ちする、起動に1ｈ近く掛かる、常にメモリ不足）\n\n## やったこと・はまったこと\n\n* 新NASに対して念のためメモリの増強。初期2G×1 → 8G×2に載せ替え。\n* QNAP公式サイトではそのままHDDを入れ替えて機種変更できると書かれていたが、単純に接続しQTS(OS)を自動更新するのではいくつかの問題が出た\n * バックアップアプリ HBS3が起動しない（エラー落ち）\n * 起動に1h近くかかる（機種変更する前から起きていた問題 … たぶんOSの構成が以前からおかしくなっていたのだろうと推測。上のHBS3起動しないのもそうなのかもしれない）\n \n* この時点で、全初期化を決断。TS-231Pの機種のままで一度やっておいてもよかったのかもしれない。\n * データの復元は、クラウドおよび外付けUSBから行うこととし、メインのストレージはRAIDごと破棄することに。\n * 本当であれば、念のため最新状態をバックアップしておきたいところだが、HBS3が起動しない＆記憶によれば最後のバックアップ以降に変更がないはずなのでメインストレージのデータは捨てる決断\n* 全初期化を実施。HDDを抜いてNASを起動、案内にしたがいOS初期化、ディスクを挿入しフォーマット実施。各種設定をやりなおし。\n * 全初期化を実施したことでスナップショットは消えたのが悲しいがやむを得ない。\n* データの復旧（復元）\n * 復旧もHBS3から行う。復元ジョブを作って実行。どのバックアップからどのフォルダに戻すかを指定するだけなので非常に簡単。\n * 毎日のミラーがあるデータはクラウドから復旧。これは長時間かかったまる2日程度。データ量と回線速度のせいと両面があると思われる。\n * 週次バックアップにしかないデータはUSB HDDから復旧。\n\n## わかったこと\n\n* QNAPは多機能なOSとアプリ群、多数のハードウェア構成のモデルを提供している。しかし低スペックのモデルにはそのOSとアプリ群はマッチしていない。負荷が高いため低スペックモデルでは運用に支障が出る場合がある。買い換えコストを考えるとメモリ交換ができなく、かつメモリ搭載2G以下のモデルは地雷ではないかと思った。\n* クラウドバックアップはリスク分散の意味でも有効で、ハードウェアを用意しなくてよいなど利点が多いが、復旧には長時間が必要になる。\n* わかったこと（というかわかっていたが後まわしにしていて結局できていなかったこと）として、バックアップからの復旧テストがある。復旧手順が若干不安だったのと、バックアップのフォルダ構成が最適ではなく復旧に一手間かかる構成になっていた。安心と安全のためには面倒がらずにやっておく必要がある。\n","user":"tan0","created_at":"2021-03-30T15:34:49+09:00","updated_at":"2021-03-30T15:39:24+09:00"},{"url":"https://qiita.com/Keiji2827/items/0175e3e13d58f47fad1d","title":"PyOpenGLでモダンな表示を行う","body":"# 概要\n約十年ぶりにOpenGLを触ることになり、glBegin()で三角形でも書いていけばいいかと思っていたら、そんな書き方はもう古いらしいことが分かりました（[参考](https://keiorogiken.wordpress.com/2018/02/20/modern%E3%81%AAopengl%E3%82%92%E6%9B%B8%E3%81%8D%E3%81%BE%E3%81%97%E3%82%87%E3%81%86/)）。\nさらに今回対象とするターゲットがPythonだったこともあり、簡単な図形の表示を行うにも一苦労したので、一通りの手順をまとめておこうと思います。\n\n# 進め方\nモダンなOpenGLへの変更点やモダンさの詳細は様々なWebページで解説がなされているので、ここでは実際に表示するプログラムを書くことに注力していきます。\n具体的には[ここ](http://marina.sys.wakayama-u.ac.jp/~tokoi/?date=20090909)で、作成されている立方体を描画するC++のプログラムをPython化することで処理の流れとPythonでの実装を見ていきます。\n\n# 環境\n\n- ubuntu 20 on docker\n- apt\n\n  ```bash\n  apt install -y python3 python3-pip freeglut3 freeglut3-dev libglew-dev\n  ```\n- requirements.txt\n\n```\npip\nnumpy==1.20.2\nPyOpenGL==3.1.5\nPyOpenGL-accelerate==3.1.5\nscipy==1.6.2\n```\n\n# ソースコード\n全体のソースコードは[ここ](https://github.com/Keiji2827/PyOpenGLDraw)に置いています。\n## main\nmainは初期化とloopを呼び出すだけ。\nRenderクラスのコンストラクタでGLUTの初期化を実行しています。\n\n```python\n# メインプログラム\ndef main():\n    render = Render(sys.argv[0])\n    render.init()\n    render.mainloop()\n```\n\n## class Render\n実際の処理を行うクラス。\nメンバ関数はでもとのソースコードにほぼ対応しています。\n\n- init()\n- display()\n- mainloop()\n\n### init()\n\n```python\n    def init(self):\n        # 背景色\n        glClearColor(1.0, 1.0, 1.0, 1.0)\n\n        with open(self.vertShaderPath, \"r\") as f:\n            vertShaderData = f.read()\n\n        with open(self.fragShaderPath, \"r\") as f:\n            fragShaderData = f.read()\n\n        # シェーダオブジェクトの作成\n        vertShader = glCreateShader(GL_VERTEX_SHADER)\n        fragShader = glCreateShader(GL_FRAGMENT_SHADER)\n\n        # シェーダのソースプログラムの読み込み\n        glShaderSource(vertShader, vertShaderData)\n        glShaderSource(fragShader, fragShaderData)\n        \n        # バーテックスシェーダのソースプログラムのコンパイル\n        glCompileShader(vertShader)\n        compiled = glGetShaderiv(vertShader, GL_COMPILE_STATUS)\n        if compiled == GL_FALSE:\n            print(\"in cimpiled error\")\n            strInfoLog = glGetShaderInfoLog(vertShader)\n            print(\"Compilation failure for \"  + \" shader:\\n\" + str(strInfoLog))\n\n        # フラグメントシェーダのソースプログラムのコンパイル\n        glCompileShader(fragShader)\n        compiled = glGetShaderiv(fragShader, GL_COMPILE_STATUS)\n        if compiled == GL_FALSE:\n            print(\"in cimpiled error\")\n            strInfoLog = glGetShaderInfoLog(fragShader)\n            print(\"Compilation failure for \"  + \" shader:\\n\" + str(strInfoLog))\n\n        # プログラムオブジェクトの作成\n        self.gl2Program = glCreateProgram()\n\n        # シェーダオブジェクトのシェーダプログラムへの登録\n        glAttachShader(self.gl2Program, vertShader)\n        glAttachShader(self.gl2Program, fragShader)\n\n        # attribute 変数 position の index を 0 に指定する。\n        glBindAttribLocation(self.gl2Program, 0, \"position\")\n\n        # シェーダプログラムのリンク\n        glLinkProgram(self.gl2Program)\n        linked = glGetProgramiv(self.gl2Program, GL_LINK_STATUS)\n        if linked == GL_FALSE:\n            print(\"Link error.\")\n            strInfoLog = printProgramInfoLog(self.gl2Program)\n            return\n\n        # シェーダオブジェクトのデタッチ\n        glDetachShader(self.gl2Program, vertShader)\n        glDetachShader(self.gl2Program, fragShader)\n        # シェーダオブジェクトの削除\n        glDeleteShader(vertShader)\n        glDeleteShader(fragShader)\n```\n今回の苦労したシェーダの読み込み。\nリストなどを使用したらもう少しすっきりするとは思いますが、学習のために愚直に書いています。\n\n\n```python\n        # 視野変換行列を求める\n        temp0 = matrix.lookAt(4.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0)\n\n        # 透視投影変換行列を求める \n        temp1 = matrix.cameraMatrix(30.0, 1.0, 7.0, 11.0)\n\n        # 視野変換行列と投影変換行列の積を projectionMatrix に入れる\n        self.projectionMatrix = matrix.multiplyMatrix(temp0, temp1)\n\n        # uniform 変数 projectionMatrix の場所を得る\n        self.projectionMatrixLocation = glGetUniformLocation(self.gl2Program, \"projectionMatrix\")\n```\nここは古いOpenGLに近いところ。\nmtrixは行列計算をしている別ファイルを参照してください。\n\n\n```python\n        # 頂点バッファオブジェクトを２つ作る\n        self.vertbuffer = glGenBuffers(1)\n        self.fragbuffer = glGenBuffers(1)\n\n        # 頂点バッファオブジェクトに８頂点分のメモリ領域を確保する \n        glBindBuffer(GL_ARRAY_BUFFER, self.vertbuffer)\n        glBufferData(GL_ARRAY_BUFFER, position, GL_STATIC_DRAW)\n\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, self.fragbuffer)\n        glBufferData(GL_ELEMENT_ARRAY_BUFFER, edge.astype(np.int32), GL_STATIC_DRAW)\n\n        # 頂点バッファオブジェクトを解放する \n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)\n\n        # 頂点バッファオブジェクトを解放する\n        glBindBuffer(GL_ARRAY_BUFFER, 0)\n```\nモダンな書き方ですね。\n`glBufferData()`などはC++のものと引数が若干異なっています。\n\n### display()\n\n```python\n    def display(self):\n        # 画面クリア\n        glClear(GL_COLOR_BUFFER_BIT)\n\n        # シェーダプログラムを適用する\n        glUseProgram(self.gl2Program)\n\n        # uniform 変数 projectionMatrix に行列を設定する\n        glUniformMatrix4fv(self.projectionMatrixLocation, 1, GL_FALSE, self.projectionMatrix)\n\n        # index が 0 の attribute 変数に頂点情報を対応付ける\n        glEnableVertexAttribArray(0)\n\n        # 頂点バッファオブジェクトとして vertbuffer を指定する\n        glBindBuffer(GL_ARRAY_BUFFER, self.vertbuffer)\n\n        # 頂点情報の格納場所と書式を指定する\n        glVertexAttribPointer(0, 3, GL_DOUBLE, GL_FALSE, 0, None)\n\n        # 頂点バッファオブジェクトの指標として fragbuffer を指定する\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, self.fragbuffer)\n\n        # 図形を描く \n        glDrawElements(GL_LINES, 24, GL_UNSIGNED_INT, None)\n\n        # 頂点バッファオブジェクトを解放する\n        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0)\n        glBindBuffer(GL_ARRAY_BUFFER, 0)\n\n        # index が 0 の attribute 変数の頂点情報との対応付けを解除する\n        glDisableVertexAttribArray(0)\n\n        glutSwapBuffers()\n```\n\n# まとめ\nモダンなOpenGLの実装をPythonでのPyOpenGLを使って学びました。\n正直写経しただけで分かっていないところも多いのですが、全体の流れは把握できたと思います。\nモダンなOpenGLでは、シェーダを使ってGPUを有効活用できるという大きな利点はありますが、その分今回のような簡単な図形を書いたりするために手間がかかるようになっている気がします。\n近年では簡単な図形の描画もUnityなどのツールを使うことが多く、OpenGLを使う人向けに導入コストを下げることがコスト増になるのかもしれません。\n考え方もモダンにしていかなくてはとつくづく思います。\n","user":"Keiji2827","created_at":"2021-03-30T15:28:57+09:00","updated_at":"2021-03-30T15:28:57+09:00"},{"url":"https://qiita.com/NeK/items/cd92244a484072926b2f","title":"学術論文における参考文献の整理整頓","body":"# 概要\n+ 参考文献って大事だよね\n+ どうやって整理整頓する？\n+ どんなソフト使う？\n\n基本TeXベースの話だけど，実はMS-Wordでも扱える．詳しくは「word bib」などで検索．\n\n## 更新履歴\n2021/3/27: 書き始め\n\n# 参考文献について\n## まずは見てみよう\nGoogle Scholarなどや論文誌，研究室内にある先輩の卒論・修論を見ると必ず参考文献がある．斯くも参考文献はとても大事なものである．まずは，どれか一本でも具体的な論文を見て参考文献の引き方を見てみよう．\n\n<details><summary>参考文献の大事さ</summary>他の人の論文を自分の論文中に引用することで，「背景として色々な人が色々な研究をやっていて自分が注目している分野は大事で意義のある分野なんですよ」と表現したり「私の使っている手法の一部は他の人が定式化したもので私のではないですよ，また詳しい情報は引用にありますよ」などを伝える重要なものである．</details>\n\n## 使うところをイメージしてみよう\n自分が，卒業論文・発表論文・投稿論文を書くとき，必ず参考文献を引くことになる．なんらかの参考文献を引くときには勿論その論文を読んでいなければならない．論文で沢山の参考文献を引くためには，その10倍～100倍は読んでおかないと「適切な論文を選べない．」つまり日ごろから論文を読んでいないといけない．\nそうして集めた論文を，簡単にさっと参考文献として使いたいが，どのように整理整頓していると使いやすいか？\n読んだ論文をpdfで残しておいて選ぶ？題名や著者などをメモっとく？\n\n## 参考文献の書式\nここで参考文献の書式をちょっと見てみる．卒業論文はまあ自由なところもあるので，書式が決まっているものを並べてみる．また書式は引用元が本・発表論文・投稿論文・(その他諸々)で違うが，沢山あると分け分からなくなるので投稿論文で英語論文を引用する場合のみ記載する．番号は本文中で引用する時の識別である(本文では``○○[1]は××で．．．''のように引く．)\n\n紹介した学会だけでも参考文献の書式が微妙に異なることを理解してもらえれば幸いである．\n\n### 日本ロボット学会\n参考:[論文原稿作成要領](https://www.rsj.or.jp/content/files/data_rules/F-02.pdf#page=13)\n\n[1] Author(s): \"Title,\" Name of Journal, vol. W, no. X, pp. YYY-ZZZ, year.\n(例)\n[2] K. Yoshida, T. Tsubouchi and G. Kinoshita： \"Instruction of making your manuscript,\" J. of the Robotics Society of Japan, vol. 11, no. 7, pp. 88-99, 1993.\n\n### 計測自動制御学会\n参考: [執筆のしおり](https://www.sice.jp/pub/journal/journal_guide.html)\n\n[3] 著者：論文または記事題目，誌名，巻(太字)－号，始ページ／終ページ＋追加ページ(発行西暦年)\n(例)\n[4] A.S.Morse:Global Stability of Parameter Adaptive Control Systems, IEEE Trans.Automatic Control,AC-25-3, 433/439(1980)\n\n### IEEE SMC\n参考: [IEEE Article Template](https://journals.ieeeauthorcenter.ieee.org/create-your-ieee-journal-article/authoring-tools-and-templates/tools-for-ieee-authors/ieee-article-templates/)からIEEE System, Man, Cyberneticsを選んだ場合\n\n[5] J. K. Author, “Name of paper,” Abbrev. Title of Periodical, vol. x, no. x, pp. xxx-xxx, Abbrev. Month, year. Accessed on: Month, Day, year, DOI: 10.1109.XXX.123456, [Online].\n(例)\n[6] J. S. Turner, “New directions in communications,” IEEE J. Sel. Areas Commun., vol. 13, no. 1, pp. 11-23, Jan. 1995.\n\n## 参考文献の利用方法\n参考文献を利用するためは以下の二つの方法がある．\n\n+ thebibliography環境を利用\n    + とりあえずでは楽だけど長い目みたら面倒\n+ bibtexを利用\n    + とりあえずとしては少し面倒だけど，結果的に楽\n    + 利用推奨\n\n### thebibliography環境を利用\n参考文献を表示したいところ(大体最後)に次のように書く．\n\n```tex\n\\begin{document}\n....\n\n\\begin{thebibliography}{99}\n  \\bibitem{turner1995} J. S. Turner, ``New directions in communications'', IEEE J. Sel. Areas Commun., vol. 13, no. 1, pp. 11-23, Jan. 1995.\n\\end{thebibliography}\n...\n\\end{document}\n```\n\nで，この参考文献を引用したい部分に`\\cite{turner1995}`と書けば自動的に通し番号を降って引用してくれる．\nちなみにbibitemのかっこの中身(turner1995)は論文を識別するための文字列で，thebibliography中ユニークであればなんでも良い．\n\nこのようにthebibliography環境の中に直接書くので，学会ごとの書式に合わせて`:`つけたりタイトルに`“`などをつけたり，名前やタイトルなどの順番を気にしなければいけない．\n\n### bibtexを利用\nbibtexはテキストファイルの簡単なデータベースを使って参考文献を管理する方法である．\n細かな仕様は[Wiki:BibTeX](https://ja.wikipedia.org/wiki/BibTeX)を参考にするとよい．\nまず参考文献のデータをbibファイルに保存する(例としてtest.bibとする．)\n\n```bibtex:test.bib\n@article{turner1995,\n  author = {J. S. Turner},\n  title = {New directions in communications},\n  journal = {IEEE J. Sel. Areas Commun.},\n  volume = {13},\n  number = {1},\n  pages = {11-23},\n  month = {Jan.},\n  year = {1995}\n}\n```\n\nここで`@article`は投稿論文を指す．これ以外にも本や発表論文についてもある．詳しくは[Wiki:BibTeX](https://ja.wikipedia.org/wiki/BibTeX)を参考のこと．\nまたその横の`turner1995`がthebibliography環境でも使用した論文を識別するための文字列である．\n\n参考文献のデータをtexファイルで読み込んで使うためには以下のようにする．引用はthebibliography環境と同じく`\\cite{turner1995}`のようにする．\n\n```tex\n\\begin{document}\n....\n\\bibliographystyle{jplain}\n\\bibliography{test}\n...\n\\end{document}\n```\n\n説明順が逆になるが，まず`\\bibliography`はデータベースとなるテキストファイルを指定するもので，拡張子(.bib)を除いた名前を書く．\n\n次に`\\bibliographystyle`は出力スタイルを指定するもので，`plain`(欧文用)や`jplain`(和文用)などがある．学会のテンプレートに指定があることも多い．\n\nここで出力スタイルは参考文献の順や名前を姓名にするか姓だけにするかなど指定するものである．そのためbibファイルには完全な情報(名前なら姓と名全部)書くようにする．で，名前だけ表示するか決めるのはスタイルファイルに任せてしまう．\n例えば以下の文献があるとする(日本ロボット学会より)\n\n[5] 高橋，吉田，坪内，木下：“ 論文原稿作成の手引 ”，日本ロボット学会誌， vol. 11, no. 7, pp. 88-99，1993.\n\nbibファイルに姓だけしかなくても日本ロボット学会であれば問題ない．しかし他の学会で名前も表示させる書式が選択されている場合，bibファイルを作り直さなくてはならない．これ，面倒．よってbibファイルにはなるべく完全な情報を書いておき，略語や一部だけ表示させるかの選択は出力スタイルに任せる．\n\n# 利用ソフトウエア\n以降はbibtex利用を前提に進める．\nbibtexの場合，データベースとなるbibファイルを作成・維持・管理しなければならない．中身はテキストファイルなのでメモ帳でやっても問題ないけど，少しでも楽なようにしたい．\n\n## 推奨ソフトウエア\n[JabRef](https://www.jabref.org/)を推奨する．詳しい設定は研究室内部用Notionを参考のこと．\n\n### 推奨理由\n1. フリーソフトである．\n1. 扱うファイルが特殊ファイルではなくbibファイルそのものでありテキストファイルである．よってJabRefが使えなくなったとしても貯めたデータ(bibファイル)はそのまま使える．\n1. pdfのドラックアンドドロップで基本的な情報を自動入力してくれる．完璧でないので修正必要だけどゼロからの入力よりは圧倒的に楽である．\n\n## 使ってみたいなぁ\nNotionで管理出来れば，研究室全員で論文データベースを維持・管理できるのでやってみたい．ただワンクリックでbibファイルを作れるような仕組みを構築できていないのでfuture works．\n\n# 有用情報\n+ [学術論文の情報をそれらしい形で出力する方法](https://qiita.com/SUZUKI_Masaya/items/a552ad66705f4f9a5710)\n    + bibtex情報を簡単ゲット\n\n\n\n\n\n","user":"NeK","created_at":"2021-03-30T15:18:03+09:00","updated_at":"2021-03-30T15:18:03+09:00"},{"url":"https://qiita.com/e8750520/items/e883dcdfdd0763c09063","title":"【Redux】カウントアプリを作りながらReduxを理解しよう！","body":"\n# 概要\nReduxは状態管理のライブラリです。Reactで状態管理をする方法は色々あります。最近だとHooksのuseContextとかあるけど、まだReduxが使われるケースも多いでしょうってことで、Reduxの使い方についてまとめてみました！最初にReduxの概念の説明して、後半は実際にカウントアプリを作りながらReduxの説明をしていきます\n\n### Reduxとは？\nReactではコンポーネントに状態を待たしていましたが、Reduxを使うことでstoreでstateを管理することができます。Reactではstateは子のコンポーネントにしかpropsで渡すことができませんでしたが、下図のようにReduxではstoreを使うことで親のコンポーネントにバケツリレーさせずにstateを渡すことができます\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927983/5d33230c-96a2-c650-5376-1573c4a7c297.png)\n\n[画像引用元](https://css-tricks.com/learning-react-redux/)\n\n### どんな時に使うのか\n- 大規模なアプリ向けです、大規模なアプリで状態管理を使わないとトップのコンポーネントにstateが集まってしまったり、propsが多くなって扱いづらくなってしまいます。\n\n### 処理の流れ\n- **Action**  : stateを切り替えたい時のアクションを定義してあります\n- **Reducer** : actionに応じてstateを変更する処理が書いてあります\n- **Store**   : stateの情報を保持します\n\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927983/d08caa68-7e4a-cf23-6648-98b14ffa17fe.png\" width=\"700px\">\n[画像引用元](https://itnext.io/integrating-semantic-ui-modal-with-redux-4df36abb755c)\n\n上記のように、Action→Reducer→Store→UIに反映の順で処理が進みます\n\n以降は、言葉で説明するよりも実際に作る方が分かりやすいと思うので**カウントアプリを作りながらReduxの使い方を説明していきます**\n\n\n# カウントアプリデモ画面\n![ezgif.com-gif-maker (9).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927983/ddd3aef2-6fc7-fdf6-27c6-0340e9c8bf04.gif)\n\n# 作成手順\n## 1. 環境構築\n### Create-React-App\n\n```\n$ npx create-react-app アプリ名\n```\n\n### インストール\nreduxを使うためのライブラリをインストールしていきます\n\n```\n# NPM\n$ npm install redux react-redux\n# YARN\n$ yarn add redux react-redux\n```\n\n**redux**:redux本体\n**react-redux**:reactでreduxを使うためのライブラリ\n\n**確認方法**\n・ package.jsonのdependenciesで確認できます\n\n※ 今回使用しません\n`@reduxjs/toolkit`\n`redux-devtools`\n\n\n## 2. アプリ作成\n### ディレクトリ構成を編集\nsrcディレクトリを下記のように変更しましょう。\n\n**ディレクトリ構成**\n\n```\nsrc\n├── App.js\n├── actions\n├── index.js\n├── reducers\n└── store\n```\n\nsrcディレクトリ内の今回必要ないファイルを削除して、**actions**と**reducers**と**store**ディレクトリを追加してあります\n\n### Action作成\nactionsディレクトリにindex.jsファイルを作成して以下のように書き換えます\n\n```actions/index.js\nexport const increment10 = () => {\n  return {\n    type: 'INCREMENT10',\n  };\n};\nexport const increment1 = () => {\n  return {\n    type: 'INCREMENT1',\n  };\n};\nexport const decrement1 = () => {\n  return {\n    type: 'DECREMENT1',\n  };\n};\nexport const decrement10 = () => {\n  return {\n    type: 'DECREMENT10',\n  };\n};\n\n```\n\n上記のように、actionはtypeとゆうプロパティを持っているオブジェクトを返している関数です。次に説明するReducerでtype事に処理を分岐させていきます\n\n### Reducer作成\nreducersディレクトリにcounter.jsを作成して以下のように書き換えます\n#### counter.js\n\n```reducers/counter.js\nconst counterReducer = (state = 0, action) => {\n  switch (action.type) {\n    case 'INCREMENT10':\n      return state + 10;\n    case 'INCREMENT1':\n      return state + 1;\n    case 'DECREMENT1':\n      return state - 1;\n    case 'DECREMENT10':\n      return state - 10;\n    default:\n      return state;\n  }\n};\n\nexport default counterReducer;\n\n```\nstateとactionを受け取って、actionのtype事に条件分岐して加算、減算した新しいstateをreturnしています。仮パラメータのstateに0が代入されていますね。これは、stateの初期値を表しています\n\n\n次に、reducersディレクトリにindex.jsを作成して以下のように書き換えてください\n#### index.js\n\n```reducers/index.js\nimport counterReducer from './counter';\nimport loggedReducer from './isLogged';\nimport { combineReducers } from 'redux';\n\nconst allReducers = combineReducers({\n  counter: counterReducer,\n});\n\nexport default allReducers;\n```\nReducersをcombine(組み合わせ)しています。今回は、Reducersは一つしかないので必要ありませんが、追加したい時はここに追加してください\n\n### Storeを作成\n\n```store/index.js\nimport { createStore } from 'redux';\nimport allReducers from '../reducers';\n\nconst store = createStore(\n  allReducers,\n  window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);\n\nexport default store;\n\n```\n`window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);` これは、[Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension)を使う時に必要なコードです。とても便利なChrome DevToolsの拡張機能なので最後に紹介します\n\n### src/index.jsx\n```src/index.jsx\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n```\nProviderで<App />を囲みます。これを書くことでstoreのstateをコンポーネントに渡すことができます、Providerの`store={store}`はstore属性に今回作成したstoreを指定して対応させてます\n\n### src/App.jsx\nそれでは実際にApp.jsxに対応させてアプリを完成させます\n\n```src/App.jsx\nimport React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { increment10, increment1, decrement1, decrement10 } from './actions';\n\nconst App = () => {\n  const counter = useSelector((state) => state.counter);\n  const dispatch = useDispatch();\n  return (\n    <>\n      <h1>Counter: {counter}</h1>\n      <button onClick={() => dispatch(increment10())}>+10</button>\n      <button onClick={() => dispatch(increment1())}>+1</button>\n      <button onClick={() => dispatch(decrement1())}>-1</button>\n      <button onClick={() => dispatch(decrement10())}>-10</button>\n    </>\n  );\n};\n\nexport default App;\n```\n`import { useSelector, useDispatch } from 'react-redux';`　のuseSelectorとuseDispatchはRedux Hooksと呼ばれるものです。 useSelectorはstoreのstateを取得するためのもの。useDispatchはReducerを呼び出しています。\n※ `connect()`を使って書いてあるものがあったら古い書き方です\n※ `dispatch(increment10())`は`dispatch({type: 'INCREMENT10'})`と同じ意味なので書き換えてもらっても構いません。私的にはアクション名の方が分かりやすいです\n\n**これでカウントアプリは完成です。**最後にRedux DevTools Extensionだけ紹介します！\n\n### Redux DevTools Extension\nまずはRedux DevTools Extensionのインストールが終わってない場合は[Redux DevTools Extension](https://github.com/zalmoxisus/redux-devtools-extension)のREADME.mdのInstallationにそってインストールしてください。\nインストールが終わったらChrome DevToolsを開いてReduxのタブを開いてアプリを実行させstoreのstateを変更してみます\n\n![ezgif.com-gif-maker (12).gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/927983/7286770d-930a-a478-6935-ede454931327.gif)\n\n上記のように、左側でアクションのtypeプロパティ、右側でstoreのstateの差分が表示されました。便利ですよね、他にも色々な機能があるのでREADME.mdを読んでみてください\n\n\n# さいごに\nReduxは少し分かりにくいですよね、何か詰まってるところがあれば今回の記事で解消されれば幸いです\n参考: [redux公式](https://redux.js.org/)\n\n\n","user":"e8750520","created_at":"2021-03-30T15:17:46+09:00","updated_at":"2021-03-30T15:22:59+09:00"},{"url":"https://qiita.com/mi_nenemi/items/8ec7d487143cebf6e273","title":"フロントエンド初心者がストーリー(ぽいもの)を投稿できるSNSサイトを作った【Firebase, React, Next.js, Twemoji】","body":"#はじめに\n去年に大学の学園祭ウェブサイトをRailsで作ってからウェブに興味を持ったので、何か面白いウェブアプリを作ってみたいと思い、３ヶ月かけウェブアプリを企画開発してみました。\nSNSという形にしたのは、コンテンツをユーザーが増やしてくれる点や投稿のシェアによるサイト流入が見込める点、シンプルに自分が暇つぶしにみれるサイトが増えればいいなと思っていたためです。現状広告等無いですがあわよくば小遣い稼ぎをば、という思いもあります（笑）。\n\n本記事では、主に実装面について技術選定や感想について述べます。\n\n#作ったもの\nwbbow - 絵文字で簡単ストーリー\nhttps://wbbow.com\n\n> **wbbow**\nwbbowは絵文字とテキストでストーリーライクな投稿を匿名で投稿できるウェブサイトです\n\n#wbbowとは？\n絵文字とテキストのみとシンプルな作りで、インスタでよく見るストーリーズの簡易版のような投稿ができるサービスです。ちなみに一応読み方はウィボーです（自動読み上げより）。\n特徴としては、\n\n* 匿名\n* ログインなし\n* いいねは無限に押せる\n* 絵文字はsvgのため拡大しても綺麗\n* 投稿には投稿でリプライでき、リプライ場所も自由に設定できる\n\nなどです。発想としては、インスタ(ストーリーズ)+ツイッター(短文投稿)+はてな匿名ダイアリー(匿名性)を組み合わせたものです。ログインやユーザーの概念が無く匿名なのは、一番は実装が簡単になるからですが、利用登録などの初期ハードルをなくしたり、より気軽に、普段の自分に縛られず使って欲しいという理由もあります（余裕があれば、今後ユーザー登録を可能にするかも）。また、テキストと絵文字だけなのは、画像等も可能にするのがコストや実装面のハードルが高いのもありますが、不適切な画像等の削除などが個人では対応できない可能性が高いと判断したためです。個人的にはテキストと絵文字だけというのが、むしろクリエイティビティを刺激するのではとも感じています。\n![ホーム](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/784893/f1774737-da9a-0b8b-fd9d-61e82e72ab4d.png)\n\n各投稿は無限の広さのキャンバスの中心に配置され、その周りに自由にリプライを投稿することができます。\n![各投稿](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/784893/aeca2814-9d29-0e32-e815-d86cc91330fa.png)\n\nテキストと絵文字、リプライの場所などを工夫することで様々な使い方ができる新しい形のSNSです。\n\n#使用サービス・ツール\nフロントエンド：React, Next.js\nデータベース：Firebase Realtime Database, Cloud Functions\nホスティング：Vercel, Github Pages(サポートページ)\nソース管理：Github\nアクセス解析：Google Analytics, Firebase Analytics\nSEO対策：Google Search Console\n絵文字：Twemoji\n\n以下それぞれについて感想です\n\n##フロントエンド - React, Next.js\nフレームワークは、サーバーレスなものを使用したいと思い、SPAを実現できるReact, Vue, Angularなどから選びました。JavaScriptベースで書いてみたかったのと、処理速度が少し早いようだったのでReactを選択しました。Next.jsはReact使用時のデファクトスタンダードかと感じ、使用しました。結果的にVercel(Next.jsも作ってる)へのデプロイがすんなりできたので、満足しています。\n\n##データベース - Firebase\nとりあえずFirebase使っておけば間違い無いだろうと。Realtime Database と Cloud Firestoreで迷いましたが、色々調べデータ構造が単純なことやFirebaseのページでもRealtime Databaseを推されたことなどからRealtime Databaseを選択しました。が、今後機能を追加することでデータ構造が複雑化したり、Firestoreの方が開発されていることを考えると、もう少し熟考する必要があったかなと思います。\n\n##ホスティング - Vercel\n現状完全に静的ファイルのみ&SSRなしのサイトなのでNetlify, Github Pages, Cloudflare Pages, Firebase Hostingなど候補は複数ありましたが、最終的にはVercelに落ち着きました。以下それぞれ試した総評です。\n###Netlify\n無料枠はそれなりですが、国内だと少し速度が遅いようです。\n###Github Pages\n唯一読みこんだページでJavaScriptが機能しませんでした。そのためウェブアプリでは使っていませんが、サポートページ(https://support.wbbow.com )ではGithub Pagesを利用しています。\n###Cloudflare Pages\n静的ホスティングでは新参者ですが、容量の制限もなく日本でもCDNの恩恵もかなり与れます。当初これで行こうと思っていましたが、ダイナミックルーティングを使用しているページに初回アクセスした場合、404エラーになるため、残念ながら見送りました。また、発展途上のためウェブコンソールのバグもみられました。(cloudflare workers というツールを利用すればいけそうが、ここに時間を使いたくなかったので今回は使っていません)\n###Firebase Hosting\nデータベースと同じプラットフォームで管理できますが、無料枠制限が他より厳しいです。\n###Vercel:crown:\n無料枠制限が緩く、Next.jsとの親和性も高いです。他のサービスでは確認していませんが、リダイレクトや環境変数もウェブコンソールで設定できたのは楽でした。\nただ、広告をつけることを考えているので、無料枠が非営利目的に限るのが引っかかります。(個人ブログの広告掲載はOKらしいですが、wbbowの場合どうなんだろう？)\n\n##絵文字 - Twemoji\n[Twemoji](https://twemoji.twitter.com)はTwitterのオープンソース絵文字です。ツイートする時の絵文字はだいたいTwemojiになっています(ちなみにQiitaのMarkdown絵文字もTwemoji:smile:)。グラフィックは CC BY 4.0 の元、自由に使うことができます。AppleやGoogleの絵文字は著作権の問題等で、そのままサービス内で使うのはかなりグレーですが、Twemojiは堂々と使うことができます！さらに素晴らしいのはsvgに対応していることです。wbbowでは各投稿を自由に拡大縮小して見られるのでsvgが使えるのはありがたいことです。絵文字が綺麗に見えるだけでなく、デバイス間のグラフィックの統一も図ることができています。また、テキスト内の絵文字もTwemojiに変換してくれるJavaScriptライブラリが用意されており非常に助けられました。\nTwemojiがなければ、wbbowが完成することはなかったと言っても過言ではないです。\n(こんだけ言っといてあれですが、読み方がいまいちわかりません。トゥエモジでいいんですかね？)\n\n#セキュリティ\n###Firebase Realtime Database\nできるだけ厳しくセキュリティルールを定めています。\n\n###テキストのサニタイジング\nXSS対策として。\n\n###テキスト内リンクのrel\nテキスト内のURLに対して自動でリンク化するのですが、その際aタグにrel=\"noopener noreferrer\"オプションを追加し遷移先の脅威の影響を最小化しています。\n\nその他にも投稿時のバリデーションなどで対策をしています\n\n#課題点・展望\n### OGP・SEO周り\nこの辺を充実させるにはSSRがほぼ必須のようですが、これだけのためにSSR使うか…？となって静的にできる範囲内になっています。ホスティングをVercelにしたことでSSRも簡単にできそうなので今後対応するかもしれません。投稿のOGP画像を生成できたりするとさらにサイト流入を促せるかもですね。\n\n###パフォーマンス周り\n現状ページ読み込み速度は遅くはないのですが、速くもないので遅延読み込みは組み込みたいところです。\nまた、最初のFirebase接続に時間がかかっているのか、肝心の投稿一覧の表示に時間がかかります。この辺に関する情報が少ないのですが、何か対策があれば教えていただきたいです。\n\n###編集機能の充実化\n整列(アライン)機能やテキストの中央揃えなども組み込もうと考えていましたが、初期バージョンでは見送っているので今後追加したいです。\nまた、スマホからの利用をメインで考えているため、ショートカットなどが軒並み使えません。元に戻すやコピーなどはあった方がUX的にも満足度は高いとは思っています(が、中々実装ハードルが高い…)。\n\n\n#雑感\nタイトルにはフロントエンド初心者と書いていますが、作り始めはJavaScriptも怪しいレベルだったので、かなり苦労しました。またウェブ開発あるあるですが、ブラウザ・デバイス間の挙動の違いも大変でした。特に大変だったのは、svgのforeignObjectの扱いです。wbbow内では多用するのですが、ブラウザ間差異が大きかったり、バグっぽい動作をしたりと試行錯誤を繰り返さざるをえませんでした。\n思い返せば全部めんどくさいなあと思いながら作ってたような気もしますが、やっぱりうまく動いた時の喜びはひとしおでしたね。今回のプロジェクトを通してReactやFirebaseはじめフロントエンドの魅力や奥深さを楽しむことができました。あとはこのサービスを1人でも多くの人に楽しんでもらえたらと願うのみです:pray:\n\n#最後に\n[wbbow.com](https://wbbow.com)\nなにはともあれぜひ何か投稿してみてください！非常に喜びます！\n投稿やサイトをシェアしていただけるとさらに感謝します！！！！\nまた、アドバイスもございましたらいただけると幸いです。\n\n拙文をお読みいただきありがとうございました。\n","user":"mi_nenemi","created_at":"2021-03-30T15:10:08+09:00","updated_at":"2021-03-30T15:10:08+09:00"},{"url":"https://qiita.com/tsin1rou/items/d5d8dde567fb4ed58b34","title":"ウマ娘のスクショから因子を自動で認識＆Firebaseで詳細に検索できるサイトを2日で作った話","body":"#雑まとめ\nGCPのVision APIとFirebaseを使って[inshi.org](https://inshi.org)というウマ娘の因子を検索できるサイトを作りました。プレイしてる人は使ってみてね！\n\n「2日で作った」とタイトルにある通り、この記事は「既存のAPIを説明の通りに使ったらその通りのものができた」的なやつです。いやー便利な世の中ですね。\n\n#ウマ娘について\nウマ娘って簡単に言うと育成シミュレーションゲームなんですが、元ネタが競走馬ということで、「因子」といういわゆる血統システムが組み込まれています。\n例えば下の画面で言うと真ん中から下の「賢さ」とか「芝」とか書いてあるのが因子です。この子を親に選ぶと該当するステータスが伸びるというわけですね。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278434/dae9abb4-5b08-d818-c286-f044f7433ed3.png)\n\nキャラクターの育成を始める時には親を2人選び、この因子を引き継がせて強いウマ娘を育てていくわけなんですが、この親のうち1人をフレンドから借りることができます。\nキャラクターを育て切ったときにどんな因子が出るのかは運なんですが、試行回数の問題で基本的に他人の因子の方が強くなるわけで、つまり強いウマ娘を育てるにはいかに強い親を借りてこれるかが大切です。\n\n逆に、自分のウマ娘を親として使ってもらうとボーナスポイントがもらえるので、強い因子が出た時はできるだけ他人に使ってもらいたいんですが、ツイッターに書くにしろ攻略サイトに投稿するにしろ、検索してもらうためには因子を自分で手打ちしていかないといけません。\n\n因子の数も多いのに全部手打ちというのはあまりにも面倒ということで、何とかならないかやってみることにしました。\n\n#画像認識\nあんまり長々と開発したくはなかったので、楽に使えるライブラリ的なのが無いかな～と思って「画像認識　文字　API」で検索するとGCPの[Cloud Vision API](https://cloud.google.com/vision/docs/ocr?hl=ja)が一番上にヒット。\n\n上のページを参考にこんな感じのテストコードを書きました。\n\n```javascript:test.js\nconst fs = require(\"fs\");\nconst vision = require('@google-cloud/vision');\n\n// Creates a client\nconst client = new vision.ImageAnnotatorClient();\n\n(async () => {\n  let buffer = fs.readFileSync(\"test.png\");\n  const [result] = await client.textDetection(buffer);\n  const detections = result.textAnnotations;\n  console.log(detections);\n})()\n```\n\nそして実行。\n\n```bash\nexport GOOGLE_APPLICATION_CREDENTIALS=\"inshi-search-1c46c7d5ac77.json\" && node test.js > log.txt\n```\n\nで、出てきたのがこれ。最初の要素は全文入りでした。\n\n```log.txt\n[\n  {\n    locations: [],\n    properties: [],\n    mid: '',\n    locale: '',\n    description: 'ウマ娘詳細\\n' + ...,\n    score: 0,\n    confidence: 0,\n    topicality: 0,\n    boundingPoly: { vertices: [Array], normalizedVertices: [] }\n  },\n  {\n    locations: [],\n    properties: [],\n    mid: '',\n    locale: '',\n    description: 'ウマ',\n    score: 0,\n    confidence: 0,\n    topicality: 0,\n    boundingPoly: { vertices: [Array], normalizedVertices: [] }\n  },\n  {\n    locations: [],\n    properties: [],\n    mid: '',\n    locale: '',\n    description: '娘',\n    score: 0,\n    confidence: 0,\n    topicality: 0,\n    boundingPoly: { vertices: [Array], normalizedVertices: [] }\n  },\n  ...\n]\n```\n\nboundingPolyのverticesに要素の位置が記録されていて、これとdescription以外はいらなさそうだったのでカット。すると下のようになりました。\n\n```log.txt\n[\n  {\n    description: 'ウマ娘詳細\\n' + ...,\n    vertices: [\n      { x: 27, y: 25 },\n      { x: 548, y: 25 },\n      { x: 548, y: 960 },\n      { x: 27, y: 960 }\n    ]\n  },\n  {\n    description: 'ウマ',\n    vertices: [\n      { x: 230, y: 25 },\n      { x: 277, y: 25 },\n      { x: 277, y: 47 },\n      { x: 230, y: 47 }\n    ]\n  },\n  ...\n]\n```\n\nこれだけあれば十分ですね。一番上は単語と単語の切れ目が微妙なので消して、手動で近くの単語を合体させてから必要な因子の部分だけを切り取ると下のように。\n\n```log.txt\n[\n  { text: '○賢さ', vertices: [ [Object], [Object], [Object], [Object] ] },\n  { text: '○芝', vertices: [ [Object], [Object], [Object], [Object] ] },\n  {\n    text: '○大阪杯',\n    vertices: [ [Object], [Object], [Object], [Object] ]\n  },\n  {\n    text: '○急ぎ足',\n    vertices: [ [Object], [Object], [Object], [Object] ]\n  },\n  ...\n]\n```\n\n先頭のマークを○だと解釈しちゃってますが、概ね問題なさそうです。\nあとは★の数をどうやって判断するかですが、因子の位置から下に灰色のピクセルを探して、そのまま横に黄色のピクセルを探しに行くようにしました。\n\n![スクリーンショット 2021-03-30 13.12.30.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278434/804d1e1d-b047-b6f9-558b-83ee0dd9faab.png)\n\nこの辺りは[Node.jsでCanvas(ImageData)を使った簡単な画像処理](https://qiita.com/redshoga/items/d5afef65081b7fdf60cc)を参考にさせていただきました。画像の形式を考えなくていいのがめちゃ楽でした。\nこんな感じで画像認識は完了。\n\n```log.txt\n[\n  { text: '賢さ', star: 2 },\n  { text: '芝', star: 3 },\n  { text: '大阪杯', star: 1 },\n  { text: '急ぎ足', star: 2 },\n  { text: 'テンポアップ', star: 2 },\n  { text: 'URAシナリオ', star: 2 },\n  ...\n]\n```\n\n# Firestoreの設定\n上で作ったコードをfunctionsに設置して、出てきたデータをFirestoreに投入するように設定。functionsの引数は分析用の画像2枚とウマ娘のユーザーIDです。\n画像1枚だと因子が全部収まらないので、画像2枚から因子をマージするようにしました。画像データはbase64で転送するのでstringになっています。\n\n```typescript:index.ts\n...\nexport const postImage = functions.region(\"asia-northeast1\")\n  .https.onCall(async (data: {\n    buffer1: string,\n    buffer2: string,\n    userId: number,\n  }, context): Promise<{\n    inshi: {\n      [x: string]: number\n    },\n    horseName: string,\n    success: boolean,\n  }> => {\n  ...\n  await app.firestore().collection(\"uma\").doc(data.userId.toString()).set({...});\n});\n```\n\nで、Firestoreでどう検索を設定するかについてなのですが、因子の中でも重要性が高いと言われている青因子や赤因子の星数で絞り込みたい場合、単純に考えると下記のようなクエリになります。\n\n```javascript:query.js\n  firebase.firestore().collection(\"uma\")\n    .where(\"blue\", \">\", foo)\n    .where(\"red\", \">\", bar);\n```\n\nところがFirestoreでは大小比較の含まれるwhere句は同時に1つまでしか使えないという制限があり、このままでは使えません。\n仕方ないのでFirestoreに保存するときに検索用のフィールドも追加して保存することにしました。\nついでに因子の種類を絞り込むためのフィールドも用意します。\n\n```javascript:firestoreObject\n  {\n    ...\n    speed: true // スピード因子持ちならtrue\n    stamina: false // 同スタミナ\n    ...\n    blue7: true // 青因子が7個以上あればtrueにして保存\n    blue8: true // 8個以上\n    ...\n  }\n```\n\nこれでwhere句が大小比較ではなく`==`になり、たくさん連結できるようになりました。\n絞り込んだデータを投稿日時順に並べたいので、timestampとそれぞれのプロパティとの複合インデックスを登録しておきます。\nFirestoreにはインデックスマージという機能があるため、プロパティ間での複合インデックスは不要とのこと。\nインデックスマージについては今回初めて知ったんですが、Firestoreさん意外と検索に強い作りにできるんですね。\n\n# フロントエンド作成\n普段使っているReactを利用するという方針で、特にカスタマイズも不要なのでcreate-react-appを使いました。\nフロントエンドに関しては特に特筆する部分もなく、単純にトグルボタンを大量に追加してその状態に応じてFirestoreのクエリを生成するというシンプルな作りです。\n\n# 終わりに\n雑にコードを一通り書き上げてからの調整に意外と時間を使わされました。\n特に時間を取られたのがOCRの精度問題で、「汝」「錨」「顕」などの難しい漢字が全然違う文字になったり、濁点が落ちたり、「.」みたいな妙なごみを拾ってきたりして困りました。\nいまいちエレガントな解決方法を思いつかなかったので、よく間違う部分を下のコードみたいな感じで修正しています。\n\n```javascript\n      return text.replace(/紅.ギア\\/?LP1211-M/, \"紅焔ギア/LP1211-M\")\n        .replace(/不沈艦、抜.[ォオ]ッ!/, \"不沈艦、抜錨ォッ!\")\n        .replace(/G[0O]{2} ?1st\\.F.*;/, \"G00 1st.F∞;\")\n        .replace(/貴.の使命を果たすべく/, \"貴顕の使命を果たすべく\")\n        .replace(/.、皇帝の神威を見よ/, \"汝、皇帝の神威を見よ\")\n        ...\n```\n\nこの辺は手動なので、多分まだまだ認識をミスる因子が残っていると思います。\n\n宣伝のために[Twitterアカウント](https://twitter.com/inshi_search)を作って因子を投稿している人にかたっぱしからリプライ送ってみたんですけど、今のTwitterはこういうスパムを弾くようになってるんですね。\nそういえばここ何年もスパム見てないなと今さら思いましたw\n![スクリーンショット 2021-03-30 14.30.18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/278434/27080f60-a291-6304-9653-37cbc39b0b4c.png)\n(僕の送ったリプライが消えている図)\n","user":"tsin1rou","created_at":"2021-03-30T15:06:32+09:00","updated_at":"2021-03-30T15:06:32+09:00"},{"url":"https://qiita.com/Mune_robo/items/85a5c3080021f2a0a02c","title":"【GCP】請求先アカウントをわかりやすくまとめてみた","body":"参考URL：\nhttps://apps-gcp.com/gcp-basic-01-preparation/#i\nhttps://zenn.dev/koke/articles/5416f45f4cdfbd\nTOPGATEのよくあるご質問\n\nGCPを利用したい場合、最低限、以下が必要です。\n・Google アカウント\n・GCP プロジェクト\n・請求先アカウント\n\n請求先アカウントがなぜ必要かについて説明します。\n・GCP は、使用した分だけ請求が発生する従量課金制。\n・料金はプロジェクト単位で発生。\n・プロジェクトで発生した料金の、請求管理やどこに請求させるかといった機能を担っているものが「請求先アカウント」\n・プロジェクトに請求アカウントを紐付ける事で、始めて有料インスタンスの立ち上げが可能となる。\n\n請求先アカウントの主な機能は以下。\n・発生した請求をなにで支払うかの定義（クレジットカード）\n・どのプロジェクトが請求先アカウントに紐付いていて、プロジェクトごとにどういったサービスでどの程度料金が発生しているか確認が可能。\n・発生した課金のデータをcsv/json のいずれかのファイル形式でダウンロードしたり、BigQuery にエクスポートして分析できる。\n・プロジェクトごと、GCP サービスごとに予算を設定し、設定した予算から任意の利用料でアラートメールを出すよう設定可能。(例えば予算100万円のうち50万円(50%)までいったらアラートメールが送信される。)\n※詳細は公式ドキュメントにもあります\n\nただ、請求先アカウントには、請求先サブアカウントというものも存在します。\n請求先サブアカウントは、販売パートナー(リセールなどを行う企業)が使用するためのアカウントです。\n必要性について以下に説明します。\n・親の請求アカウントがあり、その下に請求先サブアカウントを作成する\n・請求先サブアカウントをプロジェクトに紐づけることで、請求先サブアカウントでの使用料金は、親の請求アカウントに請求される\n\n![1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/556084/8656b7f3-efcd-3306-ead5-97a71527a78a.png)\n\n請求先サブアカウントにした時のメリットは\n・請求を親の為替に合わせられること。日本円なら日本円で払える。\n\n請求先サブアカウントは、閲覧機能などが制限されるので請求先サブアカウントにどの権限を付与するかは考えないといけません。\n請求先アカウントユーザーの権限だと、アラートを設定できなかったり、レポートの機能もすべて使えなかったりと、かなり制限されます。\n\n請求先サブアカウントは、あくまで販売パートナー(リセールなどを行う企業)が使用するためであり、プロジェクトに紐づけるのが請求先アカウントではなく、請求先サブアカウントになる。ということがわかっていれば問題ないと思います。\n\n","user":"Mune_robo","created_at":"2021-03-30T15:06:09+09:00","updated_at":"2021-03-30T15:06:09+09:00"},{"url":"https://qiita.com/gyu-don/items/c047098e1a58dc8d8d96","title":"GitHub Actionsを使ってpyproject.tomlをもとに_version.pyを更新する","body":"[pipとpipenvとpoetryの技術的・歴史的背景とその展望](https://vaaaaaanquish.hatenablog.com/entry/2021/03/29/221715)という記事を読みました。Pythonのビルドシステムに微妙さを感じている自分には\n\n> 単一のtomlファイルをrequirements.txtやそれらを参照するsetup.pyの代替とする事が出来るようになっている\n\nという一文に心がぴょんぴょんしました。\n\n偶然にも(本当に偶然だぞ!)新しくPythonのプロジェクトを作る機会があったので、試しに`pyproject.toml`を使ってみました。\nそしたら、初手で詰みました。バージョンの指定がつらかったからです。\n\n## よくある`setup.py`でのバージョン読み込み\nPythonパッケージでは、よく、`パッケージ名.__version__`で、パッケージのバージョンを取得できるようになっています。\nこれは自動でそうなるのではなく、人手でそのように書かれていて、そういう風に書くという作法になっています。\n\nそして、バージョンを`setup.py`にも書かなければならないのですが、`パッケージ名.__version__`との二重管理を防ぐために、\n\n```py:パッケージ名/_version.py\n__version__ = \"0.4.2\"\n```\n\n```py:setup.pyの最初の方\nwith open(\"パッケージ名/_version.py\", \"r\", encoding=\"utf-8\") as f:\n    exec(f.read())\n```\n\nのように`setup.py`に黒魔術を仕込んでいることが多いです。\n\nこれにより、`_version.py`さえ更新すれば、`setup.py`はバージョンを更新する必要がなく、「パッケージのバージョンと`__version__`が返すバージョンがずれている！」という嫌なミスがなくなります。\n\n## `pyproject.toml`ではどうするの?\nPoetryというビルドツールでは、プラグインかなにかで、バージョンをうまいことやるものが用意されているようです。なので、それを使うのもいいと思います。\npipと`pyproject.toml`を使った`setup.py`代替手法では、そのような機能はなさそうでした。では、人手で`pyproject.toml`と`_version.py`を同じになるように保ち続けるしかないのでしょうか。そんなん、絶対ミスるでしょう。ということで、今回、GitHubアクションを使って機能を実現することにしました。\n\n### `master`ブランチの`pyproject.toml`が更新されたとき、`_version.py`を更新し、pushする\n\nというアクションを書きました。それにより、`pyproject.toml`さえ更新すれば`_version.py`のことはGitHub Actionsにおまかせできるようになりました。どのブランチにするかなどは、プロジェクトによって違うので、適宜、プロジェクトに合わせて書き換えてください。\n\n```yml:.github/workflows/update_version_file.yml\n# This is a basic workflow to help you get started with Actions\nname: \"Update _version.py\"\n\n# Controls when the action will run.\non:\n  # Triggers the workflow on push or pull request events but only for the main branch\n  push:\n    branches: [ master ]\n    paths:\n      - \"pyproject.toml\"\n  pull_request:\n    branches: [ master ]\n    paths:\n      - \"pyproject.toml\"\n\n  # Allows you to run this workflow manually from the Actions tab\n  workflow_dispatch:\n\n# A workflow run is made up of one or more jobs that can run sequentially or in parallel\njobs:\n  # This workflow contains a single job called \"build\"\n  build:\n    # The type of runner that the job will run on\n    runs-on: ubuntu-latest\n\n    # Steps represent a sequence of tasks that will be executed as part of the job\n    steps:\n      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it\n      - uses: actions/checkout@v2\n\n      # ！！！！runの行の > 以降を、_version.pyのパスに書き換え！！！！\n      - name: Update version\n        run: sed -n 's/^version\\s*=\\s*\"\\(.*\\)\"/__version__ = \"\\1\"/p' pyproject.toml > bqbraket/_version.py\n\n      - name: Commit version file\n        uses: EndBug/add-and-commit@v7.1.0\n        with:\n          author_name: \"コミットに使う名前\"\n          author_email: \"コミットに使うメールアドレス\"\n          message: \"コミットメッセージ\"\n          add: \"上で指定した_version.pyのパス\"\n```\n\n### ライセンス\n本YAMLファイルはBlueqatプロジェクトが[こちら](https://github.com/Blueqat/braket-backend/blob/master/.github/workflows/update_version_file.yml)でオープンソースとして公開しており、ライセンスも同パッケージに準じて、Apache-2ライセンスとします。\n","user":"gyu-don","created_at":"2021-03-30T15:04:13+09:00","updated_at":"2021-03-30T15:19:38+09:00"},{"url":"https://qiita.com/pnuts/items/b652e4d0d745559a49c0","title":"Shopifyの商品ページに「LINEで送る」ボタンを追加する方法","body":"# 完成イメージ\n\n![スクリーンショット 2021-03-30 14.48.53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/529064/1e7d1e2c-8a84-16ec-3260-a075c43f4562.png)\n\n#はじめに\n\nhttps://mrtc.jp/310\n\nこちらの記事を参考に実装しました。\n\n1. 言語ファイルの編集\n2. schemaの編集\n3. アイコンの登録\n\nまでは参考記事と同じです。\nこれ以降は記事内容が古くなっていたので、\n最新の情報をまとめておこうと思います。\n\n# 実装方法\n\n## 4. LINEのカラーコードを設定 (css)\n\nオンラインストア > テーマ > アクション > コードを編集する\n\nから、ファイルエディターを開きます。\n\n次に、「Assets」より「theme.css」を開きます。\n\n4251行目から始まる部分に、LINEのカラーコードを設定しましょう。\n\n```css:/Assets/theme.css\n/* 4251行目 */\n.btn--share {\n  background-color: transparent;\n  border-color: var(--color-border);\n  color: var(--color-text);\n  margin-right: 5px;\n  margin-bottom: 10px; }\n  .btn--share:not([disabled]):hover, .btn--share:focus {\n    background-color: transparent;\n    border-color: var(--color-btn-social-focus);\n    color: var(--color-text); }\n  .btn--share .icon {\n    vertical-align: middle;\n    width: 16px;\n    height: 16px;\n    margin-right: 4px; }\n  .btn--share .icon-facebook {\n    fill: #3b5998; }\n  .btn--share .icon-twitter {\n    fill: #00aced; }\n  .btn--share .icon-pinterest {\n    fill: #cb2027; }\n/* 追加箇所 ここから */\n  .btn--share .icon-line {\n    fill: #00b900; }\n/* 追加箇所 ここまで */\n```\n\n## 5. 「LINEで送る」ボタンを表示する (html)\n\n「Snippets」より「social-sharing.liquid」を開きます。\n\n「LINEで送る」ボタンを表示するためのコードを追記しましょう。\n\n```html:/Snippets/social-sharing.liquid\n<!-- /snippets/social-sharing.liquid -->\n<ul class=\"social-sharing\">\n\n  <!-- 追加箇所 ここから -->\n  {% if settings.share_line %}\n    <li>\n      <a target=\"_blank\" href=\"//social-plugins.line.me/lineit/share?url={{ shop.url | append: share_permalink }}\" class=\"btn btn--small btn--share share-line\">\n        {% include 'icon-line' %}\n        <span class=\"share-title\" aria-hidden=\"true\">{{ 'general.social.share_on_line' | t }}</span>\n        <span class=\"visually-hidden\">{{ 'general.social.alt_text.share_on_line' | t }}</span>\n      </a>\n    </li>\n  {% endif %}\n  <!-- 追加箇所 ここまで -->\n\n  {% if settings.share_facebook %}\n    <li>\n      <a target=\"_blank\" href=\"//www.facebook.com/sharer.php?u={{ shop.url | append: share_permalink }}\" class=\"btn btn--small btn--share share-facebook\">\n        {% include 'icon-facebook' %}\n        <span class=\"share-title\" aria-hidden=\"true\">{{ 'general.social.share_on_facebook' | t }}</span>\n        <span class=\"visually-hidden\">{{ 'general.social.alt_text.share_on_facebook' | t }}</span>\n      </a>\n    </li>\n  {% endif %}\n\n  {% if settings.share_twitter %}\n    <li>\n      <a target=\"_blank\" href=\"//twitter.com/share?text={{ share_title | url_param_escape }}&amp;url={{ shop.url | append: share_permalink }}\" class=\"btn btn--small btn--share share-twitter\">\n        {% include 'icon-twitter' %}\n        <span class=\"share-title\" aria-hidden=\"true\">{{ 'general.social.share_on_twitter' | t }}</span>\n        <span class=\"visually-hidden\">{{ 'general.social.alt_text.share_on_twitter' | t }}</span>\n      </a>\n    </li>\n  {% endif %}\n\n  {% if settings.share_pinterest %}\n    <li>\n      <a target=\"_blank\" href=\"//pinterest.com/pin/create/button/?url={{ shop.url | append: share_permalink }}&amp;media={{ share_image | img_url: '1024x1024' }}&amp;description={{ share_title | url_param_escape }}\" class=\"btn btn--small btn--share share-pinterest\">\n        {% include 'icon-pinterest' %}\n        <span class=\"share-title\" aria-hidden=\"true\">{{ 'general.social.share_on_pinterest' | t }}</span>\n        <span class=\"visually-hidden\">{{ 'general.social.alt_text.share_on_pinterest' | t }}</span>\n      </a>\n    </li>\n  {% endif %}\n\n</ul>\n\n```\n\n\n## 6. 完成\n\n![スクリーンショット 2021-03-30 14.48.53.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/529064/1e7d1e2c-8a84-16ec-3260-a075c43f4562.png)\n\n# おわりに\n\nこの記事がいいなと思ったらLGTMやストックよろしくお願いします。\n\n[Ciimaオンラインアートショップ](https://ciima.shop/) ではShopifyを利用してアート作品の販売を行っています。\nそちらもチェックしていただけると嬉しいです。\n","user":"pnuts","created_at":"2021-03-30T15:00:39+09:00","updated_at":"2021-03-30T15:00:39+09:00"},{"url":"https://qiita.com/rice01010101/items/638ff73a41316b129099","title":"AWS Glue ワークフローの個人的注意事項","body":"* ワークフローに組み込むトリガーは、トリガー作成時のみ設定可能。<br>\n  作成済みトリガーは組み込めない。<br>\n  （設定をコピーしてトリガーを新規作成しそれを組み込む形になる）\n* CloudFormationでトリガー作成と同時にワークフローへ組み込むことが可能。以下のようなコード。（一部抜粋）<br>\n  ワークフローをコードで表現するのは面倒だができなくはない。\n\n```yaml\n  GlueTrigger1:\n    Type: AWS::Glue::Trigger\n    Properties:\n      WorkflowName: 【ワークフロー名】\n```\n\n* マネジメントコンソール上のワークフロー一覧の「最終実行ステータス」や<br>\n  ワークフローの履歴内「実行ステータス」に表示される「完了」は、<br>\n  ワークフローに組み込まれた最初のトリガー実行が成功したという意味。<br>\n  つまり途中のジョブやクローラが失敗しようが「完了」と表示される。\n* ただし、履歴内で実行IDを選択し「実行の詳細を表示する」ボタンから詳細を確認すると失敗状況が確認できる。\n* 上記のため、ワークフローのステータス監視は現実的ではない。<br>\n  ジョブやクローラ単位でEventBridgeから監視する方が比較的良い。\n* AWS CLIの「get-workflow」でワークフローの設定をJSONで取得できるが、<br>\n  読んでも理解しづらいうえにワークフロー作成時に使えるわけでもない。\n","user":"rice01010101","created_at":"2021-03-30T15:00:35+09:00","updated_at":"2021-03-30T15:02:31+09:00"},{"url":"https://qiita.com/Chiri_Tsumo/items/03c7dbdc72ffb559b14d","title":"WindowsServer2016の更新とセキュリティがクラッシュする問題の解決","body":"# 事象\nWindowsServer2016で、\n設定 > 更新とセキュリティ\nを開くと、一瞬画面が見えたように思えたが落ちてしまう。\n\n# 原因\n`Update Orchestrator Service for Windows Update`サービスが無効になっていた。\n\nWindowsServer2016の場合、有効にしなければならないサービスは\n`Windows Update`だけではないみたい。\n\n\n#解決方法\n検索バーで「service」を検索し、`サービス`をクリック。\n`Update Orchestrator Service for Windows Update`を【無効→手動】に変えたら解決した\n","user":"Chiri_Tsumo","created_at":"2021-03-30T15:00:27+09:00","updated_at":"2021-03-30T15:00:27+09:00"},{"url":"https://qiita.com/kt-yt/items/9b4c844ca03d737d59c5","title":"Greengrass(V1)のグループにデバイスを追加する","body":"#はじめに\nGreengrass(V1)は、Greengrassをインストールしたデバイス（コアデバイス）がMQTTブローカーの役割を果たし、グループ内のデバイス間でMQTTメッセージのやり取りを行うことができます。\n今回は、Greengrassグループへのデバイスの追加とGreengrassデバイス間で通信をやり取りするまでを確認します。\n\n以降、公式ドキュメントの以下を参考にしています。\n参考：[モジュール 4: AWS IoT Greengrass グループでのデバイスの操作](https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/module4.html)\n#1　Greengrassグループへのデバイス追加\nGreengrassグループへのデバイス追加として、以下2つの手順を確認しました。\n\n* Greengrassグループに新規のデバイスを追加\n* モノとして登録済みのデバイスをGreengrassグループに追加\n\nなお、今回はラズパイとMacをそれぞれ追加しています。\n##1-1　新規のデバイスをグループに追加\nIoT Coreに未登録のデバイスをGreengrassグループに追加します。\n\n1.IoT Coreのマネジメントコンソールで左のメニューから Greengrass > クラシック(V1) > グループ の順にクリック\n2.今回追加する対象のGreengrassグループをクリック\n3.デバイス > 「デバイスの追加」の順にクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/ab94ff5b-d0a4-4629-1780-f2cbef9cbf64.png)\n4.「新しいデバイスの作成」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/cd75d469-4d67-8fe8-f5fa-6fa8772a01f4.png)\n5.任意の名前を入力して「次へ」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/245adf7d-2693-b3ae-4ccb-1821750b1919.png)\n6.今回は1-clickデプロイを利用することとし、「デフォルトを使用」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/f9db7e14-28aa-4192-bd8d-172cc2753d74.png)\n7.以下のファイルをダウンロードし、「完了」をクリック\n\n* デバイス証明書、パブリックキー、プライベートキーをまとめたtar.gzファイル\n* ルートCA　※[Amazon Root CA 1](https://www.amazontrust.com/repository/AmazonRootCA1.pem)をダウンロード\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/ad709fec-1db0-bd2b-bc65-3c1be94501b4.png)\n8.完了すると、以下の通りグループにデバイスが追加される\n\n* 作成時にポリシーが証明書にアタッチされ、証明書もアクティブになっている\n* IoT Coreのモノとしても登録される\n* Greengrass > クラシック(V1) > デバイス にはグループがデプロイされるまで表示されない\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/5895751e-52e1-31cb-477f-5fc3c157772d.png)\n#1-2　モノと登録済のデバイスをグループに追加\n既にIoT Coreにモノとして登録されているデバイスをGreengrassのグループに追加します。\nなお、IoT Coreへのモノの登録方法はこちらをご参照ください。\n参考：[AWS IoT Coreに「1-Click証明書作成」と「CSRによる作成」の2つの方法でプロビジョニングを実施してみる](https://qiita.com/kt-yt/items/936b2c80a7dedad83e7b)\n\n1.IoT Coreのマネジメントコンソールで左のメニューから Greengrass > クラシック(V1) > グループ の順にクリック\n2.今回追加する対象のGreengrassグループをクリック\n3.デバイス > 「デバイスの追加」の順にクリック\n4.「IoT Thingを選択する」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/cd75d469-4d67-8fe8-f5fa-6fa8772a01f4.png)\n5.追加するモノを選択して「完了」をクリック\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/a6857413-805e-b143-a7e9-5b5081321b92.png)\n6.完了すると、グループにデバイスが追加される\n#2　Greengrassデバイス間で通信\n次にGreengrassデバイス間で通信できることを確認します。\n今回は、AWS IoT Device SDK for Pythonの/samples/greengrass配下にある `basicDiscovery.py` を利用します。\nGitHub：[AWS IoT Device SDK for Python](https://github.com/aws/aws-iot-device-sdk-python)\n#2-1　グループのデプロイ\nクラウドで行った設定をGreengrassコアデバイスにデプロイします。\nまた、デプロイ前にGreengrassデバイス間で通信できるよう、サブスクリプションの設定を行います。\n\n1.IoT Coreのマネジメントコンソールで左のメニューから Greengrass > クラシック(V1) > グループ の順にクリック\n2.対象のGreengrassグループをクリック\n3.サブスクリプションをクリック\n4.今回はgg-test-001がhell/world/pubsubにパブリッシュしたメッセージをgg-test-002でサブスクライブできるよう、以下の通り設定して「完了」をクリック\n\n* ソース：gg-test-001\n* ターゲット：hell/world/pubsub\n* topic：gg-test-002\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/d7f82151-de43-4f76-ecec-e8eea162db1a.png)\n5.サブスクリプションに追加されたことを確認する\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/216c8987-a932-c923-815a-5c37209184f1.png)\n6.アクション > デプロイ の順にクリック\n7.「正常に完了しました」と表示されることを確認する\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/a4e9e6cb-1428-e948-f8a9-ff7b8c8665fe.png)\n#2-2　basicDicovery.py によるPub/Subの実施\n`basicDiscovery.py` でGreengrassデバイス間の通信が出来ることを確認します。\n参考：[通信をテストする](https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/test-comms.html)\n\n1.「1-1　新規のデバイスをグループに追加」で取得したtar.gzファイルとルートCA証明書をGreengrassデバイスのディレクトリに格納する\n※今回はMacにDeviceというディレクトリを作成して以降手順を実施\n2.tar.gzファイルを解凍\n\n```bash\ncd Device\ntar -xzf xxxxxxxxxx-setup.tar.gz\n```\n※解凍後、ディレクトリには以下のファイルが存在する\n\n* xxxxxxxxxx-setup.tar.gz\n* xxxxxxxxxx.private.key\n* xxxxxxxxxx.public.key\n* xxxxxxxxxx.cert.perm\n* AmazonRootCA1.pem　※ルート証明書\n\n3.AWS IoT Device SDK for Pythonをインストールする\n※以降の作業はPublishするデバイス、Subscribeするデバイス双方ともに必要\n参考：[をインストールするAWS IoT Device SDK for Python](https://docs.aws.amazon.com/ja_jp/greengrass/v1/developerguide/IoT-SDK.html)\n\n```bash\n#2.7未満、3.3未満の場合はバージョンアップが必要\n python --version\n\n#OpenSSLは1.01以降が必要\npython\n>>>import ssl\n>>>print ssl.OPENSSL_VERSION\n\n#確認したらPythonシェルを終了\n>>>exit()\n\n#AWS IoT Device SDK for Pythonをインストールする \ncd ~\n\ngit clone https://github.com/aws/aws-iot-device-sdk-python.git\n\ncd aws-iot-device-sdk-python\n\nsudo python setup.py install\n```\n4.AWS IoT Device SDK for Pythonのサンプルコード `basicDicovery.py` を証明書を格納したディレクトリにコピーする\n\n```\n#証明書を格納したディレクトリに移動\ncd /xxx/xxx/Device\n\n#basicDicovery.py をコピー\ncp ~/aws-iot-device-sdk-python/samples/greengrass/basicDicovery.py ./\n```\n5.AWS IoT Coreのマネジメントコンソールで左のメニューから設定をクリックし、エンドポイント情報をコピーする\n※有効になっていない場合は有効にする\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/a5379b68-b6f7-9212-a8af-6283b1026d79.png)\n6.Publishを行う\n※サブスクリプションでソースに指定したデバイスから実施\n\n```python\npython basicDiscovery.py --endpoint [エンドポイントのURL] \\\n --rootCA [ルート証明書] --cert [デバイス証明書] --key [秘密鍵] \\\n --thingName [モノの名前] --topic 'hello/world/pubsub' --mode publish \\\n --message 'Hello World'\n\n#成功すると以下のメッセージが \"sequence\"をインクリメントしながら流れ続ける（Ctrl + C で止まる）\n2021-03-29 16:26:37,233 - AWSIoTPythonSDK.core.protocol.mqtt_core - INFO - Performing sync publish...\nPublished topic hello/world/pubsub: {\"message\": \"Hello World\", \"sequence\": 0}\n```\n7.Subscribeを行う\n※サブスクリプションでターゲットに指定したデバイスから実施\n\n```python\npython basicDiscovery.py --endpoint [エンドポイントのURL] \\\n --rootCA [ルート証明書] --cert [デバイス証明書] --key [秘密鍵] \\\n --thingName [モノの名前] --topic 'hello/world/pubsub' --mode subscribe\n\n#成功すると以下の通り、PublishされたメッセージをSubscribeしつづける（Ctrl + C で止まる）\n2021-03-29 16:26:38,712 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Produced [message] event\n2021-03-29 16:26:38,712 - AWSIoTPythonSDK.core.protocol.internal.workers - DEBUG - Dispatching [message] event\n2021-03-29 16:26:38,712 - AWSIoTPythonSDK.core.protocol.internal.clients - DEBUG - Invoking custom event callback...\nReceived message on topic hello/world/pubsub: b'{\"message\": \"Hello World\", \"sequence\": 1}'\n```\n#3　トラブルシューティング\n上記の通り、`basicDiscovery.py` を実行した際に、Pub/Subともに以下の通りエラーが発生してしまいました（抜粋）。\n\n* Pub側：`ConnectionRefusedError: [Errno 111] Connection refused`\n* Sub側：`ConnectionRefusedError: [Errno 61] Connection refused`\n\nConnectionが明示的に拒絶されているので、権限周り、接続設定を調べました。\n\n* デバイス証明書が有効になっているか\n* デバイス証明書にポリシーがアタッチされているか\n* ポリシーは通信を許可しているか\n* サブスクリプションの設定は間違っていないか\n\nしかし、いずれも問題はありませんでした。\nまた、いずれのデバイスでもIoT Coreと直接やり取りする `basicPubSub.py` も実行し、こちらでは疎通が確認できました。\nそのため、Greengrass側の設定ミスであることが分かります。\n※`basicPubSub.py` もAWS IoT Device SDK for Pythonのサンプルコード\n\n結果として、コマンド実行時の以下メッセージが解決の決め手になりました。\n\n> Trying to connect to core at 127.0.0.1:8883\n\nGreengrassコアデバイスに接続しに行くはずが、localhostのループバックアドレスに接続しようとしていました。\nGreengrassデバイスはIoT CoreからGreengrassコアデバイスの情報を取得して、接続しにいきます。\nそのため、IoT CoreのマネジメントコンソールでGreengrassのコア情報を確認すると以下の通りでした。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/13be0d30-6f91-e48a-29e0-f0c6aa95ae38.png)\nここの接続情報の一番上を使って接続しているようでした。\n\n上記画面の編集をクリックし、127.0.0.1を削除してからコマンドを再度実行すると、エラーは解消されました。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1001693/dbdb3667-a449-0bff-66f3-2a0d59e51e68.png)\n#4　おわりに\nGreengrassのグループへのデバイス追加、メッセージのやり取りまでを確認できました。\n自動接続情報の検出で、127.0.0.1を拾ってきてしまうのは困りものですが、レアケースなのでしょうか？\nここはもう少し調べてみようと思います。\n","user":"kt-yt","created_at":"2021-03-30T14:59:21+09:00","updated_at":"2021-03-30T14:59:21+09:00"},{"url":"https://qiita.com/masaaki-murakami/items/6b973c90c2c179a4ae0b","title":"“５G”で起きている事","body":"**　ICTビジネスは 「今、米国で起きている事が３～５年後に日本で起きる」「今や中国が最も進んでおり、それを追いかける日本」 と考えられがちですが５Gのビジネスは一概にそうとは言えない状況にあります。以下では、それを解説しました。**\n##§１　デジタル市場を分析する##\n####1. ガートナー ハイプ・サイクルの読み方####\n**　▶ Hype（ハイプ）は、“誇大な宣伝によって人が夢中になったり盛り上がったりする”といった意味**\n\nhttps://www.slideshare.net/MMurakamiMurakami/ss-245313545\n\n####2. 分析例　RPAと5Gの比較\n**■ 5G　　成長期の入り口のフェーズ。ビジネスとしてはギャンブル性が高いが、ＴＯＰ企業としてビジネスモデルの中心になり高い利益率をえるチャンスがある。**\n**■ RPA　　ライフ・サイクルの成長期の後半にあり、ビジネスとしては分かり易いが、競争が激しくなり利益が出にくいフェーズ入りつつある。**\n\n\nhttps://www.slideshare.net/MMurakamiMurakami/2-rpa-vs-5g\n\n##§２　DXを進めるための“5G”の基礎知識\n**　▶ ５Gは「一強独占のインターネット型のビジネス・モデル」を変える**\n####1. “５G”で 「何ができるか？」\n**　▶ “インターネット”で出来なかったことが“5G”で出来る。**\n**　▶ ❶スライシング、❷ MEC、❸ローカル５G を使って実現する。**\n\nhttps://www.slideshare.net/MMurakamiMurakami/1-g-245311727\n\n####2. “５G”に 「いつ着手するか？」\n**　▶ “５G環境”は前倒し ⇒ ５Gビジネスでの先行者利益が得られる時期**\n\n**　【モビリティ分野】　法整備で先行した日本は、欧米より先行する事例も\n　　　　　　　　　　　 “運転士がいらない自動運転（レベル４）”の実用化が来年に実現**\n**　【建設分野】　遠隔施工の“道路工事”“ダム建設”“ビル建設”が実用段階へ**\n**　【医療分野】　遠隔手術も現実的に**\n\nhttps://www.slideshare.net/MMurakamiMurakami/2-g-245312366\n\n####3. “５G”の 「ビジネス・モデル」\n**　▶ 米国、中国のICTビジネスモデルが参考にならない“５G”**\n**　▶ 日本のビジネス・モデルを、欧米が参考にする！？**\n\nhttps://www.slideshare.net/MMurakamiMurakami/3-g-245312807\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/585213/2f0caf7d-26e9-5f4f-403c-e7327c7f0d12.png)\n\n##§３　ケーススタディ\n**「モビリティ分野」「建設分野」「医療分野」「スマートシティ分野」　等**\n          T.B.A.\n","user":"masaaki-murakami","created_at":"2021-03-30T14:57:24+09:00","updated_at":"2021-03-30T14:59:37+09:00"},{"url":"https://qiita.com/ymap/items/a39e7e77f0d92ab4b4ae","title":"PHPの標準関数をRubyで書く（配列操作編）","body":"## はじめに\n\nPHPの標準関数をRubyで書いてみました。\n簡単に書けそうなものだけパズル感覚で書いてます。\n\n配列操作編です。\n\nPHPの添字配列はArray、連想配列はHashに対応させました。\n特に差し支えなさそうなケースでは他の型でも許容としています。（返り値がEnumeratorになる等）\n\n引数と返り値の型はテーブルで記載しました。\n\n## array_chunk($array, $chunk)\n[PHP: array_chunk - Manual](https://www.php.net/manual/ja/function.array-chunk.php)\n\n|||\n---|---\narray|Array\nchunk|Integer\nreturn|Enumerator\n```ruby:Ruby\narray.each_slice(chunk)\n```\n\n|||\n---|---\narray|Hash\nchunk|Integer\nreturn|Hash\n```ruby:Ruby\narray.each_slice(chunk).map(&:to_h)\n```\n\n## array_column($array, $column_key)\n[PHP: array_column - Manual](https://www.php.net/manual/ja/function.array-column.php)\n\n|||\n---|---\narray|Array&lt;Array &#124; Hash&gt;\ncolumn_key|untyped\nreturn|Enumerator\n```ruby:Ruby\narray.map { |v| v[column_key] }\n```\n\n|||\n---|---\narray|Hash&lt;untyped, Array &#124; Hash&gt;\ncolumn_key|untyped\nreturn|Hash\n```ruby:Ruby\narray.transform_values { |v| v[column_key] }\n```\n\n## array_combine($keys, $values)\n[PHP: array_combine - Manual](https://www.php.net/manual/ja/function.array-combine.php)\n\n|||\n---|---\nkeys|Array\nvalues|Array\nreturn|Hash\n```ruby:Ruby\nkeys.zip(values).to_h\n```\n\n## array_count_values($array)\n[PHP: array_count_values - Manual](https://www.php.net/manual/ja/function.array-count-values.php)\n\n|||\n---|---\narray|Array\nreturn|Hash\n```ruby:Ruby\narray.tally\n```\n\n|||\n---|---\narray|Hash\nreturn|Hash\n```ruby:Ruby\narray.values.tally\n```\n\n## array_diff($array, ...$arrays )\n[PHP: array_diff - Manual](https://www.php.net/manual/ja/function.array-diff.php)\n\n※入力がArrayのケースは省略。返り値のindexが振り直されず飛び飛びになる為。\n\n|||\n---|---\narray|Hash\narrays|Array&lt;Hash&gt;\nreturn|Hash\n```ruby:Ruby\narray.filter { |_, v| arrays.flat_map(&:values).none? { |vv| v == vv } }\n```\n\n## array_fill_keys($keys, $value)\n[PHP: array_fill_keys - Manual](https://www.php.net/manual/ja/function.array-fill-keys.php)\n\n|||\n---|---\nkeys|Array\nvalue|untyped\nreturn|Hash\n```ruby:Ruby\nkeys.zip([value].cycle).to_h\n```\n\n## array_fill($start_index, $count, $value)\n[PHP: array_fill - Manual](https://www.php.net/manual/ja/function.array-fill.php)\n\n|||\n---|---\nstart_index|0\ncount|Integer\nvalue|untyped\nreturn|Array\n```ruby:Ruby\n[value] * count\n```\n\n|||\n---|---\nstart_index|Integer ※0以上\ncount|Integer\nvalue|untyped\nreturn|Hash\n```ruby:Ruby\n(start_index..).take(count).zip([value].cycle).to_h\n```\n\n## array_filter($array, $callback, $mode)\n[PHP: array_filter - Manual](https://www.php.net/manual/ja/function.array-filter.php)\n\n※入力がArrayのケースは省略。返り値のindexが振り直されず飛び飛びになる為。\n\n|||\n---|---\narray|Hash\ncallback|Proc\nmode|ARRAY_FILTER_USE_BOTH\nreturn|Hash\n```ruby:Ruby\narray.filter { |k, v| callback.(v, k) }\n```\n\n## array_flip($array)\n[PHP: array_flip - Manual](https://www.php.net/manual/ja/function.array-flip.php)\n\n|||\n---|---\narray|Array\nreturn|Hash\n```ruby:Ruby\narray.map.with_index.to_h\n```\n\n|||\n---|---\narray|Hash\nreturn|Hash\n```ruby\narray.invert\n```\n\n## array_intersect($array, ...$arrays)\n[PHP: array_intersect - Manual](https://www.php.net/manual/ja/function.array-intersect.php)\n\n※入力がArrayのケースは省略。返り値のindexが振り直されず飛び飛びになる為。\n\n|||\n---|---\narray|Hash\narray|Array&lt;Hash&gt;\nreturn|Hash\n```ruby:Ruby\narray.filter { |_, v| arrays.flat_map(&:values).any? { |vv| v == vv } }\n```\n\n## array_key_exists($key, $array)\n[PHP: array_key_exists - Manual](https://www.php.net/manual/ja/function.array-key-exists.php)\n\n|||\n---|---\nkey|Integer\narray|Array\nreturn|TrueClass &#124; FalseClass\n```ruby:Ruby\narray.each_index.include?(key)\n```\n\n|||\n---|---\nkey|Integer\narray|Hash\nreturn|TrueClass &#124; FalseClass\n```ruby:Ruby\narray.key?(key)\n```\n\n## array_key_first($array)\n[PHP: array_key_first - Manual](https://www.php.net/manual/ja/function.array-key-first.php)\n\n|||\n---|---\narray|Array\nreturn|Integer\n```ruby:Ruby\n0\n```\n\n|||\n---|---\narray|Hash\nreturn|untyped\n```ruby:Ruby\narray.keys.first\n```\n\n## array_key_last($array)\n[PHP: array_key_last - Manual](https://www.php.net/manual/ja/function.array-key-last.php)\n\n|||\n---|---\narray|Array\nreturn|Integer\n```ruby:Ruby\narray.count.pred\n```\n\n|||\n---|---\narray|Hash\nreturn|untyped\n```ruby:Ruby\narray.keys.last\n```\n\n## array_keys($array)\n[PHP: array_keys - Manual](https://www.php.net/manual/ja/function.array-keys.php)\n\n|||\n---|---\narray|Array\nreturn|Enumerator\n```ruby:Ruby\narray.each_index\n```\n\n|||\n---|---\narray|Hash\nreturn|Array\n```ruby:Ruby\narray.keys\n```\n\n## array_map($callback, $array, ...$arrays)\n[PHP: array_map - Manual](https://www.php.net/manual/ja/function.array-map.php)\n\n|||\n---|---\ncallback|Proc\narray|Array\narrays|Array&lt;Array&gt;\nreturn|Enumerator\n```ruby:Ruby\narray.zip(*arrays).map(&callback)\n```\n\n|||\n---|---\ncallback|Proc\narray|Hash\narrays|Array&lt;Hash&gt;\nreturn|Enumerator\n```ruby:Ruby\narray.values.zip(*arrays.map(&:values)).map(&callback)\n```\n\n## array_merge(...$arrays)\n[PHP: array_merge - Manual](https://www.php.net/manual/ja/function.array-merge.php)\n\n|||\n---|---\narrays|Array&lt;Array&gt;\nreturn|Array\n```ruby:Ruby\narrays.inject(:+)\n```\n\n|||\n---|---\narrays|Array&lt;Hash&gt;\nreturn|Hash\n```ruby:Ruby\narrays.inject(:merge)\n```\n\n## array_pad($array, $length, $value)\n[PHP: array_pad - Manual](https://www.php.net/manual/ja/function.array-pad.php)\n\n|||\n---|---\narray|Array\nlength|Integer ※0以上\nvalue|untyped\nreturn|Array\n```ruby:Ruby\narray + [value] * [length - array.count, 0].max\n```\n\n|||\n---|---\narray|Array\nlength|Integer ※0未満\nvalue|untyped\nreturn|Array\n```ruby:Ruby\n[value] * [-length - array.count, 0].max + array\n```\n\n## array_pop($array)\n[PHP: array_pop - Manual](https://www.php.net/manual/ja/function.array-pop.php)\n\n|||\n---|---\narray|Array\nreturn|untyped\n```ruby:Ruby\narray.pop\n```\n\n|||\n---|---\narray|Hash\nreturn|untyped\n```ruby:Ruby\narray.delete(array.keys.last)\n```\n\n## array_product($array)\n[PHP: array_product - Manual](https://www.php.net/manual/ja/function.array-product.php)\n\n|||\n---|---\narray|Array&lt;Integer &#124; Float&gt;\nreturn|Integer &#124; Float\n```ruby:Ruby\narray.inject(:*)\n```\n\n## array_push(&$array, ...$values)\n[PHP: array_push - Manual](https://www.php.net/manual/ja/function.array-push.php)\n\n|||\n---|---\narray|Array\nvalues|untyped\nreturn|Array\n```ruby:Ruby\narray.push(*values)\n```\n\n## array_rand($array, $num)\n[PHP: array_rand - Manual](https://www.php.net/manual/ja/function.array-rand.php)\n\n|||\n---|---\narray|Array\nnum|Integer\nreturn|Array\n```ruby:Ruby\narray.each_index.to_a.sample(num).sort\n```\n\n|||\n---|---\narray|Hash\nnum|Integer\nreturn|Array\n```ruby:Ruby\narray.keys.sample(num).sort_by { |v| array.keys.index(v) }\n```\n\n## array_reduce($array, $callback, $initial)\n[PHP: array_reduce - Manual](https://www.php.net/manual/ja/function.array-reduce.php)\n\n|||\n---|---\narray|Array\ncallback|Proc\ninitial|untyped\nreturn|untyped\n```ruby:Ruby\narray.inject(initial, &callback)\n```\n\n|||\n---|---\narray|Hash\ncallback|Proc\ninitial|untyped\nreturn|untyped\n```ruby:Ruby\narray.values.inject(initial, &callback)\n```\n\n## array_reverse($array, $preserve_key)\n[PHP: array_reverse - Manual](https://www.php.net/manual/ja/function.array-reverse.php)\n\n|||\n---|---\narray|Array\npreserve_key|FalseClass\nreturn|Enumerator\n```ruby:Ruby\narray.reverse\n```\n\n|||\n---|---\narray|Hash\npreserve_key|TrueClass\nreturn|Hash\n```ruby:Ruby\narray.reverse_each.to_h\n```\n\n## array_search($needle, $haystack, $strict)\n[PHP: array_search - Manual](https://www.php.net/manual/ja/function.array-search.php)\n\n|||\n---|---\nneedle|untyped\nhaystack|Array\nstrict|※言語仕様が違うので省略\nreturn|Integer\n```ruby:Ruby\nhaystack.index(needle)\n```\n\n|||\n---|---\nneedle|untyped\nhaystack|Hash\nstrict|※言語仕様が違うので省略\nreturn|untyped\n```ruby:Ruby\nhaystack.key(needle)\n```\n\n## array_shift(&$array)\n[PHP: array_shift - Manual](https://www.php.net/manual/ja/function.array-shift.php)\n\n|||\n---|---\narray|Array\nreturn|untyped\n```ruby:Ruby\narray.shift\n```\n\n|||\n---|---\narray|Hash\nreturn|untyped\n```ruby:Ruby\narray.shift.then { |v| array.empty? ? v : v.last }\n```\n\n## array_slice($array, $offset, $length, $preserve_keys)\n[PHP: array_slice - Manual](https://www.php.net/manual/ja/function.array-slice.php)\n\n|||\n---|---\narray|Array\noffset|Integer\nlength|Integer ※0以上\npreserve_keys|FalseClass\nreturn|Array\n```ruby:Ruby\narray[offset, length]\n```\n\n|||\n---|---\narray|Hash\noffset|Integer\nlength|Integer ※0以上\npreserve_keys|TrueClass\nreturn|Hash\n```ruby:Ruby\narray.slice(*array.keys[offset, length])\n```\n\n## array_sum($array)\n[PHP: array_sum - Manual](https://www.php.net/manual/ja/function.array-sum.php)\n\n|||\n---|---\narray|Array\nreturn|Integer &#124; Float\n```ruby:Ruby\narray.sum\n```\n\n|||\n---|---\narray|Hash\nreturn|Integer &#124; Float\n```ruby:Ruby\narray.values.sum\n```\n\n## array_unique\n[PHP: array_unique - Manual](https://www.php.net/manual/ja/function.array-unique.php)\n\n|||\n---|---\narray|Array\nreturn|Array\n```ruby:Ruby\narray.uniq\n```\n\n|||\n---|---\narray|Hash\nreturn|Hash\n```ruby:Ruby\narray.invert.invert\n```\n\n※重複した要素は前ではなく後の要素が残るので注意\n\n## array_unshift(&$array, ...$values)\n[PHP: array_unshift - Manual](https://www.php.net/manual/ja/function.array-unshift.php)\n\n|||\n---|---\narray|Array\nreturn|Array\n```ruby:Ruby\n(array = array.unshift(*values)).count\n```\n\n## array_values($array)\n[PHP: array_values - Manual](https://www.php.net/manual/ja/function.array-values.php)\n\n|||\n---|---\narray|Hash\nreturn|Array\n```ruby:Ruby\narray.values\n```\n\n## array_walk(&$array, $callback, $userdata)\n[PHP: array_walk - Manual](https://www.php.net/manual/ja/function.array-walk.php)\n\n|||\n---|---\narray|Array\ncallback|Proc\nuserdata|untyped\nreturn|TrueClass\n```ruby:Ruby\ntrue | array.each_with_index(&->(*vs){ vs << userdata } >> callback)\n```\n\n|||\n---|---\narray|Hash\ncallback|Proc\nuserdata|untyped\nreturn|TrueClass\n```ruby:Ruby\ntrue | array.each(&->(kv){ kv.reverse << userdata } >> callback)\n```\n\n## in_array($needle, $haystack, $strict)\n[PHP: in_array - Manual](https://www.php.net/manual/ja/function.in-array.php)\n\n|||\n---|---\nneedle|untyped\nhaystack|Array\nstrict|※言語仕様が違うので省略\n```ruby:Ruby\nhaystack.include?(needle)\n```\n\n|||\n---|---\nneedle|untyped\nhaystack|Hash\nstrict|※言語仕様が違うので省略\n```ruby:Ruby\nhaystack.value?(needle)\n```\n\n## 参考文献\n\n- Class array (Ruby 3.0.0 リファレンスマニュアル). (n.d.). docs.ruby-lang.org. Retrieved March 30, 2021, from https://docs.ruby-lang.org/ja/latest/class/Array.html\n\n- Class hash (Ruby 3.0.0 リファレンスマニュアル). (n.d.). docs.ruby-lang.org. Retrieved March 30, 2021, from https://docs.ruby-lang.org/ja/latest/class/Hash.html\n\n- Module enumerable (Ruby 3.0.0 リファレンスマニュアル). (n.d.). docs.ruby-lang.org. Retrieved March 30, 2021, from https://docs.ruby-lang.org/ja/latest/class/Enumerable.html\n\n- Array_chunk. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-chunk.php\n\n- Array_column. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-column.php\n\n- Array_combine. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-combine.php\n\n- Array_count_values. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-count-values.php\n\n- Array_diff. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-diff.php\n\n- Array_fill_keys. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-fill-keys.php\n\n- Array_fill. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-fill.php\n\n- Array_filter. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-filter.php\n\n- Array_flip. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-flip.php\n\n- Array_intersect. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-intersect.php\n\n- Array_key_exists. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-key-exists.php\n\n- Array_key_first. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-key-first.php\n\n- Array_key_last. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-key-last.php\n\n- Array_keys. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-keys.php\n\n- Array_map. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-map.php\n\n- Array_merge. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-merge.php\n\n- Array_pad. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-pad.php\n\n- Array_pop. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-pop.php\n\n- Array_product. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-product.php\n\n- Array_push. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-push.php\n\n- Array_rand. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-rand.php\n\n- Array_reduce. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-reduce.php\n\n- Array_reverse. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-reverse.php\n\n- Array_search. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-search.php\n\n- Array_shift. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-shift.php\n\n- Array_slice. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-slice.php\n\n- Array_sum. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-sum.php\n\n- Array_unique. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-unique.php\n\n- Array_unshift. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-unshift.php\n\n- Array_values. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-values.php\n\n- Array_walk. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.array-walk.php\n\n- In_array. (n.d.). PHP: Hypertext Preprocessor. Retrieved March 30, 2021, from https://www.php.net/manual/ja/function.in-array.php\n","user":"ymap","created_at":"2021-03-30T14:55:09+09:00","updated_at":"2021-03-30T14:55:09+09:00"},{"url":"https://qiita.com/superrino130/items/f1da8e0a1ad03b84785b","title":"Elmer の 物理モデル定義ファイル の 追加方法","body":"# はじめに\n何故か`FEM`をやることになりました。\n# Elmer\n[OpenFOAMによる熱移動と流れの数値解析](https://www.morikita.co.jp/books/book/2779)を図書館で借りて読んで、その勢いで[「Elmer」ではじめる連成解析](http://www.kohgakusha.co.jp/books/detail/978-4-7775-2128-9)を買いました。\n\nQiita先輩諸氏の、[書評：｢Elmer｣ではじめる連成解析](https://qiita.com/Sagittarius_Chiron/items/cae5439c0e0434f6a294)なども参考にさせていただいております。\n# 物理モデル定義ファイルの追加１\n```ba.sh\nsudo cp /usr/share/ElmerGUI/edf-extra/elasticplate.xml /usr/share/ElmerGUI/edf/\n```\nコマンドラインで`edf-extra`から`edf`に定義ファイルをコピーします。\n# 物理モデル定義ファイルの追加２\n![20210330a.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/538241/f78c848e-d960-d76b-1427-29aa48f3d3c8.png)\n`GUI`の`File -> New project...`からダイアログを開いて定義ファイルを追加します。\n# まとめ\n+ FEMをやる\n+ 遠心力による変位を知りたい\n","user":"superrino130","created_at":"2021-03-30T14:53:46+09:00","updated_at":"2021-03-30T14:53:46+09:00"},{"url":"https://qiita.com/Oyuki123/items/10e4bc6a6d0ddd9d6ea8","title":"Phython参考サイト","body":"\n###『退屈なことはPythonにやらせよう』\nPythonの使い方から説明してくれて、使えたらこんなことができるとイメージしやすい本。\nプログラミングのオープンチャットで聞いた。\n\n英語なら無料\b↓\nhttps://automatetheboringstuff.com/\n","user":"Oyuki123","created_at":"2021-03-30T14:52:53+09:00","updated_at":"2021-03-30T14:52:53+09:00"},{"url":"https://qiita.com/Chiri_Tsumo/items/170ef392971a71156e77","title":"OpenSSHデバッグ方法","body":"# 事象\nWindowsServerにOpenSSHを入れて、外からSFTP通信を試みたが、\n上手く行かない。SSHサーバーのログが見たい。\n\n# ログ取得方法\n① sshd.exe実行によるプロセスの二重起動を防ぐため、\n以下のサービスを停止。\n\n* OpenSSH Server\n* OpenSSH Authentication Agent\n\n② powershellで以下のコマンドレット実行。\nOpenSSHのパスを通していない場合は、OpenSSHが格納されているフォルダまでcdする。\n`sshd.exe -ddd`\n\nオプションの`d`の数が増えるほど詳細なログを取得できる（MAX3つまで）\n`Server listening on 0.0.0.0 port 22`\nと表示されたら、ログ取得準備完了。\n\n③ この状態で外からSFTP通信を実行すると、\npowershellの続きにログが吐かれることを確認できる。\n","user":"Chiri_Tsumo","created_at":"2021-03-30T14:52:23+09:00","updated_at":"2021-03-30T14:52:23+09:00"},{"url":"https://qiita.com/Oyuki123/items/9505ab4614b3eace2792","title":"Rails x Docker x LINE messaging APIでLINEのチャットボットを作ろうかな〜【編集中】","body":"\n\n#LINE Developers公式のチュートリアルもあるよ\nhttps://developers.line.biz/ja/docs/messaging-api/using-flex-message-simulator/\n\n\n####Docker環境の構築参照:[山の天気を教えてくれるLinebotを作る on Heroku(Freeプラン)](https://qiita.com/ham0215/items/0cff5eb7d1398f70141d)\n\n\n[LINEのbotでメッセージを送受信するまでの実装の流れ（Rails+Messaging API）](https://medium.com/@wktq/line%E3%81%AEbot%E3%81%A7%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E9%80%81%E5%8F%97%E4%BF%A1%E3%81%99%E3%82%8B%E3%81%BE%E3%81%A7%E3%81%AE%E5%AE%9F%E8%A3%85%E3%81%AE%E6%B5%81%E3%82%8C-rails-messaging-api-f1073b501bbc)\n\n[【Ruby on Rails 備忘録】LINE Messaging API でチャットボットを作る\n](http://tatsuya1970.com/?p=8644)\n\n[Ruby on Rails でlinebot。メンヘラbotを作ってみた。](https://qiita.com/clubysg/items/70309673376fd4cc7b2b)\n\n[Line-botをrailsで作ってみた。\n](https://qiita.com/sakakinn/items/e771f3d7732f6bb655d3)\n参考リンクがいっぱいあって便利。\n","user":"Oyuki123","created_at":"2021-03-30T14:50:32+09:00","updated_at":"2021-03-30T14:50:32+09:00"},{"url":"https://qiita.com/keiichiro6/items/05c8be5e142380d8a006","title":"フォームHTMLでAuthenticity_tokenが生成されるのはなぜなのか","body":"##はじめに\nこの記事では、Railsチュートリアル第7章で登場したフォームのHTMLソースの2つ目のタグの中にある、Authenticity_tokenが生成される理由について記します。\n#なぜ生成されるのか?\n大雑把に言えば、ユーザーが本当にそのフォームに記入をする意思を持ってフォームを呼び出したことを明確にするためです。逆にユーザーの意思に反してフォームへの記入がされる場合とは何かというと、「クロスサイトリクエストフォージェリ」という攻撃を受けた場合です。これについても大雑把な説明になってしまいますが、何らかの悪意を持った攻撃者が被害者を誘導し、特定のページにPOSTリクエストを送るプログラムを被害者に実行させる攻撃をクロスサイトリクエストフォージェリと呼びます。この攻撃によって為されたPOSTリクエストは、事前のフォームページへのGETリクエストを伴いません。そのため、攻撃と区別するために、ユーザーが意思を持ってフォームを記入する場合は、事前にフォームページをGETリクエストで取得した証拠をアプリケーションのサーバー側に示すことが必要になり、その証拠としてAuthenticity_tokenが使われます。以上がAuthenticity_tokenが生成される理由になります。\n","user":"keiichiro6","created_at":"2021-03-30T14:48:18+09:00","updated_at":"2021-03-30T14:50:56+09:00"},{"url":"https://qiita.com/denshoNeko/items/5f75ae4b3be931654cd0","title":"（備忘録）SQL Serverのインストール、データベースおよびテーブルの作成方法","body":"# まえがき\n　システム初学者がSQL Serverを用いたデータベースサーバーの開発実務に向け、学習したこと、調べたことを自分用備忘録として書いていきます。極力注意していますが、初学者であるため、間違い、解釈ミス等が含まれていた場合はご了承、ご指摘いただけると幸いです。\n　本記事では、関連用語の整理、SQL Serverのインストール、基本的な使用方法、サンプルとなるデータベースとテーブルの作成方法について、備忘録としてまとめています。\n\n## 関連用語の整理\n### RDB（Relational Data Base：リレーショナルデータベース、関係データベース）\n　行、列で構成された複数の表（テーブル）に格納されているデータを関連付けて管理するデータース方式。リレーショナルデータベース以外には、階層型データベース、ネットワーク型データベースがある。\n\n### SQL（Structued Query Language）\n　リレーショナルデータベースを操作するための言語。SQL言語を用いて実際にデータベースを操作するコードを記述していく。\n\n### SQL Server(Microsoft SQL Server)\n SQL ServerはMicrosoft社が提供するRDBMS(Relational Database Management System：リレーショナル型のデータベース管理システム)であり、Windowsサーバーで利用されることが多い。SQL Serverを利用することにより、データベースへのデータの登録、削除および検索、抽出処理等を実行できるようになる。\n\n# SQL Serverによるデータベースの作成\n　SQL ServerはMicrosoft社が提供するRDBMS(Relational Database Management System：リレーショナル型のデータベース管理システム)である。SQL Serverを利用することにより、Windowsサーバー上のデータベースへのデータ登録、削除および検索、抽出処理等を実行できるようになる。\n　学習用途に利用できる無償版SQL Serverは「Express」と「Developer」がある。Expressはいわゆる機能制約版で、小規模サーバー向けの開発、運用に使用できるエディションである。Developerは全機能を備えているが、開発およびテストのみに使用可能であり、運用には別途費用が必要なエディションである。今回はExpress版で学習を進めることにする。\n\n## SQL Serverのダウンロード\n　以下のMicrosoft公式サイトからダウンロードする。ページの半ばにあるExpessエディションの「今すぐダウンロードする」を押すとダウンロードが始まる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/45ff2b12-63a9-d0cb-ed4d-9e3143f106f8.png)\n\nhttps://www.microsoft.com/ja-jp/sql-server/sql-server-downloads\n\nダウンロードしてきたSQL Serverのインストールファイルを実行\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/99d0ab8d-cbd2-855f-d9b9-8c424a56c13d.png)\n\n「基本」を選択\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/3d41c12f-3ce0-f7e1-0820-866030d44015.png)\n\nライセンス条項を読み、「同意する」\n\n「インストール」を押すと、ダウンロードおよびインストールがはじまる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/3f2c732e-79ad-8b3d-0c49-bd8198cb0945.png)\n\n　インストールが完了すると、以下の画面となる。学習にあたってはSSMS（SQL Server Management Studio）も必要になってくるので、画面右下の「SSMSのインストール」を選択すると、ブラウザが開かれ「SQL Server Management Studio (SSMS) のダウンロード」ページが表示される。 ※ブラウザを開いた後は、SQL Serverのインストーラは閉じてもOK\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/fa754e63-46c4-0940-4d16-400ae8e8dcbf.png)\n\n\nページを下にスクロールし、「日本語」を選択すると日本語版がダウンロードされる。　\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/b708dad3-d9b5-bfb3-acd1-7acd89153bff.png)\n\nダウンロードされたSSMSインストールファイルを実行\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/80a75400-a184-de18-63a5-2484634946ec.png)\n\nインストールを選択\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/224da05c-23cb-98f2-dd67-f3c5bf50d0a6.png)\n\n閉じるを選択。これでSSMSのインストールも完了\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/26e4597b-bee5-874b-53e6-4473272d3214.png)\n\n## SQL Serverの動作状況の確認\n　\" スタートメニュー ⇒ Microsoft SQL Server 2019 ⇒ SQL Server 2019 構成マネージャー \"の順にたどりSQL Server 2019 構成マネージャーを起動すると、SQL ServerをインストールしたPC上で動作しているSQL Serverの動作状況を確認することができる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/808f3298-e439-defe-7e5f-15286ec26979.png)\n　左側のペインで「SQL Serverのサービス」を選択すると、右側のペインにSQL Serverのサービス一覧（サービス：バックグラウンドで動動作するプログラム）が表示される。このうち、「SQL Server（SQLEXPRESS）」という名称のSQL Serverが実行中であることがわかる。この「SQLEXPRESS」という名のSQL ServerはSQLServer 2019 Expressエディションをインストールした際に自動的に生成、実行されるインスタンス（サービスの単位）であり、このインスタンス上にデータベースを作成していく。１つのインスタンスに複数のデータベースを作成することも可能。\n\n# データベースの作成手順\n　データベースを作成するために、Microsoft SQL Server Management Studioを使用する。Management StudioはSQL Serverにおけるデータベースの作成やテーブルの定義、各種データの登録、データベースのバックアップ設定など、SQL Serverデータベースに関する管理操作を行うことができるツールである。\n　\"スタートメニュー ⇒ Microsoft SQL Server Tools 18 ⇒ Microsoft SQL Server Management Studio\"からManagement Studioを起動すると下のような「サーバーへの接続」ウインドウが表示されるので、「接続」。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/c4c11b06-c27d-b00d-f15a-2585fa114fa6.png)\n\n接続したら、Management Studioの左側ペインにある「オブジェクト エクスプローラー」から「データベース」を右クリックし、メニューの「新しいデータベース」を選択する。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/f14bff25-abf0-7186-1fa6-7d2e9984bd2a.png)\n\n新しいデータベースを作成するためのウインドウが開く。ここではデータベース名欄に「testdb」と入力し、OK。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/e2d36dc1-c6e0-d13d-6027-33466b711e16.png)\n\nManagement Studioの画面に戻り「データベース」を展開すると、先ほど作成した「testdb」が作られていることが分かる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/70c2ed39-7892-2ea0-db22-272891cb07b1.png)\n\n\n# テーブルの作成\n　次に、作成したtestdbデータベースにテーブルを作成する。オブジェクトエクスプローラーのtestdbを展開すると、「テーブル」という項目があるので、右クリック ⇒ 新規作成 ⇒ テーブル を選ぶ。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/3c3a58c3-9f69-033d-5a00-a28775042d5c.png)\n\nテーブルが作成されると、下のようにテーブルデザイナが表示される。テーブルデザイナでは、テーブルの列を定義することができる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/213f004b-af34-066b-50ba-c3d8db85dc9e.png)\n\nここではサンプルテーブルとして、列を下記のように設定した。（※縦に並んでいるが、設定しているのは「列」である点に注意）\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/03bfe695-fe34-acbf-e107-413108afa6d6.png)\n\nテーブルが出来たら、「主キー」を設定する。ここでは、idを主キーとする。idの左側のセル部分を右クリックし、「主キーの設定」を選ぶ。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/6e5f2ad1-1fcc-8409-0d30-ae38b70cc415.png)\n\n主キーとして設定されると、idの左側のセルに、鍵マークのアイコンが表示される。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/84bce76a-4f6d-a1ad-ad47-4b6247a89c44.png)\n\nここでいったん保存する(Ctrl + S)。テーブル名を設定するよう聞かれるので、ここでは「Table_test」とした。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/d8b4ca99-b340-cd53-3a36-be6d53ea2269.png)\n\n## サンプルデータの登録方法\n　Management Studioを用いて、作成したテーブルTable_testにサンプルデータを登録する。オブジェクトエクスプローラーからデータベース ⇒ testdb ⇒ テーブル ⇒ dbo.Table_testに進み、dbo.Table_testを右クリックしたら「上位200行の編集」を選ぶ。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/4ed82b8a-fb2c-a584-9ed5-7d05f8c41e4d.png)\n\n　テーブル作成時に列として設定した「id」「name」「flag」が表示された。セルにはNULLと記入されており、データが全く登録されていない状態であることが分かる。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/961491c6-c5f0-44e6-2bc9-89ab02baa435.png)\n\n　Excelと同じ要領でサンプルデータを入力できる。今回は下記のようにid1～3の3行を設定した。ビックリマーク（！）が表示されているが、セルの中身が変更された際に表示されるものであるため、気にせず先に進める。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/96988e21-f3cf-738d-7d77-0d30cd473224.png)\n\n　なお、データを再度NULLにしたい場合は、ショートカットの「Ctrl +0」を入力すること。下記のようにDeleteキーなどで消した場合、「NULL」ではなく「空の文字列」として認識されてしまう点に注意である。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1235688/37e3ad15-7745-065f-d7f5-f9c59c027683.png)\n\n\n備忘録は以上です。\n\n# 環境およびアプリケーション\n・Microsoft Windows 10 Home 20H2\n・Microsoft SQL Server 2019\n・Microsoft SQL Server Management Studio 18\n","user":"denshoNeko","created_at":"2021-03-30T14:43:41+09:00","updated_at":"2021-03-30T14:47:58+09:00"},{"url":"https://qiita.com/nakamoto_yuki/items/e1e8687c0e35e99ef609","title":"FastapiをDockerで動かすときはuvicornのroot pathが必要","body":"# はじめに\nタイトルの通りのままですが、fastapiをDockerで動かそうとすると404エラーが出ました。\n原因としてはルートの場所がどこか別の場所か場所を解決できないことが原因だったようでした。\n\n# 解決法\n\n下記のようにしたらうまくいきました。\n\n```\nuvicorn main:app --reload --host 0.0.0.0 --port ポート --root-path=\"絶対path\"\n```\n","user":"nakamoto_yuki","created_at":"2021-03-30T14:41:16+09:00","updated_at":"2021-03-30T14:41:16+09:00"},{"url":"https://qiita.com/mobilebiz/items/11f43db464a8fd080264","title":"TwilioにおけるDTMF信号の扱いについて","body":"# はじめに\n\nみなさん、こんにちは。\nKDDIウェブコミュニケーションズの Twilio エバンジェリストの高橋です。\n\n今回は、Twilio を利用する上で知っておきたい DTMF 信号の扱いについて解説します。\n\n## そもそも DTMF とは\n\nみなさんは、トーン信号とかプッシュ信号という言葉を聞いたことがあるかと思います。そう、電話機の数字キーとシャープ、アスタリスクなどを押すことで発生する「ピッ」っていう音です。\nこのトーン信号のことを別名 DTMF（Dual-Tone Multi-Frequency）信号と呼び、DTMF はその名の通り2つの異なる周波数を使ってトーン信号を表現する方法です。\n\n![スクリーンショット 2021-03-30 9.06.02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86046/a187cab6-e296-3146-a53c-d29e81e95ea1.png)\n*出典 [ウィキペディア](https://ja.wikipedia.org/wiki/DTMF)\n\n上の表を見るとわかるように、例えば数字の「１」を表現するためには、697Hzと1209Hzの2つの周波数音を重ねて送出します。\n\n## DTMFの限界\n\nこのように、人間の耳で聞こえる周波数帯で、しかも他の音とは混在しないようなしくみで数字を伝えるという技術は、たとえばコールセンターの IVR システムなどでも用いられています。\nしかし一方で、周波数に依存する方式では外部の雑音などに弱かったり、コーデック（周波数を数値に変換するしくみ）によってうまく認識ができないことがあります。\nそもそも現在の電話システムの裏側は、IPベースでの通信になっているため、たとえば DTMF でそのままパケットで送信しようとすると、１つの音が複数のパケットに分割されて伝搬されます。\nパケットが複数に分割された場合、ネットワークの状況によっては**パケットロス**や**ジッター**が発生することで一部のパケットが届かなくなることがあります（下の図を参照）。\n\n![DTMFパケット.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86046/8ef0574a-b38a-ca02-2a9b-73802a8d5fbb.png)\n\nこのケースでは、1つのDTMFの途中のパケットが欠損してしまったため、本来は1つのDTMFが2つになって聞こえてしまいます（１を2回押したことになる）。\n\nこのような状況を回避するためにはいくつか方法があります。\n\n### 解決策１　ジッターバッファなどを調整することで欠損を減らす\n\nジッターというのは、パケットの「ゆらぎ」のことです。複数に分割されたパケットは、必ずしも同じ経路で相手側に伝搬されるわけではなく、色々なルートに別れて届くことになります。その場合、経路によっては届く時間が異なります。\n音声データは早く届きすぎてもだめですし、逆に遅すぎてもだめです。これを「等時性」と呼びます。\n等時性を確保するために、パケットを組み立てるときに**調整**が行われます。わかりやすくいうと、届いたパケットをジッターバッファと呼ばれる領域に入れて、そこで時系列に沿ってパケットを組み立て直すのです（ゆらぎ吸収とも呼ばれます）。\nこのときに、吸収できなかったパケットは、残念ながら欠損してしまいます。\nそのため、ジッターバッファを多めに用意することで、届かないパケットを減らすことができるのです。しかしバッファを増やすと逆に**遅延**が発生することになります。音声通話における遅延は、聞きづらさにつながるため、あまり長くすることはできません。\n\n### 解決策２　DTMF信号の長さを短くする\n\nそもそもDTMF信号が長いとパケットロスやジッターの影響を受けやすくなるので、判定に必要な最低の長さで送り出すことで対策が可能です。\nたとえば、筆者が実際に iPhone７ と iPhone11 でテストしてみたところ、iPhone7 では 300ms 程度の長さであるものが、iPhone11 では 125ms 程度の長さになって聞こえます。\nどうも Apple 社は最新の iPhone では DTMF 信号の長さを故意に短くしているようです。このショートトーンを採用しているのは iPhone の比較的新しい機種（どの機種からかはわかりません）からで、Android や iPhoneの古い機種では採用されていません。これはすなわち、Android では DTMF による問題が発生しやすいということにもなります。\n\n参考：[DTMF Tone on IOS 13 issue](https://discussions.apple.com/thread/250764240)\n\n### 解決策３　RFC2833 を採用する\n\n先程も書いたように、現在電話システムの裏側はパケット通信で行われています。そのため、DTMF による伝搬を行うよりも、IP パケットに数字自体を信号として記録して伝搬したほうが効率的です。\nそこで利用される方式が [RFC2833](https://tools.ietf.org/html/rfc2833) という方式です。\nRFC2833 では、トーン信号を周波数ではなくて専用のパケット仕様として定義して伝搬します。これによりパケットロスやジッターの影響は受けにくくなります（RFC2833 を採用したとしても、パケット自体は RTP により伝搬されるので影響が完全になくなるわけではありません）。\n\n# 「RFC2833」と「みなし音声」\n\nここからは、RFC2833 と比較するために、従来の DTMF を「みなし音声」として説明します。みなし音声とは、その名の通り音声データのようにみなして数字を送ることからついた名称です。英語では、in-band DTMF と呼ばれます。\n日本では、古くから使われていたみなし音声にしか対応していない機器などもあるため、電話機からはみなし音声が出ていくケースがほとんどです。ただし、Twilio のような IP ベースの電話システムでは上記の理由から RFC2833 をサポートしています（みなし音声が来た場合はパススルーするという[説明](https://support.twilio.com/hc/en-us/articles/223180088-What-DTMF-types-do-you-support-)もあります）。\n電話機側からみなし音声が入ってきた場合に、それを RFC2833 に変換するかは機器の機能として実装されるため、はっきりとした回答は公式にはされていませんが、最近は変換されると考えるのが一般的です。\n当然逆もしかりで、RFC2833 をみなし音声に変換する作業も機器に依存します。\n\nこれを確認するために、ちょっとした実験をしてみたいと思います。\n実験は次の2つのケースで行います。\n\n(A) スマートフォン -> Twilio (DialによるPSTN転送）　-> スマートフォン\n(B) スマートフォン -> Twilio （DialによるSIP転送）　-> SIPフォン\n\nそれぞれの状態で、スマートフォンの数字キーを入力してみると、\n\n(A)は、みなし音声として相手のスマートフォンから「ピッピッ」という音がちゃんと聞こえます。\n一方(B)では、SIPフォン側にはタップ音しか聞こえません。\n\n(B)では、Twilio と SIP フォンの間がパケット通信になるため、RFC2833 からみなし音声への逆変換がされずに、タップ音しか聞こえないのです。\n本当に RFC2833 になっているのか、SIP フォン側でパケットキャプチャーを取得して確認してみました。\n\n![スクリーンショット 2021-03-30 14.21.46.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86046/32b28ce4-d73b-619e-3a12-6e3fa4e6a0ad.png)\n\nRFC2833 では、信号を RTP EVENT というパケットにして伝搬するように規定されています。\nこのパケット内容は先に記述した RFC2833 の定義にも記載がありますので、気になる方はぜひリファレンスを読み解いてください。\nこの結果から、どうやらちゃんと変換がされていますね。\n\n# まとめ\n\nということで、少なくとも現在、日本国内ではみなし音声による DTMF は内部的には RFC2833 に変換されることがわかりましたね（逆も同じです）。\n裏側の仕組みをちゃんと理解しておくことで、トラブルシューティングの役にもたつはずなので、ぜひこの機会に覚えておくとよいでしょう。\n\nでは素敵な Twilio ライフを。\n\n---\n### Twilio（トゥイリオ）とは\n\nhttps://cloudapi.kddi-web.com\nTwilio は音声通話、メッセージング（SMS /チャット）、ビデオなどの 様々なコミュニケーション手段をアプリケーションやビジネスへ容易に組み込むことのできるクラウド API サービスです。初期費用不要な従量課金制で、各種開発言語に対応しているため、多くのハッカソンイベントやスタートアップなどにも、ご利用いただいております。\n\n自己紹介|　\n:--|:--\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/86046/b51a8b88-abd5-ce5e-195a-de3564ba2ae6.png\" height='200' width='150'/>|高橋克己（Katsumi Takahashi） 自称「<font color='red'>赤い芸人</font>」<br />グローバル・インターネット・ジャパン株式会社　代表取締役<br />株式会社KDDIウェブコミュニケーションズ　Twilio事業部エバンジェリスト<br /><br />2001年より大手通信事業者の法人サービスの教育に携わり、企業における電話のしくみや重要性を研究。2016年よりTwilio事業部にジョインし、Twilioを使ったスマートコミュニケーションの普及活動を精力的に行っている。<br />2015 Hall of Doers<br />2019 Twilio Champions\n","user":"mobilebiz","created_at":"2021-03-30T14:38:48+09:00","updated_at":"2021-03-30T14:38:48+09:00"},{"url":"https://qiita.com/kuromame1020614/items/4eb47bd4b8ddb34f1ae3","title":"AWS Lambda基本","body":"#AWS Lambdaとは？\n**「サーバーのプロビジョニングや管理の必要なしにコードを実行できるコンピューティングサービス」**\n\n#サーバーレスの特徴\n**①インフラのプロビジョニング、管理が不要**\n**②自動でスケール**\n　・リクエスト数に応じて自動的に起動数がコントロールされる\n**③価値に対する支払い**\n　・事前に必要なコストが存在しない\n　・リクエスト数並びに処理実行時間に対しての課金\n　・コスト効率がよく、コストゼロからのスタート可能\n**④高可用かつ安全**\n\n##**Lambda関数（ファンクション）**\n・Lambaで実行するアプリケーション\n・それぞれが隔離されたコンテナ内で実行される\n・利用する言語の関数もしくはメソッドをハンドラーとして指定し、実際の際に呼び出す\n・コードは依存関係も含めてビルド、パッケージングした上でアップロード\n　**ZIP形式**\n　アップロードしたものは**S3**に保存され実行時以外は暗号化される\n\n##**Lambdaファンクション-基本設定-**\n・メモリ：**128MBから3008MB**の間で設定可能\n　　　　容量に応じてCPU能力なども比例\n・タイムアウト：**最大900秒**まで\n・実行ロール：必要なAWSリソースへのアクセスを許可するIAMロール\n　　　　　　指定されたIAMロールにそってLambdaファンクションからAWSリソースへのアクセス許可される。\n\n##Lambdaファンクションの制限\n・インバウンドネットワーク接続はブロックされる\n・アウトバウンドはTCP/IPとUDP/IPソケットのみ\n・TCP25番ポートのトラフィックはブロックされる\n\n##イベントソース\n**イベントの発生元となるAWSサービスまたはユーザが開発したアプリケーション**\n・Lambda関数の実行をトリガーする\n\n**イベントソースにはタイプがある**\n・ポーリングベース\n　さらにストリームベースとそれ以外がある\n  ポーリングをして処理するデータがある場合にLambda関数を実行\n・その他\n　Lambda関数はイベントソースから呼び出される\n\n*ポーリングとは*\n複数のプログラミング通信に対し、一定のタイミングの問合せがあった場合に送受信処理を行う通信方式。一旦中継点に通信内容をためておいて、受信側のタイミングが良い時は通信を行う。\n\n*ストリーム*\n通信ネットワークの分野では、データを送受信する際にデータ全体の受信完了を待たずに受信したデータから順番に処理を行う送受信方式（**ストリーミング**）や、そのように送受信される連続的なデータの流れを**ストリーム**という\n\nAWSサービスの場合、呼び出すLambdaファンクションの設定情報を保持する（イベントソースマッピング）\n\n##呼び出しタイプ\n**非同期呼び出し**\n・InvocationTypeはEvent\n・レスポンス内容はリクエストが正常に受け付けられたかどうかのみ\n\n**同期呼び出し**\n・InvocationTypeはRequestResponse\n・実行完了時にレスポンスが返ってくる。レスポンス内容はLambdaファンクション内でセット\n\n##Lambda関数のリトライ\nエラーの種類、イベントソース、呼び出しタプによって異なる\n\n**ストリームベースではないイベントソース**\n・同期呼び出し\n　エラー発生時にはレスポンスのヘッダにFunctionErrorが含まれる\n・非同期呼び出し\n　自動的に２回間でリトライされ、その後イベントは破棄される\n　リトライには遅延がある\n\n**ポーリングベースでストリーミングベースのイベントソース**\n・データの有効期限が切れるまでリトライ\n・失敗したレコードの有効期限が切れるか処理が成功するまで、新しいコードは読み込みは行われない\n\n**ポーリングベースでストリームベースでないイベントソース**\n・バッチのメッセージは全てキューに返り、処理が成功すれば、キューから削除される\n・新しいメッセージの処理はブロックされない\n\n##VPCアクセス\n・VPC内のリソースへインターネットを経由せずにアクセス可能\n・VPC内リソースにアクセスさせたいLambdaファンクションに対してVPCサブネットおよびセキュリティグループを設定\n・Elastic Network Interface(ENI)利用\n\n\n**VPCアクセスの注意点**\n設定した時点でインターナットアクセスは不可となる\n・パブリックIPアドレスは割り当てられない\n・必要な場合NATインスタンスを用意する、もしくはAmazon VPC NATゲートウェイを利用すること\n充分な数のENIまたはサブネットIPがない場合、リクエスト数が増えた場合失敗する\n\n##アクセス許可、実行ロール\n**LambdaファンクションがAWSのサービスやリソースにアクセスするためのアクセス許可**\n・最低でもログ出力用にAmazon CloudWatch Logsへのアクセス許可が必要\n・Lambdaファンクション作成時に指定することで呼び出された時にLambdaによってロールが引き受けられる\n・IAMを利用して作成\n　信頼されたエンティティとしてAWS Lambdaを利用\n\n**アクセス許可-リソースポリシー**\nLambdaファンクションおよびレイヤー用にリソースベースのアクセス許可ポリシーをサポート\n・リソースごとに他のアカウントに使用許可を付与することが可能\n・AWSのサービスによる関数の呼び出しを許可することも可能\n\n##同時実行数\n・ある時点における実行中のLambda関数の数\n・アカウントに対してデフォルトで1000で制限されている\n・制限緩和することが可能\n・同時実行数を超えてリクエストされた場合、スロットリングエラーが返却される\n\n**同時実行数の見積もり**\n**ボーリングベースかつストリームベース**\n・シャード数と同じ\n\n**シャード**\n**「インデックスを分割したもの」**\n*-なぜシャードがいるのか？-*\nレプリケーションを行うため\nインデックスのコピーを別サーバに保持していた場合、サーバ障害時でも可用性が維持できる。\nこういった利用の場合、元のインデックスをプライマリーシャード、複製しているものをレプリカシャードと呼ぶ。\n\n**ポーリングだがストリームベースではない**\n・同時実行数までポーリングを自動的にスケールアップ\n\n##自動スケーリング\n・トラフィックの増加に応じて許可された同時実行数まで動的にスケール\n・負荷が増加した時は、負荷が落ち着くもしくは同時実行の制限に到達するまで1分ごとに500ずつ同時に実行していく\n・初期値はリージョンごとに異なるが、東京リージョンの場合1000\n・この値は制限緩和不可\n\n\n\n","user":"kuromame1020614","created_at":"2021-03-30T14:35:39+09:00","updated_at":"2021-03-30T14:35:39+09:00"},{"url":"https://qiita.com/t0sh1/items/997d9511682e87eb7d87","title":"Gitコマンドでいつもお世話になるリンク(随時更新予定)","body":"\n\n\nブランチがローカルに溜まり過ぎてしまったときに便利。\n\n```bash:terminal\ngit branch | grep -v '残したいブランチ1' | grep -v '残したいブランチ2' | xargs git branch -D\n```\n> [【Git】ローカルで特定のブランチ以外を一括で削除する - fv17の日記 - Coding Every Day](https://forest-valley17.hatenablog.com/entry/2019/07/25/113559)\n","user":"t0sh1","created_at":"2021-03-30T14:35:32+09:00","updated_at":"2021-03-30T14:35:32+09:00"},{"url":"https://qiita.com/mochizukikotaro/items/52246b14fc4e55688bf7","title":"docker で rails する","body":"https://docs.docker.com/compose/rails/\n\n上に書いてあることを適当に流用しますが、docker-compose と PostgreSQL を使わずに docker で rails だけを動かしてみます。\n\n# 用意するもの\n\n```bash\n$ tree .\n.\n├── Dockerfile\n├── entrypoint.sh\n├── Gemfile\n└── Gemfile.lock\n\n```\n\n# ファイルの中身\n\n```dockerfile:Dockerfile\nFROM ruby:2.5\nRUN apt-get update -qq && apt-get install -y nodejs\nWORKDIR /myapp\nCOPY Gemfile /myapp/Gemfile\nCOPY Gemfile.lock /myapp/Gemfile.lock\nRUN bundle install\nCOPY . /myapp\n\n\nCOPY entrypoint.sh /usr/bin/\nRUN chmod +x /usr/bin/entrypoint.sh\nENTRYPOINT [\"entrypoint.sh\"]\nEXPOSE 3000\n\n\nCMD [\"rails\", \"server\", \"-b\", \"0.0.0.0\"]\n```\n\n```Gemfile:Gemfile\nsource 'https://rubygems.org'\ngem 'rails', '~>5'\n```\n\n```bash\ntouch Gemfile.lock\n```\n\n```sh:entrypoint.sh\n#!/bin/bash\nset -e\n\nrm -f /myapp/tmp/pids/server.pid\n\nexec \"$@\"\n```\n\n\n# 作業\n\nまずビルド\n\n```\n$ docker build --tag docker-rails-app .\n```\n\nマウントさせながら rails new して、ファイル群を生成する\n\n```\n$ docker run --rm -v (pwd):/myapp docker-rails-app rails new .\n```\n\nもういちどビルドして、bundle install させておく\n\n```\n$ docker build --tag docker-rails-app .\n```\n\nrails s する\n\n```\n$ docker run --rm -it -v (pwd):/myapp -p 3000:3000 docker-rails-app bundle exec rails server -b 0.0.0.0\n```\n\nこれで、 `http://localhost:3000` で下の画面にあえる。\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/45822/bab584a9-a585-2320-c8af-5280c2305552.png)\n\n\n","user":"mochizukikotaro","created_at":"2021-03-30T14:29:44+09:00","updated_at":"2021-03-30T14:31:50+09:00"},{"url":"https://qiita.com/shinji0320/items/3141a25473ac8287d287","title":"Rspecの入門[簡易版](単体・統合テスト)","body":"#modelのテスト(単体)\n\n```ruby:\nrequire 'rails_helper'\n\nRSpec.describe 'モデルのテスト', type: :model do\n  describe 'バリデーションのテスト' do\n    subject { (モデル名).valid? }\n\n    let(:user) { create(:user) }\n    let!(:(モデル名)) { build(:(モデル名), user_id: user.id) }\n\n    context 'カラム' do\n      it '空欄でないこと' do\n        (モデル名).(カラム名) = ''\n        is_expected.to eq false #falseが返ってきたらok\n      end\n    end\n\n      it '100文字以下 :100文字は〇' do\n        (モデル名).(カラム名) = Faker::Lorem.characters(number: 100)\n                                                  #文字列100入れる\n        is_expected.to eq true #trueが返ってきたらok\n      end\n      it '100文字以下 :101文字は×' do\n        (モデル名).(カラム名) = Faker::Lorem.characters(number: 101)\n                                                 #文字列101入れる\n        is_expected.to eq false #falseが返ってきたらok\n      end\n    end\n  end\n\n  describe 'アソシエーションのテスト' do\n    context 'Userモデルとの関係' do\n      it 'N:1となっている' do\n        expect((モデル名).reflect_on_association(:user).macro).to eq :belongs_to\n      end\n    end\n\n    context '(モデル名)モデルとの関係' do\n      it '1:Nとなっている' do\n        expect(User.reflect_on_association(:(モデル名)).macro).to eq :has_many\n      end\n    end\n  end\nend\n\n\n```\n\n#統合テスト\n\n##showページのテスト\n```ruby:\n\ndescribe 'current_userのitem/showページのテスト' do\n  before do\n    visit item_path(item) #このページへ遷移した時のテスト\n  end\n\n  context '表示内容の確認' do\n    it 'URLが正しい' do\n      expect(current_path).to eq '/items/' + item.id.to_s\n     #URLが'/items/' + item.id.to_sなっているか\n    end\n    it 'ユーザーの名前のリンク先が正しい' do\n      expect(page).to have_link item.user.name, href: user_path(item.user)\n     #'item.name'が表示されていてそのリンク先が[user_path(item.user)]\n    end\n    it 'itemの編集リンクが表示される' do\n      expect(page).to have_link 'アイテムを編集', href: edit_item_path(item)\n     #'アイテムを編集'表示されていてリンク先が[edit_item_path(item)]\n    end\n  end\nend\n\n```\n\n##editページのテスト\n\n```ruby\ncontext '編集成功のテスト' do\n  before do\n    @item_old_genre_id = item.genre_id\n    @item_old_name = item.name    \n    genre_id = Faker::Number.between(from: 1, to: 6)\n    #ジャンルIDが6まで表示する\n    select Genre.find(genre_id).name, from: 'item[genre_id]'\n    #Genreの中からnameが表示されているものを一つ選択する\n    fill_in 'item[name]', with: Faker::Lorem.characters(number: 10)\n    #10文字のランダム文字を入れてる\n    click_button '更新する'\n    #更新するをクリック\n  end\n\n  it 'ジャンル名が正しく更新される' do\n    expect(item.reload.genre_id).not_to eq @item_old_genre_id\n  end\n  it 'アイテム名が正しく更新される' do\n    expect(item.reload.name).not_to eq @item_old_name\n  end\n  it 'リダイレクト先が、更新したアイテムの詳細ページになっている' do\n    expect(current_path).to eq '/items/' + item.id.to_s\n    expect(page).to have_content 'アイテムの詳細'\n  end\n```\n","user":"shinji0320","created_at":"2021-03-30T14:26:14+09:00","updated_at":"2021-03-30T14:28:16+09:00"},{"url":"https://qiita.com/htshozawa/items/98f419d24e886c57bd3e","title":"ServiceNow - テーブルの情報を取得するスクリプト","body":"# 概要\nServiceNowの一つのテーブルのみにデータをインポートする場合はEasy Importを利用することができる。しかし、ServiceNowテーブルは複数の他テーブルと関連している場合が多いため、データを挿入する場合に複数の関連テーブルにも同時に挿入した方が便利である。\nそのような場合は事前に利用するテーブルのフィールドとその属性情報を取得する場合が多い。\n本記事ではServiceNowテーブルから利用するフィールド情報を取得するスクリプトを作成します。\n\n# スクリプト\n```\nvar target_table = \"cmdb_ci_ip_firewall\";     // フィールド情報を取得するテービル名\nvar field_list = [\"Name\", \"Serial number\", \"Vendor\", \"Manufacturer\", \"Firmware manufacturer\", \"Firmware version\", \"Ports\", \"IP Address\", \"Location\", \"Status\", \"Category\", \"Owned by\", \"Managed by\", \"Managed By Group\", \"Support group\", \"Comments\", \"Model ID\", \"Model number\", \"Default Gateway\"];\nvar column_list = [\"column_label\", \"element\", \"internal_type\", \"reference\", \"default_value\"];    // 情報を取得するフィールドラベル　（フィールド名ではなくフォームなどに表示されているフィールドの「ラベル」です）\n\ncolumn_info_list = [];\nfor (var i=0; i<field_list.length;i++) {              // 取得するフィールド毎に処理する\n  var gr_fields = new GlideRecord(\"sys_dictionary\");  // ServiceNowのシステム辞書を検索する\n  gr_fields.addQuery(\"name\", target_table);           // 上で指定したテーブルをクエリーする\n  gr_fields.addQuery(\"column_label\", field_list[i]);  // 取得するフィールドをクエリーする\n  gr_fields.addEncodedQuery('internal_type!=collection^ORinternal_type=NULL');//To ignore all the table dictionaries(optional)\n  gr_fields.query();                                  // クエリーを実行\n\n  while(gr_fields.next()) {                           // クエリーの結果を処理する。クエリー結果をDictionaryに変換する\n    column_value_dict = {};\n    for (var j=0; j<column_list.length; j++) {         // 取得したフィールド情報を処理する\n      column_value_dict[column_list[j]] = gr_fields.getValue(column_list[j]);\n    }\n    column_info_list.push(column_value_dict);          // Dictionaryを結果リストに追加する\n  }\n}\n\ncsv_str = \"\\n\";\nfor (var k=0; k<field_list.length; k++) {             // 結果を表示する\n  csv_str += Object.keys(column_info_list[k]).map(function(m){  // csvに変換する\n    return column_info_list[k][m];\n  }).join(',') + \"\\n\";\n}\ngs.info(csv_str);\n```\n\n# テーブル情報の取得手順\nスクリプトを利用してLibreOfficeにテーブルデータ情報表を作成する手順を示します。\n## 情報を取得するテーブル名を取得\n情報を取得するテーブル名を取得します。\n1. ServiceNowのアプリケーションナビゲータから情報を取得するフォームを検索して開きます。<br/>例では「firewall」テーブルの情報を取得するため「firewall」を検索します。<br/>![table_info_1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/655ac73c-339e-152c-d8d9-52d854797426.png)\n2. リストのヘッダを右クリックして「Configure」ー「Dictionary」を選択します。<br/>![table_info_2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/e7aee592-74c3-7913-9e4f-298ced07a882.png)\n3. テーブル情報リストが表示されます。列「Table」の値がデータベーステーブル名です。<br/>![table_info_3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/50577efe-60a9-4a99-6624-d3f0dec8ebf6.png)\n4. テーブル名をスクリプト内の変数「target_table」に設定します。<br/><pre>var target_table = \"cmdb_ci_ip_firewall\";</pre>\n\n## 情報を取得するフィールドラベルを所得\n次ぎの情報を取得するフィールドラベルを取得します。\n1. テーブルに関するフォームを開き、新規レコード用フォームを開きます。<br/>「New」ボタンを押下。<br/>![table_info_10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/6de96ca8-a81c-78b9-22b1-dea0ae29e84d.png)\n2. フィールドラベルはフォームに表示している文字列です。<br/>![table_info_11.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/6f7c75bc-3310-961f-e1fc-382de531a2d6.png)\n3. フォームに表示されていないフィールドラベルを取得するにはフォームデザイナを開くいます。<br/>リストコントロールアイコンを右クリックして「Configure」ー「Form Design」を選択する。<br/>![table_info_12.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/9d8e3a24-44ea-e85f-f27a-dda7cbbb367a.png)\n4. 右側にフォームで利用可能なフィールドラベル一覧が表示されます。フォームに追加する場合はドラッグ＆ドロップします。<br/>フォームに追加しなくてもフィールドの情報を取得することは可能です。その場合はフィールドラベルをメモしてスクリプトの所得するフィールド情報リストに指定します。<br/>![table_info_13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/c311d2db-31d9-cbf7-c459-c7551e1e289a.png)\n5. フィールドをフォームに追加する場合はフィールドラベルをドラッグ＆ドロップした後に「Save」ボタンを押下します。<br/>![table_info_14.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/c856ac10-6cce-a3f2-7593-fd6953729240.png)\n6. フィールドを追加した場合は追加したフィールドがフォームに追加されます。<br/>![table_info_15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/5c5a40f0-d2dc-5252-066f-45dfec62c62b.png)\n7. 取得するフィールドのフィールドラベル名をスクリプト内の変数「field_list」に設定します。<br/><pre>var field_list = [\"Name\", \"Serial number\", \"Vendor\", \"Manufacturer\", \"Firmware manufacturer\", \"Firmware version\", \"Ports\", \"IP Address\", \"Location\", \"Status\", \"Category\", \"Owned by\", \"Managed by\", \"Managed By Group\", \"Support group\", \"Comments\", \"Model ID\", \"Model number\", \"Default Gateway\"];</pre>\n\n## スクリプトの実行\nスクリプトを実行してフィールド情報をcsv形式で取得します。取得した情報をLibreCalcに貼り付けます。\n1. ServiceNowから直接スクリプトを実行します。直接実行する場合は「Scripts - Background」を使います。<br/>アプリケーションナビゲータから「background」を検索して「System Definition」下の「Scripts - Background」を選択します。<br/>![table_info_20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/6040653f-1703-4c3c-cdec-a6faab899601.png)\n2. スクリプトをコピーペーします。<br/>「Run script」ボタンを押下するとスクリプトは実行されます。<br/>![table_info_21.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/0fd769e0-fd47-487a-ffd2-4e8123e14219.png)\n3. スクリプトの実行結果が表示されます。<br/>![table_info_22.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/ba88198e-1414-87e5-7810-6e158ebd0ba5.png)\n4. 結果を選択してコピーします。<br/>![table_info_23.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/d999b132-e855-88ed-6220-16a99267b04c.png)\n5.LibreCalcを開き、シートに内容を貼り付けます。<br/>![table_info_24.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/6370e2de-04b0-38be-c4fd-9d097b857da9.png)\n6.1レコードが1セルに貼り付けられますのでデータを分離します。<br/>列を選択してメニューから「データ」ー「テキストから列へ」を選択します。<br/>![table_info_25.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/6fe33871-b65c-8ca4-ded7-6b80bc1cc914.png)\n7.結果はコンマ区切りなので「コンマ」をチェックして、「OK」ボタンを押下します。<br/>![table_info_26.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/de2560ce-c328-4ab4-2b38-3c60ccea5392.png)\n8. 行の高さが大きいので調整します。<br/>左上を選択してすべてのセルを選択してコピーします。<br/>![table_info_27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/be609e5c-ed5c-8d5f-ac4d-5e3df4e54893.png)\n9.新しいシートに貼り付けます。<br/>![table_info_28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/668e9ce4-9aa1-2931-3fa3-9aa6debb92c4.png)\n10.ヘッダ、列幅などを調整します。<br/>![table_info_29.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/698027/4e894ffe-3f90-e9a6-b012-e648d61d0b7d.png)\n\n以上\n","user":"htshozawa","created_at":"2021-03-30T14:23:48+09:00","updated_at":"2021-03-30T14:23:48+09:00"},{"url":"https://qiita.com/TsukasaKashima/items/c043990db39904bac21d","title":"React NativeでNavigationを使っていい感じに画面遷移する","body":"## やりたいこと\n- React NativeでReact Navigationというライブラリを使って画面遷移をしたい\n- 画面が多くなっても管理しやすい形でまとめたい\n\n## 前提条件\n- React Nativeの環境構築が終わっている\n- 何かしらプロジェクトが作成されている(initされていればOK) \n\n## ライブラリのインストール\n[公式ドキュメント](https://reactnavigation.org/docs/getting-started)にしたがって必要なライブラリをインストールします\n\n```\nyarn add @react-navigation/native\nyarn add @react-navigation/stack\n```\n@react-navigation/stackと依存関係にあるライブラリもインストールします。\n\n```\nyarn add react-native-reanimated react-native-gesture-handler react-native-screens react-native-safe-area-context @react-native-community/masked-view\n```\nライブラリをインストールしたのでpod installも一応やっておきましょう\n\n```\ncd ios && pod install && cd ..\nreact-native run-ios\n```\n**これで下準備が完了！**\n\n##ディレクトリを作る\nsrcディレクトリを作成し、さらにその中にnavigationとscreensのディレクトリを作成します\n![スクリーンショット 2021-03-30 11.52.18.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920958/3d54bdcd-f0ea-7454-cdfc-3161c383f368.png)\n\n##ファイルを作る\n- navigationの中にindex.jsを作成します\n- screensの中にHomeScreen.jsとDetailScreen.jsを作成します\n![スクリーンショット 2021-03-30 12.03.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/920958/3bd6048f-c0b8-529a-68f5-d7a0b82a7e04.png)\n\nnavigation配下のindex.jsでは**createStackNavigator**を用いて画面一覧を記述していきます。\nこれにより画面ごとに遷移が可能となります。\n[公式ドキュメント](https://reactnavigation.org/docs/hello-react-navigation)\n\n```js:index.js\nimport React from 'react';\nimport {NavigationContainer} from '@react-navigation/native';\nimport {createStackNavigator} from '@react-navigation/stack';\nimport HomeScreen from '../screens/HomeScreen';\nimport DetailScreen from '../screens/DetailScreen';\n\nconst RootStack = createStackNavigator();\n\nconst RootStackScreen = () => {\n  return (\n    <NavigationContainer>\n      <RootStack.Navigator>\n        <RootStack.Screen name=\"Home\" component={HomeScreen} />\n        <RootStack.Screen name=\"Detail\" component={DetailScreen} />\n      </RootStack.Navigator>\n    </NavigationContainer>\n  );\n};\n\nexport default RootStackScreen;\n```\nまだHomeScreenやDetailScreenには何も書いていないのでこちらもnavigationを行うための記述をしましょう\n**navigation**というpropsを渡すことで自由に画面遷移ができます\n[公式ドキュメント](https://reactnavigation.org/docs/navigating)\n\n```js:HomeScreen.js\nimport React from 'react';\nimport {StyleSheet, View, Text, Button} from 'react-native';\n\nconst HomeScreen = ({navigation}) => {\n  return (\n    <View style={styles.container}>\n      <Text>HomeScreen</Text>\n      <Button\n        title=\"Detail画面に遷移する\"\n        onPress={() => {\n          navigation.navigate('Detail');\n        }}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default HomeScreen;\n```\n同様にDetailScreenでもHomeScreenに遷移する用のボタンを用意しnavigationの処理を追加します\n\n```js:DetailScreen.js\nimport React from 'react';\nimport {StyleSheet, View, Text, Button} from 'react-native';\n\nconst DetailScreen = ({navigation}) => {\n  return (\n    <View style={styles.container}>\n      <Text>DetailScreen</Text>\n      <Button\n        title=\"Home画面に遷移する\"\n        onPress={() => {\n          navigation.navigate('Home');\n        }}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'center',\n  },\n});\n\nexport default DetailScreen;\n```\nこれで画面遷移がお互いにできる状態となりました。\n\n##App.jsでRootStackScreenを受け取る\n最後にApp.jsでRootStackScreenを受け取れば終わりです\n\n```js:App.js\nimport React from 'react';\nimport RootStackScreen from './src/navigation';\n\nconst App = () => <RootStackScreen />;\nexport default App;\n```\n\n\n## まとめ\nscreenを格納するディレクトリを作成し、画面遷移用のindex.jsを分けることで\nindex.jsでは画面をimportしてRootStack.Screenを羅列するだけで良くなりますね。（画面が多くなっても一元的に管理出来る）\n実際の開発では画面数も多いのでnavigation用のファイルを作成すると管理がしやすくなるのかなと思います。\n\n## 参考\nhttps://reactnavigation.org/\nhttps://www.digitalocean.com/community/tutorials/react-react-native-navigation-ja\n","user":"TsukasaKashima","created_at":"2021-03-30T14:23:40+09:00","updated_at":"2021-03-30T14:23:40+09:00"},{"url":"https://qiita.com/TTTaison/items/05c3e8b5023496b130d7","title":"既存のRailsアプリ(6系)にVue.jsを導入する方法 ","body":"#はじめに\nこの記事は既存のrails6系にvue.jsを導入するものになります。\n初学者のアウトプット記事のため間違っているところなどがあるかもしれないですが、よろしくお願いします。\nもし間違っているところなどがあったら、随時編集をしていきます。\n#Vue.jsの導入\n今回は**Webpacker**を用いて導入していきます。\n\nまず既存のrailsアプリケーションの内のディレクトリで、Webpackerを用いてVue.jsをインストールします。WebpackerとはRailsアプリケーションにWebpackをいい感じに取り込めるgemです。Rails6系にはすでに導入されています。\n\nコンソールに以下のコードを打ち込んでください。\n\n```\n% bundle exec rails webpacker:install:vue\n```\n読み込んだら、以下のファイルが存在しているはずです。\n\n``app/javascript/packs/hello_vue.js``\n\n`app/javascript/app.vue`\n\nまず`hello_vue.js`ファイルの中身をみてみましょう。\n\n```javascript\n/* eslint no-console: 0 */\n// Run this example by adding <%= javascript_pack_tag 'hello_vue' %> (and\n// <%= stylesheet_pack_tag 'hello_vue' %> if you have styles in your component)\n// to the head of your layout file,\n// like app/views/layouts/application.html.erb.\n// All it does is render <div>Hello Vue</div> at the bottom of the page.\n\nimport Vue from 'vue'\nimport App from '../app.vue'\n\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new Vue({\n    render: h => h(App)\n  }).$mount()\n  document.body.appendChild(app.$el)\n\n  console.log(app)\n})\n\n\n// The above code uses Vue without the compiler, which means you cannot\n// use Vue to target elements in your existing html templates. You would\n// need to always use single file components.\n// To be able to target elements in your existing html/erb templates,\n// comment out the above code and uncomment the below\n// Add <%= javascript_pack_tag 'hello_vue' %> to your layout\n// Then add this markup to your html template:\n//\n// <div id='hello'>\n//   {{message}}\n//   <app></app>\n// </div>\n\n\n//import Vue from 'vue/dist/vue.esm'\n//import App from '../app.vue'\n//\n//document.addEventListener('DOMContentLoaded', () => {\n  //const app = new Vue({\n    //el: '#hello',\n    //data: {\n      //message: \"Can you say hello?\"\n    //},\n    //components: { App }\n  //})\n//})\n//\n//\n//\n// If the project is using turbolinks, install 'vue-turbolinks':\n//\n// yarn add vue-turbolinks\n//\n// Then uncomment the code block below:\n//\n// import TurbolinksAdapter from 'vue-turbolinks'\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// Vue.use(TurbolinksAdapter)\n//\n// document.addEventListener('turbolinks:load', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: () => {\n//       return {\n//         message: \"Can you say hello?\"\n//       }\n//     },\n//     components: { App }\n//   })\n// })\n```\nたくさんのコードがコメントアウトされています。まずはこちらのページの上部の英文から読んでみましょう。\n\n```javascript\n// Run this example by adding <%= javascript_pack_tag 'hello_vue' %> (and\n// <%= stylesheet_pack_tag 'hello_vue' %> if you have styles in your component)\n// to the head of your layout file,\n// like app/views/layouts/application.html.erb.\n// All it does is render <div>Hello Vue</div> at the bottom of the page.\n```\n要約するとこんな感じになります。\n\n- 直下のコードを実行する場合は、<%=javascript_pack_tag'hello_vue' %>をhtmlのheadタグに入れること。\n- もしあなたがコンポーネントにスタイルを当てている場合は、<%= stylesheet_pack_tag 'hello_vue' %> をheadタグに入れること。\n- そうすればページの最下部に\"Hello Vue\"がレンダリングされる。\n\n言われた通り、`app/views/layouts/application.html.erb`内に以下のコードを追加します。\n \n```html\n<%= javascript_pack_tag 'hello_vue' %>\n<%= stylesheet_pack_tag 'hello_vue'  %> \n```\n記述をし終えたら、コンソールで`rails s`を打ち込み確認してみましょう。\n\n![hello vue.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1048562/e30c8a58-3c4e-1475-4d63-c6a6cf1254de.png)\n既存のアプリケーションのビューの下に`Hello Vue!`が表示されているはずです。\n\n次は `hello_vue.js`の次の英文を読んでいきましょう。\n\n```javascript\n// The above code uses Vue without the compiler, which means you cannot\n// use Vue to target elements in your existing html templates. You would\n// need to always use single file components.\n// To be able to target elements in your existing html/erb templates,\n// comment out the above code and uncomment the below\n// Add <%= javascript_pack_tag 'hello_vue' %> to your layout\n// Then add this markup to your html template:\n```\nこの英文を要約すると\n\n- 上のコードはコンパイルせずにVueを使う場合に使用するもので、`html.erb`の特定の箇所に限定して使うことができず、常にシングルファイルコンポーネントとして使わなければならない。\n- `html.erb`の特定の箇所に使いたい場合は、上のコードをコメントアウトして下記のコードを使用する。\n\n要するにhtml.erbの特定の箇所のみにvue.jsを使いたい場合は、この文の下のコードを使う必要があるということですね。言われた通り上のコードをコメントアウトして、下のコードを使用していきましょう。\n\n```javascript\n/* eslint no-console: 0 */\n// Run this example by adding <%= javascript_pack_tag 'hello_vue' %> (and\n// <%= stylesheet_pack_tag 'hello_vue' %> if you have styles in your component)\n// to the head of your layout file,\n// like app/views/layouts/application.html.erb.\n// All it does is render <div>Hello Vue</div> at the bottom of the page.\n\n//import Vue from 'vue'\n//import App from '../app.vue'\n\n\n//document.addEventListener('DOMContentLoaded', () => {\n//  const app = new Vue({\n//    render: h => h(App)\n//  }).$mount()\n//  document.body.appendChild(app.$el)\n\n//  console.log(app)\n//})\n\n\n// The above code uses Vue without the compiler, which means you cannot\n// use Vue to target elements in your existing html templates. You would\n// need to always use single file components.\n// To be able to target elements in your existing html/erb templates,\n// comment out the above code and uncomment the below\n// Add <%= javascript_pack_tag 'hello_vue' %> to your layout\n// Then add this markup to your html template:\n//\n// <div id='hello'>\n//   {{message}}\n//   <app></app>\n// </div>\n\n\nimport Vue from 'vue/dist/vue.esm'\nimport App from '../app.vue'\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  const app = new Vue({\n    el: '#hello',\n    data: {\n      message: \"Can you say hello?\"\n    },\n    components: { App }\n  })\n})\n\n\n\n// If the project is using turbolinks, install 'vue-turbolinks':\n//\n// yarn add vue-turbolinks\n//\n// Then uncomment the code block below:\n//\n// import TurbolinksAdapter from 'vue-turbolinks'\n// import Vue from 'vue/dist/vue.esm'\n// import App from '../app.vue'\n//\n// Vue.use(TurbolinksAdapter)\n//\n// document.addEventListener('turbolinks:load', () => {\n//   const app = new Vue({\n//     el: '#hello',\n//     data: () => {\n//       return {\n//         message: \"Can you say hello?\"\n//       }\n//     },\n//     components: { App }\n//   })\n// })\n```\nそして`html.erb`の任意の箇所に\n\n```html\n <div id='hello'>\n   {{message}}\n </div>\n```\nと記述してみましょう。その任意の箇所に`Can you say hello?`が表示されているはずです。\nこれらを見てわかった通り、`hello_vue.js`はrailsとvue.jsの橋渡し的な存在になります。VueCLIでいう`main.js`と同じ役割です。\n\nそれならばapp.vueはどうでしょうか。確認してみましょう。\n\n```javascript\n<template>\n  <div id=\"app\"> \n   <p>{{ message }}</p>\n  </div>\n</template>\n\n<script>\nexport default {\n  data: function () {\n    return {\n      message: \"Hello Vue!\"\n    }\n  }\n}\n</script>\n\n<style scoped>\np {\n  font-size: 2em;\n  text-align: center;\n}\n</style>\n```\n先ほどの`Hello Vue!`はここのファイルの記述だったということがわかりました。このファイルにVueの記述をしていきます。\n\n以上がVue.jsの導入になります。\n\n# Foremanの導入\nこれまで`rails s`をターミナルに打ち込んでrailsのサーバーを立ち上げてvueファイルの確認をしてきました。しかしVueファイルを変更したら一々リロードをしなければなりません。\n\nそういった時、webpackサーバーを別に立てておくことでJSファイルのコンパイル時間を短縮でき，JSファイルの変更にも自動でリロードできるようになります。\n\nしかしrailsのサーバーとWebpackerのサーバーを立ち上げる必要があり、面倒です。そんな時に便利なのが、Foremanです。Foremanを使えば、この二つのコマンドを一つにまとめてくれます。\n\n```\n% gem install foreman\n```\nこのようにgemをインストールして、プロジェクトディレクトリ配下にProcfileというファイルを作成します。そのファイルの中に以下のように記述しましょう。\n\n```\nrails: rails s\nwebpack: ./bin/webpack-dev-server\n```\n正しく設定できているかどうか以下のコマンドを打って確認してみましょう。\n\n```\nforeman check\n```\n`valid procfile detected (rails, webpack)`\nと表示されれば、成功です。\n\n以下のコマンドでrailsのサーバーとwebpackerのサーバーを同時に起動させることができます。\n\n```\n% foreman start\n```\nポート番号を指定したい場合はこのように指定します。\n\n```\n% foreman start -p 3000\n```\n\n\n\n\n\n\n\n\n\n\n","user":"TTTaison","created_at":"2021-03-30T14:22:43+09:00","updated_at":"2021-03-30T15:19:25+09:00"},{"url":"https://qiita.com/Atsulabo/items/c8ca9af85a5e4d209639","title":"PHP5上級試験/準上級試験の上級合格に挑戦(15) プログラミングPHP第3版 5章〜6章","body":"# 5章　配列\n\n配列の書き方は、[]を使って短く書くことも可能\n\n```index.php\n$days = array('gasket' => 15.29, 'wheel' =>75.25, 'tire' => 50.0);\n//上記はこうも書ける\n$days =['gasket' => 15.29, 'wheel' =>75.25, 'tire' => 50.0];\n```\nrange()で、文字列が指定された場合、最初の文字を使って範囲を作成する\n\n```index.php\necho range(\"aaa\",\"zzz\"); //これはrange(\"a\",\"z\"）と同じ\n```\n配列の要素数を数えるcount()・sizeof()だが、値がないものは数えない。\n\n```index.php\n$days = array('gasket' => 15.29, 'wheel' =>75.25, 'tire' => 0 );\nunset($days['tire']); //値を削除してみた\necho count($days); //出力は２　（unsetがなければ３）\n```\n多次元配列の配列は変数展開に波括弧を使う。\n\n```index.php\n$row0 = array(1,2,3);\n$row1 = array(4,5,6);\n$row2 = array(7,8,9);\n$multi = array($row0,$row1,$row2);\necho (\"２行目、0列目の値は{$multi[2][0]}です。\");\n//２行目、0列目の値は7です。と出力\n```\n\nあるキーが存在するかのチェックについて、値がどうであるかに関わらず、キーが有るかどうかを調べる場合はarray_key_exists（）を使う。isset()だと、値がNULLの場合Falseが返るので注意。\n\n```index.php\n$a = array('php' => NULL);\nif (isset($a['PHP'])){\n echo 'isset:'true';\n}\nif (array_key_exists($a['PHP'])){\n echo 'array_key_exists:'true';\n}\n```\n\n# 6章　オブジェクト\n\n黒本にはない「トレイト」というのがある\n「クラス階層の枠を超えてコードを再利用するための仕組み」ということ\nこれを使うとクラス階層で共通の先祖を持たないクラス同士でも機能を共有できる\n\n```index.php\n//トレイト\ntrait Logger{\n  public function log($logString){\n    $classname = __CLASS__;\n    echo date(\"Y-m-d h:i:s\", time()) . \":[{$classname}] {$logString} <br>\";\n  }\n}\n\nclass User{\n  use Logger; //トレイトを使う宣言\n  public $name;\n  function __construct($name = ''){\n    $this->name = $name;\n    $this->log(\"Created user '{$this->name}'\"); //ここでトレイトの関数を使ってる\n  }\n  function __toString(){\n    return $this ->name;\n  }\n}\n\nclass UserGroup{\n  use Logger; //トレイトを使う宣言\n  public $users = array();\n  public function includesUser($user){\n      return in_array($user,$this->users);\n  }\n  public function addUser(User $user){\n    if (!$this->includesUser($user)){\n      $this->users[]=$user;\n      $this->log(\"Added user '{$user}' to group\"); //ここでトレイトの関数を使ってる\n    }\n  }\n}\n\n$group = new UserGroup;\n$group->addUser(new User(\"Franklin\"));\n\n\n```\n\n出力\n2021-03-30 02:55:03:[User] Created user 'Franklin'\n2021-03-30 02:55:03:[UserGroup] Added user 'Franklin' to group\n\n特に難しいところはないはず。\nサブクラスとかでもないクラスでトレイトを使用しており、再利用もできている。\n\nちなみに、既存のトレイトを使って新しいトレイトを作ることも可能。\nただし、名前空間がない場合、同名のメソッドは使えない\n\n```index.php\ntrait First{\n  public function doFirst(){\n    echo \"First<br>\";\n  }\n}\n\ntrait Second{\n  public function doSecond(){\n    echo \"second<br>\";\n  }\n}\n\ntrait Third{\n  use First, Second; //他のトレイトを利用、複数useできる\n  public function doAll(){\n    $this->doFirst(); //普通に使える\n    $this->doSecond();//普通に使える\n  }\n}\n\n\nclass Combined{\n  use Third; //これだけでもOK\n}\n\n$object = new Combined;\n$object -> doAll();\n\n```\n出力\nFirst\nsecond\n\n\n同じ名前のコマンドがあっても、insteadofで、優先するコマンドを指定することができる。\nFMTは下記の通り。\n優先するトレイト名::メソッド名 insteadof 優先されるトレイト名\n\n他にも、トレイトのメソッドをエイリアス化して使用することも可能。\nこの場合のFMTはトレイト名::メソッド名 as エイリアス名（自由に名前をつけられる）\n\n上記２つを使う場合、 use トレイト名１,トレイト名2{}の中に入れていくことにも注意。\n               \n\n```index.php\ntrait Command{\n  function run(){\n    echo \"コマンドを走らせます<br>\";\n  }\n}\n\ntrait Marathon{\n  function run(){\n    echo \"マラソンを走ります<br>\";\n  }\n}\n\nclass Person{\n  use Command, Marathon {\n    Command::run as runCommand; //runメソッドが使われたら、Marathon::runを優先する\n    Marathon::run insteadof Command; // runCommandはCommandのRunメソッドを実行\n    } \n}\n\n$person = new Person;\n$person->run();\n$person->runCommand();\n\n```\n","user":"Atsulabo","created_at":"2021-03-30T14:19:54+09:00","updated_at":"2021-03-30T14:19:54+09:00"},{"url":"https://qiita.com/gooddaysstart/items/0d9f8b2cf77502941ea5","title":"Java学習　基礎編　コンストラクタとは？","body":"Java学習の備忘録になります。\n内容は初心者なので基礎的な部分となります。\nJavaに興味がある方やJava学習初心者の参考になれば幸いです。\n\n* * *\n#### コンストラクタとは？\n\n前回、インスタンスの生成から、インスタンスフィールドの値をセットする方法あたりを行ってきましたが、このインスタンスフィールドが増えると記述も面倒だし、わかりづらかったりします。\n\nそこで登場するのが**コンストラクタ**です。\n\n詳しく説明すると、クラスにはコンストラクタというものがあり、**newを使ってインスタンスを生成した後に自動で呼び出される特別なメソッド。**\n\n#### コンストラクタの定義方法\n\n下記2つの決まりを守ること。\n\n**①コンストラクタ名は、クラス名と同じにする\n②戻り値を書いてはいけない\n(voidも書かない)**\n\n```Person.java\nclass クラス名{\n  コンストラクタ名() { // コンストラクタ名はクラス名と同じにする\n  // インスタンス生成時に行いたい処理\n  }\n}\n```\n■具体例\n\n```Main.java\nPerson person = new Person();\n\n// 出力結果\nインスタンスが生成されました\n```\n\n```Person.java\nclass Person{\n  public String name;\n  Person() { // インスタンス生成時に行われる処理\n    System.out.println(\"インスタンスが生成されました\");\n  }\n}\n```\n#### インスタンスフィールドの値セットを楽にする\n\n下記のよな場合に、newでインスタンス生成した後に、自動で実行されるコンストラクタの中で、各フィールドに値をセットするようにする。\n\n```Main.java\nPerson person = new Person();\nPerson.name = \"Sasaki\"; // 下記コンストラクタ内でセットしたい\n```\n\n```Person.java\nclass Person{\n  public String name;\n  Person() { \n    // ここでセットしたいのよ\n  }\n}\n```\n\n##### コンストラクタに情報を渡す\n\nnewでインスタンスを生成する際に、**new クラス名( )**の**( )**には引数を渡すことができる。そして、その引数は直後に呼び出されるコンストラクタに受け渡される。\n\n下記のように、インスタンスを生成する際に、インスタンスフィールドにセットしたい値 (\"Sasaki\")を引数に渡し、コンストラクタでセットするよにする。\nコンストラクタ内でも**this**を用いてインスタンスを利用することができる。\n※**this**については後ほど解説\n\n\n```Main.java\nPerson person = new Person(\"Sasaki\");\nSystem.out.println(person.name);\n\n// 出力結果\nSasaki\n```\n\n```Person.java\nclass Person{\n  public String name;\n  Person(String name) { // String型 \"Sasaki\"を受け取る\n    this.name = name; // インスタンスフィールドnameへ\"Sasaki\"をセット\n  }\n}\n```\n* * *\n#### thisとは？\n※はじめに、今回は長くなってしまうので詳しくは別記事で投稿したいと思います。\n\n**this**とは、メソッド内でインスタンスフィールドにアクセスするために用いる特殊な変数のこと。\nthisは、クラス内のメソッドの定義の中でのみ使用できる。\nthisは、メソッドが呼ばれたときに、そのメソッドを呼び出しているインスタンスに置き換えられる。\n\n■具体例\n\n```Main.java\nPerson person = new Person(\"Sasaki\");\nperson.name = \"Sasaki\";\nperson.hello();\n\n// 出力結果\nこんにちは、わたしはSasakiです\n```\n\n```Person.java\nclass Person{\n  public String name;\n  public void hello() {\n    System.out.println(\"こんにちは、わたしは\" + this.name + \"です\");\n  }\n}\n```\n* * *\n#### おわりに\nちょっと複雑になってきましたが、確実に理解し使えるようにしていきたいですね。\nなお、ご指摘などございましたら、遠慮なくお願いいたします！！\n","user":"gooddaysstart","created_at":"2021-03-30T14:17:11+09:00","updated_at":"2021-03-30T14:17:11+09:00"},{"url":"https://qiita.com/rice01010101/items/d14fade441e1c3a73ae8","title":"AWS CloudFormationでジョブ・トリガー組込済みのGlueワークフローを作成する","body":"# はじめに\n雑に調べるとcfnテンプレートのサンプルが見つからずかつできないっぽい情報が見つかる。\nそうではなくて実際できるんだよって話。\n\n# どのようにcfnテンプレートを書けば良いのか\nhttps://qldb-immersionday.workshop.aws/jp/lab3/task3.html\n上のページ内「glue-workflow.yaml」を参考に書く。\n\n# 注意事項\n* ワークフローに組み込む最初のトリガーのTypeは「ON_DEMAND」か「SCHEDULED」でなければならない。（「CONDITIONAL」不可）\n* ワークフローに組み込む２つ目以降のトリガーのTypeは「CONDITIONAL」でなければならない。（「ON_DEMAND」「SCHEDULED」不可）\n* トリガーのTypeに「SCHEDULED」「CONDITIONAL」を選択した場合は、「StartOnCreation: True」がPropertiesに必要。（「ON_DEMAND」は不要）<br>\n  「StartOn~」が無い場合は無効化されたトリガーが作成され、有効化するまで実行されない。\n* トリガーのType「CONDITIONAL」の場合、基準時間はUTC。\n* トリガーのType「SCHEDULED」のサンプルコードは[公式ドキュメント](https://docs.aws.amazon.com/ja_jp/glue/latest/dg/populate-with-cloudformation-templates.html#sample-cfn-template-trigger-scheduled)参照\n* トリガーに複数のジョブ、クローラを実行させたい場合は、以下のようなコード。\n\n```yaml\n    Properties:\n      Actions:\n        - JobName: 【実行ジョブ名１】\n        - Jobname: 【実行ジョブ名２】\n```\n\n* トリガーのタイプ「CONDITIONAL」で、<br>\n  複数のジョブを監視対象としたい場合は**多分**以下のようなコード。\n\n```yaml\n    Properties:\n      Predicate:\n        Conditions:\n          - LogicalOperator: EQUALS\n            JobName: 【監視ジョブ１】\n            # STARTING | RUNNING | STOPPING | STOPPED | SUCCEEDED | FAILED | TIMEOUT\n            State: SUCCEEDED\n          - LogicalOperator: EQUALS\n            JobName: 【監視ジョブ２】\n            State: SUCCEEDED\n        # AND（監視ジョブが全て条件を満たす） | ANY（監視ジョブのいずれかが条件を満たす）\n        Logical: AND \n```\n\n# 終わりに\nGlueワークフローは、ジョブ、クローラを単純なワークフローで実行する場合に向いている。\n複雑なワークフローを作りたい場合はStep Functionが向いているらしい。詳しくは知らん。\n以上。\n\n","user":"rice01010101","created_at":"2021-03-30T14:16:48+09:00","updated_at":"2021-03-30T14:16:48+09:00"},{"url":"https://qiita.com/TA6335/items/a436765564d17f4d5b4b","title":"フォントInstall 方法 [WINDOWS10]","body":"###自分の好きなフォントを入れてみたので、その手順を紹介します。\n尚、Installしたフォントは無料版のみです。\n\n---\n####毛筆タイプのものを自分は利用したかったので、\"しょかきうたげ\"の無料版をInstallしました。\n\n[参考サイト](https://shokaki.booth.pm/items/1492419)\n\n無料版だと使用できる文字が限定されるので、自由に使いたい場合は有償版購入となります。\n\n---\n###Install方法\n\n1.上記フォントをDownloadしたら、しょかきうたげ（無料版）.ttfを開きます。\n![1キャプチャ.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/866385/f13afd7e-04ff-58b0-852c-038125f74f99.png)\n2.インストールボタンを押す。\n![1キャプチャ.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/866385/4d9f0b03-edde-aed6-d869-908e6876b844.png)\n3.C:\\Users\\ユーザ名\\AppData\\Local\\Microsoft\\Windows\\Fonts\nにインストールしたファイルが格納されているかを確認する。\n![1キャプチャ.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/866385/dc8e73bc-1c47-a7cb-082f-96e1c82ec1e3.png)\n\n###これでインストルできたと思うので、Excelを開いて確認。\n(別にExcelじゃなくてもいいと思います)\n4.確認画面(Excel)\n![1キャプチャ.PNG](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/866385/9f3459a3-f97e-b01d-920d-4aef96ed14a7.png)\n\n\n\n\n\n\n","user":"TA6335","created_at":"2021-03-30T14:16:21+09:00","updated_at":"2021-03-30T14:16:21+09:00"},{"url":"https://qiita.com/ichi_zamurai/items/dcbac977c1ff367b9094","title":"【Python】pipコマンドのセットアップとライブラリのインストール方法","body":"#`pip`コマンドとは\n`pip`の正式名称は、`Pip Install Packages`で、パッケージ管理システムです。\nPython2.7.9以降とPython3.4以降にデフォルトで付属されており、\n\n`PyPI(Python Package Index)`に登録されているwheel形式のPython外部パッケージ\nをpipを使用することで、インストールできます。\n\n- `wheel形式`:Pythonのパッケージの形式（フォーマット）。 実態はzip形式のアーカイブで、`PEP427`で定義されている\n\n\n#`pip`のセットアップ\n##bash_profileにpythonコマンドのPATHを通しておく\n```bash\n# vimでbash_profileを編集\n$ vi ~/.bash_profile\n\n# insertモードで下記を追加(※versionは任意)\nexport PATH=$PATH:/Users/username/Library/Python/3.8/bin\n\n# vimを抜ける => escを押してから:wqで保存\n\n# bash_profileの更新を反映\n$ source ~/.bash_profile\n```\n\n##pipのインストール\n```bash\n# get-pip.pyのダウンロード。任意のディレクトリに保存\n$ mkdir ./pip\n$ cd pip\n$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\n# 保存したディレクトリで実行\n$ python get-pip.py\n\n# インストールの確認(version確認)\n$ pip -V\n```\n\n#ライブラリのインストール\n試しに、[requests](https://pypi.org/project/requests/)パッケージをインストールしてみます。\n(2021/03/30時点)\n\n```bash\n# カレントディレクトリにrequestsをインストール\n$ pip install requests -t .\n\nCollecting requests\n  Downloading requests-2.25.1-py2.py3-none-any.whl (61 kB)\n     |████████████████████████████████| 61 kB 2.2 MB/s \nCollecting certifi>=2017.4.17\n  Using cached certifi-2020.12.5-py2.py3-none-any.whl (147 kB)\nCollecting chardet<5,>=3.0.2\n  Downloading chardet-4.0.0-py2.py3-none-any.whl (178 kB)\n     |████████████████████████████████| 178 kB 3.3 MB/s \nCollecting idna<3,>=2.5\n  Using cached idna-2.10-py2.py3-none-any.whl (58 kB)\nCollecting urllib3<1.27,>=1.21.1\n  Downloading urllib3-1.26.4-py2.py3-none-any.whl (153 kB)\n     |████████████████████████████████| 153 kB 1.3 MB/s \nInstalling collected packages: urllib3, idna, chardet, certifi, requests\nSuccessfully installed certifi-2020.12.5 chardet-4.0.0 idna-2.10 requests-2.25.1 urllib3-1.26.4\n```\n\n#まとめ\n\nハマったところは\n\n- 事前にpythonのPATHを通しておく必要があった\n- `get-pip.py`を自分でダウンロードして、ダウンロードしたディレクトリでその展開が必要だった\n\n`pip`って響き、なんかかわいい✨\n\n以上、ありがとうございました。\n","user":"ichi_zamurai","created_at":"2021-03-30T14:04:54+09:00","updated_at":"2021-03-30T14:04:54+09:00"},{"url":"https://qiita.com/Oyuki123/items/02725684ca2b2583c8b4","title":"Docker復習【編集中】","body":"\nER図の自動生成\n\n```\nhttps://blog.suusuke.info/category/docker/\n```\nhttps://blog.suusuke.info/category/docker/\n","user":"Oyuki123","created_at":"2021-03-30T14:01:17+09:00","updated_at":"2021-03-30T14:01:17+09:00"},{"url":"https://qiita.com/kai_kou/items/e22cb6d693cdef041890","title":"GitHub ActionsでPHP-CS-Fixerを実行してコミットする","body":"ついうっかりPHP-CS-Fixerで自動整形し忘れてpushしても、GitHub Actionsで自動整形したら幸せになれると思ったので試してみました。\n\n\n## 前提\n\nLaravel Sailで作成したプロジェクトでPHP-CS-Fixerを利用できるようした[GitHubリポジトリ](https://github.com/kai-kou/laravel-sail-sample-projects)にワークフローを追加する手順となります。\n\n## 手順\n\n### ローカルでワークフロー実行ができるツールのインストール\n\nローカルでワークフロー実行ができるツールがありました🚀🚀🚀\n\nnektos/act: Run your GitHub Actions locally 🚀\nhttps://github.com/nektos/act\n\nインストール方法も簡単なので導入しやすいです。\n\n```console:Macの場合\n> brew install act\n```\n\nセットアップスクリプトも提供されているので、Mac以外でもインストールは簡単です。\n\n```console\n> curl https://raw.githubusercontent.com/nektos/act/master/install.sh | sudo bash\n```\n\n\n### ワークフローを設定する\n\nツールがインストールできたらワークフローを作成します。\n\n```console\n> cd <プロジェクトのディレクトリ>\n> mkdir -p .github/workflows\n> touch .github/workflows/php-cs-fixer.yml\n```\n\n定義したワークフローは以下となります。\n\n```yaml:php-cs-fixer.yml\nname: Laravel\n\non: push\n\njobs:\n  php-cs-fixer:\n    runs-on: ubuntu-latest\n\n    steps:\n    - uses: actions/checkout@v2\n    - name: Cache vendor\n      id: cache\n      uses: actions/cache@v1\n      with:\n        path: ./vendor\n        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-composer-\n    - name: Composer install\n      if: steps.cache.outputs.cache-hit != 'true'\n      run: composer install -n --prefer-dist\n    - name: Dry-run php-cs-fixer\n      run: |\n        ./vendor/bin/php-cs-fixer fix --dry-run --diff --diff-format=udiff --using-cache=no . || true\n    - name: Execute php-cs-fixer\n      run: |\n        ./vendor/bin/php-cs-fixer fix --using-cache=no\n    - name: Commit and push\n      uses: stefanzweifel/git-auto-commit-action@v4.2.0\n      with:\n        commit_message: pxp-cs-fixer by Github Actions\n    - name: Run if changes have been detected\n      if: steps.auto-commit-action.outputs.changes_detected == 'true'\n      run: echo \"Changes!\"\n    - name: Run if no changes have been detected\n      if: steps.auto-commit-action.outputs.changes_detected == 'false'\n      run: echo \"No Changes!\"\n```\n\n#### パッケージのインストール\n\nGitHub上ワークフロー実行する際にはキャッシュが効くので、下記を参考に`vendor`ディレクトリが存在するか否かで`composer install`が実行されるようにしました。\n\ncache/examples.md at main · actions/cache 　\nhttps://github.com/actions/cache/blob/main/examples.md#php---composer\n\n```yaml\n    - name: cache vendor\n      id: cache\n      uses: actions/cache@v1\n      with:\n        path: ./vendor\n        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}\n        restore-keys: |\n          ${{ runner.os }}-composer-\n    - name: composer install\n      if: steps.cache.outputs.cache-hit != 'true'\n      run: composer install -n --prefer-dist\n```\n\n#### PHP-CS-Fixerの実行\n\n変更箇所がわかるように`--dry-run --diff --diff-format=udiff`オプションを付けています。\nまた、最後に`|| true`をつけることでワークフローが終了しないようにしています。\n\nこちらの記事を参考にさせてもらいました。(感謝\n\nCIサービスはもういらない！？github actionsでphp-cs-fixerを使ってみる - Qiita\nhttps://qiita.com/kojima_akira/items/1eeafcb4fd3bf910182e\n\n```yaml\n    - name: Dry-run php-cs-fixer\n      run: |\n        ./vendor/bin/php-cs-fixer fix --dry-run --diff --diff-format=udiff --using-cache=no . || true\n    - name: Execute php-cs-fixer\n      run: |\n        ./vendor/bin/php-cs-fixer fix --using-cache=no\n```\n\n#### リポジトリへコミット\n\n変更されたファイルを自動コミットしてくれる素敵なアクションがあったので利用しました。\n\nstefanzweifel/git-auto-commit-action: Automatically Commit changed Files back to Github with Github Actions\nhttps://github.com/stefanzweifel/git-auto-commit-action\n\n\n```yaml\n    - name: Commit and push\n      uses: stefanzweifel/git-auto-commit-action@v4.2.0\n      with:\n        commit_message: pxp-cs-fixer by Github Actions\n    - name: Run if changes have been detected\n      if: steps.auto-commit-action.outputs.changes_detected == 'true'\n      run: echo \"Changes!\"\n    - name: Run if no changes have been detected\n      if: steps.auto-commit-action.outputs.changes_detected == 'false'\n      run: echo \"No Changes!\"\n```\n\n\n## ローカルで動作確認\n\n```console\n# ワークフローの一覧\n> act -l\n\nID            Stage  Name\nphp-cs-fixer  0      php-cs-fixer\n\n\n# ワークフローの実行\n> act -P ubuntu-latest=nektos/act-environments-ubuntu:18.04\n```\n\n`-P`オプションで実行する環境のDockerイメージを指定します。actツール作成している方がイメージをいくつかしてくれていますが、Composerが利用できるのが指定したイメージとなります。\n\nnektos/act: Run your GitHub Actions locally 🚀\nhttps://github.com/nektos/act#runners\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/cc3184ee-6614-4b11-3e43-ad65793c4185.png)\n\n初回はイメージの取得で時間がかなりかかりますが、2回目からはサクサク動作します。\n`git: 'secrets' is not a git command. See 'git --help'.`エラーが発生してGitHubリポジトリへのpushに失敗しましたが、調べてもnektos/actで解決する方法をみつけられなかったのでひとまず良しとします。\n（おわかりになられる方がいたらぜひコメントお願いします。）\n\n## GitHubで動作確認\n\n作成したワークフローをGitHubリポジトリにPushするついでにワークフローの動作確認をします。\n\n```console\n> git brunch feature/use-php-cs-fixer\n> git checkout feature/use-php-cs-fixer\n> git add .github/\n> git commit -m 'Add: GitHub ActionsでPHP-CS-Fixerの自動整形を実行するようにしました。'\n> git push\n```\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/6874ceb4-c7b8-8a18-58e7-9fc8252dce7d.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/e44a9922-d8f0-d55b-6760-a29ef0a621ff.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/feba1c5c-0639-ec49-a296-5da8b408d161.png)\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/045613d2-9fa7-d65f-fc6e-e8e8dd8e0515.png)\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/48549/454c8c4f-54c3-06dd-fff1-38a7952ea46e.png)\n\n無事にPHP-CS-Fixerが実行できて、リポジトリへのpushもできました。\nやったぜ\n\n\n## 参考\n\nnektos/act: Run your GitHub Actions locally 🚀\nhttps://github.com/nektos/act\n\ncache/examples.md at main · actions/cache 　\nhttps://github.com/actions/cache/blob/main/examples.md#php---composer\n\nCIサービスはもういらない！？github actionsでphp-cs-fixerを使ってみる - Qiita\nhttps://qiita.com/kojima_akira/items/1eeafcb4fd3bf910182e\n\nstefanzweifel/git-auto-commit-action: Automatically Commit changed Files back to Github with Github Actions\nhttps://github.com/stefanzweifel/git-auto-commit-action\n\n【PHP】CS-Fixerの整形をGithub Actionsで自動化するぞ。 - ポンコツエンジニアのごじゃっぺ開発日記。\nhttps://www.pnkts.net/2020/07/29/php-cs-fixer-by-github-actions\n\nGithub Actionで自動コミット設定をする\nhttps://sunday-morning.app/posts/2020-5-19-github-action-auto-commit\n","user":"kai_kou","created_at":"2021-03-30T14:00:16+09:00","updated_at":"2021-03-30T14:00:16+09:00"},{"url":"https://qiita.com/NotK/items/aa201765b1eb85ca76de","title":"忘備録_Logic","body":"```java.java\n\nimport java.util.Scanner;\n\npublic class ScannerInst {\n\n\tpublic static void main(String[] args) {\n\t\tvar s = new Scanner(System.in);\n\t\tint[] a = new int[5];\n\t\tSystem.out.println(\"------------\");\n\t\tfor(int i = 0; i < 5;) {\n\t\t\ta[i] = s.nextInt();\n\t\t\tif(a[i] >= 0)\n\t\t\t\ti++;\n\t\t}\n\t\tSystem.out.println(\"-----------\");\n\t\tfor(int i = 0; i < 5; i++) {\n\t\t\tSystem.out.println(a[i]);\n\t\t}\n\t}\n\n}\n```\n","user":"NotK","created_at":"2021-03-30T13:50:02+09:00","updated_at":"2021-03-30T13:50:02+09:00"},{"url":"https://qiita.com/annie/items/42f9a75f12e564d6ffb0","title":"Azure Communication Services ことはじめ (3) : Microsoft Teams 会議に音声参加ができるまで","body":"Azure Communication Services (以下 ACS) は、リアルタイム コミュニケーション基盤となるサービスで、テキスト | 音声 | ビデオ によるコミュニケーションのハブとなり、接続やコントロールを行うアプリやサービスを SDK などを用いて容易に開発できます。\n\n今回は、2021 年 3 月 から ACS に追加された Microsoft Teams 会議参加ができる機能を使って、Teams 会議に音声通話で参加できるまでの手順を追って確認し、Node.js の Web アプリを作成します。\n\n# 開発環境\n\n- 開発環境\n    - Windows 10 (20H2 - Build 19042)\n    - Visual Studio Code (ver 1.54.3)\n    - Node.js (12.18.4)\n- 利用ライブラリー、フレームワークなど\n    - Azure Communication Services\n        - azure/communication-common@1.0.0\n        - azure/communication-calling@1.0.0\n        - azure/communication-identity@1.0.0\n    - Webpack\n        - webpack@4.42.0\n        - webpack-cli@3.3.11\n        - webpack-dev-server@3.10.3\n\n# 0. 事前準備\n\n### Azure Communication Services サービス\n\n[Azure Communication Services ことはじめ (1) : チャットができるまで](https://qiita.com/annie/items/8ba0afe731dc9be589c8) の [0.事前準備](https://qiita.com/annie/items/8ba0afe731dc9be589c8#0-%E4%BA%8B%E5%89%8D%E6%BA%96%E5%82%99) と同様に、Azure Portal で ACS のサービスを作成し、接続文字列とエンドポイントを取得しておきます。\n\n### Microsoft Teams tenant interoperability (相互運用) 有効化\n\nMicrosoft Teams テナントと ACS の接続を有効にする必要があります。2021 年 3 月現在 プレビュー機能のため、こちらのフォームから申請が必要です。\n\n[Request to enable/disable the federation between ACS resources and your Teams tenant](https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR21ouQM6BHtHiripswZoZsdURDQ5SUNQTElKR0VZU0VUU1hMOTBBMVhESS4u)\n\n> 申請者は Microsoft 365 の Global Administrator または Teams Service Administrator の権限が必要になります。(→ [Microsoft 365 の 管理者ロール](https://docs.microsoft.com/ja-jp/microsoft-365/admin/add-users/about-admin-roles?view=o365-worldwide))\n\n\n# 1. 音声通話ができるまで\n\n今回は Node.js、Web アプリを念頭に、VoIP 通話 | Teams 会議へ音声参加ができるまでの手順を確認します。\n\n## 1-0. ライブラリの追加\n\n以下のライブラリを冒頭に追加します。\n\n|ライブラリ||\n|:---|:---|\n| azure/communication-common | ユーザーの作成、アクセストークン取得 |\n| azure/communication-identity |　(同上)　|\n| azure/communication-calling | 音声通話のコントロール |\n\n```client.js\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\nimport { CallClient, Features } from \"@azure/communication-calling\";\n```\n\n## 1-1. ユーザーを作成し、アクセストークンを取得する\n\n接続文字列を用いて CommunicationIdentityClient を新規作成し、ユーザーの作成とアクセストークンの取得を行います。接続文字列には Azure Communication Services　にアクセスするキーが含まれています。アクセストークンの種類は Calling を指定します。(他に Chat, SMS があります)\n\n> YOUR_CONNECTION_STRING は 事前準備で取得した 接続文字列に置き換えてください。\n\n```client.js\nconst identityClient = new CommunicationIdentityClient(\"YOUR_CONNECTION_STRING\");\n\nlet userId;\nlet userToken;\nidentityClient.createUser().then(userResponse => {\n    userId = userResponse.communicationUserId;\n    identityClient.issueToken(userResponse, [\"voip\"]).then(tokenResponse => {\n        userToken = tokenResponse.token;\n}\n```\n\n## 1-2. 通話クライアントを作成\n\n取得したトークンを用いて、通話をコントロールする CallClient を作成します。\nその後作成する CallAgent で VoIP通話 | Teams 会議参加の処理を行います。\n\n```client.js\nlet callClient;\nconst tokenCredential = new AzureCommunicationUserCredential(userToken);\ncallClient.createCallAgent(tokenCredential).then(agent => { callAgent = agent; }\n```\n\n## 1-3. VoIP 通話を開始する | Teams 会議に参加する\n\nVoIP 通話、Teams 会議の参加、いずれも CallAgent から処理することができます。\n\n### 1-3-1. VoIP 通話を開始する\n\nCallAgent から、通話したい相手を CommunicationUserId で指定して Call します。\n\n```client.js\nlet call\ncall = callAgent.call([{ communicationUserId: \"8:echo123\" }], {});\n``` \n\n### 1-3-2. Teams 会議に参加する\n\nCallAgent から、参加したい Teams 会議にアクセスします。Teams 会議 URL を引数として与えるだけで OK です。\n\n```client.js\nlet call\ncall = callAgent.join({ meetingLink: \"TEAMS_MEETING_URL\" }, {});\n```\n\n> Teams 会議 URL は以下のような URL をエンコードしたものになります。\n`https://teams.microsoft.com/l/meetup-join/19:meeting_xxx...xxx@thread.v2/0?context={\"tid\":\"xxx...xxx\",\"oid\":\"xxx...xxx\"}`\n\nTeams 会議への参加ステータス (リクエスト、許可、参加など) を取得したり、録音録画の有無を確認したりすることが可能です。\n\n```client.js\nvar message = \"\";\ncall.on('stateChanged', () => {\n        message = call.state;\n});\n\ncall.api(Features.Recording).on('isRecordingActiveChanged', () => {\n        if (call.api(Features.Recording).isRecordingActive) {\n            message = \"This call is being recorded\";\n        };\n    });\n```\n\n## 1-4. 通話を終了する\n\nCall を終了して音声通話 | Teams 会議参加を終了します。\n\n```client.js\ncall.hangUp({ forEveryone: false });\n```\n\n\n# 2. Web アプリの開発\n\n以上の手順を踏まえて、Visual Studio Code で Node.js Web アプリを作成します。\n\n## 2-1. 新規 Node.js アプリの作成\n\nNode.js アプリを作成するフォルダーを作成し、Visual Studio Code で開き、`npm init` コマンドで package.json を作成します。\n\n```\nnpm init -y\n```\n\n## 2-2. Azure Communication Services のライブラリのインストール\n\n`npm install` コマンドで Azure Communication Services の必要なライブラリ (パッケージ) をインストールします。\n\n```\nnpm install @azure/communication-common --save\nnpm install @azure/communication-identity --save\nnpm install @azure/communication-calling --save\n```\n\n## 2-3. Webpack のインストール\n\n今回は Webpack を利用して、JavaScript のモジュールバンドル & ローカルでの実行確認 を行います。\n`npm install` コマンドで、webpack、webpack-cli、webpack-dev-server をインストールします。\n\n```\nnpm install webpack@4.42.0 webpack-cli@3.3.11 webpack-dev-server@3.10.3 --save-dev\n```\n\n> 今回は [Azure Communication Services ドキュメント](https://docs.microsoft.com/ja-jp/azure/communication-services/quickstarts/voice-video-calling/getting-started-with-calling?pivots=platform-web) 推奨バージョンを指定してインストールしています。\n\n## 2-4. コーディング\n\n### 画面 (index.html)\n\nユーザーからの操作および音声入出力、各種情報を表示するため、index.html という名前でファイルを作成し、以下のような UI を作成します。\n\n![ACS_3_01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/117583/eb2adb46-8b08-93f0-404c-9fecb954ef17.png)\n\nコードは以下になります。\n\n```index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <title>Azure Communication Services - VoIP Calling | Teams Interop</title>\n  </head>\n  <body>\n    <h1>Azure Communication Services</h1>\n    <h2>VoIP Calling | Teams Meeting Join Sample App</h2>\n    <div>\n      <label>Your UserId: </label>\n      <input\n      id=\"caller-id-output\" type=\"text\" placeholder=\"Your id will be shown here\"\n      style=\"margin-bottom:1em; width: 600px; vertical-align: text-top;\"\n      disabled=\"true\"\n      />\n    </div>\n    <div>\n      <label>Your Token: </label>\n      <textarea \n      id=\"caller-token-output\" type=\"text\" placeholder=\"Your token will be shown here\"\n      style=\"margin-bottom:1em; width: 600px; height: 130px; vertical-align: text-top;\"\n      disabled=\"true\"\n      ></textarea>\n    </div>\n    <div>\n      <input \n      id=\"callee-id-input\" type=\"text\" placeholder=\"Who would you like to call?\"\n      style=\"margin-bottom:1em; width: 300px;\"\n      />\n      <button id=\"call-button\" type=\"button\" disabled=\"true\" style=\"margin-bottom:1em\">\n        Start Call\n      </button>\n    </div>\n    <div>\n      <input \n      id=\"meeting-url-input\" type=\"text\" placeholder=\"Copy and paste MSTeams meeting link\"\n      style=\"margin-bottom:1em; width: 300px;\"\n      />\n      <button id=\"join-meeting-button\" type=\"button\" disabled=\"true\" style=\"margin-bottom:1em\">\n        Join Teams Meeting\n      </button>\n    </div>\n    <div>\n      <button id=\"hang-up-button\" type=\"button\" disabled=\"true\" style=\"margin-bottom:1em\">\n        Hang Up\n      </button>\n    </div>\n    <div>\n      <label\n      id=\"message-output\"\n      style=\"margin-bottom:1em; width: 1000px; height: 50px;\"\n      ></label>\n    </div>\n    <script src=\"./index.js\"></script>\n  </body>\n</html>\n```\n\n加筆を行って整えたコードは以下になります。\n[ACSTeamsCallWeb202103/index.html](https://github.com/ayako/AzCommSrvsDemo202010/blob/main/ACSTeamsCallWeb202103/index.html)\n\n\n### 通話機能 (client.js)\n\nclient.js という名前でファイルを作成し、VoIP 通話 | Teams 会話 をコントロールする機能を記述します。\n\n> 後ほど client.js を index.js にビルドして index.html で読み込みます。\n\n#### 利用ライブラリー\n\n今回は、これらのライブラリーを利用します。\n\n```client.js\nimport { AzureCommunicationTokenCredential } from '@azure/communication-common';\nimport { CommunicationIdentityClient } from \"@azure/communication-identity\";\nimport { CallClient, Features } from \"@azure/communication-calling\";\n```\n\n#### 接続文字列\n\nclient.js に connectionString を記載しておきます。\n\n> YOUR_CONNECTION_STRING は 事前準備で取得した 接続文字列に置き換えてください。\n\n> セキュリティの観点から別の設定ファイルなどに記載して読み出すのが一般的ですが、今回は動作を確認するのみのアプリなので本体に記載しています。\n\n```client.js\nlet connectionString = \"YOUR_CONNECTION_STRING\";\n```\n\n#### UI 画面の入出力\n\n呼び出しを行う相手先の UserId または Teams 会議リンク(URL) の入力を取得できるようにします。\nまた、VoIP通話 の開始 | Teams 会話 の参加、終了のボダンのクリックを取得できるようにします。\n出力は、UserId、UserToken、動作に対するメッセージを表示するようにしておきます。\n\n```client.js\n// 入力\nconst calleeInput = document.getElementById(\"callee-id-input\"); // 通話先 UserId\nconst callButton = document.getElementById(\"call-button\");      // 通話開始ボタン\nconst meetingUrlInput = document.getElementById(\"meeting-url-input\");       // Teams会議URL\nconst joinMeetingButton = document.getElementById(\"join-meeting-button\");   // Teams会議会話参加ボタン\nconst hangUpButton = document.getElementById(\"hang-up-button\"); //通話終了ボタン\n// 出力\nconst callerIdOutput = document.getElementById(\"caller-id-output\");       // ACS UserId\nconst callerTokenOutput = document.getElementById(\"caller-token-output\"); // ACS UserToken\nconst messageOutput = document.getElementById(\"message-output\");          // 状態メッセージ\n```\n\n\n#### CommunicationUser の新規作成、Token の取得、CallAgent の生成\n\n接続文字列から User を新規作成して Token を取得します。Token を利用して、通話のコントロールを行う CallAgent を生成します。CAllAgent が無事生成出来たら callButton (VoIP通話開始ボタン) | joinMeetingButton (Teams会議参加ボタン) をクリック可能(disabled = false)にします。\n\n```client.js\nconst identityClient = new CommunicationIdentityClient(connectionString);\nconst callClient = new CallClient();\nlet callAgent;\nlet call;\n\nidentityClient.createUser().then(identityResponse => {\n    callerIdOutput.value = identityResponse.communicationUserId;    // ACS User Id 画面出力\n    identityClient.getToken(identityResponse, [\"voip\"]).then(tokenResponse => {\n        const userToken = tokenResponse.token;\n        callerTokenOutput.value = userToken;                        // ACS User Token 画面出力\n        messageOutput.innerText += \"Got user token.\";               // 状態メッセージ画面出力\n\n        const tokenCredential = new AzureCommunicationTokenCredential(userToken);\n        callClient.createCallAgent(tokenCredential, {displayName: 'ACS user'}).then(agent => {\n          callAgent = agent;\n          callButton.disabled = false;                              // VoIP通話開始ボタンをクリック可能に\n          joinMeetingButton.disabled = false;                       // Teams会議参加ボタンをクリック可能に\n          messageOutput.innerText += \"\\nReady to call | join MSTeam's Meeting.\";        // 状態メッセージ画面出力\n        });\n    });\n});\n```\n\n#### VoIP 通話の開始\n\ncallButton (通話開始ボタン) がクリックされたら、callAgent から相手の Communication Id (callee-id-input TextBox から取得) の呼び出しを行います。\n\n```client.js\ncallButton.addEventListener(\"click\", () => {\n    // 通話開始\n    call = callAgent.startCall(\n        [{ id: calleeInput.value }],\n        {}\n    );\n\n    // 各ボタンのステータス変更、状態メッセージ表示\n    hangUpButton.disabled = false;      // 通話停止ボタンをクリック可能に\n    callButton.disabled = true;         // VoIP通話開始ボタンをクリック不可に\n    joinMeetingButton.disabled = true;  // Teams会議参加ボタンをクリック不可に\n    messageOutput.innerText += \"\\nCall: started.\";    // 状態メッセージ画面出力    \n});\n```\n\n#### Teams 会議への参加\n\njoinMeetingButton (Teams会議参加ボタン) がクリックされたら、callAgent から Teams 会議 (meeting-url-input TextBox から取得) への参加をリクエストします。\ncall のステータスを確認して、会議参加リクエストの承認、会議参加、録音録画有無を表示します。\n\n```client.js\njoinMeetingButton.addEventListener(\"click\", () => {\n    // 会議参加リクエスト\n    call = callAgent.join(\n        { meetingLink: meetingUrlInput.value }, \n        {}\n    );\n\n    // 会議参加ステータスのチェック\n    call.on('stateChanged', () => {\n        messageOutput.innerText += \"\\nMeeting:\" + call.state;\n    })\n\n    // 会議の録音録画のステータス表示\n    call.api(Features.Recording).on('isRecordingActiveChanged', () => {\n        if (call.api(Features.Recording).isRecordingActive) {\n            messageOutput.innerText += \"\\nThis call is being recorded\";\n        };\n    });\n\n    // 各ボタンのステータス変更、状態メッセージ表示\n    hangUpButton.disabled = false;      // 通話停止ボタンをクリック可能に\n    callButton.disabled = true;         // VoIP通話開始ボタンをクリック不可に\n    joinMeetingButton.disabled = true;  // Teams会議参加ボタンをクリック不可に\n}); \n```\n\n#### 通話の終了\n\nhangupButton (通話終了ボタン) がクリックされたら、callAgent の通話を切断します。\n\n```client.js\nhangUpButton.addEventListener(\"click\", () => {\n    // 通話 | 会議参加 の終了\n    call.hangUp({ forEveryone: true });\n  \n    // 各ボタンのステータス変更、状態メッセージ表示\n    hangUpButton.disabled = true;       // 通話停止ボタンをクリック不可に\n    callButton.disabled = false;        // VoIP通話開始ボタンをクリック可能に\n    joinMeetingButton.disabled = false; // Teams会議参加ボタンをクリック可能に\n    messageOutput.innerText += \"\\nNow hanged up.\";\n});\n```\n\n最終的なコードはこちらになります。\n[ACSTeamsCallWeb202103/client.js](https://github.com/ayako/AzCommSrvsDemo202010/blob/main/ACSTeamsCallWeb202103/client.js)\n\n## 3. 音声通話 | Teams 会議通話参加 を試してみる\n\n今回は Webpack を利用しているので、client.js を index.js にビルドして起動します。\n\n```\nnpx webpack-dev-server --entry ./client.js --output index.js --debug --devtool inline-source-map\n```\n\n起動したら、ブラウザーから http://localhost:8080 にアクセスします。\nUser Id と Token が取得できると **[Start Call]** のボタンがアクティブになります。\n\n### 音声会話のチェック\n\n音声通話テスト用のユーザーである `8:echo123` を入力して **[Start Call]** をクリックします。\n\"Hello, welcome to Azure Communication Services audio testing system...\" と音声が聞こえれば OK です。音声を録音して再生することで、こちらの音声が取得できていることも確認できます。\n**[Hang Up]** をクリックすると会話は終了します。\n\n### Teams 会議通話参加のチェック\n\nTeams 会議を作成し、参加 URL を取得します。\nTeams 会議参加 URL を入力て **Join Team's Meeting** をクリックします。\n**[Hang Up]** をクリックすると会議から退出します。\n\n![ACS_3_02.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/117583/b4a002f2-77b4-971a-280c-cfd9f4fb408f.png)\n![ACS_3_03.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/117583/2a4e81a3-06c3-fe92-a192-f81efcddaffb.png)\n","user":"annie","created_at":"2021-03-30T13:48:20+09:00","updated_at":"2021-03-30T16:12:11+09:00"},{"url":"https://qiita.com/tommy_15926/items/3116a7824e8c2cd2d290","title":"Ruby ワンライナーを使うにあたって最低限抑えておきたいこと","body":"a\n","user":"tommy_15926","created_at":"2021-03-30T13:44:01+09:00","updated_at":"2021-03-30T13:44:01+09:00"},{"url":"https://qiita.com/otooto/items/7a1899206e36cf4a9d35","title":"Raspberry Pi 4にubuntu server 18.04のインストールをしてみる","body":"Raspberry Pi 4 Model Bにubuntu server 18.04をインストールに苦戦したのでその議事録。\n\nそれと筆者はQiita投稿初なので読みにくい点があると思いますがご容赦ください。\n\n# 作業環境&必要な道具\n\n作業はwindows10のノートパソコン、Raspberry Pi 4 Model B(4GB RAM)を使用します。\n他に今回の作業に使うハードウェアです。\n\n- ノートパソコン関連\n    - microSDカードリーダ搭載USBハブ\n\n- Raspberry Pi関連 \n    - microSD 32GB\n    - ACアダプタ\n    - キーボード(US配列)\n    - microHDMI-HDMI変換アダプタ\n\n# ubuntuイメージファイルのダウンロード\n\n今回はubuntu18.04を書き込みます。しかし、[ubuntu公式のRaspberry Piのインストールガイド](https://ubuntu.com/download/raspberry-pi)では20.04or20.10のイメージしかダウンロードできません。\n\nそこで、[wiki](https://wiki.ubuntu.com/ARM/RaspberryPi)から18.04のイメージをダウンロードします。\n\n今回は__arm64の18.04.5 LTS__になります。\n\n# microSDへの書き込み\n\nイメージのダウンロードが終了後、Raspberry Pi公式の書き込みツール[Raspberry Pi Imager](https://www.raspberrypi.org/software/)を使ってmicroSDへイメージファイルを書き込んでいきます。\n\nノートパソコンに\n\nImagerを起動後、__CHOOSE OS__のUse customからダウンロードしたファイルを選択。\n\n__CHOOSE SD CARD__から書き込むmicroSDカード選択し、 __WRITE__をクリックして書き込みます。\n\n# Raspberry Piで起動\n\n書き込み終了後、microSDをRaspberry Piに差し込み起動します。\n\n少し待つと、ログイン画面が出てきます。デフォルトのパスは両方__ubuntu__です。\nまた、同時にパスワードを変更を行います\n\n```\nLogin incorrect\nubuntu login: ubuntu\nPassword: ubuntu\n(current) UNIX password: ubuntu\nEnter new UNIX password: 新しいパスワード\nRetype new UNIX password: もう一度新しいパスワード\n```\nちなみに、login以外の入力内容は表示されない形になります。\n\nパスワードの変更が成功したら、ubuntu serverの操作が可能になります。\n\n# まとめ\n\n以上でRaspberry Pi 4にubuntu server 18.04のインストールが出来ます。\n\n本当はネットワーク設定についても触れたいですが、今回が初記事なのでここまでとします。\n\nネットワーク設定等はまた別記事としてあげます。\n\n非常にありふれた内容ですが、誰かの助けになれば幸いです。\n\n# 参考文献\n\n[Raspberry Pi 4 Model BにUbuntu 18.04 をインストールする ](https://rt-net.jp/mobility/archives/12773)\n\n[Raspberry Pi4 (メモリ4GB): Ubuntu18.04 + Xubuntu Desktopのインストールと設定](https://demura.net/education/17957.html)\n\n\n\n\n","user":"otooto","created_at":"2021-03-30T13:42:29+09:00","updated_at":"2021-03-30T13:42:29+09:00"},{"url":"https://qiita.com/tomoxxx/items/8508cd2455ffadfbc5d5","title":"楽天トラベルAPIを3分で叩いてみた♪","body":"#APIとは？\n\n他社が提供するサービス内の**\"情報\"**or**\"機能\"**を扱えるようにする仕組み\n\n![スクリーンショット 2021-03-30 10.59.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/126732a9-cf3a-e96c-215a-d934fd1e5a7e.png)\n\n\n#０：Rakuten Developersにアクセス\n\nhttps://webservice.rakuten.co.jp/api/simplehotelsearch/\n\n**①Rakuten Developersにログイン**\n(楽天アカウントがない方は登録をお願いします。)\n\n**②\"アプリID\"を発行**\n\n![スクリーンショット 2021-03-30 12.54.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/f930febe-f20e-0f1c-b82d-07ac379933f1.png)\n\n\n![スクリーンショット 2021-03-30 12.41.27.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/e878c648-54d0-6ce4-d99a-9fe7d6c014f5.png)\n\n\n\n\n**③\"API一覧\"をクリック**\n\n**④\"楽天トラベル系API\"の中にある\"楽天トラベル施設検索API\"をクリック**\n![スクリーンショット 2021-03-30 12.44.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/05019e86-ac52-dfb2-85cb-fcb3afd39df5.png)\n\n![スクリーンショット 2021-03-30 13.22.34.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/fbfea2fd-fb7b-3bcd-169e-28c49fadea84.png)\n\n上図のページに楽天トラベルAPIの仕様が細かく書かれているので、ざっと目を通してみて下さい。\n**（良く分からない方は以下のソースコードをみて感覚を掴んでみてください!）**\n\n#１：ソースコード\n\n```py\nimport pandas as pd\nimport requests\n```\n\n```py\nREQUEST_URL = \"https://app.rakuten.co.jp/services/api/Travel/SimpleHotelSearch/20170426\"\n#0-②でコピーしたIDを貼り付けてください\nAPP_ID = \"？？？？？？？？？？？？？？？？？？？？\"\n```\n\n\n今回は**日本・沖縄・那覇市**にある施設を検索してみたいと思います。\n\n```py\nparams = {\n    \"format\":\"json\",\n    \"largeClassCode\":\"japan\",\n    \"middleClassCode\":\"okinawa\",\n    \"smallClassCode\":\"nahashi\",\n    \"applicationId\":APP_ID\n}\n\nres = requests.get(REQUEST_URL, params)\n\nprint(res)\n```\nここで、**< Response [200] >**\nと出力されれば、リクエストに対してのレスポンスが成功しています!\n\n次に**取得したjson形式のレスポンス**をみましょう。\n\n```py\nprint(result)\n```\n\n![スクリーンショット 2021-03-30 13.03.46.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/1e95d5c1-7794-c327-3bbd-178c3e258cbf.png)\n\n上図から、\n**・全ページ数は15ページ**\n**・今回は1ページ目だけを取得**\n**・今回は1~30の施設情報を取得**\n(このソースコードではpageを指定していないので、1ページ目だけ取得することになっています。)\n\n\n\n\n以上より、\n**\"15ページの情報\"**があることが分かったので、全てを取得してデータフレームに格納していきます!\n\n```py\ndef rakuten_api():\n    df = pd.DataFrame()\n    index_num = 0\n    \n    #ページ数(1~15ページ)\n    for page in range(1,16):    \n        \n        params = {\n        \"format\":\"json\",\n        \"largeClassCode\":\"japan\",\n        \"middleClassCode\":\"okinawa\",\n        \"smallClassCode\":\"nahashi\",\n        \"page\": page,\n        \"applicationId\":APP_ID\n        }\n        \n        res = requests.get(REQUEST_URL, params)\n\n        #レスポンスの中身を取得\n        result = res.json()\n\n        hotels = result[\"hotels\"]\n\n        for hotel in hotels:\n            hotel_info = hotel[\"hotel\"][0][\"hotelBasicInfo\"]\n            _df = pd.DataFrame(hotel_info, index=[index_num])\n            index_num+=1\n            df = df.append(_df)\n            \n    return df\n\ndf = rakuten_api()\n```\nこれで、前15ページの施設情報をデータフレームに格納できました!\n\nここで、データフレームに格納されている**カラム名の一覧**をみましょう\n\n```py\nprint(df.columns)\n出力結果>>>\nIndex(['hotelNo', 'hotelName', 'hotelInformationUrl', 'planListUrl',\n       'dpPlanListUrl', 'reviewUrl', 'hotelKanaName', 'hotelSpecial',\n       'hotelMinCharge', 'latitude', 'longitude', 'postalCode', 'address1',\n       'address2', 'telephoneNo', 'faxNo', 'access', 'parkingInformation',\n       'nearestStation', 'hotelImageUrl', 'hotelThumbnailUrl', 'roomImageUrl',\n       'roomThumbnailUrl', 'hotelMapImageUrl', 'reviewCount', 'reviewAverage',\n       'userReview'],\n      dtype='object')\n```\nここから、**自分が必要なカラム名だけを抽出します。**\nそして、**csvファイルに出力**させて完成です!!\n\n```py\ndf[['hotelName','hotelInformationUrl','hotelMinCharge','telephoneNo','reviewAverage']].to_csv(\"hotel.csv\",index=False)\n```\n\n![スクリーンショット 2021-03-30 13.21.31.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/449715/ec3f3b88-fc8f-3bd2-4fe8-2d3c20c31540.png)\n\n# 2:最後に\n今回は楽天トラベル系APIを利用しましたが、\n**楽天ブックス系API**や**楽天レシピ系API**なども豊富にあるので、それらを組み合わせて自分好みのアプリケーションも作れそうです！\n\nその際にはまた、記事にしたいと思います!!\n","user":"tomoxxx","created_at":"2021-03-30T13:27:43+09:00","updated_at":"2021-03-30T13:27:43+09:00"},{"url":"https://qiita.com/akinko/items/87a00614908b3e630192","title":"空気品質モニターアプリをラズパイにdoker-composeで実装してみた(Docker + Typescript + Nuxt.js + Python + MongoDB + Nginx)","body":"# はじめに\n![frontend.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/215645/dd623207-3d44-0f30-c396-78a0b385aba7.png)\nキレイな空気が吸いたい！あわよくば、仕事も効率UPして清々しい1日を送りたい！！そう思い立ちまして、早速ラズベリーパイを使って自宅の空気品質モニターアプリを作ってみました:lifter_tone3:\n\n[GitHubリポジトリはコチラ](https://github.com/akiraseto/airwatch)\n\n\n# 特徴\nこんなことができます↓\n\n- リビングの空気品質をモニター\n- 書斎の空気品質をモニター\n- 10分毎にセンサー値を取得し続けてDB保存\n- ラズパイを再起動してもアプリも自動起動\n- 描画高速化のため限定数のデータでグラフ表示。非同期で残データ取得しシームレスにグラフを再描画\n- 10分ごとにデータを再取得し、グラフをシームレスに更新し続ける。\n- 1時間ごとのグラフもタブで表示\n- 固定IP,VPN利用で、外出先からでもWebアプリ利用化(API通信におけるバックエンドのIPアドレスを簡易解決)\n\nざっくりと上記の機能です。\n他に、\nURLクエリを追加することで、初期のグラフ描画データ数を任意に設定できるようにしました。\n`http://xxx?limit=10` =>10個のデータでグラフ描画。外出先でスマホからだと通信早くなり画面も小さいので重宝します。\n\n\n# 全体構成\nラズパイ上で、docker-composeを利用してコンテナ実装します。\n![system.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/215645/24a8f31c-48ca-5560-14ad-69bfaa0ec521.png)\n\n- センサー取得コンテナ:Pythonでセンサー値を取得しDBにインサート\n- DBコンテナ:MongoDBコンテナ(32bit)\n- バックエンドコンテナ:Python FlaskでAPIサーバー\n- フロントエンドコンテナ:NginxでWebサーバーコンテナ\n- Nuxt.js:Nginxで使う静的コンテンツをNux.jsで生成\n\n\n# 必要なもの\n## ラズパイ\n\n今回の実行環境です。\ndevice:Raspberry Pi 3 Model B\nOS: Raspbian GNU/Linux 9 (stretch)\n\n自宅ローカルネットワークで固定IP化しておきます。\nまた、外出先からも利用したければTailscaleなどインストールしてVPNでアクセスできるようにしておくと便利です。\n\n\n## GPIOセンサー\n書斎の空気品質チェックに使用したセンサーです。\n![gpio.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/215645/b343adee-6e16-5998-5ff7-f6b9572bc0a5.jpeg)\n以下のセンサーをGPIO接続して値を取得しました。\n\n- BMP180:温度、気圧、高度、海面気圧\n- DHT11:温度、湿度\n- SGP30:CO2(eco2), TVOC, エタノール, H2\n\n実の所、エタノールやH2値を見てもピンときませんでした。。センサーは固定設置なので高度も、海面気圧もいらないです。不要な値はグラフ表示から外しました。\n\nGPIOの接続は次の通り。\nBMP180, SGP30:i2cで並列接続\nDHT11: PIN4番使用\n\n\n## ダイキン空気清浄機\nリビングに設置したダイキン空気清浄機を利用して空気品質をモニターしました。\n気温、湿度、匂い、PM25、ホコリの値が取れます。\n![daikin.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/215645/b57784e4-7ad8-e88d-ef3f-04040e633e23.png)\nこの機種でなくても、ローカルネットワークでAPI通信できるIOT家電なら代用可能です。\n詳しくは過去の記事をご覧ください↓\n[IOT家電をAPIハックして、Siriから簡単に操作する方法](https://qiita.com/akinko/items/aaa269968c74fb6041e7)\n\n\n# センサーコンテナ\n10分ごとの周期で各センサーから値を取得して、DBにインサートします。\n公式のPythonコンテナを利用しています。\n\n以下は主なコードです↓\n\n```python:sensors/app.py\n#***省略***\nif __name__ == '__main__':\n    logging.basicConfig(level=logging.INFO)\n\n    sensors = [\n        Daikin(),\n        Bmp(),\n        Dht(),\n        Sgp()\n    ]\n\n    delta_list = {'minute': datetime.timedelta(minutes=1),\n                  'hour': datetime.timedelta(hours=1),\n                  'day': datetime.timedelta(days=1),\n                  'week': datetime.timedelta(weeks=1)}\n\n    # 最新DBデータ取得\n    latest_data = defaultdict(dict)\n    for period in delta_list:\n        for sensor in sensors:\n            name = sensor.__str__()\n            latest_data[name][period] = sensor.find_latest(period)\n\n    minutes_time = int(os.environ['BASIC_MINUTE'])\n    while True:\n        now = datetime.datetime.now()\n        data_sensors = {}\n        for sensor in sensors:\n            name = sensor.__str__()\n            data = sensor.get_sensor()\n            data_sensors[name] = data\n            logging.info('{}:{}'.format(name, data))\n\n        for period, delta in delta_list.items():\n            for sensor in sensors:\n                name = sensor.__str__()\n                if latest_data[name][period] is None or \\\n                        now >= latest_data[name][period]['timestamp'] \\\n                        + delta:\n                    if data_sensors[name] is not None:\n                        sensor.insert_data(period, data_sensors[name])\n                        latest_data[name][period] = data_sensors[name]\n\n        time.sleep(minutes_time * 60)\n\n\n```\n\n- ループ処理で回すための初期設定を作る。\n    - `sensors`:取得したいセンサーのインスタンスをリスト化。  \n    今後センサーを追加する事があれば、modelと、このリストに追記だけで対応できる。\n    - `delta_list`:センサー取得タイミング。これにより取得タイミングを制御  \n    key名でMongoDBの各センサーのデータベースにコレクションとして自動生成される。\n- センサー値取得ループは各センサーオブジェクトをポリモーフィズムを考慮して作成。  \n  (同一名、同一機能メソッドに揃えている)\n    - `sensor.__str__()`:各センサー名を取得してデータを格納\n    - `sensor.find_latest()`:各センサーオブジェクトに共通のメソッドを呼び出す。\n\n\n# バックエンドコンテナ\nFlaskでAPIサーバーを実装しました。\n今回は、普段より意識して各センサーの共通コードを親クラスになるべくまとめましたので、コードがスッキリして見通しがよくなり気持ちがいいですね:sunny:\n\nコンテナに関しては、RasbianOSイメージを利用しています。\n理由は1点。Pandasが入らなかったからです。。:skull:\nセンサーコンテナと同様にPython公式イメージを利用しようとしたのですが、色々試しても32bitのラズパイにPandasが入らない。。入ってもエラーだらけで全く動きませんでした。\nそんな訳で、ラズパイと合わせた32bit対応のRasbianOSイメージを利用してPandasをインスール、実装しています。\nちなみに、`apt-get install python3-panda`で入れるPandasはけっこう古くて、仮引数名やメソッドなど新しいバージョンといくつか異なります。直すのちょっと面倒でした。。\n\n特筆したいコードは以下です↓\n\n```py:backend/db.py\n#***省略***\nclass MongoDB:\n    #***省略***\n\n    def get_data(self, params):\n        #***省略***\n\n        db_col = self.db.get_collection(params['period'])\n\n        item_list = [self.change_datetime(item) for item in db_col.find(\n            sort=[('timestamp', -1)],\n            projection={'_id': 0, },\n            filter={'timestamp': {'$gte': params['from'], '$lt': params['to']}}\n        ).limit(params['limit'])]\n\n        item_list.reverse()\n\n        df = pd.DataFrame(item_list)\n        result = df.to_dict('list')\n\n        return result\n\n    @staticmethod\n    def change_datetime(data):\n        \"\"\"datetime(UTC)をJSTの文字列に変換.\"\"\"\n        t_str = \"%Y-%m-%d %H:%M:%S\"\n        data['timestamp'] = (data['timestamp'] + timedelta(hours=9)).strftime(\n            t_str)\n\n        return data\n```\n\n- `item_list = [self....`:DBから取得しつつ、リスト内包表記で`change_datetime()`メソッドで日本時間に変更した日付文字列に変更したデータリストを取得しています。\n- `df.to_dict('list')`:フロントのグラフ表記しやすいデータ形式にPandasを使って変更しています。\n\n\n# DBコンテナ\nラズパイが32bitのため、MongoDBのオフィシャルイメージが使えません。\n今回は32bitで、かつ`pymongo`が問題なく動作するイメージを利用しています。\n\nプライベートでの限定使用のため、ユーザー認証を省きました。\nコンテナ起動時に`mongod.lock`を削除して起動することで、簡易的に認証無しでmongoを立ち上げています。\n\n\n# フロントエンドコンテナ\nNginxコンテナで静的コンテンツ読み込み、サクッとWebサーバーコンテナ化しました。\n\n\n# Nuxt.js\n\n## BuildでSSR それとも Generateでstatic contents?\n最初はフロントコンテナでSSRする予定だったのですが、Build時に`Javascript heap out of memory`により失敗。\nラズパイのSwapメモリーをNode.jsのデフォルト使用メモリに合わせて2GBまで引き上げたり、`ncu`でモジュールを最新に変更したり、nodeイメージのバージョン変えたり、`npm`のバージョン変えたり..etc... しかし、同じエラーでBuild失敗。もちろん同じコードでMacでは問題なくBuildできます。\n\nおそらくラズパイの32bit環境と何らかのモジュールが不具合を起こしてるのではと推測。\nログ見て調べようとしましたが、思いとどまり、\nそもそも、今回のアプリは静的コンテンツで良くないか？SSRにする必要あるのか？\nラズパイはメモリ小さいのに、無駄にSSRしてNodeのプロセスを走らせる必要はないのでは？・・\nそんなわけで、静的コンテンツを生成してNginxでサクッとWebサーバーコンテナ化に変更しました。\n\nまた、外出先でもTailSaleを通して自宅空気をモニターしたかったので、`location.href`によって、ラズパイのローカルIP以外でのリクエストでもバックエンドにAPI通信できるようにしています:globe_with_meridians:\n\n役割とファイル構成は以下になります↓\n\n```\n.\n├── components\n│   ├── Daikin.vue     # ダイキンセンサーのグラフ描画\n│   ├── Gpio.vue       # GPIO接続センサーのグラフ描画\n│   └── Header.vue     # ヘッダー\n├── layouts\n│   └── default.vue    # レイアウト\n├── pages\n│   └── index.vue      # メインページ\n└── plugins\n    ├── hourAPI.ts     # 1時間毎のデータ取得処理\n    ├── initialAPI.ts  # 初期のデータ取得処理\n    └── repeatedAPI.ts # 10分毎にデータ再取得の処理\n```\n\n- 描画したいブロックごとに、componetsに分割\n- 処理させたいロジックごとに、pluginsに分割\n\n分割意識すると、ファイル構成がスッキリして、追加があっても対応しやすいです。\n\n- IOT家電が増えるなら、componetsに新たにファイル追加する。\n- GPIOセンサーが増えるなら、Gpio.vueの`data()`と、htmlの表記部分だけを書き加える。\n\nそれだけで、メソッド変更などロジックをいじることなく、追加機器対応できます。うん！楽だ:musical_note:\nそうなると、、なんか色々とセンサー盛り込みたくなってきますww\n\n\n# おわりに\n楽しかったですが、今回は面倒くさかったが一番の感想です。\nコーディングも、ラズパイもセンサーも楽しいのですが、とにかく\n\n**ラズパイが32bitなので、多くの Dockerイメージと不具合が出る**\nこれの回避や、プログラムのリライトが辛かった。。:skull:\n\nこれって、どの環境でも動くっていうコンテナ技術の最大のメリットが享受できず、逆に書き直し必要というデメリットになっちゃってます、本末転倒ですよね。。.\n\nDocker使う際は、次回からJetsonNanoにしようと思います。\n\n- 64bit\n- OSはubuntu\n- Dockerが標準サポート\n- Python最適化\n- GPIOも搭載\n- メモリーも4GB\n\nDocker利用予定なら、Jetsonの方がすんなり入ってストレスなく実装できそうです。\n\nとはいえ、大好きなので引き続き使うよ。ラズパイ！\n今回は辛みもありましたが、得ることの多い実装でした:hand_splayed_tone3:\n","user":"akinko","created_at":"2021-03-30T13:27:39+09:00","updated_at":"2021-03-30T13:27:39+09:00"},{"url":"https://qiita.com/NNNGriziMan/items/108db471bf061eb2485e","title":"KiCad Mac備忘録","body":"しばらく使ってないと忘れてしまうので自分用備忘録です\n定期的に追加していきます。\n\n## シルク層に画像を入れたい\n\n簡単に説明すると\nビットマップコンポーネントコンバーターを使用し、画像をPCBコンポーネントへ変換。\n黒い部分が白く印刷されるので文字などがある場合はネガにチェックを入れ,分かりやすいフォルダに保存\n\nPCBレイアウトエディタを開き\n設定-->フットプリントライブラリを管理-->グローバルライブラリ-->保存したフォルダを追加\n\nPCBレイアウトエディタに戻り、フットプリントを追加を押すと読み込まれます\n追加したフォルダの名前が表示されているのが確認できれば成功です。\n\nビットマップコンポーネントコンバーターでは表示される予定の画像サイズが表示されるので適宜調整をしてください。\nちょっとずつわかりやす画像を追加していきたいと思います。\n\n","user":"NNNGriziMan","created_at":"2021-03-30T13:23:12+09:00","updated_at":"2021-03-30T13:23:12+09:00"},{"url":"https://qiita.com/pugsatoshi/items/eb963473ed85787d2d04","title":"WSL2に外部からアクセスしたい","body":"#WSL2に外部からアクセスする\n\nひとまず備忘録後で編集する\n基本的にはpowershell管理者権限実行\n\nやること\nファイアーウォールの設定\n開放\n\n```\n$ New-NetFireWallRule -DisplayName 'WSL 2 Firewall Unlock' -Direction Outbound -LocalPort 22 -Action Allow -Protocol TCP\n$ New-NetFireWallRule -DisplayName 'WSL 2 Firewall Unlock' -Direction Inbound -LocalPort 22 -Action Allow -Protocol TCP\n```\n設定削除\n\n```\n$ Remove-NetFireWallRule -DisplayName 'WSL 2 Firewall Unlock'\n```\n\nポートフォワード設定\nここでは22番\n\n```\n$ netsh interface portproxy add v4tov4 listenport=22 connectport=22 connectaddres=(wsl hostname -I).trimend() \n```\n\n確認方法\n\n```\n$ netsh.exe interface portproxy show v4tov4\n```\n\n設定削除\n\n```\n$ netsh.exe interface portproxy delete v4tov4 listenport=22\n```\n\n\n","user":"pugsatoshi","created_at":"2021-03-30T13:20:32+09:00","updated_at":"2021-03-30T13:20:32+09:00"},{"url":"https://qiita.com/bocci-farm/items/0b1918486a5aa67d47de","title":"macOS Big Sur 11.2.3でpython 3.7.2のインストールがエラーになる","body":"以下のエラーでpython 3.7.2がインストールできなかった。\n\n```shell\n% pyenv install 3.7.2\n:\n./Modules/posixmodule.c:8409:15: error: implicit declaration of function 'sendfile' is invalid in C99 [-Werror,-Wimplicit-function-declaration]\n        ret = sendfile(in, out, offset, &sbytes, &sf, flags);\n:\n```\n\nググってみたところ以下の解決策を見つけたので試してみたがうまく行かなかった。\n- https://qiita.com/hisa_shim/items/abb4936f1f676fe6a7b8\n- https://teratail.com/questions/323061\n\nPythonのソースを眺めていたところ、上記解決策にあるパッチファイルの行数がずれているようだったので修正したらうまくできました。\n\n```patch:/tmp/a.patch\nFrom 8ea6353f60625c96ce96588c70ff24a77f8c71f9 Mon Sep 17 00:00:00 2001\nFrom: Ronald Oussoren <ronaldoussoren@mac.com>\nDate: Thu, 25 Jun 2020 16:55:48 +0200\nSubject: [PATCH] BPO-41100: Support macOS 11 when building (GH-21113)\n\n---\n Misc/NEWS.d/next/macOS/2020-06-24-13-51-57.bpo-41100.mcHdc5.rst | 1 +\n configure                                                       | 2 +-\n configure.ac                                                    | 2 +-\n 3 files changed, 3 insertions(+), 2 deletions(-)\n create mode 100644 Misc/NEWS.d/next/macOS/2020-06-24-13-51-57.bpo-41100.mcHdc5.rst\n\ndiff --git a/Misc/NEWS.d/next/macOS/2020-06-24-13-51-57.bpo-41100.mcHdc5.rst b/Misc/NEWS.d/next/macOS/2020-06-24-13-51-57.bpo-41100.mcHdc5.rst\nnew file mode 100644\nindex 0000000000000000000000000000000000000000..ded66b567a92db0b9266a8718dcf1ad60a89c5ed\n--- /dev/null\n+++ b/Misc/NEWS.d/next/macOS/2020-06-24-13-51-57.bpo-41100.mcHdc5.rst\n@@ -0,0 +1 @@\n+Support macOS 11 when building.\ndiff --git a/configure b/configure\nindex c51f396824b63521034929cf98a37cee40b86254..5024860ca4395aa3a71de307a0e8335ceb2d77da 100755\n--- a/configure\n+++ b/configure\n@@ -3375,7 +3375,7 @@ $as_echo \"#define _BSD_SOURCE 1\" >>confdefs.h\n   # has no effect, don't bother defining them\n   Darwin/[6789].*)\n     define_xopen_source=no;;\n-  Darwin/1[0-9].*)\n+  Darwin/[12][0-9].*)\n     define_xopen_source=no;;\n   # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but\n   # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined\ndiff --git a/configure.ac b/configure.ac\nindex 70deefb6b9aea660350ee3c0a52c5e701037464b..5a3e340aa3e72b5effe0bc3b69690a828122b9dd 100644\n--- a/configure.ac\n+++ b/configure.ac\n@@ -490,7 +490,7 @@ case $ac_sys_system/$ac_sys_release in\n   # has no effect, don't bother defining them\n   Darwin/@<:@6789@:>@.*)\n     define_xopen_source=no;;\n-  Darwin/1@<:@0-9@:>@.*)\n+  Darwin/@<:@[12]@:>@@<:@0-9@:>@.*)\n     define_xopen_source=no;;\n   # On AIX 4 and 5.1, mbstate_t is defined only when _XOPEN_SOURCE == 500 but\n   # used in wcsnrtombs() and mbsnrtowcs() even if _XOPEN_SOURCE is not defined\n```\n\n```shell\n% pyenv install --patch 3.7.2 < /tmp/a.patch\n```\n","user":"bocci-farm","created_at":"2021-03-30T13:18:39+09:00","updated_at":"2021-03-30T13:18:39+09:00"},{"url":"https://qiita.com/hhhhh/items/f39f41ccfc2839e5e089","title":"Redmineへのプラグイン追加とSVN連携","body":"##オフラインでのEasy Gantt追加\n\n##SVN連携\n\n##SVN文字化け対応\n","user":"hhhhh","created_at":"2021-03-30T13:02:56+09:00","updated_at":"2021-03-30T13:21:53+09:00"},{"url":"https://qiita.com/hinako_n/items/951a93a79f8eb40684f6","title":"【エラー備忘録】npm installの際「found 1 high severity vulnerability」といわれる","body":"$ npm install コマンドを実行した際、\n\n```\n\nfound 1 high severity vulnerability\nrun `npm audit fix` to fix them, or `npm audit` for details\n```\nと忠告されました。\n\n```\n$ npm audit\n```\nとして修正が必要な点を探ります。\nすると、\n\n```\n# Run  npm install --save-dev resolve-url-loader@3.1.2  to resolve 1 vulnerability\n```\n教えてくれたので、\n\n```\n$ npm install --save-dev resolve-url-loader@3.1.2\n```\nを実行します。\n\nあとは、$ npm installを実行して実際にパッケージを更新します。\n\n```\n$ npm install\n```\n","user":"hinako_n","created_at":"2021-03-30T12:59:00+09:00","updated_at":"2021-03-30T12:59:00+09:00"},{"url":"https://qiita.com/ayanokobayashi103/items/fb1cf430d138691c0ed8","title":" cannot load such file -- mimemagic/overlay (LoadError)","body":"\n## mimemagicの関係でrails sができなくなった\n上記のエラーでアプリが動かせなくなってしまった。mimemagicさん..どなた？はじめましてという感じです。\n\n## 気づきの解決の流れ\nmimemagic (0.3.5)  ライセンスが取り下げられてエラーが出ている模様？\n\nupdateしてみる\nmimemagic (0.4.3)が入るがエラーはそのまま変わらず\n\nCarrierWaveが関係している4系ではなく3系なら良いらしい\nmimemagic (0.3.6)をGemfileに記載してbundle installで解決できました。\n（参考[mimemagicの最新動向](https://hackmd.io/@mametter/mimemagic-info-ja)より抜粋：CarrierWaveには現時点で0.4系では削除されているoverlay.rbに依存しているコードがあるため、強制的に0.3系を指定する必要がある。）\n\n##試したこと\nエラー文を検索したが同じエラー内容はあまりヒットせず。似た感じの内容を試してみた。キャッシュを消したり、shared-mime-info をインストールしてから bundle update mimemagic する（参考[mimemagicの最新動向](https://hackmd.io/@mametter/mimemagic-info-ja)）でも同じエラーで変わらなかった。\n数日経つと同じエラーの記事を発見。\nみんな(0.3.6)~(0.3.9)のあたりにしたという記事が多くなってきた自分のGemfileをみると　mimemagic (0.4.3)とある。アップデートしすぎた？\n\n##学んだこと\n・Gemのコマンドがたくさんあった([URL](https://guides.rubygems.org/command-reference/))。もっと使って行きたい\n・バージョン上げたり下げたりして良い勉強になった。\n・Gem同士の依存関係の意識がついた。\n\n\n##参考リンク\nhttps://github.com/rails/rails/issues/41757\nhttps://stackoverflow.com/questions/66837647/heroku-loaderror-cannot-load-such-file-mimemagic-overlay\n\n##おわり\n最近の問題だったらしく、エラー文を検索しても3日前とかの記事とかでビギナーにはすぐには解決できなった。\nだんだん情報が集まってなんとなくこうすれば良いのかなということが見えてきた。\n情報が少ない中で試行錯誤するのは今の知識量では計り知れないと改めて気づきました。もっとスマートに解決できるようになりたい。\n","user":"ayanokobayashi103","created_at":"2021-03-30T12:39:54+09:00","updated_at":"2021-03-30T12:48:01+09:00"},{"url":"https://qiita.com/tmk815/items/8c7554642eeb3a29dfa6","title":"android:id以外に@+idが使われている問題を正規表現で解決する","body":"# 内容\nAndroidでidを定義する場所ではないのに@+idを用いている場所を正規表現でぱっと置換えちゃおうって内容です。\n\n# 使う場面\nAndroidでxmlを用いてレイアウトを作成している時、idを定義したい場所以外でidを使う場面がよくあると思います(ConstraintLayoutで位置を指定したい時など)。\nそこで@+idを指定してしまうと思わぬエラーに遭遇する可能性がある [詳しくはこちらを参照](https://qiita.com/kamedon39/items/71986649f1a884e912cb)\n\n一度書いてしまったコードを手作業で直すのはめんどくさいので正規表現で直しましょう。\n\n# 使う正規表現\n```\n^(?=(.*)@\\+id(.*))(?!.*android:id).*$\n```\nこれで@+idを含む かつ android:idではないものを抜き出せます。\nそして、\n\n```\n$1@id$2\n```\nで置換を行えば目的が達成できます！\n\n# 例\nたとえばこんな感じです。\n![スクリーンショット 2021-03-30 12.27.15.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/144491/6306aed1-09e3-baec-7915-49d1a58eb3b1.png)\n","user":"tmk815","created_at":"2021-03-30T12:33:47+09:00","updated_at":"2021-03-30T12:33:47+09:00"},{"url":"https://qiita.com/rice01010101/items/fb27b0f20aa2febc3914","title":"ローカルの複数SQLファイルを対象Amazon Redshiftクラスター上で実行する","body":"# 前提\n* 「postgresql-9.3.25-1-windows-x64」インストール済（psqlのみ利用）\n* PostgreSQLへパスを通している（例．C:\\Program Files\\PostgreSQL\\9.3\\bin）\n* Redshiftクラスターへネットワークアクセス可能な状態である\n\n# 環境\n* Windows 10 Pro 64bit\n\n# 手順\n1. batファイル、sqlファイルを格納する任意のフォルダをローカルに作成する。<br>\n   以降、「C:\\Users\\【ユーザー名】\\Desktop\\redshift」とした前提で進める。\n2. 「C:\\Users\\【ユーザー名】\\Desktop\\redshift」フォルダ配下に「sql」フォルダを作成する。\n3. 「sql」フォルダに実行したいsqlファイルを全て格納する。\n4. 「C:\\Users\\【ユーザー名】\\Desktop\\redshift」フォルダ配下に以下のbatファイルを作成する。<br>\n    【】は各自環境の値で置き換え。\n5. batファイルを実行する。以上。\n\n```bat:execute_all_sql.bat\n@echo off\nset host=【Redshiftクラスターエンドポイント】\nset port=【ポート】\nset db_name=【データベース名】\nset user=【マスターユーザー名】\nset password=【マスターユーザーパスワード】\n\nset PGCLIENTENCODING=UTF8\nset PGPASSWORD=%password%\n\nset current_directory=%~dp0\ncd %current_directory%\\sql\n\nfor %%f in (*.sql) do (\n    psql -h %host% -p %port% -U %user% -d %db_name% -f %%f -a\n)\npause\n```\n","user":"rice01010101","created_at":"2021-03-30T12:31:43+09:00","updated_at":"2021-03-30T12:31:43+09:00"},{"url":"https://qiita.com/snowdrops89/items/86cd0e0a177da51239d0","title":"Maplatを使ってみたよ２　～ＵＩ付きはかっこいいよ！～","body":"\n　[前回](https://qiita.com/snowdrops89/items/e153a108b9a356ea42d6)に引き続き、[Maplat](https://github.com/code4history/Maplat/wiki)で遊んでいきますですよ☆\n　今回は、かっこいいＵＩ付きを使います。\n　ＡＰＩも、知れる限りを一通りお試しします。\n\n# ＵＩ付きのMaplatを使う\n　MaplatCoreでとりあえず重ね合わせることに成功していれば、UI付きの設定は、いたって簡単。\n\n> [Maplat UI（UIあり版）をCDNから設定](https://qiita.com/kochizufan/items/09795ab97a7ffe0845bf)\n\n　index.htmlは、スクリプトの取り込み先を、変更するだけ！\n　地図の切替なんかはＵＩがやってくれるから、自前のボタンは一回消します。\n\n```html:index.html\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"UTF-8\" />\n    <title>Maplat UIのテスト</title>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://unpkg.com/@maplat/ui@0.9.0/dist/assets/maplat.css\"\n    />\n    <link rel=\"stylesheet\" href=\"app.css\" />\n  </head>\n  <body>\n    <div class=\"mainview\">\n      <div id=\"map_div\"></div>\n    </div>\n  </body>\n  <script src=\"https://unpkg.com/@maplat/ui@0.9.0/dist/assets/maplat.js\"></script>\n  <script src=\"app.js\"></script>\n</html>\n```\n\n　app.jsは、APIの実行を`app`から、`app.core`に変えるだけ！\n　ですが、タブン記事には記載されてないのですが、`createObject`のoptionオブジェクトに、ＵＩ追加出来る項目があったので、折角だから入れてみます。\n\n```Javascript:app.js\nvar option = {\n  appid: \"Maplat_test_UI\",\n  enableHideMarker: true,   //マーカー非表示\n  enableBorder: true,       //地図境界表示\n  enableShare: true,        //共有\n};\n\nMaplat.createObject(option).then(function(app) {\n  const viewpoint = {\n    zoom: 3  //古地図倍率\n  }\n  const ratio = 20;  //透明度(うっすらベース地図が透けるくらい)\n\n  window.setTimeout(function(){\n    app.core.setViewpoint(viewpoint);   //app→app.core\n    app.core.setTransparency(ratio);    //app→app.core\n  }, 1);\n});\n```\n\n　設定ファイルは、まず、`app_name`が必要。\n　スプラッシュスクリーンに表示されるアプリ名という説明ですが、ＰＣの場合これが無いとタイトルが「undefined」になっちゃうんです。HTML側でtitleを設定していても、ここの価で上書きされるみたい。\n　そして、`label`。地図を切り替えるＵＩの表示ラベルになります。\n\n```json:apps/Maplat_test_UI.json\n{\n  \"app_name\": \"Maplat UIのテスト\",\n  \"home_position\": [140.75680304835672, 41.79692727057318],\n  \"default_zoom\": 17,\n  \"start_from\": \"goryokaku\",\n  \"sources\": [\n    {\n      \"mapID\": \"goryokaku\",\n      \"label\": \"五稜郭三分十間図\",\n      \"setting_file\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/maps/goryokaku.json\",\n      \"thumbnail\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/tmbs/goryokaku_menu.jpg\",\n      \"url\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/tiles/goryokaku/{z}/{x}/{y}.jpg\"\n    },\n    {\n      \"mapID\": \"goryokaku2\",\n      \"label\": \"五稜郭ノ図千分ノ一\",\n      \"setting_file\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/maps/goryokaku2.json\",\n      \"thumbnail\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/tmbs/goryokaku2_menu.jpg\",\n      \"url\" : \"https://snowdrops89.github.io/Maplat_test/mapdata/tiles/goryokaku2/{z}/{x}/{y}.jpg\"\n    },\n    \"osm\",\n    \"gsi\",\n    \"gsi_ortho\"\n  ]\n}\n```\n\n　それ以外は必須じゃないんですが今回、地図タイル画像、サムネイル画像、地図定義ファイルを全て外部に出したので、こんな感じ～。（設定ファイルだけでなく、mapsの定義ファイルの方のurlも直さなきゃなりませんが、compiledされていてアレなんでMaplatEditorで直して差し替える）\n> [MaplatEditorでマッピングした地図をMaplat Coreに取り込む](https://qiita.com/kochizufan/items/763396cfc45c476e60b2)\n\n　古地図も二枚にしたし、現代の地図も標準のものを全入れしてみました☆\n\n　[distribution.zip](https://github.com/code4history/Maplat/blob/master/distribution.zip)をダウンロードしてみると、フォルダが増えています。`font`と、`locales`、そして、`images`の中のアイコン画像も増えていますので、`assets`の中に全てまるっとコピーします。\n　そして、MaplatEditorで保存した時作成された、`tmbs`フォルダを、index.htmlと同じトコにコピー。地図切り替えのＵＩの所に表示されるサムネです。\n　今は、osm、gsi、gsi_orthoのサムネは、`images`の中に入っていて、そこから読んでくれるようになったようです☆\n\n　できました！　これだけでなんかもう、かっこええ～♪\n\n# マーカーを表示\n\n> [Maplat Coreでマーカーを静的に表示する](https://qiita.com/kochizufan/items/91b4d6b97def9a175a57)\n> [Maplat UIでPOIを表示する](https://qiita.com/kochizufan/items/8838d7f6eed0fa292c88)\n\n　要するに設定ファイル中に、`pois`でマーカーの設定ファイルの場所を指定し、そこにJSONさんでマーカーごとの設定を記してやるということですね。\n\n\n```json:apps/Maplat_test_UI.json\n{\n  \"app_name\": \"Maplat UIのテスト\",\n       :\n  （～中略～）\n       :\n    \"osm\",\n    \"gsi\",\n    \"gsi_ortho\"\n  ],\n  \"pois\": \"pois/pois.json\"\n}\n```\n\n　記事では、マーカーの座標を`lng`と`lat`と、分けて設定していたけど、`lnglat`と、おまとめすることもできるっぽい。様々な点で、その方がラクなのでそうする。\n　そして、ちょっとアイコンの変更なんかもお試ししてみたりして・・・\n\n> [Maplat Coreでマーカーの画像を変更する（レイヤー単位）](https://qiita.com/kochizufan/items/4c0a5635b52d9ac2df18)\n> [Maplat Coreでマーカーの画像を変更する（ピン単位）](https://qiita.com/kochizufan/items/ea8e9c4b6022592543c2)\n\n　選択中のアイコンを設定する属性が`selected_icon`から`selectedIcon`に変わっていた。アンダーバーでつないでいたヤツは全体的に変更になっているっぽいので気を付ける。\n　アイコン画像のありかは、pois.jsonからの相対ではなくてトップからのようなので気を付ける。\n　で、こんな感じ？\n\n```json:apps/pois.json\n{\n  \"観光\": {\n    \"pois\": [\n      {\n        \"id\": \"箱館奉行所\",\n        \"lnglat\":[140.7567252299387,41.79693537609609],\n        \"name\": \"箱館奉行所(復元)\",\n        \"url\": \"https://www.hakodate-bugyosho.jp/\"\n      }\n    ],\n    \"icon\": \"pois/img/blue_marker.png\",\n    \"selectedIcon\": \"pois/img/red_marker.png\"\n  }\n｝\n```\n\n　これを、必要なだけずらっと指定して行けば良いのだろう。\n　ＵＩ付きなら、ぜんっぜんプログラムが出来なくても、地道なマッピング作業とデータ作成だけで、立派な地図アプリが作れちゃうよ☆　しゅごい！\n\n# でもAPIつかう\n\n　[coreのexample](https://github.com/code4history/MaplatCore#browser)を眺めると、マーカーやレイヤーを出したり消したり動かしたりということが色々できるようなので、やってみる。\n　やりたいのは、マーカーをレイヤーごとにまるっと表示したり非表示にしたりすることです。\n\n　index.htmlに再びボタンを作りますが、そのHTMLについては割愛ｗ\n\n```Javascript:app.js(一部)\n//ボタンで表示するマーカーをレイヤー毎に切り替え\n  document.getElementById(\"LayerALL\").addEventListener(\"click\", function(e) {\n    app.core.showPoiLayer(\"観光\");\n    app.core.showPoiLayer(\"史跡\");\n  });\n  document.getElementById(\"Layer1\").addEventListener(\"click\", function(e) {\n    app.core.showPoiLayer(\"観光\");\n    app.core.hidePoiLayer(\"史跡\");\n  });\n  document.getElementById(\"Layer2\").addEventListener(\"click\", function(e) {\n    app.core.showPoiLayer(\"史跡\");\n    app.core.hidePoiLayer(\"観光\");\n  });\n  document.getElementById(\"LayerHide\").addEventListener(\"click\", function(e) {\n    app.core.hidePoiLayer(\"観光\");\n    app.core.hidePoiLayer(\"史跡\");\n  });\n```\n\n　こんな感じですかね？\n　全てのマーカーを表示するAPIなどもありますが、隠されたレイヤーについては隠されたままです。ＵＩでマーカー非表示をオフにした場合も同様で、邪魔されずイイ感じ♪\n\n　一応、その他のAPIも一通りお試し。\n\n```Javascript:app.js(一部)\n//全マーカー表示、非表示\n  document.getElementById(\"PoiALL\").addEventListener(\"click\", function(e) {\n    app.core.showAllMarkers();\n  });\n  document.getElementById(\"hideALL\").addEventListener(\"click\", function(e) {\n    app.core.hideAllMarkers();\n  });\n\n//マーカー選択、解除\n  document.getElementById(\"select\").addEventListener(\"click\", function(e) {\n    app.core.selectMarker(\"タワー\");\n  });\n  document.getElementById(\"unSelect\").addEventListener(\"click\", function(e) {\n    app.core.unselectMarker();\n  });\n\n//マーカークリア、リムーブ\n  document.getElementById(\"clear\").addEventListener(\"click\", function(e) {\n    app.core.clearMarker(\"史跡\");\n  });\n  document.getElementById(\"remove\").addEventListener(\"click\", function (e) {\n    app.core.removeMarker(\"タワー\");\n  });\n\n//マーカー追加、レイヤー追加\n  document.getElementById(\"add\").addEventListener(\"click\", function (e) {\n    app.core.addMarker({\n        \"id\": \"タワー\",\n        \"lnglat\":[140.75395646590007,41.79463859482169],\n        \"name\": \"五稜郭タワー\",\n        \"url\": \"https://www.goryokaku-tower.co.jp/\"\n    },\"観光\");\n  });\n  document.getElementById(\"addLayer\").addEventListener(\"click\", function (e) {\n    app.core.addPoiLayer(\"goryokaku2#新規\",{\n        \"icon\": \"pois/img/blue_marker.png\",\n        \"selectedIcon\": \"pois/img/red_marker.png\"\n    });\n    app.core.addMarker({\n        \"id\": \"二ノ橋\",\n        \"lnglat\":[140.75575537303416,41.79561542967801],\n        \"name\": \"二ノ橋\",\n        \"html\": \"鯉がいっぱいいます！\",\n        \"icon\":\"pois/img/red_marker.png\"\n    },\"goryokaku2#新規\");\n  });\n\n//線引く\n  document.getElementById(\"line\").addEventListener(\"click\", function (e) {\n    app.core.addLine({\n      lnglats: [\n        [140.75509899875652,41.79486069621012],\n        [140.7560612947552,41.79512929859726],\n        [140.75563781096838,41.795486705576906],\n        [140.75505015022142,41.79561680945611],\n        [140.75509899875652,41.79486069621012]\n      ],\n      stroke: {\n        color: \"#FF0000\",\n        width: 5\n      }\n    });\n  });\n\n//マーカーの移動\n  document.getElementById(\"move\").addEventListener(\"click\", function (e) {\n    var poiData = {\n      \"lnglat\":[140.75553148088343,41.79538581110293],\n      \"icon\":\"pois/img/red_marker.png\"\n      }\n    app.core.updateMarker(\"箱館奉行所\", poiData);\n  });\n```\n\n　こんな感じか・・・\n　あってるかな？\n\n### API\n<dl>\n  <dt>● showPoiLayer(Layer)</dt>\n  <dd>引数<B>Layer</B>は文字列</dd>\n  <dd>・指定したレイヤーを表示する。</dd>\n  <dd>　Layerは、マーカー設定ファイルで指定したレイヤー名。</dd>\n</dl>\n<dl>\n  <dt>● hidePoiLayer(Layer)</dt>\n  <dd>引数<B>Layer</B>は文字列</dd>\n  <dd>・指定したレイヤーを隠す。</dd>\n  <dd>　Layerは、マーカー設定ファイルで指定したレイヤー名。</dd>\n</dl>\n<dl>\n  <dt>● showAllMarkers()</dt>\n  <dd>・表示されているレイヤーの、全てのマーカーを表示。</dd>\n</dl>\n<dl>\n  <dt>● hideAllMarkers()</dt>\n  <dd>・全てのマーカーを隠す。</dd>\n</dl>\n<dl>\n  <dt>● selectMarker(marker);</dt>\n  <dd>引数<B>marker</B>は、マーカーのnamespace_id属性（idと同じものが自動的に設定されてるっぽい。idを設定しなかった場合はレイヤー名で連番になるっぽい）</dd>\n  <dd>・マーカーを選択状態にする。</dd>\n  <dd>　マーカーが地図の中心に移動し、マーカー画像もselectedIconに変わる。</dd>\n</dl>\n<dl>\n  <dt>● unselectMarker();</dt>\n  <dd>・マーカーの選択状態解除。</dd>\n</dl>\n\n<dl>\n  <dt>● clearMarker(Layer);</dt>\n  <dd>・指定したレイヤーのマーカーを、まるっと消去する命令っぽい。</dd>\n  <dd>　クリアしたマーカは戻せません。</dd>\n</dl>\n<dl>\n  <dt>● removeMarker(marker);</dt>\n  <dd>・指定したマーカーを単独で消去する命令っぽい。</dd>\n  <dd>　消したマーカーは戻せません。</dd>\n</dl>\n　\n> [Maplat Coreでマーカーを動的に表示する](https://qiita.com/kochizufan/items/c0c0ea4d3f1ed87d432e)\n\n<dl>\n  <dt>● addMarker(poiData,Layer)</dt>\n  <dd>引数<B>poiData</B>はオブジェクト</dd>\n  <dd>・マーカー設定ファイルに記載する内容と同じ。</dd>\n  <dd>引数<B>Layer</B>は文字列</dd>\n  <dd>　poiDataの内容でLayerへ動的にマーカー追加。</dd>\n  <dd>　Layerは「地図ID#レイヤー名」とすることで、特定の地図のレイヤーにだけ追加もできるっぽい。</dd>\n</dl>\n\n<dl>\n  <dt>● addPoiLayer(Layer,iconData)</dt>\n  <dd>引数<B>Layer</B>は文字列</dd>\n  <dd>引数<B>iconData</B>はオブジェクト</dd>\n  <dd>・マーカー設定ファイルに記載する内容と同じ。省略可</dd>\n  <dd>　iconDataでLayer名のレイヤーを追加。</dd>\n  <dd>　Layerは「地図ID#レイヤー名」とすることで、特定の地図のレイヤーにもできるっぽい。</dd>\n  <dd>※テストでは二枚目の古地図「五稜郭ノ図千分ノ一」に「新規」レイヤを作成し、マーカーも追加。この地図を選択した時しか、マーカーは現れません。（スライダで古地図の表示を０にしてベース地図だけの表示にしてもマーカーは残りますが、ベース地図を選択した場合は、消えます）</dd>\n</dl>\n\n　\n> [Maplat Coreでラインを地図上に表示する](https://qiita.com/kochizufan/items/7cbd306a7ff8a1d0d906)\n\n<dl>\n  <dt>● addLine(lineData)</dt>\n  <dd>引数<B>lineData</B>はオブジェクト</dd>\n  <dd>・[\"lnglats\"]で線を引く座標を指定し、[\"stroke\"]で線色[\"color\"]や線太さ[\"width\"]を指定。</dd>\n</dl>\n\n　\n> [Maplat Coreで古地図の上にバスを走らせてみる](https://qiita.com/kochizufan/items/26d7e3287c5d1402eff5)\n\n<dl>\n  <dt>● updateMarker(marker,poiData)</dt>\n  <dd>引数<B>poiData</B>はオブジェクト。</dd>\n  <dd>・マーカー設定ファイルに記載する内容と同じ。</dd>\n  <dd>　markerの設定ををpoiDataに更新。</dd>\n  <dd>　lnglatの価を変更してマーカーを移動させたりできる。</dd>\n</dl>\n\n# 動作確認\n\n> https://snowdrops89.github.io/Maplat_test/test_UI/index.html\n\n　できました！　やーん、よきよき～♪♪♪\n　APIも、テストの動作自体は、一応希望通りにいっているので、（タブン）合っているとは思う。\n\n# つづきます\n　今回は、ワタクシ初のなでしこタグの無い記事でした。じゃばすくりぷとを頑張った～～～。\n　APIは、正式なリファレンスが無く、Javascriptのよく分かってない人が目を回しながらまとめたものなので、なんか間違ってるかも知れない；\n　間違いや足りてないコトを発見した場合は、コメントでも編集リクエストでも教えて頂ければ幸いです。\n　ともかく、これで使いそうなAPIが大体分かったので、なでしこさんから使えるように、プラグインにしていこうと思います。がんばる☆\n","user":"snowdrops89","created_at":"2021-03-30T12:26:27+09:00","updated_at":"2021-03-30T12:26:27+09:00"},{"url":"https://qiita.com/www51k/items/3d296f2beefc0c9cb834","title":"if 〜 elseのelseは本当に必要？","body":"##if 〜 elseのelseが嫌い\n条件分岐で`if 〜 else`を使う機会がありますが、\n`else`が不要な場合も多いです。\n\n個人的な印象ですが、\n`else`があると、\nコードが複雑な感じがします。\n(`else if`は、見たくもなくなる)\n\nelseを使う場合は、\n`if 判定 {処理1} else {処理2}`\nで、処理1と処理2の処理内容が、\n同レベルであるべきです。\nそんな場合は、switch文の方が、可読性が高くなる場合もあります。\n\n##elseが不要な例\n```\nfunc 合格判定（判定値） Bool {\n    if 判定値 >= 合格基準 {\n        return true //合格\n    } else {\n        return false //不合格\n    }\n}\n```\nこの処理例では、プログラムとしては問題ありませんが、\n「合格の判定処理」なため、\n`合格`をメイン処理とし、\n`不合格`をサブの処理とするべきです。\n\n##elseを取り除いた修正案\n```\nfunc 合格判定（判定値） Bool {\n    if 判定値 < 合格基準 {\n        return false //不合格\n    }\n\n    return true //合格\n}\n```\n\n`合格判定`という処理において、\n`不合格`は、ネガティブな要素のため、\n合格の手前に、振るい落とすように不合格のif文を設けます。\nそして、最終的に処理が進めば、```合格```となるようにします。\n変更案の方が、「合格の判定処理」として、\n分かりやすいコードになったかと思います。\n\n##else以外も\n`else if`や、if文判定時のor/and条件なども、\n詰め込むと`コードを書いた人にしか分からない＝可読性の低下`になるため、\n複数の単純なif文に分解したり、判定条件を別メソッドにすると、\n`コードを読む人が分かりやすい＝可読性の向上`になります。\n\n##可読性が高いコードを書くには\n自分で書いたコードを客観的に眺めて、\n分かりにくいコードになっていないか確認する癖をつけると、\n一緒にプロジェクトをやっているメンバーにも、\n半年後に改修を担当する自分にも、\n優しいコードを書けるようになると思います。\n\n##追記1\n[switch(true) イディオム考察](https://qiita.com/t_uda/items/1969e09a970d71e4cfd6)\n分岐先の処理が同レベルであることを示す、良い手法かと思いますが、\nプロジェクトメンバーが理解しやすいか、同意を得られるか確認した方が良さそうです。\n","user":"www51k","created_at":"2021-03-30T12:15:01+09:00","updated_at":"2021-03-30T12:29:09+09:00"},{"url":"https://qiita.com/miyuki_samitani/items/15c21b379d1b254a2c88","title":"はじめてのGCP","body":"## 勉強前イメージ\n\nイメージついてない....\n多分サーバとかネットワークとかわかれてんのかなーって感じ。\n\n## 調査\n\n### GCP とは？\n\nGoogle Cloud Platform の略で、\nGoogleが提供するクラウドサービスになります。\nAWS とか Azure とかと似たような感じ。\n\n### 代表的なサービス\n\n- Google Compute Engine(GCE)\n\nAWSでいうとEC2のようなサービで、仮想サーバをレンタルすることが出来ます。\n汎用マシンやコンピューティング最適化マシン、メモリ最適化など必要に応じて使用することが出来ます。\n\n- Google App Engine(GAE)\n\nウェブアプリケーションをPHP・Python・Java・Go言語などを使用して開発し、\ngoogleのインフラストラクチャー上で実行することが出来ます。\n昔からあるサービス。\n\n- Google Container Engine(GKE)\n\nKubernetesをベースにしたコンテナ環境で、クラスターの管理やスケールなどを自動で行います。\nKubernetesの機能をフルに使用できます。\n\n- Google Cloud SQL\n\nフルマネージドなリレーショナルデータベースの管理・運用サービス。\nMySQL、PostgreSQLが使える\n\n- Google Cloud Storage\n\nストレージサービスの一つ。\nファイルの配信に利用できたり、GCPのデータストアとしても使える。\nCDNを持っているため、高速に配信ができる。\n\n- BigQuery\n\nビッグデータを解析するためのサービスで、\n大規模なクエリを高速で処理することができる。\n\n## 勉強後イメージ\n\nAWSでもよく使われるサービスと似たようなのある・・・\nちょっとずつ使っていこう。\n\n## 参考\n\n- [Google Cloud Platform(GCP)とは何か？サービス概要を徹底解説](https://rentubtalk.com/server-column/gcp/)\n","user":"miyuki_samitani","created_at":"2021-03-30T12:05:14+09:00","updated_at":"2021-03-30T12:05:14+09:00"},{"url":"https://qiita.com/belre/items/ea4a3212e8d7aa8829dd","title":"【C++/CLI＆C#】CLR環境下でstd::async, std::future","body":"\n常套手段\n\n# 概要\n\nC++/CLIでも、ネイティブコード内で非同期処理を走らせたいが、CLIでfutureをincludeすると\n\n```\n#error:  <future> is not supported when compiling with /clr or /clr:pure.\n```\n\nとエラーを吐き出すので、それの対処法。\n\nなお、c++11から導入された非同期処理全てに該当するので、試していないがmutexであろうがthreadであろうが同じようなエラーを発する。\n\n## 参考記事\n\nStackoverflowにてそれに類似した内容があったので、参照.\nこちらはstd::futureではなく、std::mutex.\n(最後のマイナスが付いているreplyはあてにならないので、これは参照してはいけない.)\n\nhttps://stackoverflow.com/questions/49791269/mutex-is-not-supported-when-compiling-with-clr-or-clrpure-cpprestsdk-aka-casa\n\nちなみに、Microsoft公式の掲示板では、**「clrで非同期処理を使える仕様ではありません。なのでclrを外してくれ」**という掲示板のレスにありがちな解決策を示しているようで示していない回答があったので、検索してこちらの記事が出た場合はスルー推奨だ。\n\nhttps://social.msdn.microsoft.com/Forums/vstudio/en-US/81996fa1-8a5d-4d49-b526-982c90689668/error-ltthreadgt-is-not-supported-when-compiling-with-clr-or-clrpure?forum=vcgeneral\n\nなお、こちらの記事にも内容があるが、別のやり方で対処します。\n\nhttps://qiita.com/hidetaka0/items/59002521130450093dbf\n\n# エラーが発生するコード\n\n\n## コードの問題点\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/281173/353c56c2-fd77-6400-ee24-8677894b3ca4.png)\n\n\nヘッダ内に、いくつかのメンバ関数がいてて、非/clrからは、何かの自動制御をする関数\"MoveAuto\"と状態を取得する関数\"GetStatusText\"が定義されているものとする.\nなお、/clr部分はDLL化し、非/clr化部分はスタティックライブラリとする。\n\nこのとき、futureがOPMeasure.hのincludeによって度々includeされ、結果的にfutureにまでたどり着いてしまうので、エラーが発生する。\n\n\n## ソースコード\n\n```cpp:OPMeasure.h\n/*\n 以下のプログラムは、CLR拡張でビルドされるものとする。\n それ以外は、C++ Nativeでビルドされる。\n*/\n#pragma once\n#include \"CommandController.h\"\n\nnamespace OPMeasure {\n\tpublic ref class OPMeasureApi {\n\tprivate:\n\t\tCommandController* _controller;\n\tpublic:\n\t\tOPMeasureApi() {\n\t\t\t_controller = new CommandController();\t\t\n\t\t}\n\t\tOPMeasureApi(const OPMeasureApi% obj) { }\n\t\t~OPMeasureApi() {\n\t\t\tthis->!OPMeasureApi();\t\t\n\t\t}\n\n\t\t!OPMeasureApi() {\n\t\t\tif( _controller != nullptr) {\n\t\t\t\tdelete _controller;\n\t\t\t}\n\t\t}\n\n\t\tSystem::String^ GetStatusText(System::String^ mtext) {\n\t\t\treturn marshal_as<System::String^>(_controller->GetStatusText(L\"piyo\"));\n\t\t}\n\t\tSystem::Void MoveAuto() {\n\t\t\t_controller->MoveAuto(L\"Move\");\n\t\t}\n\t};\n}\n```\n\n\n```cpp:CommandController.h\n#pragma once\n#include <string>\n#include <vector>\n#include <map>\n\n#include \"CommandController.h\"\n\nclass CommandController {\nprivate:\n\tTaskWithStatus* _internal_task;\n\npublic:\n\tCommandController() {\n\t\t_internal_task = nullptr;\n\t}\n\n\tCommandController(const CommandController& obj ) {\n\t\t\n\t}\n\n\t~CommandController() {\n\t\t\n\t}\n\t\n\tstd::wstring GetStatusText(std::wstring text) {\n\t\treturn _internal_task->ToString();\n\t}\n\n\tvoid MoveAuto(std::wstring param_text) {\n\t\t_internal_task = new TaskWithStatus();\n\t\t_internal_task->Start();\n\t}\n};\n```\n\n```cpp:TaskWithStatus.h\n#pragma once\n#include <Windows.h>\n#include <future>\n\nclass TaskWithStatus {\nprivate:\n\tstd::wstring _text_status;\n\tstd::future<bool> _ftr_result;\npublic:\n\tTaskWithStatus() { }\n\t~TaskWithStatus() { }\n\n\tvoid Start() {\n\t\t_ftr_result = std::async(std::launch::async, [this] { Run(); return true; });\n\t}\n\n\tvoid Run() {\n\t\t_text_status = L\"実行開始\";\n\t\tSleep(5000);\n\t\t_text_status = L\"実行終了\";\n\t}\n\n\tstd::wstring ToString() {\n\t\treturn _text_status;\n\t}\n};\n\n```\n\n# 修正コード\n\n## 修正コードの概要\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/281173/e35dd609-3d47-823b-faa1-b9dd0b88c911.png)\n\n\n\n### (1) ヘッダファイルではなく、cppファイルに書くことで、OPMeasure.hからincludeされるのを避ける。\n\nこれは当たり前のことで、ヘッダファイルが連続してインクルードされていてビルドエラーが発生しているので、それを抑制させる。\nつまり、TaskWithStatus.cppを用意すれば、includeの問題は回避できる。\n\n### (2) ITask.hを定義し、インタフェースとして使用する\n\n(1)だけでは、システム上の問題がある。それは、CommandControllerに、TaskWithStatusのメンバ変数を直接持たせるためには、ヘッダファイルCommandController.hにTaskWithStatusをincludeする必要があり、これも結果的に、clr側から見てfutureをインクルードしてしまう。\n\n回避する方法として、ITask.hを定義して、TaskWithStatus.hのインタフェースを定義して、CommandController.hからはITaskを参照するようにする。\n\nそして、CommandController.cpp側に、具体化されたTaskWithStatusを生成するように変更すれば、TaskWithStatusも、CommandControllerのメンバ変数として持たせることが出来る。\n\n## ソースコード\n\nOPMeasure.hは変更なし.\n\n```cpp:CommandController.h\n#pragma once\n#include <string>\n#include <vector>\n#include <map>\n\n#include \"ITask.h\"\n\nclass CommandController {\nprivate:\n\tITask* _internal_task;\n\npublic:\n\tCommandController() {\n\t\t_internal_task = nullptr;\n\t}\n\tCommandController(const CommandController& obj ) {\n\t\t\n\t}\n\t~CommandController() {\t\n\t}\n\n\t\n\tstd::wstring GetStatusText(std::wstring text);\n\tvoid MoveAuto(std::wstring param_text) ;\n};\n\n\n```\n\n\n```cpp:CommandController.cpp\n#include \"pch.h\"\n#include \"CommandController.h\"\n#include \"TaskWithStatus.h\"\n\nstd::wstring CommandController::GetStatusText(std::wstring text) {\n\treturn _internal_task->ToString();\n}\n\nvoid CommandController::MoveAuto(std::wstring param_text) {\n\t_internal_task = new TaskWithStatus();\n\t_internal_task->Start();\n}\n\n```\n\n```cpp:ITask.h\n#pragma once\n\n#include <string>\n\nclass ITask {\npublic:\n\tITask() { }\n\tvirtual ~ITask() { }\npublic:\n\tvirtual void Start() = 0;\n\tvirtual void Run() = 0;\n\tvirtual std::wstring ToString() {\n\t\treturn L\"ITask\";\n\t}\n};\n```\n\n```cpp:TaskWithStatus.h\n#pragma once\n\n#include \"ITask.h\"\n#include <Windows.h>\n#include <future>\n\n\nclass TaskWithStatus : public ITask {\nprivate:\n\tstd::wstring _text_status;\n\tstd::future<bool> _ftr_result;\npublic:\n\tTaskWithStatus() { }\n\tvirtual ~TaskWithStatus() { }\n\n\tvoid Start() override {\n\t\t_ftr_result = std::async(std::launch::async, [this] { Run(); return true; });\n\t}\n\n\tvoid Run() override {\n\t\t_text_status = L\"実行開始\";\n\t\tSleep(5000);\n\t\t_text_status = L\"実行終了\";\n\t}\n\n\tstd::wstring ToString() override {\n\t\treturn _text_status;\n\t}\n};\n```\n\n## 実行結果(おまけ)\n\nASP. NET MVC 5にて実行.\nセッションを使って、状態保持をするプログラムなどを使いましたが、省略します.\n同じようなことは、C++/CLIを使用する、.NET Framework/.NET Coreの各フレームワークにも適用できるでしょう.\n\n実行直後\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/281173/92518b8c-1916-5053-85a1-a93f959eeb4f.png)\n\n5秒後\n\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/281173/7c3611a8-874c-f852-cfce-ed233c5873e7.png)\n\n\n \n\n\n\n\n\n","user":"belre","created_at":"2021-03-30T12:04:41+09:00","updated_at":"2021-03-30T16:08:10+09:00"},{"url":"https://qiita.com/akari_0618/items/bb8e0c9a4c8c14352165","title":"JS~変数名と定数名~","body":"Jsでの変数名と定数名について学習していきます。\n\n#変数名\n変数名にはいくつかの条件があります。\n\n```\n1. アンダースコア、ダラマーク、数字が使用可能\n2.　半角スペースは使えない\n3.　一文字目に数字は使えない\n4.　予約語は使えない\n```\n*予約語とは？？▶Jsにある将来使われる可能性のある、またはすでに使われている言葉です。\n\n```\n<予約語一覧>\nbreak/case/catch/class/continue/debugger/default/delete/do/else/enum/export/extends/finally/for/\nfunction/if/implements/import/in/instanceof/interface/let/new/package/private/protected/public/\nreturn/static/super/switch/this/throw/try/typeof/var/void/while/with/yeild\n```\n*大文字と小文字に注意！！\nmynameとｍｙNmameは区別されるので注意してください！\nまた複数の単語を付ける場合は、一文字目は小文字にして２単語目は大文字にします。\n\njsでは『let』をつかい、宣言します。\n\n#定数名\n定数名の命名規則も変数名と同じです。\njsでの宣言は『const』を使います。\n\n```\nlet fruit = \"りんご\"　#変数宣言\nconst fruit = \"りんご\"　#定数宣言\n```\n\n","user":"akari_0618","created_at":"2021-03-30T12:04:04+09:00","updated_at":"2021-03-30T12:04:04+09:00"},{"url":"https://qiita.com/mumucochimu/items/a1bfb907ad990d6e22c9","title":"ネットワークのあれこれ","body":"コンピュータの成り立ちとか、基礎とか理解できればこれから先どんなことをやるにしても理解が早いのではないかと思い勉強を始めました。\n[キタミ式イラストIT塾 基本情報技術者](https://www.amazon.co.jp/%E3%82%AD%E3%82%BF%E3%83%9F%E5%BC%8F%E3%82%A4%E3%83%A9%E3%82%B9%E3%83%88IT%E5%A1%BE-%E5%9F%BA%E6%9C%AC%E6%83%85%E5%A0%B1%E6%8A%80%E8%A1%93%E8%80%85-%E4%BB%A4%E5%92%8C03%E5%B9%B4-%E3%81%8D%E3%81%9F%E3%81%BF%E3%82%8A%E3%82%85%E3%81%86%E3%81%98/dp/4297117819)で勉強させていただいております。\n\nまとめます！\n\n## LANとWAN\n\n#### LAN(Local Area Network)\n事業所や家の中など比較的狭い範囲でのネットワークをLANと言います。\nWi-Fiなどの無線LANやLANケーブルのLANはこのことを指しているんですね。\n\n#### WAN(Wide Area Network)\nLAN同士を接続するネットワークのことを言います。\nつまりインターネットと普段呼んでいるのはこのことを指しているんですね。\n\nここまではよく聞いたことがある内容ですが、面白かったのはこのLANやWANができる前のコンピュータではどうしていたのかという話。\n\n例えばデータの受け渡しはフロッピーディスクに入れて手渡しをしていたり、印刷するためにフロッピーディスクにデータを入れてプリンタまで持っていったりしていたとのこと。\nすごい手間ですね笑\nこういう歴史、面白いです。\n\n\n## プロトコルとパケット\n\n#### パケット\n現在のネットワークで基本的に用いられている通信技術。\nデータをパケットという単位に小分けしてそれを回線に流す。\n\n何故パケットに分けるのかというと、例えば川があってそこを荷物を乗せた船が通るとします。\n川が通信路、荷物を乗せた船がパケット。\nで、荷物を乗せた船を流したい人はたくさんいるとする。\nもしパケットに分けないで大きなデータを流そうとすることは大きな荷物を巨大貨物船に乗せて流すことと同じになり、その貨物船が通り終わるまで誰も別の船を流すことができなくなってしまいます。\nそれにもし巨大貨物船が途中で沈没してしまうと（実際だとエラーが起きたりなど）また最初から巨大貨物船に荷物を乗せて船を出さないといけないですが、パケットに分けて船に乗せて流しておけば1隻沈没しても沈没したところだけまた流せばいいので無駄がありません。\nこのような理由でパケットに分けて通信をしています。\n\n#### プロトコル\nよく聞くけどよく分からないプロトコル。\n簡単にいうと`ネットワークを通じてコンピュータ同士がやり取りするための約束事や手順`です。\n私が知っているプロトコルというと`TCP/IP`くらいでしょうか。\nプロトコルがないとデータを判別できなかったりうまく送れなかったりします。\n郵便と一緒で、住所を記載しないと届かないし、郵便番号などの決まりがあるし、それがあることできちんと手紙が届く。\n\n以下のOSI基本参照モデルにあるような約束事があるおかげでコンピュータ同士がコミュニケーションを取れるようになっています。\n\n| 階層  | 名前            | 役割                            |\n|:----:|:----------------|:-------------------------------|\n| 第1層 | 物理層           | 物理的にどう繋ぐか(LANケーブルとか) |\n| 第2層 | データリンク層      | 同一ネットワーク内でどう通信するか     |\n| 第3層 | ネットワーク層      | ネットワークとネットワークをどう中継するか |\n| 第4層 | トランスポート層    | 通信の信頼性はどう確保するか         |\n| 第5層 | セッション層       | 通信の開始から終了までをどう管理するか  |\n| 第6層 | プレゼンテーション層 | データはどんな形式にするか           |\n| 第7層 | アプリケーション層   | 具体的にどんなサービスを提供するのか  |\n\nこれも郵便と一緒で自分の地域のポストに出して、それを郵便局の方が回収して、振り分けて、送り先の郵便局まで送る、送る間にいくつかの拠点を経由するかもしれないし、その手順がこの層なのかなという認識でおります。\n\n#### TCP/IP\n\nよく聞くTCP/IPはプロトコルの一種ですが、みなさんが使うようになったのでほぼ標準の規格として存在しているようです。\n\n- IP(Internet Protocol)\n\n上記の表でいうと第3層にあたるネットワーク層に属します。\n経路を制御しネットワークからネットワークへパケットを運んで相手に送り届けます。\n送り届けるため、どこに送るかを識別しないといけません。そのためにIPアドレスが必要なんですね。\n\n- TCP(Transmission Control Protocol)\n\n上記の表でいうと第4層にあたるトランスポート層に属します。\n正しくデータが送られたことを保証する仕組みで、パケットの順序や送信エラー時の再送などを制御して送受信するデータの信頼性を保証します。\n`相手との接続を確認してからデータを送るので信頼できる`のです。データの欠損とかがない。\n\n逆に相手との通信を確立しないで一方的にデータを送る通信プロトコルを`UDP(User Datagram Protocol)`と言います。\nポイポイ送りまくるので信頼性には欠けるけど高速なので、リアルタイムさが必要なライブ配信とかに用いられることが多いです。\n確かにライブ配信では多少の映像の乱れよりは速い方がいいですからね。なるほど。\n\n\n## 代表的なプロトコル\n\nTCP/IP以外のよく聞くプロトコルは他にもありますね。\n\n| プロトコル名 | 概要                                                                           | ポート番号     |\n|:---------:|:------------------------------------------------------------------------------|:------------:|\n| HTTP      | Webページの転送に利用するプロトコル。HTMLの文書を受信する時などに使う。                       | 80           |\n| FTP       | ファイル転送に利用するプロトコル。ネット上のサーバーにアップロードしたりダウンロードしたりする時などに使う。 | 転送20 制御21 |\n| Telnet    | 他のコンピュータにログインして遠隔操作をする時に利用するプロトコル。                            | 23           |\n| SMTP      | メールの配送部分を担当するプロトコル。メール送信時やメールサーバ間での送受信に使う。              | 25           |\n| POP       | メールの受信部分を担当するプロトコル。メールサーバ上にある受信したメールを取り出す際に使う。         | 110          |\n| NTP       | コンピュータの時刻合わせを行うプロトコル。                                                | 123          |\n\n\nポート番号というのはマンションの部屋番号みたいなものです。\nパケットがIPアドレス宛に送られてきても、ポート番号がないときちんと目的のサーバプログラムに届きません。\nマンションの住所を記載しても部屋番号がないと荷物を届けられないのと一緒ですね。\n\n前職のドコモショップで働いていた時に、よく「スマホに会社のメールを受信できるようにしたい」というお客様がいらっしゃってメールの設定をしていたのですが、\nよく分からないままポート番号を設定してたなぁ。\nSMTPとかPOPとか指定しなきゃいけなかったけど、必要な理由が分かって納得です。\n\n以上です。\n","user":"mumucochimu","created_at":"2021-03-30T11:48:38+09:00","updated_at":"2021-03-30T11:48:38+09:00"},{"url":"https://qiita.com/rikishu/items/e023f0b6f23db37c587b","title":"alart（自分用）","body":"if @post.photos.present?\n  @post.save\n  redirect_to root_path\n  flash[:notice] = \"投稿が保存されました\"\nelse\n  redirect_to root_path\n  flash[:alert] = \"投稿に失敗しました\"\nend\n\nで保存時、失敗時のメッセージを呼び出せる。\n\napplication.html.erbに\n\n<% if flash[:notice] %>\n      <div class=\"alert alert-info\">\n        <%= flash[:notice] %>\n      </div>\n    <% end %>\n    <% if flash[:alert] %>\n      <div class=\"alert alert-danger\">\n        <%= flash[:alert] %>\n      </div>\n    <% end %>\n\nのような記述をしておく\n","user":"rikishu","created_at":"2021-03-30T11:48:34+09:00","updated_at":"2021-03-30T11:48:34+09:00"},{"url":"https://qiita.com/ota-meshi/items/6eab111878ab40f27e50","title":"ESLintチームから200ドルもらった話","body":"ESLint チームから $200 いただきました！とても嬉しくありがたいです！\nプログラマー人生の中でも、あまり無い経験だと思ったので駄文ですがこの経験を残そうと思います。\n一応書いておくと**私は ESLint の中の人ではありません**。\n\nまず簡単な時系列（日本時間）\n\n- 3/26朝、ESLint [TSCミーティング](https://discord.com/channels/688543509199716507/688545247843713092)でコントリビューターの誰に今月分の寄付をするのが良いか話し合われる。  \n  ミーティングメモのPR: https://github.com/eslint/tsc-meetings/pull/246\n- 3/26朝、ESLint チームのリーダーである [Nicholas](https://twitter.com/slicknet) さんから、あなたに $200 あげます（かなり意訳）な旨のメールが届く。\n- 3/26、メールに案内の通りに [Open Collective](https://opencollective.com/eslint/expenses) で申請。3/27、申請が承認される。\n- 3/30 $200 もらた！\n\nESLint チームのリーダーである [Nicholas](https://twitter.com/slicknet) さんの3/26朝のつぶやき：\n\n<blockquote class=\"twitter-tweet\"><p lang=\"en\" dir=\"ltr\">Just sent out emails to various ESLint contributors letting them know that the team has awarded them cash for their contributions. ESLint values all contributions and the team picks the top outside contributors each month to pay for their help. 💵🙏😀</p>&mdash; Nicholas C. Zakas (@slicknet) <a href=\"https://twitter.com/slicknet/status/1375198854098771971?ref_src=twsrc%5Etfw\">March 25, 2021</a></blockquote> <script async src=\"https://platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n## ESLint の Contributor Pool プログラム\n\nESLint の予算の中からコミッター・貢献者 (Contributor) に寄付をしようというプログラム（おそらく）。\nおそらくと書いたのは下記リンクのミーティングメモからそう読み取ったけど、ここには「Contributor Pool」という名前は（まだ？）無いので、間違ってるかもしれないという保険です。\n\nhttps://github.com/eslint/tsc-meetings/blob/master/notes/2020/2020-11-19.md#monthly-budget-for-committers-and-new-contributors\n\nContributor Pool なのか、Contributor Pool の内の一つの企画なのかわかりませんが、毎月 \\$500 をコミッター・貢献者の中から影響のあった貢献に対して、寄付という形でお返しするという取り組みで、ありがたいことに私も選ばれ、\\$200 受け取ることになりました。\n\n## どんな人が選ばれる？\n\nプルリクエストなどのコード的な支援、issue などの問題定義や議論的な支援、Discord での質問への回答などで、プロジェクトに貢献した人たちの中から ESLint の中の人によって選ばれるようです。\nおそらく人数的な制限はなく、毎月の \\$500 を上限に選ばれている印象です。\n\n詳細を知りたい場合は、[ESLint の TSCミーティングメモのリポジトリ](https://github.com/eslint/tsc-meetings)や [ESLint の TSCミーティング用チャットチャンネル](https://discord.com/channels/688543509199716507/688545247843713092)を覗いてみてください。\n\n## 私はなぜ選ばれたの？\n\n選ばれた理由の詳細はわかりませんが、[このプルリクエスト](https://github.com/eslint/eslint/pull/14072)が評価されたということようです。\n\n### 評価されたと思われる、このプルリクエストの内容\n\n[このプルリクエスト](https://github.com/eslint/eslint/pull/14072) (PR) は ESLint の [no-restricted-syntax](https://eslint.org/docs/rules/no-restricted-syntax) ルールやカスタムルールと、JSX や TypeScript と一緒に使用する際に、一部の定義方法（ASTノード選択セレクタ）を使用するとクラッシュするという問題を修正するものです。\n2月にマージされ [ESLint バージョン7.20](https://eslint.org/blog/2021/02/eslint-v7.20.0-released)で取り込まれました。\n\n### このプルリクエストの経緯\n\nこの内容はかなりマニアックなので興味ない方は読み飛ばすと吉です。\n\n元々の問題は ESLint がオプショナルチェイニング (Optional Chaining) をサポートするタイミングで発覚しました。私は当時、ESLint のオプショナルチェイニングのサポートが待ち遠しくて関連する issue や PR をかなり追いかけていました。そんな中、最後の [ESLint のオプショナルチェイニングサポートの PR](https://github.com/eslint/eslint/pull/13416) を覗いてみると、作業がとっても大変そうだったので、個人的に改修作業の洗い出しだけでも手伝えないかと思いいろいろやっていたら [no-restricted-syntax](https://eslint.org/docs/rules/no-restricted-syntax) ルールの一部の設定（セレクタ）でエラーになることを見つけました。\nhttps://github.com/eslint/eslint/pull/13416#issuecomment-645119294\nついでにこれはオプショナルチェイニングには関係なく JSX や TypeScript と一緒に使用しても起こる問題だということがわかりました。\nただこれは ESLint の改修だけでどうにかなるものではなく、依存パッケージの [esquery](https://github.com/estools/esquery) の機能拡張が必要で、パパッと直せるものではないこともわかりました。\n\n（ちなみに、この時は気がつきませんでしたが、私がメンテナンスしている [eslint-plugin-vue](https://github.com/vuejs/eslint-plugin-vue) でも[同様の問題を報告している issue](https://github.com/vuejs/eslint-plugin-vue/issues/870) がありましたorz）\n\nこの問題（不具合？）が実際ユーザーにとって影響あるかといえば、ぶっちゃけ、影響無いと言っても良いぐらいどうでもいい不具合だったと思います。そのセレクタ使わなければ良いだけですし、問題になるセレクタは、どちらかといえばマニアックなセレクタでしたので。  \n\nそうは言っても直ったら直ったで、[とあるメソッドの第３引数をチェックする](https://github.com/vuejs/eslint-plugin-vue/issues/870)とか ESLint ルール職人じゃなくても設定で簡単にできたりと良いことはあるので、 [esquery](https://github.com/estools/esquery)に [issue を開いて](https://github.com/estools/esquery/issues/111)ついでに [PR も開いて](https://github.com/estools/esquery/pull/112)みました。これは**2020年（去年）の6月**のことです。\n\nそんな PR を開いたことも忘れた頃（今年2021年の2月）に、この PR にコメントがつきます。コメントされると GitHub で通知が来るので見てみると、どうやら [typescript-eslint](https://github.com/typescript-eslint/typescript-eslint) や [eslint-plugin-jsdoc](https://github.com/gajus/eslint-plugin-jsdoc) でも同様の問題が発覚し報告されたらしく、関係している人がコメントをくれたようです。このコメントを見てか esquery の管理者も注目してくれたようで、レビューが進み、PR がマージされ、リリースされることになりました。\n\nせっかく、esquery への機能拡張が取り込まれたので、この追加機能を利用する[修正 PR](https://github.com/eslint/eslint/pull/14072) を ESLint に開き、マージされ、リリースされたというのが経緯です。\n\n### このプルリクエストはそんなに凄かった？\n\n各プルリクエストをみるとわかりますが、内容的には単純な機能拡張で拡張内容もどこかの（esquery と同じ org の）パッケージを参考にした内容であり、プルリクエストを開いてからマージされるまでは時間がかかりましたが、作業時間的には1,2時間程度だったと思います。先にも書きましたが、僕はぶっちゃけ大した問題（不具合）では無いと思っていたので、issue とプルリクエストを開いてからは放置していたぐらいです。\nつまり、「全然**凄くない**」と私は思っています。\n少しだけアピールを入れておくと、2つのパッケージを修正しないと直らない比較的面倒臭い部類の問題で、私はその両方で PR し、それらが両方マージされたというのは少しだけレアかなとは思います。\nただこれも特別な技術が必要とかはなく、やろうと思うかどうかと、マージされるまで（レビュー対応など）やりきるかどうかだけなので特別なことではないです。\n\n## ESLint の Contributor Pool プログラムのここが素晴らしい\n\n（と私が思っていること）\n\nまず、もらえた人はとっても嬉しいです（のはず、少なくとも僕は超嬉しい）！\nお金もらえたことがではなくてまず選ばれたことが嬉しいです！\n別にお金はなくてもいい、とまで言えば猫被りな感じですが、さらにそこにある程度の金額が乗れば、英語が分からなくても彼らがどれだけ貢献者を大切にしているかが伝わると思います。\n\n（ようやく？）最近は OSS のチームや個人を金銭的な支援をしようという活動が増えてきたように思いますが、Contributor Pool は、OSS チーム外の貢献者にもその支援を広げようという、さらに一歩進んだ取り組みのように思いました（僕は他のOSSの支援金の使い方をほとんど知らないので大げさかもですが）。OSS を継続するにはメンテナンスするチームとチームメンバーへの支援も重要ですが、同時に貢献者の存在もかなり重要です。Contributor Pool はそれを反映した素晴らしい取り組みであると思います。\n\n## 言いたいこと\n\nOSS 貢献をしたいと考えている方はぜひ ESLint に貢献してみてはどうでしょうか？\nさすがに \\$200 狙って貢献するというのは狙ってもらえる物ではないと思うのでやめた方がいいと思いますが、運などが重なれば、僕みたいにもらえることがあるかもしれませんし、書いてきたように ESLint チームは貢献者を大切にしている※ので、そんなチームとコラボレーションするのは良いことだと思います。\n難しい修正や難しい議論をする必要はありません。全ての貢献は感謝されますし、ちょっとめんどくさそうなことに貢献するだけで \\$200 もらえることもあります（ありました！）。もしコーディングが苦手でも[質問チャット](https://discord.com/channels/688543509199716507/717416886685401108)に少し参加して初心者の質問に数個答えるだけでも大きな貢献です。（質問への回答はContributor Poolの選出の対象です）\n\n（※もちろん ESLint 以外の多くの OSS も貢献者を大切にしていますが今回は ESLint の話なので ESLint に限定した言い方をしています）\n\nまた、OSS チームで貢献者が増えなくて困っているような場合は、Contributor Pool のやり方を参考にしてみても良いのかなと思いました（しらんけど）。\n\n## あとがき\n\n正直自分は、ESLint チームが貢献者への金銭的支援をやっているのは知っていましたが、自分が対象者になるまでは、自分には関係のない（選ばれるわけがない）ことだと思っていたのもあってか、その効果や目的について考えたり調べたりすることはありませんでした。\n今回、ESLint チームが貢献者をとても大切にしていることに気がつけたので、このことが少しでも広まればいいなと思います。\n\nまた、ESLint 以外の OSS チームも色々と取り組みをしていたり、目に見える取り組みをしていなくても、多くの OSS チームは貢献者を大切にしていると思います。OSS 貢献をしたいと考えていてまだできていない方はぜひ一歩踏み出して issue / PR / 質問回答などしてみてください。おそらく彼らはあなたの貢献を望んでいます。そのことをあなたに伝える方法をまだ持っていないだけです。\n","user":"ota-meshi","created_at":"2021-03-30T11:41:27+09:00","updated_at":"2021-03-30T13:52:49+09:00"},{"url":"https://qiita.com/testnin2/items/b37e120d35c0bf1b671c","title":"IBM Cloud: VPCのregional snapshot機能を試してみた","body":"#1. はじめに\n\nVPCのregional snapshot機能のBetaが始まっていたので試してみた（2021/03/30時点でBetaですが、利用いただきたい場合はIBMの営業にご相談いただき、snapshot機能の有効化の許可を得る必要があります）\nhttps://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-create&locale=en\n\nなお、[ここ](https://cloud.ibm.com/docs/vpc?topic=vpc-snapshots-vpc-manage#snapshots-vpc-delete-snapshot-cli&locale=en)に記載があるように、ベータであっても東京リージョンではまだUIが利用できないようだ。UIでの作業は簡単に構成できるので、UIは画面キャプチャーをメインに紹介し、CLIでのステップを詳細に追ってみた。\n>In the UI, you can create a snapshot of a Block Storage for VPC volume that's attached to a running virtual server instance.\nThe snapshots UI is available only in these regions: Sydney (au-syd), France (eu-fr2), and Japan (jp-osa).\n\n以下に主な特徴を記す。\n\n- Regional Snapshotと呼ばれているように、同一Region内であればZone1で作られたSnapshotを元にZone2やZone3のVolumeとして展開することができる。\n- 同一Regionであれば、別VPCへの展開にも利用できる。（さすがに別アカウントのVPCには利用できなさそう）\n- Snapshotを取得する対象のVSIは起動中である必要がある。VSIが停止している場合は以下のエラーが発生する。\n\n```shell:VSI停止中にsnapshotを取得しようとした場合のエラー\n$ ibmcloud is snapshot-create --name syasuda-tok1-vpc1-boot-snap3 --volume r022-47b737a7-5fdb-47da-9b1e-09726a0966cc --resource-group-name Common\nCreating snapshot syasuda-tok1-vpc1-boot-snap3 in resource group Common under account IBM as user shiyasu@jp.ibm.com...\nFAILED\nFailed to create snapshot.\n\nFAILED\nResponse HTTP Status Code: 409\nError code: snapshots_attached_instance_not_running\nError message: The attached instance is not running\nMore information: Ensure the attached instance is powered on\nTrace ID: 4db45f17-eafe-42f7-b907-c5cfa47a8e9b\n```\n\n\n#2. UI（大阪リージョン）での使用例\n\n##2-1. Snapshot作成\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/62127/c3f96cd3-27df-2164-bf06-f30349016c20.png)\n\n##2-2. リストア例1: Snapshotから新規VSIを作成する場合\n選択肢として、`Snapshot`というカテゴリーが表示されている\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/62127/ebd41321-08bc-fcad-ed9c-44a6f75b43c4.png)\n\n##2-3. リストア例2: Snapshotから作成したVolumeを既存VSIに追加する場合\n稼働中のVSIにAttachすることが可能。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/62127/e8d42524-f345-470f-189b-92f522186eb8.png)\n\n#3. CLI（東京リージョン）での使用例\n\nCLIについてのガイドは、（若干わかりづらいが）以下のタブを選択する必要がある。\n![image.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/62127/6491412d-f970-0a5c-b2da-496332c5b7f3.png)\n\n##3-1. 事前準備\n\n```shell:事前準備\n#英語表示\n$ export LANG=C\n\n#CLIの最新化\n$ ibmcloud update\nChecking for updates...\nNo update required. Your CLI is already up-to-date.\n\n#ログイン\n$ibmcloud login\nor\n$ibmcloud login -sso\n\n#東京リージョンにスイッチ\n$ ibmcloud target -r jp-tok\n\n#VPC Gen2がCLIのtargetになっていることを確認\n$ ibmcloud is target\nTarget Generation: 2\n\n```\n\nこのままでも、snapshotのCLIは使えるのだが、コマンド一覧には見えてこない。コマンド一覧への表示を有効化するためには以下の環境変数を設定する。\n\n```shell:（オプション）コマンド一覧への表示の有効化\n$ ibmcloud is --help|grep snapshot\n\n#ヘルプの有効化\n$ export IBMCLOUD_IS_FEATURE_SNAPSHOT=true\n\n$ibmcloud is --help|grep snapshot\n    snapshot                                                    [Beta] View details of a snapshot\n    snapshot-create, snapshotc                                  [Beta] Create a snapshot from a volume\n    snapshot-delete, snapshotd                                  [Beta] Delete snapshots\n    snapshot-delete-from-source, snapshotsd, snapshots-delete   [Beta] Delete snapshots by source volume\n    snapshot-update, snapshotu                                  [Beta] Update a snapshot\n    snapshots                                                   [Beta] List all snapshots\n```\n\n##3-2. Snapshotの作成\n\n```shell:Volumeの確認\n$ ibmcloud is volumes\nListing volumes for generation 2 compute in all resource groups and region jp-tok under account xxx as user xxxxxxx@xx.xxx.xxx...\nID                                          Name                                           Status      Capacity   IOPS   Profile           Attachment type   Zone       Resource group\nr022-47b737a7-5fdb-47da-9b1e-09726a0966cc   syasuda-tok1-vpc1-boot                         available   100        3000   general-purpose   boot              jp-tok-1   Common\nr022-08541c07-c825-4918-9ae1-3b94cd7e7d6e   syasuda-webserver1-boot-1611015072000          available   100        3000   general-purpose   boot              jp-tok-1   Common\n```\n\n```shell:Snapshotの作成\n#resource groupに何も指定をしないとDefaultで作られてしまうので、今回は指定をした。\n$ ibmcloud is snapshot-create --name syasuda-tok1-vpc1-boot-snap --volume r022-47b737a7-5fdb-47da-9b1e-09726a0966cc --resource-group-name Common\nCreating snapshot syasuda-tok1-vpc1-boot-snap in resource group Common under account xxx as user xxxxxx@xx.xxx.xxx...\n\nID                 r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\nName               syasuda-tok1-vpc1-boot-snap\nCRN                crn:v1:bluemix:public:is:jp-tok:a/039dbe6794084c7cb514a276dd2345da::snapshot:r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\nStatus             pending\nSource Volume      ID                                          Name\n                   r022-47b737a7-5fdb-47da-9b1e-09726a0966cc   syasuda-tok1-vpc1-boot\n\nProgress           0\nBootable           true\nDeletable          false\nEncryption         provider_managed\nEncryption key     -\nMinimum Capacity   100\nSize               1\nSource Image       ID                                          Name\n                   r022-6f153a5d-6a9a-496d-8063-5c39932f6ded   ibm-centos-7-6-minimal-amd64-2\n\nOperating System   Name             Vendor   Version                 Family   Architecture   Display Name\n                   centos-7-amd64   CentOS   7.x - Minimal Install   CentOS   amd64          CentOS 7.x - Minimal Install (amd64)\n\nResource group     ID                                 Name\n                   89e3e245955e4c59a83bc9d0db590082   Common\n\nCreated            2021-03-30T09:06:45+09:00\n\n#Snapshot取得直後のステータスはpending\n$ ibmcloud is snapshots\nListing snapshots for generation 2 compute in all resource groups and region jp-tok under account xxx as user xxxxxx@xx.xxx.xxx...\nID                                          Name                          Status    Progress   Source Volume                               Bootable   Resource group   Created\nr150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6   syasuda-tok1-vpc1-boot-snap   pending   0          r022-47b737a7-5fdb-47da-9b1e-09726a0966cc   true       Common           2021-03-30T09:06:45+09:00\n\n#Snapshot取得30秒後ぐらいのステータスはstable\n$ ibmcloud is snapshots\nListing snapshots for generation 2 compute in all resource groups and region jp-tok under account xxx as user xxxxxx@xx.xxx.xxx...\nID                                          Name                          Status   Progress   Source Volume                               Bootable   Resource group   Created\nr150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6   syasuda-tok1-vpc1-boot-snap   stable   -          r022-47b737a7-5fdb-47da-9b1e-09726a0966cc   true       Common           2021-03-30T09:06:45+09:00\n\n#詳細情報\n$ ibmcloud is snapshot r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\nGetting snapshot r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6 under account xxx as user xxxxxx@xx.xxx.xxx...\n\nID                 r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\nName               syasuda-tok1-vpc1-boot-snap\nCRN                crn:v1:bluemix:public:is:jp-tok:a/039dbe6794084c7cb514a276dd2345da::snapshot:r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\nStatus             stable\nSource Volume      ID                                          Name\n                   r022-47b737a7-5fdb-47da-9b1e-09726a0966cc   syasuda-tok1-vpc1-boot\n\nProgress           -\nBootable           true\nDeletable          true\nEncryption         provider_managed\nEncryption key     -\nMinimum Capacity   100\nSize               2\nSource Image       ID                                          Name\n                   r022-6f153a5d-6a9a-496d-8063-5c39932f6ded   ibm-centos-7-6-minimal-amd64-2\n\nOperating System   Name             Vendor   Version                 Family   Architecture   Display Name\n                   centos-7-amd64   CentOS   7.x - Minimal Install   CentOS   amd64          CentOS 7.x - Minimal Install (amd64)\n\nResource group     ID                                 Name\n                   89e3e245955e4c59a83bc9d0db590082   Common\n\nCreated            2021-03-30T09:06:45+09:00\n```\n\n##3-3. Snapshotのリストア\n\nCLIでも実行できそうだが、より細かいカスタマイズを簡単に実施したいため、\nhttps://qiita.com/testnin2/items/337bc02892024fb684a3\nで紹介したように、sample APIを生成させた後に、volumeの箇所に`source_snapshot`の項を追加。また、imageは指定する必要がないので削除。\n\n```json:追記例\n   \"volume\":{\n      （省略）\n      \"source_snapshot\":{\n         \"id\":\"r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\"\n      }\n   }\n```\n```json:削除内容\n  \"image\": {\n    \"id\": \"r022-2c5a6b07-1e34-420c-8361-286c8ba178dc\"\n  }\n```\n\n\n```shell:createVSIfromSnapshot.sh\n# 実際の生成したスクリプトを、今回取得したsnapshotに合わせて置き換えた例\n# Create a virtual server instance\n\ncurl -X POST \\\n  \"https://jp-tok.iaas.cloud.ibm.com/v1/instances?version=2021-03-09&generation=2\" \\\n  -H \"Authorization: Bearer $iam_token\" \\\n  -H \"User-Agent: IBM_One_Cloud_IS_UI/5.35.0\" \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Cache-Control: no-cache\" \\\n  -H \"accept: application/json\" \\\n  -H \"x-proxy-from: https://cloud.ibm.com/vpc-ext/data/graphql?bss_account=039dbe6794084c7cb514a276dd2345da&ims_account=1756623&country=JPN\" \\\n  -d '{\n  \"zone\": {\n    \"name\": \"jp-tok-3\"\n  },\n  \"resource_group\": {\n    \"id\": \"89e3e245955e4c59a83bc9d0db590082\"\n  },\n  \"name\": \"snapshottest1\",\n  \"vpc\": {\n    \"id\": \"r022-85621b2c-a349-4ae6-87e3-767ddeac7298\"\n  },\n  \"user_data\": \"\",\n  \"profile\": {\n    \"name\": \"bx2-2x8\"\n  },\n  \"keys\": [\n    {\n      \"id\": \"r022-b2ea5471-72f1-454a-9d3c-c865ad02545d\"\n    }\n  ],\n  \"primary_network_interface\": {\n    \"name\": \"eth0\",\n    \"allow_ip_spoofing\": false,\n    \"subnet\": {\n      \"id\": \"02g7-a65939b2-6b69-443a-b149-d7f241d7a6c1\"\n    },\n    \"security_groups\": [\n      {\n        \"id\": \"r022-1a2bb9f2-7647-4332-8a1b-eb925fb6e160\"\n      }\n    ]\n  },\n  \"network_interfaces\": [],\n  \"volume_attachments\": [],\n  \"boot_volume_attachment\": {\n    \"volume\": {\n      \"name\": \"snapshottest1-boot-1617064484000\",\n      \"capacity\": 100,\n      \"profile\": {\n        \"name\": \"general-purpose\"\n      },\n      \"source_snapshot\":{\n         \"id\":\"r150-4d5a7b24-98ba-4cb9-b6fb-215cc79c69e6\"\n      }\n    },\n   \"delete_volume_on_instance_delete\": true\n  }\n}'\n```\n\n```shell:プロビジョニング\n$ export iam_token=`ibmcloud iam oauth-tokens | awk '{printf $4}'`\n$ sh createVSIfromSnapshot.sh\n```\n\nこれで、このsnapshotを元にVSIが作成される。\n\n\n","user":"testnin2","created_at":"2021-03-30T11:40:57+09:00","updated_at":"2021-03-30T12:33:04+09:00"},{"url":"https://qiita.com/sweshelo/items/e5f82700fe2f47b8d838","title":"macOSのプリンタをターミナルから制御する","body":"#プリンタ設定\nmacOSでWindowsのADユーザでログオン時にデフォルトプリンタを自動で設定する必要が出てきたのでメモ。\n\n##環境\n- MacBook Air ( macOS Big Sur )\n\n##ログオンスクリプトの実装\nLoginHook使って実装する。なお___LoginHookを使うことは2014年に非推奨となっています。___\nLoginHookは実行時に引数としてログオンしたユーザ名を渡すみたい。\n\n``` root.sh\n#!/bin/bash\nusrName=$1\nsudo -u $usrName /Library/Hook/user.sh $1\n```\n\ndefaultsでスクリプトをLoginHookに登録する。\n\n```\nsudo defaults write com.apple.loginwindow /Library/Hook/root.sh\n```\n\n##デフォルトプリンタを指定する\n`lpstat -s`でプリンタ名を調べる。\n\n`lpoptions -d \"Printer_Name\"` で指定。\n\n##と思ったら…\n指定されてない。検証してたら、「デフォルトのプリンタ」が「最後に使用したプリンタ」に設定されている場合は`lpoptions`で変更が適用されないことがわかった。\n![スクリーンショット 2021-03-30 11.29.10.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/911135/bb9d7b9f-d31a-1026-a159-26c7a8454556.png)\n\n##CUPSの設定\n印刷システムのCUPSのdefaults設定を見てみると、どうもここに最後に使用したプリンタの設定が書き込まれているらしいことがわかった。\n\n```\n{\n    LastUsedPrinters =     (\n                {\n            Network = \"192.168.1.254\";\n            PrinterID = \"Default_Printer_ID\";\n        }\n    );\n    UseLastPrinter = 1;\n}\n```\nこのUseLastPrinterの値を`false`に書き換えてやると、`lpoptions`が適用されるようになる。\n\n##最終的なスクリプト\n``` user.sh\n#!/bin/bash\ndefaults write org.cups.PrintingPrefs UseLastPrinter -bool False\nlpoptions -d \"Printer_Name\"\n```\n","user":"sweshelo","created_at":"2021-03-30T11:40:11+09:00","updated_at":"2021-03-30T11:40:11+09:00"},{"url":"https://qiita.com/Toyoizumi-Hiroyuki/items/64e89a12f2c004d75194","title":"【Mac】Amplify CLI インストール手順の備忘録","body":"## はじめに\n- Mac環境に [Amplify CLI](https://docs.amplify.aws/cli) をインストールする機会があったので、その備忘録です。\n\n## 動作環境\n- macOS Catalina 10.15.7\n \n```shell:shell\n# Node.js：8.x以降\n$ node -v\n# → v12.20.1\n```\n\n```shell:shell\n# npm：5.x以降\n$ npm -v\n# → 6.14.10\n```\n\n### Amplify CLIのインストール\n\n- 以下のコマンドで Amplify CLI をインストールします。\n\n```shell:shell\n$ npm install -g @aws-amplify/cli\n```\n\n- CLI上で操作するIAMユーザを作成します。以下のコマンドを実行します。\n\n```shell:shell\n$ amplify configure\n```\n\n- すると、AWSマネジメントコンソールへのログイン画面がブラウザで表示されるので、対象のアカウント、ユーザーでログインします。\nログインが完了したらターミナル上でEnterキーを押下します。\n\n```shell:shell\nFollow these steps to set up access to your AWS account:\n\nSign in to your AWS administrator account:\nhttps://console.aws.amazon.com/\nPress Enter to continue\n```\n\n- リージョンを指定します。\n\n```shell:shell\npecify the AWS Region\n? region:  ap-northeast-1\n```\n\n- IAMユーザ名を設定します。Enterキーを押すとブラウザでIAMユーザ作成画面が起動します。\n\n```shell:shell\nSpecify the username of the new IAM user:\n? user name:  amplify-cli-user\n```\n\n- IAMユーザを作成していきます。アクセスの種類を選択して「アクセス権限」をクリックします。\n![IAM-Management-Console-2020-03-26-00-58-39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/477950/9baba5c5-8d1f-93ed-c1c4-0e0cc829cacf.png)\n\n- 適用するポリシーを選択して「タグ」をクリックします。必要に応じてタグを追加し、「確認」をクリックします。\n![IAM-Management-Console-2020-03-26-00-59-16.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/477950/8574ca70-1757-0dd3-3c7e-69cd5494991c.png)\n\n- 内容を確認して問題なければ「ユーザーの作成」をクリックします。\n![IAM-Management-Console-2020-03-26-00-59-47.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/477950/a56566a6-dffa-fb89-8dc7-f43f8c1224c7.png)\n\n- 表示されているアクセスキー情報を使用して、ターミナル上でIAMユーザを設定していきます。\n![IAM-Management-Console-2020-03-26-01-00-05.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/477950/4391b814-139a-52e2-3a10-d1e41486eef8.png)\n\n- マネジメントコンソールに表示されていた```アクセスキーID```と```シークレットアクセスキー```を入力します。\n\n```shell:shell\nEnter the access key of the newly created user:\n? accessKeyId:  *****************\n? secretAccessKey:  **********************************\n```\n\n- 最後に、```.aws/config```に保存するプロファイル名を指定します。 デフォルトは```default```ですが、上書きされたくなかったので、```amplify-cli-user```とします。\n\n```shell:shell\n? Profile Name:  amplify-cli-user\nSuccessfully set up the new user.\n```\n\n- ```.aws/config```と```.aws/credentials```に、IAMユーザ情報が追加されていることが確認できます。\n\n```Bash:.aws\\config\n[default]\nregion = ap-northeast-1\noutput = json\n\n[profile amplify-cli-user]\nregion = ap-northeast-1\n```\n```Bash:.aws\\credentials\n[default]\naws_access_key_id = xxxxxxxx\naws_secret_access_key = yyyyyyyy\n\n[amplify-cli-user]\naws_access_key_id = zzzzzzzz\naws_secret_access_key = aaaaaaaa\n```\n\n### ```amplify init``` に実行ユーザを指定\n\n- プロジェクトの初期設定時に、作成したIAMユーザを指定して操作できるようにします。対象プロジェクトのルートフォルダで、初期設定コマンドを実行します。\n\n```shell:shell\n$ amplify init\n```\n\n- 実行するとプロジェクト名やエディタなどを聞かれるので、各種選択していきます。最後に、プロファイルを使用するかどうか聞かれるので、```Y```を入力します。\n\n```shell:shell\n$ Do you want to use an AWS profile? (Y/n)：y\n```\n\n- どのプロファイルを使用するか聞かれるので、今回作成したプロファイルを指定します。\n\n```shell:shell\n$ Please choose the profile you want to use：amplify-cli-user\n```\n\n- これで実行ユーザの設定が完了です。どのプロファイルのユーザで実行されているかは、プロジェクトフォルダ内の```amplify/.config/local-aws-info.json```で確認できます。\n\n```shell:amplify/.config/local-aws-info.json\n{\n    \"EnvName\": {\n        \"configLevel\": \"project\",\n        \"useProfile\": true,\n        \"profileName\": \"amplify-cli-user\"\n    }\n }\n```\n\n- プロジェクトに紐づくプロファイルを変更したい場合、```amplify/.config/local-aws-info.json```の設定内容を削除した上で、```amplify init```を実行すると、再度プロファイルを使用するか聞かれるので、適宜変更できます。\n","user":"Toyoizumi-Hiroyuki","created_at":"2021-03-30T11:38:55+09:00","updated_at":"2021-03-30T11:38:55+09:00"},{"url":"https://qiita.com/jushimoda/items/8256f5e5734474b6f4de","title":"TencentCloudのCLBでタイムアウト設定","body":"パラメータを作成してCLBに設定する感じ\n\nCloud Load Balancer > Custom Configuration > Create\n\nパラメータ一覧はここを参考に\nhttps://intl.cloud.tencent.com/jp/document/product/214/32427?lang=jp&pg=\n\nタイムアウトはkeepalive_timeout\n\n![スクリーンショット 2021-03-30 11.36.39.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/294537/1f384a9c-f385-8a1e-07d7-34c3ae6afe05.png)\n\n\n作成したらBind to InstanceでCLBに設定すればOK\n設定したのはいいけど外す方法がわからなかった。謎。\n","user":"jushimoda","created_at":"2021-03-30T11:38:53+09:00","updated_at":"2021-03-30T11:38:53+09:00"},{"url":"https://qiita.com/TakashiOshikawa/items/c2ccc8647ea0da593cdd","title":"itermを起動しているなら2秒で簡易リマインドを設定出来る","body":"これを実行するだけ\n\n```\nsleep 60 && echo \"\\007\"\n```\n\n60秒後にitermの通知センターに通知が来る\n\nいつもitermを実行しているエンジニアなら使えるテクニックだが、itermをアクティブにしていると通知ではなく「ボッ」という音しかならないという致命的な罠付きなので洗濯が終わったとかカップラーメンが出来上がったとか割とどうでもいい事用の通知として使いましょう。\n\n\nhttps://blog.n-t.jp/tech/bash-watch-or-notify/\nhttps://www.curict.com/reference/ascii/index.html\n","user":"TakashiOshikawa","created_at":"2021-03-30T11:31:26+09:00","updated_at":"2021-03-30T11:31:26+09:00"},{"url":"https://qiita.com/reika_i/items/f57376cbcb45a29fcd91","title":"firebase emulatorの設定と使用","body":"# 概要\nエミュレータの設定と、エミュレータを使った開発メモ\n\n# emulatorの設定\n\nこちらに書いてあるので、詳細を説明するまでもありませんが、一応ポイントのみ解説\nhttps://firebase.google.com/docs/emulator-suite/install_and_configure?hl=ja\n\n## 予めインストールしておくもの\n\n- node (当たり前ですが)\n- Firebase CLI (`npm i -g firebase-tools`)\n- JDK 1.8以降\n\n## インストール\n\n作業ディレクトリ (firebase initしてあるディレクトリ) で以下を実行\n\n```console\n$ firebase init emulators\n```\n\n実行すると、どのエミュレータを設定するか聞かれるので、必要なものを選択する。\n次にポート番号を求められるので特に別で使用しているポートなどがなければデフォルトのまま進む。\n最後にエミュレータをダウンロードするか聞かれるのでYで進める\n`? Would you like to download the emulators now? Yes`\n\n```console\n\n     ######## #### ########  ######## ########     ###     ######  ########\n     ##        ##  ##     ## ##       ##     ##  ##   ##  ##       ##\n     ######    ##  ########  ######   ########  #########  ######  ######\n     ##        ##  ##    ##  ##       ##     ## ##     ##       ## ##\n     ##       #### ##     ## ######## ########  ##     ##  ######  ########\n\nYou're about to initialize a Firebase project in this directory:\n\n  /Users/path/directory\n\nBefore we get started, keep in mind:\n\n  * You are initializing in an existing Firebase project directory\n\n\n=== Project Setup\n\nFirst, let's associate this project directory with a Firebase project.\nYou can create multiple project aliases by running firebase use --add, \nbut for now we'll just set up a default project.\n\ni  .firebaserc already has a default project, using <project id>.\n\n=== Emulators Setup\n? Which Firebase emulators do you want to set up? Press Space to select emulators, then Enter to confirm your choices. (Press <space> to select, <\na> to toggle all, <i> to invert selection)Authentication Emulator, Functions Emulator, Firestore Emulator, Pub/Sub Emulator\ni  Port for auth already configured: 9099\ni  Port for functions already configured: 5001\ni  Port for firestore already configured: 8080\ni  Port for pubsub already configured: 8085\ni  Emulator UI already enabled with port: (automatic)\n? Would you like to download the emulators now? Yes\ni  ui: downloading ui-v1.4.2.zip...\n\ni  Writing configuration info to firebase.json...\ni  Writing project information to .firebaserc...\n\n✔  Firebase initialization complete!\n```\n\n成功したら、emulatorを開始する\n\n```\n$ firebase emulators:start\n```\n\n開始するとエミュレータのインストールが実行され、その後エミュレータが起動する。\n\n```console\n\nfunctions % firebase emulators:start\ni  emulators: Starting emulators: auth, functions, firestore, pubsub\n⚠  functions: The following emulators are not running, calls to these services from the Functions emulator will affect production: database, hosting\n✔  functions: Using node@10 from host.\ni  firestore: Firestore Emulator logging to firestore-debug.log\ni  pubsub: Pub/Sub Emulator logging to pubsub-debug.log\ni  ui: downloading ui-v1.4.2.zip...\nProgress: =========================================================================================================================> (100% of 4MB\ni  ui: Emulator UI logging to ui-debug.log\n...\n```\n\nその後、functionsを使用している場合はエミュレータ上にfunctionがデプロイされる。\nemulatorの準備が終わると以下のような表示になり、 `localhost:4000` を叩くとemulator画面が表示される。\n\n```\n┌─────────────────────────────────────────────────────────────┐\n│ ✔  All emulators ready! It is now safe to connect your app. │\n│ i  View Emulator UI at http://localhost:4000                │\n└─────────────────────────────────────────────────────────────┘\n\n┌────────────────┬────────────────┬─────────────────────────────────┐\n│ Emulator       │ Host:Port      │ View in Emulator UI             │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Authentication │ localhost:9099 │ http://localhost:4000/auth      │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Functions      │ localhost:5001 │ http://localhost:4000/functions │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Firestore      │ localhost:8080 │ http://localhost:4000/firestore │\n├────────────────┼────────────────┼─────────────────────────────────┤\n│ Pub/Sub        │ localhost:8085 │ n/a                             │\n└────────────────┴────────────────┴─────────────────────────────────┘\n  Emulator Hub running at localhost:4400\n  Other reserved ports: 4500\n\nIssues? Report them at https://githu\n```\n\nemulator UIにアクセスした状態\n\n![スクリーンショット 2021-03-24 11.05.01.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/252067/cd707543-d4ba-3546-8508-f11202d22d79.png)\n\n起動できたら `control + C`で 一度終了する\n\n# emulatorへのアクセス\n\nauthでログイン、firestoreへの読み取りアクセス、functionの実行を行う。\n\n## auth emulator へのユーザ追加\nログイン用のユーザを追加する。\nプログラム側で追加できるが、emulator UIを使ってユーザを追加できる。\nemulator UI にアクセスし（ポートを変更していなければlocalhost:4000)、Authenticationの画面でユーザを追加できる\n\n![スクリーンショット 2021-03-30 11.09.28.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/252067/a08a2cd9-db52-c975-4216-6e9635f2cdeb.png)\n\ncustom claimsも設定できるので便利。\n\n## クライアントからの呼び出し\n\nnode.jsから呼び出しを行う。\n\nfirebaseをinitializeAppした後、それぞれuseEmulator()をしてあげれば良い。\nfunctionのregionも通常通り指定でOK。\n\n\n```js\nconst firebase = require(\"firebase\")\n\n  const firebaseConfig = {\n    apiKey: \"xxxxxxxxxxxx\",\n    authDomain: \"test.service.local\",\n    databaseURL: \"xxxxxxxxxxx\",\n    projectId: \"test-service\",\n    storageBucket: \"test-service.appspot.com\",\n    messagingSenderId: \"000000000\",\n    appId: \"xxxxxxxxxxxxxxxxxxxxx\"\n  };\n\nfirebase.initializeApp(firebaseConfig);\n\nlet auth = firebase.default.auth();\nlet functions = firebase.default.app().functions(\"asia-northeast1\");\nlet db = firebase.default.firestore();\n\n//emulator設定\nauth.useEmulator(\"http://localhost:9099\");\nfunctions.useEmulator(\"localhost\", 5001);\ndb.useEmulator(\"localhost\", 8080);\n\n\n(async () => {\n\n  try {\n\n    //auth emulatorへのアクセス（ログイン)\n    await auth.signInWithEmailAndPassword(\"test@email.local\", \"password\");\n\n    //firestore emulatorへのアクセス\n    const snapshot = await db.collection(\"test\").get();\n    snapshot.docs.map(doc => console.log(doc.data().name));\n    \n    //function emulatorへのアクセス\n    const func = await functions.httpsCallable(\"testFunction\")({});\n    console.log(func.data);\n\n  } catch (e) {\n    console.log(e);\n  }\n\n})();\n\n\n```\n\n# 本番のfirestoreデータをemulator用に利用する\n\n本番のfirestoreに既にデータが入っていてそれをエミュレータ上で利用したい場合がある。\nそんな時はデータを予め本番環境からエクスポートしておく必要がある。\n手順が若干面倒なのでこれも念の為メモ。\n\n## firestoreのエクスポート\n\nfirestoreデータのエクスポートは以下のGCPコンソールから実行できる。\n必要なコレクションのみチェックしてエクスポートしておく\n\n<https://console.cloud.google.com/firestore/import-export?hl=ja>\n\n## ローカルディスクへのダウンロード\n\nエクスポートはstorage上にしか保存できいないため、さらにそれをローカルディスクに保存するにはgsutilツールを利用しなければならない。\n以下を予めインストールしておく\n\n＊ gsutilのインストール\nhttps://cloud.google.com/storage/docs/gsutil_install?hl=ja\n\n以下のコマンドを実行してダウンロードする\n\n```console\n$ gsutil -m cp -r gs://<エクスポート先のstorageアドレス> <保存先のパス>\n```\n\n## コピーしたデータを利用してemulatorを開始する\n\nローカルディスクに保存したデータをfirestoreのデータとして読み込んで起動するには、`--import` オプションを使用する\n\n以下のようにコピーしたデータへのパスをオプション引数に渡して実行する。この時、パスは「xxxx.overall_export_metadata」がルートとなるように指定する。\n\n```console\n$ firebase emulators:start --only firestore --import=<ダウンロード保存したディレクトリへのパス>\n```\n\nfirestore emulatorの画面を見るとデータがインポートされていることが確認できる\n\n![スクリーンショット 2021-03-24 14.18.59.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/252067/88745b10-bf22-286e-e841-7be11792a05b.png)\n\n## emulator上で追加したデータをエクスポート\n\nemulatorを使ってデータを追加した場合、emulatorを終了すると基本全てクリアされる。\nそのためauthなどを使うテストの場合いちいち再作成しなければならない。\nその場合、終了時に追加したデータをエクスポートするオプション`--export-on-exit`をつけると良い。\n\n```\n$ firebase emulators:start --export-on-exit=<エクスポート先>\n```\n\n\n\n\n\n\n","user":"reika_i","created_at":"2021-03-30T11:28:56+09:00","updated_at":"2021-03-30T11:28:56+09:00"},{"url":"https://qiita.com/miriwo/items/916e8816c4df8ffcb600","title":"flatpikrの脆弱性を確認する（筆者の方法）個人メモ","body":"# 目的\n\n- JavaScriptのライブラリであるflatpikrの脆弱性を確認する方法を筆者なりに考えたのでメモ的に残す\n\n# 情報\n\n- flatpikrのバージョン4.6.6に脆弱性が発見されていないか確認する\n\n# 方法\n\n1. flatpikrのGithubのリポジトリのissueを確認する。\n    - [https://github.com/flatpickr/flatpickr/issues](https://github.com/flatpickr/flatpickr/issues)\n1. バージョン4.6.6を含む古いバージョンで脆弱性が問題提議されていないことを確認する。\n","user":"miriwo","created_at":"2021-03-30T11:12:21+09:00","updated_at":"2021-03-30T11:12:21+09:00"},{"url":"https://qiita.com/Norimax/items/c500d1bf78e823e07f2b","title":"素人が競艇AIを作ってみる (1) データの取得","body":"[前回](https://qiita.com/NorimasaFukuoka/items/7540ebcb6b07711260e6)は、今プロジェクトの背景や現在のスキルセットなどについて説明しました。\n今回は早速、競艇AIの実現に向けて実装していこうと思います。\n\n## 概要\n今回は以下のことをやっていきます。\n1. 競艇AIの実装に必要なデータの内容を把握する\n2. 過去のデータをどこで・どうやって取得できるのかを見定める\n3. データを取得し、扱いやすい形に加工する\n\n競艇のこと知らない方もいらっしゃるかと思うので、前半は競艇に関する知識もドシドシ書こうと思います。\n## 使えそうなデータ\nまずは予測に使えそうなデータを探します。\n### 出走表\n競艇でも競馬でも、各レースにつきそれぞれの選手の情報を1つにまとめてくれた**「出走表」**というものがあります。みんなが実際に買い目を決めるときに見るヤツですね。番組表とも言います。\n競艇では、[公式サイト](https://www.boatrace.jp/)から見ることができ、各レースの出走表はレース前日には閲覧できるようになっております。\n\n実際の出走表は[こんな感じ](https://www.boatrace.jp/owpc/pc/race/racelist?rno=12&jcd=01&hd=20210328)です。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/02f752ff-78e1-620e-e089-fcde6b19b47c.png\" width=500>\n左半分には、1号艇から6号艇の各選手のこれまでの成績や、使っているモーター・ボートの性能を示す数値が記載されてます。\n右半分の「今節成績」には、その節間での成績が記載されており、選手の調子を把握できたりします。(レースは3~7日間で構成されているシリーズの中で行われ、各シリーズのことを「節」といいます)\n\n各数値の意味は、公式サイトの[こちら](https://www.boatrace.jp/static_extra/pc/guide/guide.html)で丁寧に説明してくれてます。\nこの辺りの数値は、そのまま特徴量として役立ちそうですね。まるまる頂いちゃいましょう。\n\n## 直前情報\n出走表とは別に、「直前情報」というものがあり、レース当日の天気や風・水面の状態などの情報や、各選手の展示航走の結果・部品交換の実績などを見ることができます。\n「展示航走」とはレース直前に行われるリハーサルのようなもので、よく略して「展示」と言われます。\n各選手は展示で最終調整を行うので、調子やモーターとの相性・仕上がり具合を把握するのに非常に大切だと言われてます。\n\n展示航走には「スタート展示」と「周回展示」の2種類があり、それぞれから得られる情報があります。\n###  スタート展示\nスタート展示では、各選手が一斉にスタートの練習をします。\nここでは、各選手のモーターの加速具合 (出足) を確認することができます。\n\n競艇では「フライングスタート」と呼ばれる独特のスタート方式を採用しており、定められたレース開始時刻に間に合うように、助走をつけてスタートラインを通過しなければいけないルールになっています。\nそのため「早すぎてもダメ、遅れすぎてもダメ」となっており、スタートタイミング (ST)が早すぎた場合はフライング (F)、遅すぎた場合は出遅れ (L)となって**失格となってしまいます**。\n\n下の画像の例では、2号艇がスタート展示でSTが「F.04」となっているのでレース本番でも同じことをするとフライングとなるわけですが、実際には少しの調整をすれば適正になるので「2号艇はスタートの調子良さそう」という見方ができます。\n### 周回展示\n周回展示では、各選手が順番にターンの練習をします。\nここでは、スタートを切ってからの直線距離におけるスピード (伸び足) や、ターン時の安定度 (回り足) を確認できます。\n\n実際の直前情報は[こんな感じ](https://www.boatrace.jp/owpc/pc/race/beforeinfo?rno=12&jcd=01&hd=20210328)です。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/86052023-1b73-7845-b81c-2f177e87fdf8.png\" width=500>\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/b5037359-5181-a3a0-32ef-1984acd3d976.png\" width=150>\n\n定量値として分かるのは、以下の内容あたりでしょうか。\n① 各選手の体重, スタートタイミング (ST), 展示タイム (一定の直線距離で計測した時間), チルト角度\n② 天気, 気温, 風速・風向, 水温, 波高\n\nターンにかかった時間も本当は欲しいのですが、ここでは見れなさそうなので諦めます。(会場によっては公開しているところもあります)\n\n## その他のデータ\n上記の**出走表**と**直前情報**の他にも使えそうなデータはあります。すぐ使えそうなものを2つ紹介します。\n### オッズ\n「入れたお金が何倍になって返ってくるのか」を表す数値です。\nオッズの厳密な計算方法については触れませんが、**「人気な出目ほどオッズが低くなり、不人気な出目ほどオッズが高くなる」**とだけざっくり認識していただければ大丈夫です。数学的に言えば、投票数の分布がオッズから分かる訳ですね。\n\nオッズは予想をする上で、とても重要です。\n下記のグラフは、2020年の全レースにおける3連単の人気番 (全120通り) のそれぞれの出現確率を示したものです。ご覧の通り、人気がある舟券ほど的中しています。\n\nこの事象は一見当たり前に見えますが、実はちょっと不思議な話なんです。\nこれらの確率は、一定期間の間で収束をします。つまり時系列的な要素も、ギャンブルの予測には重要であるということが言えます。\nこの辺りが、ギャンブルの面白いところだと僕は思っています。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/11c02495-f362-13f2-150f-029f87be193c.png\" width=500>\n\n話が少し逸れてしまいましたが、なんにしてもオッズは予想に不可欠な要素であると言えます。\nただ注意しなければいけないのが、**オッズは常に揺れ動くもの**である点です。\n特に近年では自動投票ツールを使用する人の増加などの影響で、締切直前オッズと確定オッズに大きな差が生じる傾向があります。\nまた、そもそも締切直前のオッズがデータとして公式サイトには残っておりません。(これまでの締切直前オッズが見れる親切なサイトもあります)\n\nそういった背景から、今回は使用しないことにしないことにします。いつか使おう。\n### コンピューター予想\n実は公式サイトでは、2017年ごろからコンピューターによる予想を公開してくれています。\n実際のコンピューター予想はこんな感じです。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/196cc037-227c-6553-cb80-67fb933b0ffc.png\" width=500>\n丁寧にも、自信の度合いまで教えてくれています。上のレースでは、あまり自信はなさそうですね。\nただ気をつけなければいけないのが、このコンピューター予想、自信があっても平気でハズします。もちろん的中することも多いのですが、オッズが低い舟券であることが多く、トータルの回収率としてはあまり期待できないかと思います。\n\nなので、こちらのコンピューター予想も一旦使わない方向で行きます。\n## データの取得と加工\n### 出走表と結果\n各レースの出走表と結果は、公式サイトから1日ごとのデータをまとめて一つのファイルとしてダウンロードできるようになっています。\nしかし困ったことに、これらは謎のフォーマットで書かれたテキストファイルとなっており、そのまま使うことはできません。\n実際のファイルの中身の一部をお見せします。\n<details><summary>racelists20210328.txt</summary><div>\n\n```\nSTARTB\n22BBGN\nボートレース福　岡   　３月２８日  第５６回ボートレース  第　６日\n\n                            ＊＊＊　番組表　＊＊＊\n\n          第５６回ボートレースクラシック　　　　　　　　　　\n\n   第　６日          ２０２１年　３月２８日                  ボートレース福　岡\n\n               −内容については主催者発行のものと照合して下さい−\n\n\n　１Ｒ  一般　　　　          Ｈ１８００ｍ  電話投票締切予定１０：３２ \n-------------------------------------------------------------------------------\n艇 選手 選手  年 支 体級    全国      当地     モーター   ボート   今節成績  早\n番 登番  名   齢 部 重別 勝率  2率  勝率  2率  NO  2率  NO  2率  １２３４５６見\n-------------------------------------------------------------------------------\n1 4262馬場貴也36滋賀54A1 7.65 55.07 7.12 52.00 54 31.11119 30.28 235 232 6   10\n2 4352下條雄太34長崎52A1 6.99 53.21 6.56 50.00 49 29.63101 33.33 6 4 524 31    \n3 4459片岡雅裕35香川52A1 6.83 51.13 6.90 60.00 41 36.02132 31.43 3 4 641 64   8\n4 4337平本真之36愛知54A1 7.31 47.57 8.31 75.86 73 27.85116 38.14 2 565 265    6\n5 4503上野真之33佐賀51A1 7.75 58.71 8.15 67.31 15 38.42162 44.93 2 153 453    7\n6 4397西村拓也34大阪52A1 7.11 52.86 7.16 57.89 40 29.71130 37.50 5 431 3 15   5\n\n　２Ｒ  一般　　　　          Ｈ１８００ｍ  電話投票締切予定１１：０１ \n-------------------------------------------------------------------------------\n艇 選手 選手  年 支 体級    全国      当地     モーター   ボート   今節成績  早\n番 登番  名   齢 部 重別 勝率  2率  勝率  2率  NO  2率  NO  2率  １２３４５６見\n-------------------------------------------------------------------------------\n1 4296岡崎恭裕34福岡51A1 7.42 58.96 7.46 56.12 39 27.56141 34.78 436 4 5251    \n2 4108吉村正明41山口50A1 7.24 64.00 7.93 60.71 30 50.72104 28.91 1 S54 2 52   6\n3 4445宮地元輝34佐賀53A1 6.50 42.98 7.82 65.45 64 35.17142 31.34 4 3 1S5 24   8\n4 4604岩瀬裕亮32愛知52A1 7.08 55.48 7.92 68.00 16 38.97144 35.96 2 164 613   11\n5 3573前本泰和48広島51A1 7.64 55.05 7.22 55.56 59 35.59138 48.55 4 113 545   10\n6 4387平山智加35香川45A1 6.66 40.52 8.70 80.00 66 37.14108 30.61 543 5 2F6     \n```\n</div></details>\n\nすごく見づらいですが、フォーマットが統一されているのはありがたいですね。こういうのはプログラムで処理するのが一番です。\n下記のような流れで処理を行います。\n\n1. 圧縮ファイルをウェブからダウンロードし解凍 >> テキストファイルを保存\n2. テキストファイルを読み込む\n3. フォーマットを解析し、いい感じにテーブルに変形して出力\n\nということで早速、機能ごとに関数を実装しました。\n(ちょいちょいインストールが必要なライブラリを使ってますが、`pip install`すれば大丈夫です)\n\n<details><summary>download_file</summary><div>\n\n```python\n# 圧縮ファイルをウェブからダウンロードし解凍 >> テキストファイルを保存\ndef download_file(obj, date):\n    \"\"\"\n    obj (str): 'racelists' or 'results'\n    \"\"\"\n    date = str(pd.to_datetime(date).date())\n    ymd = date.replace('-', '')\n    S, s = ('K', 'k') if obj == 'results' else ('B', 'b')\n    if os.path.exists(f'downloads/{obj}/{ymd}.txt'):\n        return\n    else:\n        os.makedirs(f'downloads/{obj}', exist_ok=True)\n        try:\n            url_t = f'http://www1.mbrace.or.jp/od2/{S}/'\n            url_b = f'{ymd[:-2]}/{s}{ymd[2:]}.lzh'\n            wget.download(url_t + url_b, f'downloads/{obj}/{ymd}.lzh')\n            archive = LhaFile(f'downloads/{obj}/{ymd}.lzh')\n            d = archive.read(archive.infolist()[0].filename)\n            open(f'downloads/{obj}/{ymd}.txt', 'wb').write(d)\n            subprocess.run(['rm', f'downloads/{obj}/{ymd}.lzh'])\n        except urllib.request.HTTPError:\n            print(f'There are no data for {date}')\n```\n</div></details>\n<details><summary>read_file</summary><div>\n\n```python\n# テキストファイルを読み込み、会場ごとのデータにテキストを区切って出力\ndef read_file(obj, date):\n    \"\"\"\n    obj (str): 'racelists' or 'results'\n    \"\"\"\n    date = str(pd.to_datetime(date).date())\n    ymd = date.replace('-', '')\n    f = open(f'downloads/{obj}/{ymd}.txt', 'r', encoding='shift-jis')\n    Lines = [l.strip().replace('\\u3000', '') for l in f]\n    Lines = [mojimoji.zen_to_han(l, kana=False) for l in Lines][1:-1]\n    lines_by_plc = {}\n    for l in Lines:\n        if 'BGN' in l:\n            place_cd = int(l[:-4])\n            lines = []\n        elif 'END' in l:\n            lines_by_plc[place_cd] = lines\n        else:\n            lines.append(l)\n    return lines_by_plc\n```\n</div></details>\n<details><summary>get_racelists</summary><div>\n\n```python\n# 出走表ファイルのフォーマットを解析し、いい感じにテーブルに変形して出力\nplace_mapper = {\n    1: '桐生', 2: '戸田', 3: '江戸川', 4: '平和島', 5: '多摩川',\n    6: '浜名湖', 7: '蒲郡', 8: '常滑', 9: '津', 10: '三国',\n    11: '琵琶湖', 12: '住之江', 13: '尼崎', 14: '鳴門', 15: '丸亀',\n    16: '児島', 17: '宮島', 18: '徳山', 19: '下関', 20: '若松',\n    21: '芦屋', 22: '福岡', 23: '唐津', 24: '大村'\n}\n\ndef get_racelists(date):\n    info_cols = ['title', 'day', 'date', 'place_cd', 'place']\n    race_cols = ['race_no', 'race_type', 'distance', 'deadline']\n    keys = ['toban', 'name', 'area', 'class', 'age', 'weight',\n            'glob_win', 'glob_in2', 'loc_win', 'loc_in2',\n            'moter_no', 'moter_in2', 'boat_no', 'boat_in2']\n    racer_cols = [f'{k}_{i}' for k in keys for i in range(1, 7)]\n    cols = info_cols + race_cols + racer_cols\n\n    stack = []\n    date = str(pd.to_datetime(date).date())\n    for place_cd, lines in read_file('racelists', date).items():\n        min_lines = 11\n        if len(lines) < min_lines:\n            continue\n        title = lines[4]\n        day = int(re.findall('第(\\d)日', lines[6].replace(' ', ''))[0])\n        place = place_mapper[place_cd]\n        info = {k: v for k, v in zip(\n            info_cols, [title, day, date, place_cd, place])}\n\n        head_list = []\n        race_no = 1\n        for i, l in enumerate(lines[min_lines:]):\n            if f'{race_no}R' in l:\n                head_list.append(min_lines + i)\n                race_no += 1\n        for race_no, head in enumerate(head_list, 1):\n            try:\n                race_type = lines[head].split()[1]\n                distance = int(re.findall('H(\\d*)m', lines[head])[0])\n                deadline = re.findall('電話投票締切予定(\\d*:\\d*)', lines[head])[0]\n                arr = []\n                for l in lines[head + 5: head + 11]:\n                    split = re.findall('\\d \\d{4}.*\\d\\d\\.\\\\d\\d', l)[0].split()\n                    bno = [0]\n                    name, area, cls1 = [e for e in re.findall(\n                        '[^\\d]*', split[1]) if e != '']\n                    toban, age, wght, cls2 = [e for e in re.findall(\n                        '[\\d]*', split[1]) if e != '']\n                    tmp = [toban, name, area, cls1 + cls2, age, wght] + split[2:10]\n                    if len(tmp) == 14:\n                        arr.append(tmp)\n                    else:\n                        continue\n                if len(arr) == 6:\n                    dic = info.copy()\n                    dic.update(zip(race_cols, [race_no, race_type, distance, deadline]))\n                    dic.update(dict(zip(racer_cols, np.array(arr).T.reshape(-1))))\n                    stack.append(dic)\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n    if len(stack) > 0:\n        df = pd.DataFrame(stack)[cols].dropna()\n        return df.astype(get_dtype('racelists'))\n    else:\n        return None\n```\n</div></details>\n<details><summary>get_results</summary><div>\n\n```python\n# 結果ファイルのフォーマットを解析し、いい感じにテーブルに変形して出力\ndef get_results(date):\n    conv_racetime = lambda x: np.nan if x == '.' else\\\n        sum([w * float(v) for w, v in zip((60, 1, 1/10), x.split('.'))])\n    info_cols = ['title', 'day', 'date', 'place_cd', 'place']\n    race_cols = ['race_no', 'race_type', 'distance']\n    keys = ['toban', 'name', 'moter_no', 'boat_no',\n            'ET', 'SC', 'ST', 'RT', 'position']\n    racer_cols = [f'{k}_{i}' for k in keys for i in range(1, 7)]\n    res_cols = []\n    for k in ('tkt', 'odds', 'poprank'):\n        for type_ in ('1t', '1f1', '1f2', '2t', '2f',\n                      'w1', 'w2', 'w3', '3t', '3f'):\n            if (k == 'poprank') & (type_ in ('1t', '1f1', '1f2')):\n                pass\n            else:\n                res_cols.append(f'{k}_{type_}')\n    res_cols.append('win_method')\n    cols = info_cols + race_cols + racer_cols + res_cols\n\n    stack = []\n    date = str(pd.to_datetime(date).date())\n    for place_cd, lines in read_file('results', date).items():\n        min_lines = 26\n        if len(lines) < min_lines:\n            continue\n        title = lines[4]\n        day = int(re.findall('第(\\d)日', lines[6].replace(' ', ''))[0])\n        place = place_mapper[place_cd]\n        info = {k: v for k, v in zip(\n            info_cols, [title, day, date, place_cd, place])}\n\n        head_list = []\n        race_no = 1\n        for i, l in enumerate(lines[min_lines:]):\n            if f'{race_no}R' in l:\n                head_list.append(min_lines + i)\n                race_no += 1\n        for race_no, head in enumerate(head_list, 1):\n            try:\n                race_type = lines[head].split()[1]\n                distance = int(re.findall('H(\\d*)m', lines[head])[0])\n                win_method = lines[head + 1].split()[-1]\n                _, tkt_1t, pb_1t = lines[head + 10].split()\n                _, tkt_1f1, pb_1f1, tkt_1f2, pb_1f2 = lines[head + 11].split()\n                _, tkt_2t, pb_2t, _, pr_2t = lines[head + 12].split()\n                _, tkt_2f, pb_2f, _, pr_2f = lines[head + 13].split()\n                _, tkt_w1, pb_w1, _, pr_w1 = lines[head + 14].split()\n                tkt_w2, pb_w2, _, pr_w2 = lines[head + 15].split()\n                tkt_w3, pb_w3, _, pr_w3 = lines[head + 16].split()\n                _, tkt_3t, pb_3t, _, pr_3t = lines[head + 17].split()\n                _, tkt_3f, pb_3f, _, pr_3f = lines[head + 18].split()\n                race_vals = [race_no, race_type, distance]\n                res_vals = [\n                    tkt_1t, tkt_1f1, tkt_1f2, tkt_2t, tkt_2f,\n                    tkt_w1, tkt_w2, tkt_w3, tkt_3t, tkt_3f,\n                    pb_1t, pb_1f1, pb_1f2, pb_2t, pb_2f,\n                    pb_w1, pb_w2, pb_w3, pb_3t, pb_3f,\n                    pr_2t, pr_2f, pr_w1, pr_w2, pr_w3,\n                    pr_3t, pr_3f, win_method\n                ]\n                dic = info.copy()\n                dic.update(dict(zip(race_cols, race_vals)))\n                dic.update(dict(zip(res_cols, res_vals)))\n                dic = {k: float(v) / 100 if 'odds' in k else v\n                       for k, v in dic.items()}\n                for i in range(6):\n                    bno, *vals = lines[head + 3 + i].split()[1:10]\n                    vals.append(i + 1)\n                    keys = ['toban', 'name', 'moter_no', 'boat_no',\n                            'ET', 'SC', 'ST', 'RT', 'position']\n                    dic.update(zip([f'{k}_{bno}' for k in keys], vals))\n                stack.append(dic)\n            except IndexError:\n                continue\n            except ValueError:\n                continue\n    if len(stack) > 0:\n        df = pd.DataFrame(stack)[cols].dropna(how='all')\n        repl_mapper = {'K': np.nan, '.': np.nan}\n        for i in range(1, 7):\n            df[f'ET_{i}'] = df[f'ET_{i}'].replace(repl_mapper)\n            df[f'ST_{i}'] = df[f'ST_{i}'].replace(repl_mapper)\\\n                .str.replace('F', '-').str.replace('L', '1')\n            df[f'RT_{i}'] = df[f'RT_{i}'].map(conv_racetime)\n        waku = np.array([('{}'*6).format(*v) for v in df[\n            [f'SC_{i}' for i in range(1, 7)]].values])\n        df['wakunari'] = np.where(waku == '123456', 1, 0)\n        df = df.replace({'K': np.nan})\n        return df.astype(get_dtype('results'))\n    else:\n        return None\n```\n</div></details>\n\n上記の関数を使えば、任意の日程の出走表と結果のcsvが手に入ります。\n後々作業がしやすくなることを考慮して、1行に1レースの情報が入るようにしました。\n\n```python\n# 2021/03/28の結果ファイルをcsvで取得\ndate = '2021-03-28'\ndownload_file('results', date)\ndf = get_results(date)\ndisplay(df.head())\n```\n出力はこんなイメージです。\n<img src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/481188/c6bbc277-e1fa-4906-95aa-ed9749e714c7.png\">\n\n### 直前情報\n次に直前情報を取得します。\n残念ながら、直前情報については出走表や結果のようなファイルが存在しなかったので、ウェブスクレイピングを行うことにします。\n\nウェブスクレイピングとは、ウェブサイトから情報を抽出することです。\nスクレイピングを行う際は、サーバーに負荷をかけないように一定の間隔を空けて実行するのが良いとされています。\n\nスクレイピングを行うためのpythonライブラリはいくつかありますが、ここでは有名な `Beautiful Soup`を使います。\n下記のような流れで処理を行います。\n\n1. 知りたい日程の直前情報が載っているサイトのURLを調べる\n2. URL先のHTMLファイルを取得\n2. 取得したHTMLファイルを解析し、欲しい部分を抽出する\n\nということで早速実装してみました。\n\n<details><summary>get_url</summary><div>\n\n```python\n# 任意の日程のレースについて直前情報やオッズの情報が記載されたURLを取得する\ndef get_url(date, place_cd, race_no, content):\n    \"\"\"\n    content (str): ['odds3t', 'odds3f', 'odds2tf', 'beforeinfo']\n    \"\"\"\n    url_t = 'https://www.boatrace.jp/owpc/pc/race/'\n    ymd = str(pd.to_datetime(date)).split()[0].replace('-', '')\n    jcd = f'0{place_cd}' if place_cd < 10 else str(place_cd)\n    url = f'{url_t}{content}?rno={race_no}&jcd={jcd}&hd={ymd}'\n    return url\n```\n</div></details>\n<details><summary>get_beforeinfo</summary><div>\n\n```python\n# 直前情報のサイトからHTMLを取得し解析する\ndef get_beforeinfo(date, place_cd, race_no):\n    url = get_url(date, place_cd, race_no, 'beforeinfo')\n    soup = BeautifulSoup(requests.get(url).text, 'lxml')\n\n    arr1 = arr1 = [[tag('td')[4].text, tag('td')[5].text]\n                   for tag in soup(class_='is-fs12')]\n    arr1 = [[v if v != '\\xa0' else '' for v in row] for row in arr1]\n    arr2 = [[tag.find(class_=f'table1_boatImage1{k}').text\n             for k in ('Number', 'Time')]\n            for tag in soup(class_='table1_boatImage1')]\n    arr2 = [[v.replace('F', '-') for v in row] for row in arr2]\n    arr2 = [row + [i] for i, row in enumerate(arr2, 1)]\n    arr2 = pd.DataFrame(arr2).sort_values(by=[0]).values[:, 1:]\n\n    air_t, wind_v, water_t, wave_h = [\n        tag.text for tag in soup(class_='weather1_bodyUnitLabelData')]\n    wether = soup(class_='weather1_bodyUnitLabelTitle')[1].text\n    wind_d = int(soup.select_one(\n        'p[class*=\"is-wind\"]').attrs['class'][1][7:])\n\n    df = pd.DataFrame(np.concatenate([arr1, arr2], 1),\n                      columns=['ET', 'tilt', 'EST', 'ESC'])\\\n        .replace('L', '1').astype('float')\n    if len(df) < 6:\n        return None\n    try:\n        data = pd.concat([\n            pd.Series(\n                {'date': date, 'place_cd': place_cd, 'race_no': race_no}),\n            pd.Series(df.values.T.reshape(-1),\n                      index=[f'{col}_{i}' for col in df.columns\n                             for i in range(1, 7)]),\n            pd.Series({\n                'wether': wether, 'air_t': float(air_t[:-1]),\n                'wind_d': wind_d, 'wind_v': float(wind_v[:-1]),\n                'water_t': float(water_t[:-1]),\n                'wave_h': float(wave_h[:-2])})])\n        for i in range(1, 7):\n            data[f'ESC_{i}'] = int(data[f'ESC_{i}'])\n        return data\n    except ValueError:\n        return None\n```\n</div></details>\n\n```python\ndate = '2021-03-28'\nplace_cd = 22\nrace_no = 1\nbi = get_beforeinfo(date, place_cd, race_no)\nprint(bi)\n```\n出力はこんなイメージです\n<details><summary>sample_beforeinfo</summary><div>\n\n```\ndate        2021-03-28\nplace_cd             1\nrace_no             12\nET_1              6.63   # 展示タイム\nET_2              6.75\nET_3              6.78\nET_4              6.82\nET_5              6.83\nET_6              6.82\ntilt_1            -0.5   # チルト角度\ntilt_2            -0.5\ntilt_3            -0.5\ntilt_4            -0.5\ntilt_5            -0.5\ntilt_6            -0.5\nEST_1             0.08   # 展示スタートタイミング\nEST_2            -0.04\nEST_3             0.36\nEST_4             0.16\nEST_5             0.23\nEST_6             0.19\nESC_1                1   # 展示スタートコース\nESC_2                2\nESC_3                3\nESC_4                4\nESC_5                5\nESC_6                6\nwether               雨  # 天気\nair_t             12.0   # 気温\nwind_d               7   # 風向 (16方向 + 無風)\nwind_v             1.0   # 風速\nwater_t           16.0   # 水温\nwave_h             1.0   # 波高\n```\n</div></details>\n\n---\nこれでやっと、出走表・直前情報・結果のデータをcsvで出力できるようになりました。\nとりあえず2016年から2020年までの5年間のデータを取得したので、一旦は十分かと思います。\n\n## まとめ\n今回は、競艇の予想に必要なデータを洗い出し、過去データを取得できるプログラムを実装しました。\n次回は、モデルを組むための前処理を行っていこうと思います。\n","user":"Norimax","created_at":"2021-03-30T11:11:49+09:00","updated_at":"2021-03-30T14:22:56+09:00"},{"url":"https://qiita.com/fumumue/items/aee10906a8bad07770ad","title":"hexo のtheme設定でエラーを直した話","body":"Hexoとはいま話題の静的サイトジェネレータである。\n\nブログを設定していて、うっかり上書きしたら、次のようなエラーが出た。\n\n} Plugin load failed: %s hexo-theme-landscape\n\nなのでいろいろいじる前にバックアップをとって作業。\n\npackage.jsonに、\n\nhexo-theme-landscape\n\nとあるので、その行を削除して今使っているサイトのthemeに書き換えるとエラーが出なくなった。\n\n","user":"fumumue","created_at":"2021-03-30T11:11:39+09:00","updated_at":"2021-03-30T11:11:39+09:00"},{"url":"https://qiita.com/kk-icare/items/6389ab6ff83f859d0e84","title":"Rails APIモード + devise_token_auth + Vue.js 3 で認証機能付きのSPAを作る(Navigation Guard編)","body":"# はじめに\n\n本記事はAPIをRailsのAPIモードで開発し、フロント側をVue.js 3で開発して、認証基盤にdevise_token_authを用いてトークンベースの認証機能付きのSPAを作るチュートリアルのVue.js編の記事(Navigation Guard編)になります。\n\n前回: [RailsAPIモード + devise_token_auth + Vue.js 3で認証機能付きのSPAを作る(Vue.js編その2)](https://qiita.com/kk-icare/items/b3aca446c24e89e018c4)\n\n# NavigationGuardとは？\n\n前回までで作成したアプリは、ログイン済みでもログイン画面のURLにアクセスすればアクセスできてしまいますし、ログインが必要なページにログインせずにアクセスできてしまいます。(401エラーが返るので投稿は表示されませんが。)\n\nそういったケースで、ログイン済みの場合にログインページにアクセスが来たら別ページへリダイレクトさせる処理や、ログインが必要なページに未ログインの状態でアクセスが来たらログインページにリダイレクトさせる処理が欲しくなってきます。\n\nここでNavigationGuardの出番です。\n\nNavigationGuardは一言でいうと「ページ遷移時に任意の処理を挟むための仕組み」かと思います。\n\nVue.jsのVueRouterはNavigationGuardをサポートしていますので、その仕組みを大いに活用していきたいと思います。\n\n## src/router/index.tsにmeta情報を追記する\n\nVueのルーティングにはmeta情報を付与することができます。\nこのmeta情報を元に、処理の分岐を行うことができます。\n\nhttps://router.vuejs.org/ja/guide/advanced/meta.html\n\n認証が必要なURLにはrequiresAuthを付与し、\n\n```javascript\nmeta: { requiresAuth: true } \n```\n\n認証が不要なURLにはrequiresNotAuthを付与します。\n\n```javascript\nmeta: { requiresNotAuth: true } \n```\n\nでは、src/router/index.tsを編集していきます。\n\n```javascript\n  {\n    path: '/login',\n    name: 'Login',\n    component: Login,\n    meta: { requiresNotAuth: true } // 追加\n  },\n  {\n    path: '/posts',\n    name: 'Post',\n    component: Post,\n    meta: { requiresAuth: true } // 追加\n  },\n  {\n    path: '/posts/new',\n    name: 'NewPost',\n    component: NewPost,\n    meta: { requiresAuth: true } // 追加\n  }\n```\n\n## authorizeToken関数の実装\n\n次に、認証が必要なページにリクエストが来た場合に実行する処理を実装していきます。\n\n以下のコマンドを実行してください。\n\n```terminal\n$ touch src/router/authGuard.ts\n```\n\n作成されたファイルを以下のように修正します。\n\n```typescript\nimport { validateToken } from '@/api/auth'\nimport { NavigationGuardNext, RouteLocationNormalized, RouteRecordNormalized } from 'vue-router'\n\nexport const authorizeToken = (to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext) => {\n  if (to.matched.some((record: RouteRecordNormalized) => record.meta.requiresAuth)) {\n    validateToken()\n      .then(() => {\n        next()\n      })\n      .catch(() => {\n        next({ path: '/login' })\n      })\n  } else if (to.matched.some((record: RouteRecordNormalized) => record.meta.requiresNotAuth)) {\n    validateToken()\n      .then(() => {\n        next({ path: '/posts' })\n      })\n      .catch(() => {\n        next()\n      })\n  }\n}\n\n```\n\nvalidateToken関数は後ほど定義しますが、クライアントから送信された認証Tokenの有効性を検証するAPIを叩く関数です。\n\nvue-routerからimportしているのはauthorizeToken関数の引数であるtoとnextに型を当てるためです。\n\n型を当てることで、VSCodeを使っているとマウスオーバーすることで補完が効くようになります。\n\n![navigation-guard1.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/4d011390-6d6b-c64f-79d3-de608d8061b5.png)\n\nto.matchedとするとRouteRecordNormalizedの配列が返ります。\n\nRouteRecordNormalized型を確認してみます。\n\n```typescript\nexport declare interface RouteRecordNormalized {\n  // 省略\n  /**\n   * {@inheritDoc _RouteRecordBase.meta}\n   */\n  meta: Exclude<_RouteRecordBase['meta'], void>;\n\n  // 省略\n```\n\nmetaプロパティが定義されていることがわかりました。\n\n後はjavaScriptのsome関数でmatches配列の中のRecordの中でmetaがrequiresAuthのものがあれば、という条件とrequiresNotAuthのものがあれば、という条件で分岐しています。\n\n## validateToken関数の実装\n\n次にvalidateToken関数を実装していきます。\n\nsrc/api/auth.tsを編集します。\n\n```typescript\nexport const logout = async () => {\n  return await Client.delete('/auth/sign_out', { headers: getAuthDataFromStorage() })\n    .then(() => {\n      removeAuthDataFromStorage()\n    })\n}\n\n// ここから追加\n\nexport const validateToken = async () => {\n  return await Client.get('/auth/validate_token', { headers: getAuthDataFromStorage() })\n    .then((response) => {\n      setAuthDataFromResponse(response.headers)\n      return response.data\n    })\n}\n\n// ここまで\n```\n\nGETリクエストでAPI側の認証Tokenを検証するURLを叩いて、通信に成功したらLocalStorageの情報を更新する関数をコールして、レスポンスのデータを返却する処理を実装しています。\n\n最後にindex.tsの中でrouterに対してbeforeEachでauthorizeToken関数をコールする処理を追加します。\n\n```javascript\nimport NewPost from '@/views/NewPost.vue'\nimport { authorizeToken } from './authGuard' // 追加\n\n\n// 省略\n\nconst router = createRouter({\n  history: createWebHistory(process.env.BASE_URL),\n  routes\n})\nrouter.beforeEach(authorizeToken) // 追加\n```\n\n## 動作確認\n\nこれで準備完了です。APIサーバーを立ち上げて、vue側のサーバーも立ち上げて動作確認をしてみます。\nまた、試しにtoオブジェクトの中身を見るためにconsole.logを仕込んでみましょう。\n\n```typescript\nexport const authorizeToken = (to: RouteLocationNormalized, from: RouteLocationNormalized, next: NavigationGuardNext) => {\n  console.log(to) // 追加\n  if (to.matched.some((record: RouteRecordNormalized) => record.meta.requiresAuth)) {\n    validateToken()\n```\n\nlocalhost:8080/posts にアクセスしてみます。\n\n![navigation-guard2.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/a2414622-9aaf-5732-6126-4144d4e94184.png)\n\nNetworkタブで通信内容の確認をすると、正しくvalidate_tokenのリクエストを送信できていることがわかります。\n\n![navigation-guars3.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/4a2a5f98-84d8-e61a-1c9c-d0df78810316.png)\n\nまた、きちんとmeta情報としてルーティングにrequiresAuthが付与されています。\n\n一度ログアウトをして動作を確認してみます。もう一度 localhost:8080/postsにアクセスします。\n\n![navigation-guard4.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/884609/27e2066c-850e-2b5d-49b1-951b94e8b622.png)\n\nLocalStorageにTokenが保管されておらず、validate_tokenのリクエストが401だったため、Loginページにリダイレクトしています。\n\n再度ログインして、 localhost:8080/login にアクセスを試みても、/postsにリダイレクトすることも確認するといいですね。\n\n\n# まとめ\n\nこれで最低限のNavigationGuardの仕組みは実装できました。\n\n今はログイン済みかどうかのみの判定ですが、今後、「管理者かどうか」等の新たなルールで判別することもあるかもしれません。\n\nその時はまた別のguard関数を定義してやりましょう。\n\n次回は画像投稿および表示の機能を実装したいと思います。\n","user":"kk-icare","created_at":"2021-03-30T11:11:19+09:00","updated_at":"2021-03-30T11:11:19+09:00"},{"url":"https://qiita.com/Norimax/items/7540ebcb6b07711260e6","title":"素人が競艇AIを作ってみる  (0) はじめに","body":"## 挨拶\nデータサイエンスや機械学習を誰でも手軽に学べる時代になった今、それらを駆使して何かしたいと思う人は多いんじゃないでしょうか？\n僕もそのうちのひとりで、1年ほど前にこの競艇AIプロジェクトを思いついて以来、開発に没頭してきました。\n\n「AIでギャンブルを攻略する」という発想は新しいものではなく、SNSなどをみる限りでは既に多くのプレーヤーが存在しております。\nこうした\"Gamble AIer\"と呼ばれる人達は日々増えている一方で、本当に上手くいっている(稼いでいる)のは、トップのほんの一握りなんじゃないかなと思います。\n(勿論見えているものだけが全てではないですが)\n\nこの記事では、それほどまでに難しい壁に対して、素人の知識でどこまで対抗できるかをお伝えできればと思います。\n下記のような方達に読んでいただければ嬉しいです。\n\n* データサイエンスとかpython触れたことあるけど、イマイチ使い道が見えない方\n* 競艇が好きな方\n* 実務経験豊富のバリバリのDS、その界隈の方 (温かい目で)\n\nデータサイエンスの知見がない方にも、できるだけ楽しんでもらえるように書く予定です。\nちなみに僕はと言うとpythonを少し書けるくらいの全くの素人で、何分にも未熟者ですので、優しく見守っていただけると嬉しいです。\nそれでは、どうぞよろしくお願いします。\n\n---\n## なぜ競艇なのか？\n公営競技には、競馬・競輪・競艇・オートレースといったものがあります。\nその中で、僕が競艇を選んだのは以下の3つの理由があります。\n### 1. 的中しやすい\n各競技の最大出走数は、競馬は18頭、競輪は9人、オートレースは8車、競艇は6艇です。当然、出走数の少ない競艇が出目の場合の数は最小となり、的中する確率は最大となります。\n加えて競艇の大きな特徴として、インコースが超有利という点があります。全レースのうち、なんと半分は1コースの艇が1着になります。\nつまり、**他競技に比べ圧倒的に当てやすい**のが競艇の魅力なんです。\n\n### 2. レース数が多い\n公営競技は特定の期間で開催されていることが多いですが、競艇においては毎日、全国の各会場で開催されていることから、レース数が必然的に多くなります。\nこれはつまり**データ数が多い**ことを意味し、「データ数が命」と言われているこの業界では大変嬉しいことです。\n\nもう少し詳しく説明すると、競艇は全国に24箇所の会場があり、平均的に毎日12会場でレースが開催されております。\n1つの会場で1日あたりの12レースまであるため、年間の総レース数をざっくり計算すると\n年間レース数 = 12R × 12会場 × 365日 = 52560レース\nとなり、実際の数も丁度それくらいになります。\n2019年にJRA (日本中央競馬会) が開催したレース数は約3300回だったのと比較すると、かなり多いことが分かりますね。\n\n### 3. 売上が大きい & 成長性が高い\n競艇は、競馬に次ぐ大きな売上を誇っております。\n直近3年間の売上をみてみると、競艇市場がとても大きく、近年にかけてどんどん成長してきていることが分かります。\nネット投票の普及や、タレントを起用したCMによる若い層への効果的なマーケティングが大きく起因しているのではないかと思います。\n\n| 年度 | 売上 | 前年比 |\n| :--: | :--: | :----: |\n| 2018 | 1兆3236億5751万5600円 | +9.7% |\n| 2019 | 1兆5342億1092万3600円 | +15.9% |\n| 2020 | 1兆9014億8760万2100円 | +23.9% |\n\n市場が大きいということは、スケーラビリティがあるということです。\nつまり、モデルがある程度安定したものであれば、利率が低くても十分に利益を見込めるということになります。\nちなみに、競艇業界の近年の目覚ましい成長の理由については、[こちらの記事](https://wsobv.com/boatrace/892)で考察されてました。\n\n上記の3つの理由から、競艇はAIの攻略対象に向いているかと考えられます。\nでは、早速競艇AIを作っていきましょう。\n\n---\n## 大まかな流れ\n今回のプロジェクトに関わらず、機械学習プロジェクトでは大きく以下のような工程が生じます。(超ざっくり)\n\n*  ハード面\n  1. データを取得する / 加工する\n  2. モデルを学習させる / 評価する\n  3. システムに落とし込み、自動化する\n* ソフト面\n  1. 対象分野のことをよく知る (ドメイン知識の獲得)\n  2. 問いを設定する (タスク設計)\n\nハード面は勉強すれば何とかなるのですが、ソフト面はデータサイエンティストの勘所に関わるところでもあり、実務経験による差が大きく出るのではないかと思われます。\n\n## スキルセット\n現状、自分が持っているスキルはこんな感じです。\n\n* pythonを読める・書ける\n* データ分析でよく使われる基本的なライブラリを使える<br>\npandas / numpy / matplotlib / sckit-learn / keras\n* わからないことはググればなんとなくそれっぽい答えには行き着ける<br>\nstackoverflow / qiita / teratailなど\n\n逆に、下記のようなスキルは現状持ち合わせていません。今後もし必要になれば、その際に勉強しようと思います。\n\n* DBやパイプライン設計、その他クラウドやインフラまわりの知識\n* 論文の読解力・実装力\n\n---\nそんなわけで前置きが長くなってしまいましたが、次回からは早速、競艇AIの実装に入っていきたいと思います。\n楽しんでもらえると幸いです。\n\n## 次の記事\n[素人が競艇AIを作ってみる  (1) データの取得](https://qiita.com/NorimasaFukuoka/items/c500d1bf78e823e07f2b)\n","user":"Norimax","created_at":"2021-03-30T11:10:02+09:00","updated_at":"2021-03-30T15:12:37+09:00"},{"url":"https://qiita.com/mako0104/items/ed467cf12519ec12933b","title":"お名前.comで公開鍵を登録しようとしたときに「入力形式が正しくありません」と出たときのメモ","body":"###ただこれだけのこと\n最後に改行が入っていた。\n最後の改行を削除すれば問題なし。\n![公開鍵の形式エラー解決.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/668402/dfd4193c-1fd8-c67f-ec34-01a98908897e.png)\n","user":"mako0104","created_at":"2021-03-30T11:08:43+09:00","updated_at":"2021-03-30T11:08:43+09:00"},{"url":"https://qiita.com/ohisama@github/items/c9e7d1f5e166f7307bf5","title":"高位合成言語アセンブラを作る。 その22","body":"#概要\n\n高位合成言語アセンブラを作る。\n0101から、verilogコードを生成する。\nクランクパルスの様な、周期性のパルスを生成する。\n\n#写真\n\n![無題.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/18104/d6ff82a3-f99a-2b9c-7b64-ea0147b21721.jpeg)\n\n\n#コードを投入。\n\n```\n111111111000\n```\n\n#生成したコード\n\n```\nmodule loop(input clk, input rst, output reg a);\n    reg [4:0] state;\n    always @(posedge clk or negedge rst)\n    begin\n        if (!rst)\n        begin\n            a <= 0;\n            state <= 0;\n        end\n        else\n        begin\n            case (state)\n            0:\n            begin\n                a <= 0;\n                state <= 1;\n            end\n            1:\n            begin\n                a <= 1;\n                state <= 2;\n            end\n            2:\n            begin\n                a <= 0;\n                state <= 3;\n            end\n            3:\n            begin\n                a <= 1;\n                state <= 4;\n            end\n            4:\n            begin\n                a <= 0;\n                state <= 5;\n            end\n            5:\n            begin\n                a <= 1;\n                state <= 6;\n            end\n            6:\n            begin\n                a <= 0;\n                state <= 7;\n            end\n            7:\n            begin\n                a <= 1;\n                state <= 8;\n            end\n            8:\n            begin\n                a <= 0;\n                state <= 9;\n            end\n            9:\n            begin\n                a <= 1;\n                state <= 10;\n            end\n            10:\n            begin\n                a <= 0;\n                state <= 11;\n            end\n            11:\n            begin\n                a <= 1;\n                state <= 12;\n            end\n            12:\n            begin\n                a <= 0;\n                state <= 13;\n            end\n            13:\n            begin\n                a <= 1;\n                state <= 14;\n            end\n            14:\n            begin\n                a <= 0;\n                state <= 15;\n            end\n            15:\n            begin\n                a <= 1;\n                state <= 16;\n            end\n            16:\n            begin\n                a <= 0;\n                state <= 17;\n            end\n            17:\n            begin\n                a <= 0;\n                state <= 18;\n            end\n            18:\n            begin\n                a <= 0;\n                state <= 19;\n            end\n            19:\n            begin\n                a <= 0;\n                state <= 20;\n            end\n            20:\n            begin\n                a <= 0;\n                state <= 21;\n            end\n            21:\n            begin\n                a <= 0;\n                state <= 0;\n            end\n            endcase\n        end\n    end\nendmodule\nmodule test;\n    reg clk,\n        rst;\n    loop u(.clk(clk), .rst(rst), .a(a));\n    initial\n    begin\n        clk = 0;\n        rst = 1;\n        #2\n            rst = 0;\n        #2\n            rst = 1;\n        #150\n            $finish;\n    end\n    always\n        #1\n            clk = ~clk;\n    initial\n    begin\n        $dumpfile(\"test.vcd\");\n        $dumpvars(0, test);\n    end\nendmodule\n\n```\n\n#成果物\n\nhttps://embed.plnkr.co/plunk/YS22Mx0MxV4N3N7U\n\n以上。\n","user":"ohisama@github","created_at":"2021-03-30T11:07:30+09:00","updated_at":"2021-03-30T11:07:30+09:00"},{"url":"https://qiita.com/miyabiz/items/d922df98db2197848ed8","title":"AWS EC2からEC2にSSH接続するスクリプト","body":"# はじめに\n踏み台サーバーなどのEC2から別のEC2にSSH接続する際、毎回IPアドレスを確認するのが面倒なので、AWS CLIを用いたシェルスクリプトを作成しました。\n\n# スクリプト\nEC2のNameタグからIPアドレスを取得する。\nファイル名を```{Nameタグ}.sh```にする必要がある。\n\n```sh:{Nameタグ}.sh\n#!/bin/sh\nreadonly USER_NAME=ec2-user\nreadonly KEY_FILE={秘密鍵}.pem\nreadonly TAG_NAME=${0%%.*}\nreadonly IP_ADDRESS=$(aws ec2 describe-instances --filters \"Name=instance-state-name,Values=running\" \"Name=tag-key,Values=Name\" \"Name=tag-value,Values=${TAG_NAME}\" --query 'Reservations[].Instances[].NetworkInterfaces[].PrivateIpAddress' | jq -r '.[0]')\necho ${IP_ADDRESS}\n\nssh -l ${USER_NAME} -i ~/.ssh/${KEY_FILE} ${IP_ADDRESS} -o 'StrictHostKeyChecking no'\n```\n\n```sh:実行コマンド\nchmod 755 {Nameタグ}.sh\n\nsh {Nameタグ}.sh\n```\n","user":"miyabiz","created_at":"2021-03-30T11:04:44+09:00","updated_at":"2021-03-30T11:04:44+09:00"},{"url":"https://qiita.com/h-sh/items/b251067a7a12a5acf247","title":"グラフのグレースケール化","body":"#色付き散布図のグレースケール化\n\n要素によって青から赤にグラデーションしている散布図をモノクロ印刷すると青と赤は薄い灰色、中央は濃い灰色になり、意図した散布図ではなくなってしまった\n\n#青色を赤色に置きかえ\n青を含む色をもっている場合、そのピクセルの赤と同値になるようにする。\nそうすると、赤主体になり青の成分は表に出にくくなる\n\n``` py\nimport cv2  # OpenCVのインポート\nimport numpy as np  # numpyのインポート\nimg = cv2.imread('graph_a.png') # 画像の読み出し\nimg_2 = np.copy(img)\nimg_2[:, :, 0] = np.where((img[:, :, 0] != img[:, :, 1])|(img[:, :, 1] != img[:, :, 2]),img[:, :, 2],img[:, :, 0])\t#グレースケールではないピクセルをみつけたら、Bの値をRに置き換え\ngray = cv2.cvtColor(img_2, cv2.COLOR_BGR2GRAY) # グレースケール変換\ncv2.imwrite('graph_a_conv.png',gray) # 画像の保存 \n```\n#もっと賢いやりかたがある気がする\n元データから作り直すことができればベストだけど、今回は散布図画像しか入手できなかったのでこれで…\n","user":"h-sh","created_at":"2021-03-30T10:59:31+09:00","updated_at":"2021-03-30T10:59:31+09:00"},{"url":"https://qiita.com/satoru_pripara/items/1427b8ea2ce7df3a3e85","title":"Flutterを知らない人がFlutterでアプリを公開するまでにどのような情報が必要でどのようなエラーを解消したか","body":"## 記事の趣旨\n\n普段iOSで開発をしておりAndroidはほぼ経験がない者が、Flutterでアプリを作り公開するまで、どのようなことを調べなければいけなかったかを記載します。\n\n## アプリ\n\nうつとか診断\n\niOS https://apps.apple.com/jp/app/うつとか診断/id1559362485\nAndroid （2021/3/30現在 審査待ち 審査に提出したのは24日）\n\nリポジトリ　GitHub https://github.com/Satoru-PriChan/Depression_Diagnosis\nCI/CD CodeMagic https://blog.codemagic.io/getting-started-japanese/\n\n必要時間 測ってませんが50~150時間の間？(1日平均30分~1時間半ほど作業して3ヶ月強かかったため)\n\n全体的な参考 [flutter create してから5日で iPhone / Androidアプリを公開した話](https://qiita.com/chooyan_eng/items/4ab2af269e14a182f5a9)\n\n## 収穫\n\n- Android、Android Studio, Google Play Storeのことも少し分かった　\n- FlutterではUIの作り方がSwiftUIと似ているやり方(正式な名称が分かりませんが、命令的ではなく宣言的にUI部品を定義し、親部品を書いた後インデントを一つ挿入して子部品を書いていくというような、直感的なやり方)のため、それに慣れてきた　\n- エラー発生->調査->解消の流れを何度も繰り返したためあたかも「エラー解消1000本ノック」のようになり問題解決力が向上した。\n\n## 本題\n\n## Flutter 基本\n\n[Flutter入門 - 簡単なアプリを作ってUI宣言やホットリロードなど便利機能の使い方を理解しよう\n](https://eh-career.com/engineerhub/entry/2019/08/06/103000)\n[Flutter でモバイルアプリを作ってみる 入門編① 〜ヘッダーとフッター〜\n](https://www.apps-gcp.com/introduction-of-flutter-about-header-and-footer/)\n\nexport PATH=\"$PATH:/Users/<UserName>/development/flutter/bin\"\n\nインストール後、flutter doctorでさらに環境をととのえる\nhttps://flutter.dev/docs/get-started/install/macos#run-flutter-doctor\nhttps://qiita.com/mkosuke/items/7957e71968aefc6558be\n\nAndroid studio のflutter extension とdirt extensionが必要だった。\n\n\n## Flutter plugin not installed this adds Flutter specific functionality Dart plugin not installed this adds Dart specific functionality\n\n-> [stack over flow](https://stackoverflow.com/questions/51860845/flutter-plugin-not-installed-error-when-running-flutter-doctor)\nln -s ~/Library/Application\\ Support/Google/AndroidStudio4.1/plugins ~/Library/Application\\ Support/AndroidStudio4.1\n↑を叩くとうまくいった。単に、flutter doctorが探す場所が分かるようにシンボリックリンクを追加しただけである。\n\n## とりあえずサンプルを作成\n\n[Flutter入門 - 簡単なアプリを作ってUI宣言やホットリロードなど便利機能の使い方を理解しよう\n](https://eh-career.com/engineerhub/entry/2019/08/06/103000)\n\n\n## 外部ライブラリ追加\n\nhttp request用ライブラリ\nhttps://pub.dev/packages/http\n\n## Android Studio ショートカット\n\nCommand + Shift + f 検索\nhttps://developer.android.com/studio/intro/keyboard-shortcuts?hl=ja\n\n## シングルトン\n\nhttps://sbfl.net/blog/2015/01/04/implementing-factory-and-singleton-pattern-in-dart/\n\n\n```\nclass MyStore {\n  static final Map<String, dynamic> _items = <String, dynamic>{};\n  static final MyStore _cache = MyStore._internal();\n\n  MyStore._internal();\n\n  factory MyStore() {\n    return _cache;\n  }\n\n  set(String key, dynamic data) => _items[key] = data;\n  get(String key) => _items[key];\n}\n```\n\n## if文、for文\n\n\nhttps://www.cresc.co.jp/tech/java/Google_Dart2/language/control_flow/control_flow.html\n\n## Futures, async, await\n\nhttps://dart.dev/codelabs/async-await\n\n## Dynamic \n\n\n動的型付け\nhttps://note.com/hatchoutschool/n/n767701b099b0\n\nAPIやSQLiteからデータを取得するときよく使う。\n\n## Android Studio のショートカットキー\n\nhttps://medium.com/mindorks/11-android-studio-shortcuts-every-android-developer-must-know-a153e736e611\n\nShift ２連打 -> プロジェクト全体の検索\n\nCtrl + E -> 最近開いたファイル\n\nCommand + shift + A -> 全ショートカットキー一覧\n\n## Underscore\n\nhttps://stackoverflow.com/questions/53142171/what-does-underscore-before-variable-name-mean-for-flutter\n\n_のついた変数、クラス、メソッドは、それが宣言されたdartファイル内でのみアクセスできる。\n\nクラス名._();　とやれば、コンストラクタがプライベートとなり、そのクラスは外から初期化できなくなる。\n\nhttps://www.366service.com/jp/qa/530a2dae7c68f1f136dec8cbe4350bd7\n\n## Codable 的なもの\n\nJson <-> map, list\n\nhttps://dart.dev/guides/libraries/library-tour#dartconvert---decoding-and-encoding-json-utf-8-and-more\n\nMap, list <-> class object\n\nない 自分で逐次関数を作るしかない\n\nhttps://stackoverflow.com/questions/54949087/how-to-convert-class-object-to-data-structure-map-or-a-list-of-maps-in-dart\n\n## 定数のリスト\n\nクラスなどの中でStatic const\n\nまたはトップレベルでconst \n\nhttps://stackoverflow.com/questions/54069239/whats-the-best-practice-to-keep-all-the-constants-in-flutter\n\nconst String TABLE_NAME_CAT = 'cat’;　　　など\n\nConstはコンパイル時に値が必要な定数で、finalは必要ない定数（動作時に一回だけ値を入れられる）\nこうした用途で使うならconstがいいだろう。\n\n## 文字列へ変数を埋め込み\n\nhttps://sites.google.com/site/dartmedart/string-kurasuni-guansurumemo\n\nString embed = \"Moco\";\nprint(\"${embed}'s kitchen\"); // ${変数名}\nprint(\"$embed's kitchen\"); // {} は省略可\n\n## Generics 的なもの\n\nhttps://dart.academy/generics-in-dart-and-flutter/ \n\nDynamic\n\nhttps://dart.dev/guides/language/language-tour#using-generic-methods\n\n## Protocol 的なもの\n\nAbstract class\n\nhttps://dart.dev/guides/language/language-tour#abstract-classes\n\nhttps://stackoverflow.com/questions/52854383/flutter-protocols-do-they-exist\n\nhttps://medium.com/dev-genius/flutter-protocol-oriented-programming-c27082af9bfc\n\n\nAbstract getterって？\n\nhttps://github.com/dart-lang/sdk/issues/28555\n\nString get tableNameなどとするとget-onlyの扱いにできる。\n\nimplement時は\n\n@override\n// TODO: implement tableName\nString get tableName => TABLE_NAME_CAT;\n\nのように書く。\n\n## Class などのタイプそれ自体を表すには\n\nhttps://api.dart.dev/stable/2.10.4/dart-core/Type-class.html\n\n## DB\n\nFlutterでのデータ永続化 https://flutter.dev/docs/cookbook/persistence\n\nDB: \n\n[【Flutter】sqfliteでローカルDBを実装する](https://qiita.com/umechanhika/items/47429c4d37ac733385ab)\n[FlutterでローカルDBを扱う方法](https://iganin.hatenablog.com/entry/2019/01/09/010804)\n[Persist data with SQLite](https://flutter.dev/docs/cookbook/persistence/sqlite)\n\nFlutterでのDBClient例 ただしプロトコルは使っていない\n\nhttps://qiita.com/popy1017/items/7ada79b07281f4a8e544\n\n\n## Enum \n\nhttps://stackoverflow.com/questions/38908285/add-methods-or-values-to-enum-in-dart\n\n## そのほかのtips\n\nhttps://logmi.jp/tech/articles/303939\n\n## 画面遷移\n\n[Flutter]画面遷移のやり方　　https://qiita.com/kono-hiroki/items/b1a8f19dfab371e7816d\n公式 https://flutter.dev/docs/cookbook/navigation/navigation-basics\n\n## 画像素材\n\nイラストレイン(商用フリー)　http://illustrain.com\n\n## うつ病診断\n\n  curl -v -H \"x-rapidapi-host: onlinecounselling-online-counselling-v1.p.rapidapi.com\" -H \"x-rapidapi-key: db95ac19b8mshab0ad98f2d9c12dp19fd80jsnbb2707773797\" https://onlinecounselling-online-counselling-v1.p.rapidapi.com/docs-anxiety-treatment\n\nhttp://api.e-stat.go.jp/rest/3.0/app/json/getStatsData?appId=&lang=J&statsDataId=0003202042&metaGetFlg=Y&cntGetFlg=N&explanationGetFlg=Y&annotationGetFlg=Y&sectionHeaderFlg=1\n\n\n\nうつ病チェック　https://utsu.ne.jp/self_check/\n\n簡易よく鬱症状尺度 https://www.mhlw.go.jp/bunya/shougaihoken/kokoro/dl/02.pdf https://www.mdcalc.com/quick-inventory-depressive-symptomatology-qids\n\n## エラー　Target of URI doesn't exist: 'package:flutter/material.dart'.\n\n\nプロジェクトフォルダでflutter pub getを叩く　https://stackoverflow.com/questions/44909653/visual-studio-code-target-of-uri-doesnt-exist-packageflutter-material-dart\n\n## => とは\n\nhttps://stackoverflow.com/questions/51868395/flutter-dart-difference-between-and\n\nThe fat arrow syntax is simply a short hand for returning an expression and is similar to (){ return expression; }.\n\n## エラー The following assertion was thrown resolving an image codec Unable to load asset\n\n画像の名前は、pubspec.ymlに記載したものを正確に記載する必要がある。\n\n## エラー　Vertical viewport was given unbounded height\n\nhttps://stackoverflow.com/questions/50252569/vertical-viewport-was-given-unbounded-height\n\nshrinkWrap: true を追加し、ListViewの高さがその中身のWidgetの高さによって決定されるようにした。\n\n## 端末サイズ取得\n\nhttps://note.com/hatchoutschool/n/n223ba8f1f3d7\nfinal double deviceHeight = MediaQuery.of(context).size.height;\n\n## デバッグ\n\nコンソールログ出力\nprint(“hello world”);\n\nブレークポイント\nブレークポイントの設置後、debugボタン（runボタンの隣）を押す。\n\nUI階層構造\nOpen Flutter DevToolsボタンを開くとブラウザが開き、Widgetの階層構造がチェックできる\nhttps://flutter.dev/docs/development/tools/devtools/inspector\n\n## UIの基本\n\n\n公式解説　https://flutter.dev/docs/cookbook/design/drawer\n\nCreating Reusable Custom Widgets in Flutter https://www.raywenderlich.com/10126984-creating-reusable-custom-widgets-in-flutter\n\n-> 使い回しにはWidgetを使う\nStateful widget は自分で自分自身の外見を変える　Stateless Widgetは自分では変えない。どちらもbuildメソッドにより外見を定義して返す。\n\nGlidview https://flutter.dev/docs/cookbook/design/orientation\n\n質問の答えなので上からしたに並んでるだけの方が良さそう。\n\n\nCreate a horizontal list https://flutter.dev/docs/cookbook/lists/horizontal-list\nFlutter: Displaying Dynamic Contents using ListView.builder \nhttps://medium.com/@DakshHub/flutter-displaying-dynamic-contents-using-listview-builder-f2cedb1a19fb\n\nItem Selection in List View on Tap in flutter using ListView.Builder https://medium.com/@gadepalliaditya1998/item-selection-in-list-view-on-tap-in-flutter-using-listview-builder-612f6608505a\n\nSelectable List View In Flutter https://vermahitesh.medium.com/select-list-items-in-flutter-21f58765c19b\n\n## 要素の大きさを決定・制限する\n\n\nUnderstanding constraints\nhttps://flutter.dev/docs/development/ui/layout/constraints\n\nSizedBox, ConstrainedBox\n\nhttps://itome.team/blog/2019/12/flutter-advent-calendar-day9/ FlutterのBoxConstraintsを理解する\nhttps://nzigen.com/flutter-reference/2018-05-01-constrained-box.html 要素の大きさを制限する\n\n## iOSの設定\n\nhttps://flutter.dev/docs/deployment/ios\n\niosフォルダにあるRunner.xcworkspaceをXCodeで開いて設定を編集する。バージョンとDeployment Targetをいじった場合は、Flutter側の設定ファイルも更新\n\n# cp Users/development/flutter/bin/cache/artifacts/engine/ios/Flutter.podspec: No such file or directory\n\nhttps://github.com/flutter/flutter/issues/55095\n\nプロジェクトフォルダでflutter precacheを実行\n\n# Error: Error when reading 'lib/main.dart': No such file or directory package main.dart: Error: No 'main' method found. Try adding a method named 'main' to your program.\n\nmain.dartファイルがlib直下になかったのでlib直下に移動\n\n# A RenderFlex overflowed by 134 pixels on the bottom.\nウィジェットがデカすぎて画面をはみ出す、よくあるケース。単純にはみ出している全体をListViewで囲えばいい。\n\nhttps://stackoverflow.com/questions/49480051/flutter-dart-exceptions-caused-by-rendering-a-renderflex-overflowed\n全体をSingleChildScrollViewで囲うことも考えられる。\nhttps://api.flutter.dev/flutter/widgets/SingleChildScrollView-class.html\n\n## test\nUnit Test, Widget Test, Integration Testがある。\nhttps://flutter.dev/docs/testing\nhttps://flutter.dev/docs/testing/integration-tests\nhttps://flutter.dev/docs/cookbook/testing/integration/introduction\n\n## Automatically assigning platform `iOS` with version `12.1` on target `Runner` because no platform was specified. Please specify a platform for this target in your Podfile.\n\nplatform :ios, '12.0'などをios/podfileで指定する\n\n## Cocoapods: LoadError - dlsym(0x7fc10fbfc9c0, Init_ffi_c): symbol not found\n\nBig Surで起きる。arch -x86_64 sudo gem install ffiを叩く。\nhttps://github.com/flutter/flutter/wiki/Developing-with-Flutter-on-Apple-Silicon\n\n## Unhandled Exception: type 'Future<dynamic>' is not a subtype of type \nawaitをつけてなかった\n\n## [VERBOSE-2:profiler_metrics_ios.mm(184)] Error retrieving thread information: (ipc/send) invalid destination port\n\nios　シミュレータを再起動\nhttps://github.com/flutter/flutter/issues/63025\n\n## flutter: ignore recovered database ROLLBACK error DatabaseException(Error Domain=FMDatabase Code=1 \"cannot rollback - no transaction is active\" UserInfo={NSLocalizedDescription=cannot rollback - no transaction is active}) sql 'ROLLBACK' args []}\n\nopenDatabase　関数が終わる前（databaseの生成が終わる前）に、改めてそのdatabaseにアクセスして初期データをinsertしようとしてしまっていた。その代わり、openDatabaseのonCreateクロージャの引数として渡されるdatabaseを用いて、insertをすると上手くいった。\n\n## The default value of an optional parameter must be constant.\nデフォルト値を定数にしろ\n関数内でデフォルト値を与えるのもあり\n```\nvoid f([int value]) {\n  value ??= defaultValue;\n}\n```\nhttps://dart.dev/tools/diagnostic-messages#non_constant_default_value\n\n## flutter アプリの公式の例\nhttps://flutter.github.io/samples/#\n\n## widgetのライフサイクル\n\ninitState()はviewDidLoadやonCreateに相当する。\n\nhttps://medium.com/flutter-community/flutter-lifecycle-for-android-and-ios-developers-8f532307e0c7\nhttps://qiita.com/sekitaka_1214/items/b087f9e9fc13424a64bb\n\n## map 関数\n\nhttps://stackoverflow.com/questions/49941361/dart-mapping-a-list-list-map\n\n## 明らかにコーディングはおかしくないのに意味不明なエラーがいっぱい出る\n\nAndroid Studioの再起動、PC再起動\nhttps://android-java.hatenablog.jp/entry/2016/10/01/080806\n\n## 集計したい時\nreduce関数\n\n## 日付関係\n\nDateTime\n    toString()\n        toString()で取得したstringはparseで元に戻すことができる。\n    parse()\nhttps://api.dart.dev/stable/2.12.1/dart-core/DateTime-class.html\n\nDateFormatter\n使い方\nhttps://stackoverflow.com/questions/58337796/how-to-remove-time-from-date-flutter\n\n## Undefined class 'DateFormat'\n\nintlパッケージをpub getし、目的のファイルでimportする。\nhttps://pub.dev/packages/intl/install\n\n## DB insert idについて\n\nDARTには関係ないが、SQLiteでカラムに対して INTEGER PRIMARY KEY を設定した場合、データを追加した時に INTEGER PRIMARY KEY を設定したカラムの値を指定しないと自動的に値が格納される。ので、そのカラムに特に値は指定せずinsertすればいい。\nhttps://www.dbonline.jp/sqlite/table/index9.html\n\n## 日付でソート\n\n```\nproducts.sort((a,b) {\n    return a.compareTo(b);\n });\n```\nhttps://stackoverflow.com/questions/57000166/how-to-sort-order-a-list-by-date-in-dart-flutter\n\n## ForEachで複数の非同期処理を行い、全て終わってから下の処理に進みたい\n\n```\n  Future.forEach(list, (num) async {\n    // do something\n  });\n```\nhttps://qiita.com/hisw/items/2df0052a400263d5863e\n\n## .initState() returned a Future. State.initState() must be a void method without an `async` keyword. Rather than awaiting on asynchronous work directly inside of initState, call a separate method to do this work without awaiting it.\n\nウィジェット表示前に非同期処理をしたい場合、initState()メソッドをasyncにするのではなくFutureBuilderを使う。\n\n```\nInstead, you need to have your widget build normally and then have a way to notify your widget to update when the Future has returned. This is most easily done with a FutureBuilder:\n\n@override\nWidget build(BuildContext context) {\n  return FutureBuilder(\n    future: doSomeAsyncStuff(),\n    builder: (context, snapshot) {\n      if (!snapshot.hasData) {\n        // Future hasn't finished yet, return a placeholder\n        return Text('Loading');\n      }\n      return Text('Loading Complete: ${snapshot.data}');\n    }\n  );\n}\n```\n\nhttps://stackoverflow.com/questions/61764400/state-initstate-must-be-a-void-method-without-an-async-keyword\n\n## ListTile widgets require a Material widget ancestor.\n\nScafold, Materialで囲う。\nhttps://stackoverflow.com/questions/51772910/no-material-widget-found-textfield-widgets-require-a-material-widget-ancestor/51773529\n\n## デフォルト実装を提供するには\n\nextends, またはmixinを使う。\nhttps://stackoverflow.com/questions/17789399/providing-default-implementation-for-method-in-abstract-class\n\n## 複数のウィジェットの横幅を同じサイズとしたい\n\nそれらのウィジェットをExpandedの中に入れ、それらをRowの中に入れる。\nhttps://stackoverflow.com/questions/52583856/make-buttons-in-a-row-have-the-same-width-in-flutter\n\n## アプリアイコン\n\nhttps://qiita.com/rkowase/items/e0f3f8aec207ed8567aa\nhttps://pub.dev/packages/flutter_launcher_icons\nflutter_launcher_iconsを使う。\n\niphone実機で見た時アイコンが反映されていない箇所があるように思ったが、iphoneを再起動したら治った。おそらくspringboardのバグ。\n\n## Android アダプティブアイコン\n\n説明 https://developer.android.com/guide/practices/ui_guidelines/icon_design_adaptive\nジェネレータ https://easyappicon.com\n\n## Android キーストア\n\nhttps://flutter.dev/docs/deployment/android#create-a-keystore\nhttps://qiita.com/rkowase/items/f1012ef0738791dd6084\n\ncode magicを使うならこちら https://blog.codemagic.io/the-simple-guide-to-android-code-signing/\n\n\n## This operation couldnt be completed. Unable to locate a Java Runtime. [macOS]\n\nJava Runtimeを導入する\nhttps://code2care.org/howto/this-operation-couldnt-be-completed-unable-to-locate-a-java-runtime-maos\n\n## android studio cannot resolve symbol 'GradleException'\n\nFileNotFoundException()をGradleException()の代わりに使う。\nhttps://stackoverflow.com/questions/55575122/android-studio-cannot-resolve-symbol-gradleexception\n\n## Failed to read key from store \"/Users/builder/keystore/key.jks\": No key with alias 'upload' found in keystore /Users/builder/keystore/key.jks\nコマンドでkeyを生成する時に引数としてaliasを渡しているはずだが、ここで指定したaliasとkey.propertiesで書いているaliasが一致していることを確認。\n\n## building for iOS-armv7 but attempting to link with file built for iOS-arm64 Undefined symbols for architecture armv7:\n\narmv7(iPhone3~5)の古いアーキテクチャ向けにビルドしようとすると、sqfliteが対応していないためにバグが起きる模様。色々解決策はありそうだが、そのような古いモデル向けにはビルドせず、アーキテクチャをarm64のみに設定したら通った。\n\nhttps://github.com/tekartik/sqflite/issues/536\n\n## Incorrect use of ParentDataWidget.  The ParentDataWidget Expanded(flex: 1) wants to apply ParentData of type FlexParentData to a RenderObject, which has been set up to accept ParentData of incompatible type ParentData.  Usually, this means that the Expanded widget has the wrong ancestor RenderObjectWidget. Typically, Expanded widgets are placed directly inside Flex widgets. The offending Expanded is currently placed inside a SizedBox widget\n\nExpandedはRow, Column, flexの配下のみで使うようにした。\nhttps://stackoverflow.com/questions/54905388/incorrect-use-of-parent-data-widget-expanded-widgets-must-be-placed-inside-flex\n\n## App-specific password does not match required pattern (xxxx-xxxx-xxxx-xxxx)\n\nCodemagicでは、Apple IDのパスワードそのものではなくApp Specific Passwordを入力する。https://support.apple.com/en-us/HT204397\n\n## Only releases with status draft may be created on draft app\n\ngoogle play consoleで一回手動でアプリをアップロードしてから出ないとコマンドでのアップロードはできない。\n","user":"satoru_pripara","created_at":"2021-03-30T10:58:20+09:00","updated_at":"2021-03-30T11:19:44+09:00"},{"url":"https://qiita.com/KIT-tokunaga/items/9e4e58d563227b14638e","title":"【Mosaic HAT】Raspberry Piに載るGNSSレシーバ”Mosaic HAT”を使ってみよう！","body":"Raspberry Piに重ねてコンパクトになるMosaic HAT。\n正確にはMosaic HeArT。\nこれでかなりすっきりした測位環境が作れそう。\n目的は、いろんな作業モビリティの自動／遠隔操作。\nこれから、使いこなすために試行錯誤し、\nここに投稿していきたいと思います。\n\n\n![MosaicHAT_Raspi4.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/1255232/768914e2-11a0-8f76-46e5-cadc69e5f355.jpeg)\n","user":"KIT-tokunaga","created_at":"2021-03-30T10:57:59+09:00","updated_at":"2021-03-30T13:57:28+09:00"},{"url":"https://qiita.com/__T_Harada__/items/8f079cc789977fb2f474","title":"AWS Certified Machine Learning Specialty（AWS 認定 機械学習 – 専門知識）に4日で合格した勉強法","body":"#はじめに\nAWS Certified Machine Learning Specialtyを受験して合格しました。この試験は、AWSの世界観や知識 ＋ データ分析や機械学習まわりの一般的な知識の両方が問われるもので、合格すればAIスキルを保有していることを証明する一つの手段になります。これから受験しようと思っている方に少しでも参考になれば幸いです。\n\n\n#本記事が有用な人\n- 既にディープラーニング等の機械学習のアルゴリズムは一通り理解しており、機械学習に関連するAWSサービスを新たに学習することがメインとなる人\n- 事情により試験勉強に時間を割けない人\n- 計画的に長期で試験勉強するよりも、短期で集中して勉強することが得意な人\n- 機械学習の知識や各サービスの深い理解は後回しにして、とりあえず合格することを優先したい人\n\n筆者の受験前のステータスは以下の通りです。\n\n- 業務で機械学習を扱ったり学生時代にAIの研究をしていたため、機械学習まわりの知識が最低限はある\n- 業務でデータ分析や機械学習に関連するAWSのサービスには触れたことがない（クラウド歴ほぼなし）\n\n今回、AWSには指一本触れずに合格することができました。合格するだけなら実践は不要だと思います。\n\n\n#1日目\n###機械学習に関連するAWSサービスを洗い出す\n[こちらのブラックベルトのページ](https://aws.amazon.com/jp/aws-jp-introduction/aws-jp-webinar-service-cut/)を参考に、機械学習に関連するAWSサービスを洗い出します。筆者が今回試験勉強の対象としたサービスは以下になります。これら以外にも、EC2、S3、IAM、VPCなどの分野問わず必要なサービスについても理解しておく必要があります。（一部資料が用意されていないものもあります）\n\n- Amazon SageMaker\n- Amazon EMR\n- AWS Glue\n- Amazon Athena\n- Amazon Kinesis\n- Amazon Redshift\n- Amazon Quicksight\n- Amazon Forecast\n- Amazon Rekognition\n- Amazon Polly\n- Amazon Personalize\n- Amazon Lex\n- Amazon Textract\n- Amazon Transcribe\n- Amazon Translate\n- Amazon Comprehend\n- AWS IoT\n\n###ブラックベルトから各サービスの概要のみをインプットする\n上記の各サービスのブラックベルト資料から、概要部分（そのサービスを一言であらわすと何のサービスなのか）のみをインプットします。\n\n#2日目\n###ブラックベルトを読む\n各サービスのアーキレベルまでをインプットします。例えば、KinesisにはStreams、Firehose、Analyticsがあって、それぞれの特長は・・のようなレベルです。加えて、サービス間のつながりも把握しておくとベターです。（例：AthenaはS3からSQLを使用してデータを抽出することができるが、そのS3にはどのサービスからデータを保存することができるか、など）\n\n#3日目\n###ブラックベルトを読む（2日目の続き）\n2日目の残りのサービスのブラックベルトを読みます。もちろん、無理に2日に分ける必要はありません。\n\n#4日目\n###他の合格記を参照して、漏れている点をカバーする\n以下のページ等を参考にしました。\n\n- https://future-architect.github.io/articles/20200729/\n- https://qiita.com/suzuki-navi/items/3664bfbc102052717426\n- https://qiita.com/taiki_ma/items/0e4aadb6c6d29d13c34d\n\n###自分の作りたい仮想アプリをアーキテクティングしてみる\nAWSを利用した仮想アプリを勝手に考えて、どのサービスを組み合わせれば実現できそうかを想像しました。例えば、全国の駐車場にカメラ付きエッジAIデバイスを設置し、画像認識を利用して駐車場の空き状態をリアルタイムに取得して表示するWebサービスを作る場合、どういったアーキテクチャが最適かを考えてみる、といった感じです。\n\n#試験当日\n試験時間は多めに設定されているので、とにかくあきらめずに100%考え抜くまで次の問題には進みませんでした。そもそも4日間のインプット量は知れているので、試験中に想像力を振り絞って、現地で瞬間芸術を産み出す勢いで回答を捻りだす必要がありました。\n\n#おわりに\nこの勉強法には機械学習の理論の学習について含まれていない点にご注意ください。そこがそもそも押さえられていない方は、先程のリンク先の一つで紹介されている書籍などを手に取ってみると良いと思います。\n","user":"__T_Harada__","created_at":"2021-03-30T10:55:28+09:00","updated_at":"2021-03-30T12:24:02+09:00"},{"url":"https://qiita.com/r_yamanouchi/items/abfa469b6e6095075c14","title":"React + Typescript で 画像を表示する方法","body":"<script async src=\"https://gist.github.com/khsk/94fed99c690f6dff7634/raw/ea32b5beff42401e40e04f9ba321064292fa4807/Qiita_Code_Number.user.js\"></script>\n\n\nReactは一般的なWebサイトとはレンダリング方式が異なります\n\n一般的なWebサイト：\nホストしたHTMLのURLにアクセスされたら linkタグ(CSS・画像など) を解釈してページを表示します\n\nReact：\n1. なにも書かれていない index.html を表示します (なにか書かれていてもいい)\n2. 表示された index.html の内容をReactで生成したJavascriptで表示内容を変更します ([SPA](https://ja.wikipedia.org/wiki/%E3%82%B7%E3%83%B3%E3%82%B0%E3%83%AB%E3%83%9A%E3%83%BC%E3%82%B8%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3))\n\nこのため ReactではCSSや画像を事前にimportする必要があります\n\n```React:\nimport React from \"react\";\n\nimport \"./Demo.css\";\n\nimport FemaleWorkerCheckingData from \"../images/female-worker-checking-data.png\";\n\nconst Demo: React.FC = () => {\n  return (\n    <div className=\"Demo\">\n      <div>Demo</div>\n      <img src={FemaleWorkerCheckingData} alt=\"female-worker-checking-data.png\" />\n    </div>\n  );\n};\nexport default Demo;\n```\n\n5行目で画像をimportして 11行目で画像を設定しています\n","user":"r_yamanouchi","created_at":"2021-03-30T10:54:29+09:00","updated_at":"2021-03-30T10:54:29+09:00"},{"url":"https://qiita.com/rs8/items/b023aa46467b6618fbb5","title":"Power Automate Desktopを使ってファイルの移動を自動化してみた","body":"無料化されたPower Automate Desktop※以下PAD\nを使って人力だと手間のかかるファイルの移動をある程度自動化してみました。\n図１\n![1.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/540456/0c23d2dc-569f-2b6f-507d-3d696effabc3.jpeg)\n\n上記の様なフォルダ構成で、自社フォルダに取引先から届いたフォルダの中身を格納します。\n自社のフォルダ構成が1段深い為、担当者は1フォルダずつコピーペーストしていたようです。\n\n\n最初はコピー処理まで一括でフロー化してしまおうかと思いましたが、ファイルパスの編集が上手くいかず、\nまず取引会社フォルダを自社フォルダ形式に変更する事にしました。\n\nフローは以下\n![2.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/540456/1056dca5-13d6-cacd-42c4-06c27f367e95.jpeg)\n\n①取引会社フォルダの親フォルダを手動で選択。\n②選択したフォルダのサブフォルダを取得（図1の4.1、4.2、4.3・・・）\n以下ループ１\n③サブフォルダの中にA社、のフォルダをループで作成\n④サブフォルダにあったファイルをA社のフォルダ内に移動\n以上ループ１\n⑤再度選択したフォルダのサブフォルダを取得（図１の4.1、4.2、4.3・・）サブフォルダを含めるにチェックが入っているとA社のフォルダも選択されてしまうので注意\n以下ループ2\n⑥サブフォルダの名前を変更する為、⑤で取得したサブフォルダ名をリネームして、Replacedの変数に格納\n⑦サブフォルダ名をReplaced＋日でリネーム\n以上ループ2\n\n実行する事で取引先フォルダの4.1の下層にA社のフォルダが作成された後フォルダ名4.1を1日にリネームするため、自社フォルダと構成が同じになります。\nそうしたら、まとめてコピペで作業完了です。\n\n正規表現が分かっていなかった為、4.1の4.を消去するのに苦戦しました。\n正規表現では.は何にでも読み替えられる1文字なので、.を検索するには\\.として記す必要があります。\nまた、月は一桁、二桁の場合がある為、\\d ⇐全ての数字　の{1,2}1文字or2文字 で\\d{1,2}\\.を空白に置き換えました。\nPADでの空白の置換は%''%と記します。\n![3.jpg](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/540456/408e8374-6413-b79f-cead-f13abac8ae98.jpeg)\n\n\n","user":"rs8","created_at":"2021-03-30T10:53:51+09:00","updated_at":"2021-03-30T10:53:51+09:00"}]